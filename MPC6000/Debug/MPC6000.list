
MPC6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  0800ca98  0800ca98  0001ca98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc48  0800dc48  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc48  0800dc48  0001dc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc50  0800dc50  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc50  0800dc50  0001dc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc54  0800dc54  0001dc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dc58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200001e0  0800de38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  0800de38  00020c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7b9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd0  00000000  00000000  0003d9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  000409a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  00041e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c525  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192e8  00000000  00000000  0006f74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d1ff  00000000  00000000  00088a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195c34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006eb0  00000000  00000000  00195c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ca7c 	.word	0x0800ca7c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800ca7c 	.word	0x0800ca7c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9a4 	b.w	8001038 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f040 8083 	bne.w	8000e8a <__udivmoddi4+0x116>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d947      	bls.n	8000e1a <__udivmoddi4+0xa6>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b142      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	f1c2 0020 	rsb	r0, r2, #32
 8000d94:	fa24 f000 	lsr.w	r0, r4, r0
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4097      	lsls	r7, r2
 8000d9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000da0:	4094      	lsls	r4, r2
 8000da2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da6:	0c23      	lsrs	r3, r4, #16
 8000da8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dac:	fa1f fe87 	uxth.w	lr, r7
 8000db0:	fb08 c116 	mls	r1, r8, r6, ip
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x60>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dc6:	f080 8119 	bcs.w	8000ffc <__udivmoddi4+0x288>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 8116 	bls.w	8000ffc <__udivmoddi4+0x288>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ddc:	fb08 3310 	mls	r3, r8, r0, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d909      	bls.n	8000e00 <__udivmoddi4+0x8c>
 8000dec:	193c      	adds	r4, r7, r4
 8000dee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df2:	f080 8105 	bcs.w	8001000 <__udivmoddi4+0x28c>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f240 8102 	bls.w	8001000 <__udivmoddi4+0x28c>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	443c      	add	r4, r7
 8000e00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e04:	eba4 040e 	sub.w	r4, r4, lr
 8000e08:	2600      	movs	r6, #0
 8000e0a:	b11d      	cbz	r5, 8000e14 <__udivmoddi4+0xa0>
 8000e0c:	40d4      	lsrs	r4, r2
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e9c5 4300 	strd	r4, r3, [r5]
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	b902      	cbnz	r2, 8000e1e <__udivmoddi4+0xaa>
 8000e1c:	deff      	udf	#255	; 0xff
 8000e1e:	fab2 f282 	clz	r2, r2
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	d150      	bne.n	8000ec8 <__udivmoddi4+0x154>
 8000e26:	1bcb      	subs	r3, r1, r7
 8000e28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2c:	fa1f f887 	uxth.w	r8, r7
 8000e30:	2601      	movs	r6, #1
 8000e32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e36:	0c21      	lsrs	r1, r4, #16
 8000e38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb08 f30c 	mul.w	r3, r8, ip
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0xe4>
 8000e48:	1879      	adds	r1, r7, r1
 8000e4a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0xe2>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	f200 80e9 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e56:	4684      	mov	ip, r0
 8000e58:	1ac9      	subs	r1, r1, r3
 8000e5a:	b2a3      	uxth	r3, r4
 8000e5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e68:	fb08 f800 	mul.w	r8, r8, r0
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x10c>
 8000e70:	193c      	adds	r4, r7, r4
 8000e72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x10a>
 8000e78:	45a0      	cmp	r8, r4
 8000e7a:	f200 80d9 	bhi.w	8001030 <__udivmoddi4+0x2bc>
 8000e7e:	4618      	mov	r0, r3
 8000e80:	eba4 0408 	sub.w	r4, r4, r8
 8000e84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e88:	e7bf      	b.n	8000e0a <__udivmoddi4+0x96>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d909      	bls.n	8000ea2 <__udivmoddi4+0x12e>
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	f000 80b1 	beq.w	8000ff6 <__udivmoddi4+0x282>
 8000e94:	2600      	movs	r6, #0
 8000e96:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	fab3 f683 	clz	r6, r3
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d14a      	bne.n	8000f40 <__udivmoddi4+0x1cc>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d302      	bcc.n	8000eb4 <__udivmoddi4+0x140>
 8000eae:	4282      	cmp	r2, r0
 8000eb0:	f200 80b8 	bhi.w	8001024 <__udivmoddi4+0x2b0>
 8000eb4:	1a84      	subs	r4, r0, r2
 8000eb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eba:	2001      	movs	r0, #1
 8000ebc:	468c      	mov	ip, r1
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d0a8      	beq.n	8000e14 <__udivmoddi4+0xa0>
 8000ec2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec6:	e7a5      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed0:	4097      	lsls	r7, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eda:	40d9      	lsrs	r1, r3
 8000edc:	4330      	orrs	r0, r6
 8000ede:	0c03      	lsrs	r3, r0, #16
 8000ee0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee4:	fa1f f887 	uxth.w	r8, r7
 8000ee8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef0:	fb06 f108 	mul.w	r1, r6, r8
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	fa04 f402 	lsl.w	r4, r4, r2
 8000efa:	d909      	bls.n	8000f10 <__udivmoddi4+0x19c>
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f02:	f080 808d 	bcs.w	8001020 <__udivmoddi4+0x2ac>
 8000f06:	4299      	cmp	r1, r3
 8000f08:	f240 808a 	bls.w	8001020 <__udivmoddi4+0x2ac>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	443b      	add	r3, r7
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b281      	uxth	r1, r0
 8000f14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb00 f308 	mul.w	r3, r0, r8
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0x1c4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2e:	d273      	bcs.n	8001018 <__udivmoddi4+0x2a4>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	d971      	bls.n	8001018 <__udivmoddi4+0x2a4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4439      	add	r1, r7
 8000f38:	1acb      	subs	r3, r1, r3
 8000f3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3e:	e778      	b.n	8000e32 <__udivmoddi4+0xbe>
 8000f40:	f1c6 0c20 	rsb	ip, r6, #32
 8000f44:	fa03 f406 	lsl.w	r4, r3, r6
 8000f48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f4c:	431c      	orrs	r4, r3
 8000f4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f52:	fa01 f306 	lsl.w	r3, r1, r6
 8000f56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	0c3b      	lsrs	r3, r7, #16
 8000f62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f66:	fa1f f884 	uxth.w	r8, r4
 8000f6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f72:	fb09 fa08 	mul.w	sl, r9, r8
 8000f76:	458a      	cmp	sl, r1
 8000f78:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x220>
 8000f82:	1861      	adds	r1, r4, r1
 8000f84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f88:	d248      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000f8a:	458a      	cmp	sl, r1
 8000f8c:	d946      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000f8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f92:	4421      	add	r1, r4
 8000f94:	eba1 010a 	sub.w	r1, r1, sl
 8000f98:	b2bf      	uxth	r7, r7
 8000f9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa6:	fb00 f808 	mul.w	r8, r0, r8
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d907      	bls.n	8000fbe <__udivmoddi4+0x24a>
 8000fae:	19e7      	adds	r7, r4, r7
 8000fb0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fb4:	d22e      	bcs.n	8001014 <__udivmoddi4+0x2a0>
 8000fb6:	45b8      	cmp	r8, r7
 8000fb8:	d92c      	bls.n	8001014 <__udivmoddi4+0x2a0>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4427      	add	r7, r4
 8000fbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc2:	eba7 0708 	sub.w	r7, r7, r8
 8000fc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fca:	454f      	cmp	r7, r9
 8000fcc:	46c6      	mov	lr, r8
 8000fce:	4649      	mov	r1, r9
 8000fd0:	d31a      	bcc.n	8001008 <__udivmoddi4+0x294>
 8000fd2:	d017      	beq.n	8001004 <__udivmoddi4+0x290>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x27a>
 8000fd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fda:	eb67 0701 	sbc.w	r7, r7, r1
 8000fde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe2:	40f2      	lsrs	r2, r6
 8000fe4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe8:	40f7      	lsrs	r7, r6
 8000fea:	e9c5 2700 	strd	r2, r7, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e70b      	b.n	8000e14 <__udivmoddi4+0xa0>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e9      	b.n	8000dd4 <__udivmoddi4+0x60>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fd      	b.n	8000e00 <__udivmoddi4+0x8c>
 8001004:	4543      	cmp	r3, r8
 8001006:	d2e5      	bcs.n	8000fd4 <__udivmoddi4+0x260>
 8001008:	ebb8 0e02 	subs.w	lr, r8, r2
 800100c:	eb69 0104 	sbc.w	r1, r9, r4
 8001010:	3801      	subs	r0, #1
 8001012:	e7df      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001014:	4608      	mov	r0, r1
 8001016:	e7d2      	b.n	8000fbe <__udivmoddi4+0x24a>
 8001018:	4660      	mov	r0, ip
 800101a:	e78d      	b.n	8000f38 <__udivmoddi4+0x1c4>
 800101c:	4681      	mov	r9, r0
 800101e:	e7b9      	b.n	8000f94 <__udivmoddi4+0x220>
 8001020:	4666      	mov	r6, ip
 8001022:	e775      	b.n	8000f10 <__udivmoddi4+0x19c>
 8001024:	4630      	mov	r0, r6
 8001026:	e74a      	b.n	8000ebe <__udivmoddi4+0x14a>
 8001028:	f1ac 0c02 	sub.w	ip, ip, #2
 800102c:	4439      	add	r1, r7
 800102e:	e713      	b.n	8000e58 <__udivmoddi4+0xe4>
 8001030:	3802      	subs	r0, #2
 8001032:	443c      	add	r4, r7
 8001034:	e724      	b.n	8000e80 <__udivmoddi4+0x10c>
 8001036:	bf00      	nop

08001038 <__aeabi_idiv0>:
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop

0800103c <print_char>:
const HAL_GPIO_t pwr_pin = { GPIOE, GPIO_PIN_9 };
const HAL_GPIO_t rst_pin = { GPIOF, GPIO_PIN_13 };

// Prints characters \r and \n in a way that doesn't case issues.
void print_char( const char ch )
    {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	char buff[5];
	if ( ch == '\n' )
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d106      	bne.n	800105a <print_char+0x1e>
		sprintf( buff, "<LR>" );
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4910      	ldr	r1, [pc, #64]	; (8001094 <print_char+0x58>)
 8001052:	4618      	mov	r0, r3
 8001054:	f008 fa14 	bl	8009480 <siprintf>
 8001058:	e010      	b.n	800107c <print_char+0x40>
	else if ( ch == '\r' )
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b0d      	cmp	r3, #13
 800105e:	d106      	bne.n	800106e <print_char+0x32>
		sprintf( buff, "<CR>" );
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <print_char+0x5c>)
 8001066:	4618      	mov	r0, r3
 8001068:	f008 fa0a 	bl	8009480 <siprintf>
 800106c:	e006      	b.n	800107c <print_char+0x40>
	else
		sprintf( buff, "%c", ch );
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4909      	ldr	r1, [pc, #36]	; (800109c <print_char+0x60>)
 8001076:	4618      	mov	r0, r3
 8001078:	f008 fa02 	bl	8009480 <siprintf>
	printf( "%s 0x%x D:%d\n\r", buff, ch, ch );
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f107 0108 	add.w	r1, r7, #8
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <print_char+0x64>)
 8001086:	f008 f95d 	bl	8009344 <iprintf>
    } // end print_char
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	0800ca9c 	.word	0x0800ca9c
 8001098:	0800caa4 	.word	0x0800caa4
 800109c:	0800caac 	.word	0x0800caac
 80010a0:	0800cab0 	.word	0x0800cab0

080010a4 <GPIO_Write>:

void GPIO_Write( HAL_GPIO_t const * const gpio_ptr, const GPIO_PinState pin_state )
    {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin( gpio_ptr->GPIOx, gpio_ptr->GPIO_Pin, pin_state );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	889b      	ldrh	r3, [r3, #4]
 80010b8:	78fa      	ldrb	r2, [r7, #3]
 80010ba:	4619      	mov	r1, r3
 80010bc:	f003 f84e 	bl	800415c <HAL_GPIO_WritePin>
    } // GPIO_Write( )
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <power_on_cell>:

void power_on_cell( )
    {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    printf( "Powering On Cell\n\r" );
 80010cc:	4808      	ldr	r0, [pc, #32]	; (80010f0 <power_on_cell+0x28>)
 80010ce:	f008 f939 	bl	8009344 <iprintf>
    GPIO_Write( &pwr_pin, GPIO_PIN_RESET );
 80010d2:	2100      	movs	r1, #0
 80010d4:	4807      	ldr	r0, [pc, #28]	; (80010f4 <power_on_cell+0x2c>)
 80010d6:	f7ff ffe5 	bl	80010a4 <GPIO_Write>
	  HAL_Delay( 1100 ); // At least 1s
 80010da:	f240 404c 	movw	r0, #1100	; 0x44c
 80010de:	f002 fd75 	bl	8003bcc <HAL_Delay>
    GPIO_Write( &pwr_pin, GPIO_PIN_SET );
 80010e2:	2101      	movs	r1, #1
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <power_on_cell+0x2c>)
 80010e6:	f7ff ffdd 	bl	80010a4 <GPIO_Write>
    } // end power_on( )
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	0800cac0 	.word	0x0800cac0
 80010f4:	0800d6fc 	.word	0x0800d6fc

080010f8 <reset_cell>:

void reset_cell( )
    {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    printf( "Resetting Cell\n\r" );
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <reset_cell+0x24>)
 80010fe:	f008 f921 	bl	8009344 <iprintf>
    GPIO_Write( &rst_pin, GPIO_PIN_RESET );
 8001102:	2100      	movs	r1, #0
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <reset_cell+0x28>)
 8001106:	f7ff ffcd 	bl	80010a4 <GPIO_Write>
    HAL_Delay( 100 ); // At least 1s
 800110a:	2064      	movs	r0, #100	; 0x64
 800110c:	f002 fd5e 	bl	8003bcc <HAL_Delay>
    GPIO_Write( &rst_pin, GPIO_PIN_SET );
 8001110:	2101      	movs	r1, #1
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <reset_cell+0x28>)
 8001114:	f7ff ffc6 	bl	80010a4 <GPIO_Write>
    } // reset_cell( )
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800cad4 	.word	0x0800cad4
 8001120:	0800d704 	.word	0x0800d704

08001124 <begin>:
 * 
 * Responses:
 *  <CR><LF><response><CR><LF>
*/
bool begin( Cellular_module_t * const cell_ptr )
    {
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	power_on_cell( );
 800112c:	f7ff ffcc 	bl	80010c8 <power_on_cell>
    reset_cell( );
 8001130:	f7ff ffe2 	bl	80010f8 <reset_cell>
    if ( cell_ptr->uart_ptr )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d067      	beq.n	800120c <begin+0xe8>
        {
        printf( "Attempting to open comm with ATs\n\r" );
 800113c:	4836      	ldr	r0, [pc, #216]	; (8001218 <begin+0xf4>)
 800113e:	f008 f901 	bl	8009344 <iprintf>

        int16_t timeout = 28000;
 8001142:	f646 5360 	movw	r3, #28000	; 0x6d60
 8001146:	81fb      	strh	r3, [r7, #14]

        while( timeout > 0 )
 8001148:	e02b      	b.n	80011a2 <begin+0x7e>
            {
            flushInput( cell_ptr->uart_ptr );
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f994 	bl	800147c <flushInput>
            if ( send_check_reply( cell_ptr, "AT", ok_reply_c, fona_def_timeout_ms_c ) )
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <begin+0xf8>)
 8001156:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800115a:	b29b      	uxth	r3, r3
 800115c:	4930      	ldr	r1, [pc, #192]	; (8001220 <begin+0xfc>)
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f864 	bl	800122c <send_check_reply>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d120      	bne.n	80011ac <begin+0x88>
                break;
            //printf( "Failed \n\r\n\r" );
            flushInput( cell_ptr->uart_ptr );
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f984 	bl	800147c <flushInput>

            if ( send_check_reply( cell_ptr, "AT", "AT", fona_def_timeout_ms_c ) )
 8001174:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001178:	b29b      	uxth	r3, r3
 800117a:	4a29      	ldr	r2, [pc, #164]	; (8001220 <begin+0xfc>)
 800117c:	4928      	ldr	r1, [pc, #160]	; (8001220 <begin+0xfc>)
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f854 	bl	800122c <send_check_reply>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d112      	bne.n	80011b0 <begin+0x8c>
                break;
            // printf( "Failed \n\r\n\r" );
            HAL_Delay( fona_def_timeout_ms_c );
 800118a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800118e:	4618      	mov	r0, r3
 8001190:	f002 fd1c 	bl	8003bcc <HAL_Delay>
            timeout -= fona_def_timeout_ms_c;
 8001194:	89fa      	ldrh	r2, [r7, #14]
 8001196:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800119a:	b29b      	uxth	r3, r3
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	81fb      	strh	r3, [r7, #14]
        while( timeout > 0 )
 80011a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	dccf      	bgt.n	800114a <begin+0x26>
 80011aa:	e002      	b.n	80011b2 <begin+0x8e>
                break;
 80011ac:	bf00      	nop
 80011ae:	e000      	b.n	80011b2 <begin+0x8e>
                break;
 80011b0:	bf00      	nop
            } // end while
        
        if( timeout <= 0 )
 80011b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	dc04      	bgt.n	80011c4 <begin+0xa0>
            {
            printf( "Timed out!\n\r" );
 80011ba:	481a      	ldr	r0, [pc, #104]	; (8001224 <begin+0x100>)
 80011bc:	f008 f8c2 	bl	8009344 <iprintf>
            return false;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e024      	b.n	800120e <begin+0xea>
            } // end if


        // Turn off Echo
        send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c );
 80011c4:	4a15      	ldr	r2, [pc, #84]	; (800121c <begin+0xf8>)
 80011c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4916      	ldr	r1, [pc, #88]	; (8001228 <begin+0x104>)
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f82c 	bl	800122c <send_check_reply>
        HAL_Delay( 100 );
 80011d4:	2064      	movs	r0, #100	; 0x64
 80011d6:	f002 fcf9 	bl	8003bcc <HAL_Delay>

        int tries = 20;
 80011da:	2314      	movs	r3, #20
 80011dc:	60bb      	str	r3, [r7, #8]
        while ( tries > 0 )
 80011de:	e012      	b.n	8001206 <begin+0xe2>
            {
            if ( send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c ) )
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <begin+0xf8>)
 80011e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	490f      	ldr	r1, [pc, #60]	; (8001228 <begin+0x104>)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f81e 	bl	800122c <send_check_reply>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <begin+0xdc>
                {
                HAL_Delay( 100 );
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f002 fce8 	bl	8003bcc <HAL_Delay>
                return true;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e006      	b.n	800120e <begin+0xea>
                    printf( "Couldn't find right revision!\n");
                    } // end else
                */
                } // if 

            --tries;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3b01      	subs	r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
        while ( tries > 0 )
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dce9      	bgt.n	80011e0 <begin+0xbc>
            } // end while
        } // end if
    	return false;
 800120c:	2300      	movs	r3, #0
    } // end begin( )
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800cae8 	.word	0x0800cae8
 800121c:	0800ca98 	.word	0x0800ca98
 8001220:	0800cb0c 	.word	0x0800cb0c
 8001224:	0800cb10 	.word	0x0800cb10
 8001228:	0800cb20 	.word	0x0800cb20

0800122c <send_check_reply>:


bool send_check_reply( Cellular_module_t * const cell_ptr, char const * const send, 
                        char const * const reply, const uint16_t timeout )
    {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	807b      	strh	r3, [r7, #2]

    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	461a      	mov	r2, r3
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f000 f819 	bl	8001278 <transmit>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124e:	429a      	cmp	r2, r3
 8001250:	d00a      	beq.n	8001268 <send_check_reply+0x3c>
           !strcmp( cell_ptr->reply_buffer, reply );
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3304      	adds	r3, #4
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4618      	mov	r0, r3
 800125a:	f7fe ffd1 	bl	8000200 <strcmp>
 800125e:	4603      	mov	r3, r0
    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <send_check_reply+0x3c>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <send_check_reply+0x3e>
 8001268:	2300      	movs	r3, #0
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
    } // end send_check_reply( )
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <transmit>:

uint8_t transmit( Cellular_module_t * const cell_ptr, char const * const send, uint16_t timeout )
    {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800127e:	af00      	add	r7, sp, #0
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	6018      	str	r0, [r3, #0]
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	6019      	str	r1, [r3, #0]
 800128c:	1dbb      	adds	r3, r7, #6
 800128e:	801a      	strh	r2, [r3, #0]
	*cell_ptr->reply_buffer = '\0';
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	711a      	strb	r2, [r3, #4]
    char send_buff[1024];
    uint8_t idx;
    if ( sprintf( send_buff, "%s\r", send ) < 0 ) // At in <CR><LR>
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	f107 0014 	add.w	r0, r7, #20
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4928      	ldr	r1, [pc, #160]	; (8001348 <transmit+0xd0>)
 80012a6:	f008 f8eb 	bl	8009480 <siprintf>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da06      	bge.n	80012be <transmit+0x46>
        {
        printf( "Failed to put into sprintf\n\r" );
 80012b0:	4826      	ldr	r0, [pc, #152]	; (800134c <transmit+0xd4>)
 80012b2:	f008 f847 	bl	8009344 <iprintf>
        return reply_buff_size_c;
 80012b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	e03e      	b.n	800133c <transmit+0xc4>
        } // end if
    
    flushInput( cell_ptr->uart_ptr );
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f8d8 	bl	800147c <flushInput>

#ifdef DEBUG_CELL
    printf( "\t---> %s\n\r", send );
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	6819      	ldr	r1, [r3, #0]
 80012d2:	481f      	ldr	r0, [pc, #124]	; (8001350 <transmit+0xd8>)
 80012d4:	f008 f836 	bl	8009344 <iprintf>
#endif


    if ( HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t *) send_buff, strlen( send_buff ), timeout ) == HAL_OK )
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681c      	ldr	r4, [r3, #0]
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ff95 	bl	8000214 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	1dbb      	adds	r3, r7, #6
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	f107 0114 	add.w	r1, r7, #20
 80012f6:	4620      	mov	r0, r4
 80012f8:	f006 fa5c 	bl	80077b4 <HAL_UART_Transmit>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d113      	bne.n	800132a <transmit+0xb2>
        {
        idx = readline( cell_ptr, timeout, false );
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	8819      	ldrh	r1, [r3, #0]
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2200      	movs	r2, #0
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f000 f825 	bl	800135c <readline>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
#ifdef DEBUG_CELL
        printf( "Got: %s\n\r", cell_ptr->reply_buffer );
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <transmit+0xdc>)
 8001324:	f008 f80e 	bl	8009344 <iprintf>
 8001328:	e006      	b.n	8001338 <transmit+0xc0>
#endif
        } // end if
    else
        {
#ifdef DEBUG_CELL
        printf( "Failed Transmit\n\r" );
 800132a:	480b      	ldr	r0, [pc, #44]	; (8001358 <transmit+0xe0>)
 800132c:	f008 f80a 	bl	8009344 <iprintf>
#endif
        idx = reply_buff_size_c;
 8001330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001334:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        } // end else

    return idx;
 8001338:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
    } // transmit( )
 800133c:	4618      	mov	r0, r3
 800133e:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	0800cb28 	.word	0x0800cb28
 800134c:	0800cb2c 	.word	0x0800cb2c
 8001350:	0800cb4c 	.word	0x0800cb4c
 8001354:	0800cb58 	.word	0x0800cb58
 8001358:	0800cb64 	.word	0x0800cb64

0800135c <readline>:
 * MODIFIES: Cellular_module_t::replay_buffer (where reply exists)
 *  EFFECTS: Receives characters from UARTS Rx pin (from the Nucleo board's perspective)
 *           up to the first (if multiline == false, else second) \r\n and places it into the reply_buffer.
*/
uint8_t readline( Cellular_module_t * const cell_ptr, const uint16_t timeout, const bool multiline )
    {
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
    static char receive_buff[ 1024 ];
    static char const * const buff_end_c = receive_buff + sizeof( receive_buff );

    char *buff_ptr = receive_buff;  //! buff_ptr will eventually point to the end of the bytes received.
 800136c:	4b3f      	ldr	r3, [pc, #252]	; (800146c <readline+0x110>)
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *reply_ptr = cell_ptr->reply_buffer; // Points to the reply_buffer
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	3304      	adds	r3, #4
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t newlines_seen;
    newlines_seen = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Multiline ensures that we check newline twice
    const uint8_t iter_c = multiline ? 2 : 1;
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <readline+0x2a>
 8001382:	2302      	movs	r3, #2
 8001384:	e000      	b.n	8001388 <readline+0x2c>
 8001386:	2301      	movs	r3, #1
 8001388:	76fb      	strb	r3, [r7, #27]

    // Receive everything until we time out OR run out of space
    while( buff_ptr != buff_end_c && HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr ), 1, timeout ) == HAL_OK )
 800138a:	e002      	b.n	8001392 <readline+0x36>
        {
        ++buff_ptr;    // Increment pointer
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	3301      	adds	r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    while( buff_ptr != buff_end_c && HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr ), 1, timeout ) == HAL_OK )
 8001392:	4b37      	ldr	r3, [pc, #220]	; (8001470 <readline+0x114>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001398:	429a      	cmp	r2, r3
 800139a:	d009      	beq.n	80013b0 <readline+0x54>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	2201      	movs	r2, #1
 80013a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013a6:	f006 fa9c 	bl	80078e2 <HAL_UART_Receive>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ed      	beq.n	800138c <readline+0x30>
        } // end while
#ifdef DEBUG_CELL
    for ( char const *ptr = receive_buff, * const end_ptr = buff_ptr; ptr != end_ptr; ++ptr )
 80013b0:	4b2e      	ldr	r3, [pc, #184]	; (800146c <readline+0x110>)
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e007      	b.n	80013ca <readline+0x6e>
    	print_char( *ptr );
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fe3c 	bl	800103c <print_char>
    for ( char const *ptr = receive_buff, * const end_ptr = buff_ptr; ptr != end_ptr; ++ptr )
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	3301      	adds	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
 80013ca:	6a3a      	ldr	r2, [r7, #32]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d1f3      	bne.n	80013ba <readline+0x5e>
    if ( buff_ptr == buff_end_c )
 80013d2:	4b27      	ldr	r3, [pc, #156]	; (8001470 <readline+0x114>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013d8:	429a      	cmp	r2, r3
 80013da:	d102      	bne.n	80013e2 <readline+0x86>
        printf( "Ran out of space in receive_buff\n\r" );
 80013dc:	4825      	ldr	r0, [pc, #148]	; (8001474 <readline+0x118>)
 80013de:	f007 ffb1 	bl	8009344 <iprintf>
#endif

    for ( char const *ptr = receive_buff, *const end_ptr = buff_ptr;
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <readline+0x110>)
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	e01b      	b.n	8001424 <readline+0xc8>
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
        {
        const char c_in = *ptr;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	73fb      	strb	r3, [r7, #15]
        // Used to skip the first <CR><LR> in a response.
        if ( c_in != '\r' ) // Skip the carrage return character (This is present in responses).
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b0d      	cmp	r3, #13
 80013f6:	d012      	beq.n	800141e <readline+0xc2>
            {
            if ( c_in == '\n' )  // Don't insert the <LR> into the return buffer.
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d10a      	bne.n	8001414 <readline+0xb8>
                {
                if ( reply_ptr != cell_ptr->reply_buffer )
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3304      	adds	r3, #4
 8001402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001404:	429a      	cmp	r2, r3
 8001406:	d00a      	beq.n	800141e <readline+0xc2>
                    ++newlines_seen;
 8001408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800140c:	3301      	adds	r3, #1
 800140e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001412:	e004      	b.n	800141e <readline+0xc2>
                //Else Don't count first <LR> seen (before anything's been inserted)
                } // end if
            else
                {
                *reply_ptr++ = c_in; // Dereferences, assigns, and then post_increment.
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	62ba      	str	r2, [r7, #40]	; 0x28
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	701a      	strb	r2, [r3, #0]
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
    for ( char const *ptr = receive_buff, *const end_ptr = buff_ptr;
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	429a      	cmp	r2, r3
 800142a:	d004      	beq.n	8001436 <readline+0xda>
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
 800142c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001430:	7efb      	ldrb	r3, [r7, #27]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3da      	bcc.n	80013ec <readline+0x90>
                } // end else
            } // end if
        } // end for
    if ( reply_ptr == cell_ptr->reply_buffer + sizeof( cell_ptr->reply_buffer ) )
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3304      	adds	r3, #4
 800143a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800143e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001440:	429a      	cmp	r2, r3
 8001442:	d106      	bne.n	8001452 <readline+0xf6>
        {
        printf( "Reply exceeded buffer size!\n\r" );
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <readline+0x11c>)
 8001446:	f007 ff7d 	bl	8009344 <iprintf>
        reply_ptr = cell_ptr->reply_buffer + sizeof( cell_ptr->reply_buffer ) - 1; // To prevent out of bounds indexing.
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3304      	adds	r3, #4
 800144e:	33ff      	adds	r3, #255	; 0xff
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
        } // end if
    *reply_ptr = '\0'; // Null-terminate
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
    return ( uint8_t)( reply_ptr - cell_ptr->reply_buffer );
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b2db      	uxtb	r3, r3
    } // end readline( )
 8001462:	4618      	mov	r0, r3
 8001464:	3730      	adds	r7, #48	; 0x30
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200001fc 	.word	0x200001fc
 8001470:	0800d70c 	.word	0x0800d70c
 8001474:	0800cb78 	.word	0x0800cb78
 8001478:	0800cb9c 	.word	0x0800cb9c

0800147c <flushInput>:
//
//------------------------------------------------------------------------------------------------

// Clear everything W/O reading it in.
void flushInput( UART_HandleTypeDef * const uart_ptr )
    {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    char c_in;
#ifdef DEBUG_CELL
    printf( "Flushing Input\n\r" );
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <flushInput+0x38>)
 8001486:	f007 ff5d 	bl	8009344 <iprintf>
#endif
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 800148a:	e003      	b.n	8001494 <flushInput+0x18>
        {
#ifdef DEBUG_CELL
        print_char( c_in );
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fdd4 	bl	800103c <print_char>
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8001494:	f107 010f 	add.w	r1, r7, #15
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	2201      	movs	r2, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f006 fa20 	bl	80078e2 <HAL_UART_Receive>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f1      	beq.n	800148c <flushInput+0x10>
#endif
        } // end while
    } // end flush_Input
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800cbbc 	.word	0x0800cbbc

080014b8 <setNetworkSettings>:
//
//                                  Network Settings
//
//------------------------------------------------------------------------------------------------

bool setNetworkSettings(Cellular_module_t * const cell_ptr) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

	//if ( send_check_reply( cell_ptr, "AT+CGDCONT=1,\"IP\",\"hologram"", ok_reply_c, 10000 ) )
	flushInput( cell_ptr->uart_ptr );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffd9 	bl	800147c <flushInput>
	if ( send_check_reply( cell_ptr, "AT+CGDCONT=1,\"IP\",\"hologram\"", ok_reply_c, 10000 ) ){
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <setNetworkSettings+0x34>)
 80014cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80014d0:	4907      	ldr	r1, [pc, #28]	; (80014f0 <setNetworkSettings+0x38>)
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff feaa 	bl	800122c <send_check_reply>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <setNetworkSettings+0x2a>
		return true;
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <setNetworkSettings+0x2c>
	}
	return false;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	0800ca98 	.word	0x0800ca98
 80014f0:	0800cbd0 	.word	0x0800cbd0

080014f4 <sendSMS>:

bool sendSMS(Cellular_module_t * const cell_ptr, char const * const sms_message ){
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	6018      	str	r0, [r3, #0]
 8001500:	463b      	mov	r3, r7
 8001502:	6019      	str	r1, [r3, #0]

	flushInput( cell_ptr->uart_ptr );
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffb6 	bl	800147c <flushInput>

	if ( !send_check_reply( cell_ptr, "AT+CMGF=1", ok_reply_c, fona_def_timeout_ms_c ) ){
 8001510:	4a40      	ldr	r2, [pc, #256]	; (8001614 <sendSMS+0x120>)
 8001512:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001516:	b29b      	uxth	r3, r3
 8001518:	1d38      	adds	r0, r7, #4
 800151a:	493f      	ldr	r1, [pc, #252]	; (8001618 <sendSMS+0x124>)
 800151c:	6800      	ldr	r0, [r0, #0]
 800151e:	f7ff fe85 	bl	800122c <send_check_reply>
 8001522:	4603      	mov	r3, r0
 8001524:	f083 0301 	eor.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d004      	beq.n	8001538 <sendSMS+0x44>
	printf("Failed sendCheckReply\n\r");
 800152e:	483b      	ldr	r0, [pc, #236]	; (800161c <sendSMS+0x128>)
 8001530:	f007 ff08 	bl	8009344 <iprintf>
	return false;
 8001534:	2300      	movs	r3, #0
 8001536:	e068      	b.n	800160a <sendSMS+0x116>
	}

	//if (! sendCheckReply("AT+CMGS=\"18024246417\"", "> ")) return false;
	if ( !send_check_reply( cell_ptr, "AT+CMGS=\"18024246417\"", "> ", fona_def_timeout_ms_c ) ){
 8001538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800153c:	b29b      	uxth	r3, r3
 800153e:	1d38      	adds	r0, r7, #4
 8001540:	4a37      	ldr	r2, [pc, #220]	; (8001620 <sendSMS+0x12c>)
 8001542:	4938      	ldr	r1, [pc, #224]	; (8001624 <sendSMS+0x130>)
 8001544:	6800      	ldr	r0, [r0, #0]
 8001546:	f7ff fe71 	bl	800122c <send_check_reply>
 800154a:	4603      	mov	r3, r0
 800154c:	f083 0301 	eor.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <sendSMS+0x6c>
	printf("Failed establishing phone address\n\r");
 8001556:	4834      	ldr	r0, [pc, #208]	; (8001628 <sendSMS+0x134>)
 8001558:	f007 fef4 	bl	8009344 <iprintf>
	return false;
 800155c:	2300      	movs	r3, #0
 800155e:	e054      	b.n	800160a <sendSMS+0x116>
	}

	uint8_t buffer_pass[1024];

	//char *pass_buff = "eecs373";
    const char sub_ch = 0x1A;
 8001560:	231a      	movs	r3, #26
 8001562:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	sprintf( buffer_pass, "%s%c", sms_message, sub_ch );
 8001566:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800156a:	463a      	mov	r2, r7
 800156c:	f107 000c 	add.w	r0, r7, #12
 8001570:	6812      	ldr	r2, [r2, #0]
 8001572:	492e      	ldr	r1, [pc, #184]	; (800162c <sendSMS+0x138>)
 8001574:	f007 ff84 	bl	8009480 <siprintf>
    printf( "--> AT SMS Message: %s\n\r", sms_message );
 8001578:	463b      	mov	r3, r7
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	482c      	ldr	r0, [pc, #176]	; (8001630 <sendSMS+0x13c>)
 800157e:	f007 fee1 	bl	8009344 <iprintf>
    //HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t * ) sms_message, strlen( sms_message ), fona_def_timeout_ms_c );
    //HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t * ) &sub_ch, 1, fona_def_timeout_ms_c );
    HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t * ) buffer_pass, strlen( buffer_pass ), fona_def_timeout_ms_c );
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681c      	ldr	r4, [r3, #0]
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe fe41 	bl	8000214 <strlen>
 8001592:	4603      	mov	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159a:	f107 010c 	add.w	r1, r7, #12
 800159e:	4620      	mov	r0, r4
 80015a0:	f006 f908 	bl	80077b4 <HAL_UART_Transmit>
	//transmit( cell_ptr,  "hi" , fona_def_timeout_ms_c );
	//transmit( cell_ptr,  &pass_buff , fona_def_timeout_ms_c );
	readline(cell_ptr, 200, false);
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	21c8      	movs	r1, #200	; 0xc8
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f7ff fed6 	bl	800135c <readline>

	readline(cell_ptr, 200, false);
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	21c8      	movs	r1, #200	; 0xc8
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f7ff fed0 	bl	800135c <readline>

	readline(cell_ptr, 30000, false);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	f247 5130 	movw	r1, #30000	; 0x7530
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	f7ff fec9 	bl	800135c <readline>

	if (strstr(cell_ptr->reply_buffer, "+CMGS") == 0) {
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3304      	adds	r3, #4
 80015d0:	4918      	ldr	r1, [pc, #96]	; (8001634 <sendSMS+0x140>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 ff87 	bl	80094e6 <strstr>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <sendSMS+0xee>
		return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e013      	b.n	800160a <sendSMS+0x116>
	}

	readline(cell_ptr, 1000, false);
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	f7ff feb6 	bl	800135c <readline>


	if (strcmp(cell_ptr->reply_buffer, "OK") != 0) {
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3304      	adds	r3, #4
 80015f6:	4907      	ldr	r1, [pc, #28]	; (8001614 <sendSMS+0x120>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fe01 	bl	8000200 <strcmp>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <sendSMS+0x114>
	    return false;
 8001604:	2300      	movs	r3, #0
 8001606:	e000      	b.n	800160a <sendSMS+0x116>
	}

	return true;
 8001608:	2301      	movs	r3, #1

}
 800160a:	4618      	mov	r0, r3
 800160c:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	0800ca98 	.word	0x0800ca98
 8001618:	0800cbf0 	.word	0x0800cbf0
 800161c:	0800cbfc 	.word	0x0800cbfc
 8001620:	0800cc14 	.word	0x0800cc14
 8001624:	0800cc18 	.word	0x0800cc18
 8001628:	0800cc30 	.word	0x0800cc30
 800162c:	0800cc54 	.word	0x0800cc54
 8001630:	0800cc5c 	.word	0x0800cc5c
 8001634:	0800cc78 	.word	0x0800cc78

08001638 <enableGPS>:
//
//                                  GPS Settings
//
//------------------------------------------------------------------------------------------------

bool enableGPS(Cellular_module_t * const cell_ptr, bool onoff) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]

	uint8_t state;
	//if (! sendParseReply(F("AT+CGNSPWR?"), F("+CGNSPWR: "), &state) )
    //return false;
	//if ( !send_check_reply( cell_ptr, "AT+CGNSPWR?", "+CGNSPWR: ", fona_def_timeout_ms_c ) ){}
	uint8_t ret = transmit( cell_ptr,  "AT+CGNSPWR?" , fona_def_timeout_ms_c);
 8001644:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	4926      	ldr	r1, [pc, #152]	; (80016e8 <enableGPS+0xb0>)
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe12 	bl	8001278 <transmit>
 8001654:	4603      	mov	r3, r0
 8001656:	73bb      	strb	r3, [r7, #14]

	printf ("%d\n", ret);
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	4619      	mov	r1, r3
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <enableGPS+0xb4>)
 800165e:	f007 fe71 	bl	8009344 <iprintf>

	if (strstr(cell_ptr->reply_buffer, "+CGNSPWR: 0") == 0) {
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	4922      	ldr	r1, [pc, #136]	; (80016f0 <enableGPS+0xb8>)
 8001668:	4618      	mov	r0, r3
 800166a:	f007 ff3c 	bl	80094e6 <strstr>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <enableGPS+0x42>
		state =1;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <enableGPS+0x46>
	}
	else state =0;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]

	if (onoff && !state) {
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d012      	beq.n	80016aa <enableGPS+0x72>
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <enableGPS+0x72>
		//if (! sendCheckReply(F("AT+CGNSPWR=1"), ok_reply))
		if ( !send_check_reply( cell_ptr, "AT+CGNSPWR=1", ok_reply_c, fona_def_timeout_ms_c ) ){
 800168a:	4a1a      	ldr	r2, [pc, #104]	; (80016f4 <enableGPS+0xbc>)
 800168c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001690:	b29b      	uxth	r3, r3
 8001692:	4919      	ldr	r1, [pc, #100]	; (80016f8 <enableGPS+0xc0>)
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff fdc9 	bl	800122c <send_check_reply>
 800169a:	4603      	mov	r3, r0
 800169c:	f083 0301 	eor.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01a      	beq.n	80016dc <enableGPS+0xa4>
        return false;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e019      	b.n	80016de <enableGPS+0xa6>
		}
	}

	else if (!onoff && state) {
 80016aa:	78fb      	ldrb	r3, [r7, #3]
 80016ac:	f083 0301 	eor.w	r3, r3, #1
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d012      	beq.n	80016dc <enableGPS+0xa4>
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00f      	beq.n	80016dc <enableGPS+0xa4>
	if ( !send_check_reply( cell_ptr, "AT+CGNSPWR=0", ok_reply_c, fona_def_timeout_ms_c ) ){
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <enableGPS+0xbc>)
 80016be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	490d      	ldr	r1, [pc, #52]	; (80016fc <enableGPS+0xc4>)
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fdb0 	bl	800122c <send_check_reply>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f083 0301 	eor.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <enableGPS+0xa4>
		return false;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <enableGPS+0xa6>
		}
	}

	return true;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800cc80 	.word	0x0800cc80
 80016ec:	0800cc8c 	.word	0x0800cc8c
 80016f0:	0800cc90 	.word	0x0800cc90
 80016f4:	0800ca98 	.word	0x0800ca98
 80016f8:	0800cc9c 	.word	0x0800cc9c
 80016fc:	0800ccac 	.word	0x0800ccac

08001700 <get_GPS>:

uint8_t get_GPS(Cellular_module_t * const cell_ptr, uint8_t arg, char *buffer, uint8_t maxbuff){
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	460b      	mov	r3, r1
 800170e:	72fb      	strb	r3, [r7, #11]
 8001710:	4613      	mov	r3, r2
 8001712:	72bb      	strb	r3, [r7, #10]

	transmit( cell_ptr,  "AT+CGNSINF" , fona_def_timeout_ms_c);
 8001714:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001718:	b29b      	uxth	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	491c      	ldr	r1, [pc, #112]	; (8001790 <get_GPS+0x90>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f7ff fdaa 	bl	8001278 <transmit>

	char *p = strstr(cell_ptr->reply_buffer, "SINF");
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3304      	adds	r3, #4
 8001728:	491a      	ldr	r1, [pc, #104]	; (8001794 <get_GPS+0x94>)
 800172a:	4618      	mov	r0, r3
 800172c:	f007 fedb 	bl	80094e6 <strstr>
 8001730:	61f8      	str	r0, [r7, #28]

	printf("%s\n",cell_ptr->reply_buffer );
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fe8a 	bl	8009450 <puts>

	if (p == 0) {
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <get_GPS+0x4c>
	    buffer[0] = 0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	    return 0;
 8001748:	2300      	movs	r3, #0
 800174a:	e01c      	b.n	8001786 <get_GPS+0x86>
	  }

	  p+=6;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3306      	adds	r3, #6
 8001750:	61fb      	str	r3, [r7, #28]

	  uint8_t len = max(maxbuff-1, (int)strlen(p));
 8001752:	7abb      	ldrb	r3, [r7, #10]
 8001754:	3b01      	subs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	69f8      	ldr	r0, [r7, #28]
 800175a:	f7fe fd5b 	bl	8000214 <strlen>
 800175e:	4603      	mov	r3, r0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	4293      	cmp	r3, r2
 8001768:	bfb8      	it	lt
 800176a:	4613      	movlt	r3, r2
 800176c:	74fb      	strb	r3, [r7, #19]
	  strncpy(buffer, p, len);
 800176e:	7cfb      	ldrb	r3, [r7, #19]
 8001770:	461a      	mov	r2, r3
 8001772:	69f9      	ldr	r1, [r7, #28]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f007 fea3 	bl	80094c0 <strncpy>
	  buffer[len] = 0;
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

	  //readline(); // eat 'OK'
	  return len;
 8001784:	7cfb      	ldrb	r3, [r7, #19]

	}
 8001786:	4618      	mov	r0, r3
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800ccbc 	.word	0x0800ccbc
 8001794:	0800ccc8 	.word	0x0800ccc8

08001798 <gGPS>:

bool gGPS(Cellular_module_t * const cell_ptr ,float *lat, float *lon)
        {
 8001798:	b580      	push	{r7, lr}
 800179a:	b0a8      	sub	sp, #160	; 0xa0
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]

    flushInput( cell_ptr->uart_ptr );
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe67 	bl	800147c <flushInput>

    char gpsbuffer[120];

    uint8_t res_len = get_GPS(cell_ptr, 32, gpsbuffer, 120);
 80017ae:	f107 0210 	add.w	r2, r7, #16
 80017b2:	2378      	movs	r3, #120	; 0x78
 80017b4:	2120      	movs	r1, #32
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7ff ffa2 	bl	8001700 <get_GPS>
 80017bc:	4603      	mov	r3, r0
 80017be:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

    if (res_len == 0) {
 80017c2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <gGPS+0x36>
        return false;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e093      	b.n	80018f6 <gGPS+0x15e>
    }

    const int commas_to_see = 5;
 80017ce:	2305      	movs	r3, #5
 80017d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int commas_seen = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    for ( const char *gps_start_ptr = gpsbuffer, * const gps_end = gpsbuffer + res_len;
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017e2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80017e6:	f107 0210 	add.w	r2, r7, #16
 80017ea:	4413      	add	r3, r2
 80017ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017f0:	e055      	b.n	800189e <gGPS+0x106>
                gps_start_ptr != gps_end && commas_seen != commas_to_see; ++commas_seen )
        {
        const char *gps_ptr = ++gps_start_ptr; // Skips comma (All except the first execution)
 80017f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017f6:	3301      	adds	r3, #1
 80017f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        while( gps_ptr != gps_end && *gps_ptr != ',' ) { ++gps_ptr; } // Skipping until finds comma
 8001804:	e004      	b.n	8001810 <gGPS+0x78>
 8001806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800180a:	3301      	adds	r3, #1
 800180c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001810:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001818:	429a      	cmp	r2, r3
 800181a:	d004      	beq.n	8001826 <gGPS+0x8e>
 800181c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b2c      	cmp	r3, #44	; 0x2c
 8001824:	d1ef      	bne.n	8001806 <gGPS+0x6e>
        if ( commas_seen == 3 ) // Seen the <gps status, run status, time>
 8001826:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800182a:	2b03      	cmp	r3, #3
 800182c:	d115      	bne.n	800185a <gGPS+0xc2>
            {
            *lat = ( gps_ptr != gps_start_ptr ) ? atof( gps_start_ptr ) : 91.0; // Invalid point
 800182e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001832:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001836:	429a      	cmp	r2, r3
 8001838:	d00b      	beq.n	8001852 <gGPS+0xba>
 800183a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800183e:	f006 fec3 	bl	80085c8 <atof>
 8001842:	ec53 2b10 	vmov	r2, r3, d0
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f9f5 	bl	8000c38 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	e000      	b.n	8001854 <gGPS+0xbc>
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <gGPS+0x168>)
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e018      	b.n	800188c <gGPS+0xf4>
            } // end if
        else if ( commas_seen == 4 ) // Seen the <gps status, run status, time, latitude>
 800185a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800185e:	2b04      	cmp	r3, #4
 8001860:	d114      	bne.n	800188c <gGPS+0xf4>
            {
            *lon = ( gps_ptr != gps_start_ptr ) ? atof( gps_start_ptr ) : 91.0;
 8001862:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800186a:	429a      	cmp	r2, r3
 800186c:	d00b      	beq.n	8001886 <gGPS+0xee>
 800186e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001872:	f006 fea9 	bl	80085c8 <atof>
 8001876:	ec53 2b10 	vmov	r2, r3, d0
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f9db 	bl	8000c38 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	e000      	b.n	8001888 <gGPS+0xf0>
 8001886:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <gGPS+0x168>)
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6013      	str	r3, [r2, #0]
            } // end else if
        gps_start_ptr = gps_ptr;
 800188c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                gps_start_ptr != gps_end && commas_seen != commas_to_see; ++commas_seen )
 8001894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001898:	3301      	adds	r3, #1
 800189a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    for ( const char *gps_start_ptr = gpsbuffer, * const gps_end = gpsbuffer + res_len;
 800189e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d005      	beq.n	80018b6 <gGPS+0x11e>
                gps_start_ptr != gps_end && commas_seen != commas_to_see; ++commas_seen )
 80018aa:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80018ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d19d      	bne.n	80017f2 <gGPS+0x5a>
        } // end for

    return commas_seen == commas_to_see && *lat != 91.0 && *lon != 91.0; 
 80018b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80018ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018be:	429a      	cmp	r2, r3
 80018c0:	d115      	bne.n	80018ee <gGPS+0x156>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001904 <gGPS+0x16c>
 80018cc:	eef4 7a47 	vcmp.f32	s15, s14
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	d00b      	beq.n	80018ee <gGPS+0x156>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001904 <gGPS+0x16c>
 80018e0:	eef4 7a47 	vcmp.f32	s15, s14
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	d001      	beq.n	80018ee <gGPS+0x156>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <gGPS+0x158>
 80018ee:	2300      	movs	r3, #0
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
    }
 80018f6:	4618      	mov	r0, r3
 80018f8:	37a0      	adds	r7, #160	; 0xa0
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	42b60000 	.word	0x42b60000
 8001904:	42b60000 	.word	0x42b60000

08001908 <config_gpio>:
//enum IO { IN, OUT };

// direction 1 (input), direction 0, output
// Configure the gpio to be either In or out (as well as enabling the clock if not already enabled).
void config_gpio( const char port, const int pin_num, const enum IO direction )
    {
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	71bb      	strb	r3, [r7, #6]
    // Invariants
    assert( port >= 'A' && port <= 'F' ); 
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b40      	cmp	r3, #64	; 0x40
 800191c:	d902      	bls.n	8001924 <config_gpio+0x1c>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b46      	cmp	r3, #70	; 0x46
 8001922:	d905      	bls.n	8001930 <config_gpio+0x28>
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <config_gpio+0xd0>)
 8001926:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <config_gpio+0xd4>)
 8001928:	211c      	movs	r1, #28
 800192a:	482d      	ldr	r0, [pc, #180]	; (80019e0 <config_gpio+0xd8>)
 800192c:	f006 fe2e 	bl	800858c <__assert_func>
    assert( pin_num >= 0 && pin_num <= 15 );
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db02      	blt.n	800193c <config_gpio+0x34>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	dd05      	ble.n	8001948 <config_gpio+0x40>
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <config_gpio+0xdc>)
 800193e:	4a27      	ldr	r2, [pc, #156]	; (80019dc <config_gpio+0xd4>)
 8001940:	211d      	movs	r1, #29
 8001942:	4827      	ldr	r0, [pc, #156]	; (80019e0 <config_gpio+0xd8>)
 8001944:	f006 fe22 	bl	800858c <__assert_func>
    assert( direction == IN || direction == OUT );
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <config_gpio+0x58>
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d005      	beq.n	8001960 <config_gpio+0x58>
 8001954:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <config_gpio+0xe0>)
 8001956:	4a21      	ldr	r2, [pc, #132]	; (80019dc <config_gpio+0xd4>)
 8001958:	211e      	movs	r1, #30
 800195a:	4821      	ldr	r0, [pc, #132]	; (80019e0 <config_gpio+0xd8>)
 800195c:	f006 fe16 	bl	800858c <__assert_func>

    // Port index: A == 0, B == 1, etc.
    const uint32_t port_idx = port - 'A';
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	3b41      	subs	r3, #65	; 0x41
 8001964:	61fb      	str	r3, [r7, #28]

    // Ensure that rcc_ahb2 for the port is enabled
    uint32_t * const rcc_ahb2enr = ( uint32_t * )( RCC_ADDR + RCC_AHB2ENR_OFFSET );
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <config_gpio+0xe4>)
 8001968:	61bb      	str	r3, [r7, #24]
    *rcc_ahb2enr |= ( uint32_t ) ( 1 << port_idx ); // Shift one into the index of the port (turning on the clock if not already on).
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	431a      	orrs	r2, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

    // Port address differ by 0x400 bytes
    const uint32_t port_offset = ( uint32_t )port_idx * 0x400;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	029b      	lsls	r3, r3, #10
 8001980:	617b      	str	r3, [r7, #20]

    uint32_t io_mode = direction == IN ? 0b00 : 0b01;
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	613b      	str	r3, [r7, #16]
    uint32_t mask = 0b11;
 8001990:	2303      	movs	r3, #3
 8001992:	60fb      	str	r3, [r7, #12]

    // Shift to the pin_num's relevant bits9 (in moder register).
    io_mode <<= ( pin_num << 1 ); // Shift by 2*pin_num
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	613b      	str	r3, [r7, #16]
    mask    <<= ( pin_num << 1 );
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	60fb      	str	r3, [r7, #12]

    uint32_t * const gpio_moder = (uint32_t * )( GPIO_ADDR_BASE + port_offset + GPIO_MODER_OFFSET );
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 80019b2:	60bb      	str	r3, [r7, #8]

    *gpio_moder &= ~mask; // Clear the mode bits
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	601a      	str	r2, [r3, #0]
    *gpio_moder |=  io_mode; // Write to it
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	601a      	str	r2, [r3, #0]
    } // end config_gpio( )
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	0800ccd0 	.word	0x0800ccd0
 80019dc:	0800d710 	.word	0x0800d710
 80019e0:	0800ccec 	.word	0x0800ccec
 80019e4:	0800cd04 	.word	0x0800cd04
 80019e8:	0800cd24 	.word	0x0800cd24
 80019ec:	4002104c 	.word	0x4002104c

080019f0 <set_pin_mode>:
    {
    return read_gpio_state( gpio->port, gpio->pin_num );
    } // end read_gpio_t_state( )

void set_pin_mode( struct GPIO * const gpio, const enum IO direction )
    {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
    gpio->pin_mode = direction == IN ? GPIO_INPUT : GPIO_OUTPUT;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	701a      	strb	r2, [r3, #0]
    config_gpio( gpio->port, gpio->pin_num, direction );
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7858      	ldrb	r0, [r3, #1]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	789b      	ldrb	r3, [r3, #2]
 8001a16:	4619      	mov	r1, r3
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f7ff ff74 	bl	8001908 <config_gpio>
    } // end set_pin_mode( )
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <bio_sensor_init>:
//                                 SparkFun_Bio_Sensor Member Function Definitions
//
//------------------------------------------------------------------------------------------------

void bio_sensor_init( struct SparkFun_Bio_Sensor * const bio_ssor, I2C_HandleTypeDef * const i2c_h, const uint8_t addr, const GPIO_t rst_pin, const GPIO_t mfio_pin, const uint8_t sample_rate, const uint8_t user_sel_mode )
    {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71fb      	strb	r3, [r7, #7]
    bio_ssor->_reset_pin = rst_pin;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	463a      	mov	r2, r7
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	4611      	mov	r1, r2
 8001a42:	8019      	strh	r1, [r3, #0]
 8001a44:	3302      	adds	r3, #2
 8001a46:	0c12      	lsrs	r2, r2, #16
 8001a48:	701a      	strb	r2, [r3, #0]
    bio_ssor->_mfio_pin = mfio_pin;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3307      	adds	r3, #7
 8001a4e:	f107 0218 	add.w	r2, r7, #24
 8001a52:	8811      	ldrh	r1, [r2, #0]
 8001a54:	7892      	ldrb	r2, [r2, #2]
 8001a56:	8019      	strh	r1, [r3, #0]
 8001a58:	709a      	strb	r2, [r3, #2]
    bio_ssor->_addr = addr;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	729a      	strb	r2, [r3, #10]
    bio_ssor->_sampleRate = sample_rate;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7f3a      	ldrb	r2, [r7, #28]
 8001a64:	731a      	strb	r2, [r3, #12]
    bio_ssor->_userSelectedMode = user_sel_mode;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a6c:	72da      	strb	r2, [r3, #11]
    bio_ssor->_i2c_h = i2c_h;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	601a      	str	r2, [r3, #0]
    switch( user_sel_mode )
 8001a74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <bio_sensor_init+0x60>
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d005      	beq.n	8001a8c <bio_sensor_init+0x64>
        break;
    case( APP_MODE ):
        // Call function...
        break;
    default:
        bio_ssor->_userSelectedMode = DISABLE; // Disable the sensor (erronous to use any functions)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	72da      	strb	r2, [r3, #11]
        break;
 8001a86:	e002      	b.n	8001a8e <bio_sensor_init+0x66>
        break;
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <bio_sensor_init+0x66>
        break;
 8001a8c:	bf00      	nop
    } // end switch

    // Begin with mfio_pin and rst_pin in output mode.
    set_pin_mode( &( bio_ssor->_reset_pin ), OUT );
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2101      	movs	r1, #1
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ffab 	bl	80019f0 <set_pin_mode>
    set_pin_mode( &( bio_ssor->_mfio_pin ),  OUT );
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3307      	adds	r3, #7
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ffa5 	bl	80019f0 <set_pin_mode>
    return;
 8001aa6:	bf00      	nop
    } // end bio_sensor_init( )
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <readMPU>:
#define MPU_SAD_R 0b11010001 // The last bit corresponds to R
#define MPU_SAD_W 0b11010000

#define MPU_SAD 0b1101000
uint8_t MPUbuf[10] = {0};
void readMPU(uint8_t* val, uint8_t reg_addr, size_t len){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef ret;
      MPUbuf[0] = reg_addr;
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <readMPU+0x90>)
 8001ac0:	7afb      	ldrb	r3, [r7, #11]
 8001ac2:	7013      	strb	r3, [r2, #0]
      ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 1, 1000);
 8001ac4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <readMPU+0x90>)
 8001ace:	21d0      	movs	r1, #208	; 0xd0
 8001ad0:	481c      	ldr	r0, [pc, #112]	; (8001b44 <readMPU+0x94>)
 8001ad2:	f002 fc0d 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	74fb      	strb	r3, [r7, #19]
      if (ret != HAL_OK) {
 8001ada:	7cfb      	ldrb	r3, [r7, #19]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <readMPU+0x3c>
          printf("Error reading Data from MPU reg: %d \n", reg_addr);
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4818      	ldr	r0, [pc, #96]	; (8001b48 <readMPU+0x98>)
 8001ae6:	f007 fc2d 	bl	8009344 <iprintf>
          return;
 8001aea:	e026      	b.n	8001b3a <readMPU+0x8a>
      }
      ret = HAL_I2C_Master_Receive(&hi2c3, MPU_SAD_R, &MPUbuf[0], len, 1000);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af4:	9200      	str	r2, [sp, #0]
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <readMPU+0x90>)
 8001af8:	21d1      	movs	r1, #209	; 0xd1
 8001afa:	4812      	ldr	r0, [pc, #72]	; (8001b44 <readMPU+0x94>)
 8001afc:	f002 fcec 	bl	80044d8 <HAL_I2C_Master_Receive>
 8001b00:	4603      	mov	r3, r0
 8001b02:	74fb      	strb	r3, [r7, #19]
      if (ret != HAL_OK) printf("Error reading Data from MPU reg: %d size: %d\n", reg_addr, len);
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <readMPU+0x66>
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <readMPU+0x9c>)
 8001b12:	f007 fc17 	bl	8009344 <iprintf>
      for(size_t i=0; i<len; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e00a      	b.n	8001b32 <readMPU+0x82>
          val[i] = MPUbuf[i];
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	4413      	add	r3, r2
 8001b22:	4907      	ldr	r1, [pc, #28]	; (8001b40 <readMPU+0x90>)
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	440a      	add	r2, r1
 8001b28:	7812      	ldrb	r2, [r2, #0]
 8001b2a:	701a      	strb	r2, [r3, #0]
      for(size_t i=0; i<len; i++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3f0      	bcc.n	8001b1c <readMPU+0x6c>
}
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000600 	.word	0x20000600
 8001b44:	2000061c 	.word	0x2000061c
 8001b48:	0800d198 	.word	0x0800d198
 8001b4c:	0800d1c0 	.word	0x0800d1c0

08001b50 <writeMPU>:

void writeMPU(uint8_t val, uint8_t reg_addr){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	4603      	mov	r3, r0
 8001b58:	460a      	mov	r2, r1
 8001b5a:	71fb      	strb	r3, [r7, #7]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;
    MPUbuf[0] = reg_addr;
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <writeMPU+0x4c>)
 8001b62:	79bb      	ldrb	r3, [r7, #6]
 8001b64:	7013      	strb	r3, [r2, #0]
    MPUbuf[1] = val;
 8001b66:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <writeMPU+0x4c>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	7053      	strb	r3, [r2, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 2, 1000);
 8001b6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2302      	movs	r3, #2
 8001b74:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <writeMPU+0x4c>)
 8001b76:	21d0      	movs	r1, #208	; 0xd0
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <writeMPU+0x50>)
 8001b7a:	f002 fbb9 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) printf("Error writing to MPU reg: %d = %d\n", reg_addr, val);
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <writeMPU+0x44>
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <writeMPU+0x54>)
 8001b90:	f007 fbd8 	bl	8009344 <iprintf>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000600 	.word	0x20000600
 8001ba0:	2000061c 	.word	0x2000061c
 8001ba4:	0800d1f0 	.word	0x0800d1f0

08001ba8 <tryMPU>:
#define MPU_ACC_X_OUT           0x3b
#define MPU_GYRO_X_OUT          0x43

#define MPU_OUTPUT_RATE         8000 // default output rate in Hz

int tryMPU(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
      uint8_t mpu_id;
      readMPU(&mpu_id, MPU_WHO_AM_I, 1);
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2175      	movs	r1, #117	; 0x75
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff7b 	bl	8001ab0 <readMPU>
      printf("Setting up MPU Device on I2C3...\n");
 8001bba:	4839      	ldr	r0, [pc, #228]	; (8001ca0 <tryMPU+0xf8>)
 8001bbc:	f007 fc48 	bl	8009450 <puts>
      if (mpu_id != 104) {
 8001bc0:	793b      	ldrb	r3, [r7, #4]
 8001bc2:	2b68      	cmp	r3, #104	; 0x68
 8001bc4:	d004      	beq.n	8001bd0 <tryMPU+0x28>
          printf("[ERROR] MPU I2C ID verification Failed!!!\n");
 8001bc6:	4837      	ldr	r0, [pc, #220]	; (8001ca4 <tryMPU+0xfc>)
 8001bc8:	f007 fc42 	bl	8009450 <puts>
          return 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e063      	b.n	8001c98 <tryMPU+0xf0>
      }
      // reset and wait up from sleep
      uint8_t mpu_pwr_1= 0b10000000;
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	216b      	movs	r1, #107	; 0x6b
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ffb9 	bl	8001b50 <writeMPU>
      HAL_Delay(100);
 8001bde:	2064      	movs	r0, #100	; 0x64
 8001be0:	f001 fff4 	bl	8003bcc <HAL_Delay>
      mpu_pwr_1 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	216b      	movs	r1, #107	; 0x6b
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ffaf 	bl	8001b50 <writeMPU>

      // config sampling rate
      uint8_t mpu_sample_div = MPU_OUTPUT_RATE / MPU_SampleRate;
 8001bf2:	2364      	movs	r3, #100	; 0x64
 8001bf4:	71bb      	strb	r3, [r7, #6]
      writeMPU(mpu_sample_div, MPU_SMPRT_DIV);
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	2119      	movs	r1, #25
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ffa8 	bl	8001b50 <writeMPU>

      // config reg
      uint8_t mpu_config_reg;
      mpu_config_reg = 0b001 << 3;
 8001c00:	2308      	movs	r3, #8
 8001c02:	717b      	strb	r3, [r7, #5]
      writeMPU(mpu_config_reg, MPU_CONFIG_REG);
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	211a      	movs	r1, #26
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ffa1 	bl	8001b50 <writeMPU>


      // gyro config
      uint8_t mpu_gyro_config = 0b11 << 3;
 8001c0e:	2318      	movs	r3, #24
 8001c10:	70fb      	strb	r3, [r7, #3]
      writeMPU(mpu_gyro_config, MPU_GYRO_CONFIG);
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	211b      	movs	r1, #27
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff9a 	bl	8001b50 <writeMPU>
      readMPU(&mpu_gyro_config, MPU_GYRO_CONFIG, 1);
 8001c1c:	1cfb      	adds	r3, r7, #3
 8001c1e:	2201      	movs	r2, #1
 8001c20:	211b      	movs	r1, #27
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff44 	bl	8001ab0 <readMPU>
      if (mpu_gyro_config != 0b11 << 3) {
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2b18      	cmp	r3, #24
 8001c2c:	d004      	beq.n	8001c38 <tryMPU+0x90>
          printf("[ERROR] MPU GyroMeter Setup Failed!!!");
 8001c2e:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <tryMPU+0x100>)
 8001c30:	f007 fb88 	bl	8009344 <iprintf>
          return 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e02f      	b.n	8001c98 <tryMPU+0xf0>
      }

      // Acc config
      uint8_t mpu_acc_config;
      mpu_acc_config = 0b11 << 3;
 8001c38:	2318      	movs	r3, #24
 8001c3a:	70bb      	strb	r3, [r7, #2]
      writeMPU(mpu_acc_config, MPU_ACC_CONFIG);
 8001c3c:	78bb      	ldrb	r3, [r7, #2]
 8001c3e:	211c      	movs	r1, #28
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff85 	bl	8001b50 <writeMPU>
      readMPU(&mpu_acc_config, MPU_ACC_CONFIG, 1);
 8001c46:	1cbb      	adds	r3, r7, #2
 8001c48:	2201      	movs	r2, #1
 8001c4a:	211c      	movs	r1, #28
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff2f 	bl	8001ab0 <readMPU>
      if (mpu_acc_config != 0b11 << 3) {
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	2b18      	cmp	r3, #24
 8001c56:	d004      	beq.n	8001c62 <tryMPU+0xba>
          printf("[ERROR] MPU Acc Setup Failed!!!\n");
 8001c58:	4814      	ldr	r0, [pc, #80]	; (8001cac <tryMPU+0x104>)
 8001c5a:	f007 fbf9 	bl	8009450 <puts>
          return 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e01a      	b.n	8001c98 <tryMPU+0xf0>
      }

      // Generate interrupt at each data ready
      // set DATA_RDY_EN = 1
      uint8_t mpu_int_enable;
      mpu_int_enable = 0b1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	707b      	strb	r3, [r7, #1]
      writeMPU(mpu_int_enable, MPU_INT_ENABLE);
 8001c66:	787b      	ldrb	r3, [r7, #1]
 8001c68:	2138      	movs	r1, #56	; 0x38
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff70 	bl	8001b50 <writeMPU>
      readMPU(&mpu_int_enable, MPU_INT_ENABLE, 1);
 8001c70:	1c7b      	adds	r3, r7, #1
 8001c72:	2201      	movs	r2, #1
 8001c74:	2138      	movs	r1, #56	; 0x38
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff1a 	bl	8001ab0 <readMPU>
      if (mpu_int_enable != 1) {
 8001c7c:	787b      	ldrb	r3, [r7, #1]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d004      	beq.n	8001c8c <tryMPU+0xe4>
          printf("[ERROR] MPU interrupt Setup Failed!!!\n");
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <tryMPU+0x108>)
 8001c84:	f007 fbe4 	bl	8009450 <puts>
          return 1;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e005      	b.n	8001c98 <tryMPU+0xf0>
      }

      printf("...MPU Setup Success\n");
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <tryMPU+0x10c>)
 8001c8e:	f007 fbdf 	bl	8009450 <puts>
      Beep_reset(); // Ok to enable interrupts now
 8001c92:	f000 fa87 	bl	80021a4 <Beep_reset>
      return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	0800d214 	.word	0x0800d214
 8001ca4:	0800d238 	.word	0x0800d238
 8001ca8:	0800d264 	.word	0x0800d264
 8001cac:	0800d28c 	.word	0x0800d28c
 8001cb0:	0800d2ac 	.word	0x0800d2ac
 8001cb4:	0800d2d4 	.word	0x0800d2d4

08001cb8 <SetupMPU>:


void SetupMPU(){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
    while(tryMPU()){
 8001cbc:	e002      	b.n	8001cc4 <SetupMPU+0xc>
        HAL_Delay(100);
 8001cbe:	2064      	movs	r0, #100	; 0x64
 8001cc0:	f001 ff84 	bl	8003bcc <HAL_Delay>
    while(tryMPU()){
 8001cc4:	f7ff ff70 	bl	8001ba8 <tryMPU>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f7      	bne.n	8001cbe <SetupMPU+0x6>
    }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <MPUSleep>:

void MPUSleep(){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
    uint8_t mpu_pwr_1 = 1 << 6;
 8001cda:	2340      	movs	r3, #64	; 0x40
 8001cdc:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	216b      	movs	r1, #107	; 0x6b
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ff34 	bl	8001b50 <writeMPU>
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <getMPU>:
    float Gyrx;
    float Gyry;
    float Gyrz;
}MPU_measure;

MPU_measure getMPU(){
 8001cf0:	b5b0      	push	{r4, r5, r7, lr}
 8001cf2:	b090      	sub	sp, #64	; 0x40
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    MPU_measure rt;
    // Read from x-axis:
      uint8_t raw_acc[6];
      readMPU(raw_acc, MPU_ACC_X_OUT, 6);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2206      	movs	r2, #6
 8001cfe:	213b      	movs	r1, #59	; 0x3b
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fed5 	bl	8001ab0 <readMPU>
      int16_t raw_x, raw_y, raw_z;
      raw_x = raw_acc[0] << 8 | raw_acc[1];
 8001d06:	7d3b      	ldrb	r3, [r7, #20]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7d7b      	ldrb	r3, [r7, #21]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	87fb      	strh	r3, [r7, #62]	; 0x3e
      raw_y = raw_acc[2] << 8 | raw_acc[3];
 8001d14:	7dbb      	ldrb	r3, [r7, #22]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	b21b      	sxth	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	87bb      	strh	r3, [r7, #60]	; 0x3c
      raw_z = raw_acc[4] << 8 | raw_acc[5];
 8001d22:	7e3b      	ldrb	r3, [r7, #24]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b21a      	sxth	r2, r3
 8001d28:	7e7b      	ldrb	r3, [r7, #25]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	877b      	strh	r3, [r7, #58]	; 0x3a
      rt.Accx = (float)(raw_x)/2048.0;
 8001d30:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3c:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001e60 <getMPU+0x170>
 8001d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d44:	edc7 7a07 	vstr	s15, [r7, #28]
      rt.Accy = (float)(raw_y)/2048.0;
 8001d48:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d54:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001e60 <getMPU+0x170>
 8001d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5c:	edc7 7a08 	vstr	s15, [r7, #32]
      rt.Accz = (float)(raw_z)/2048.0;
 8001d60:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001e60 <getMPU+0x170>
 8001d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//    printf("Acc X: %f Gs Y: %f Gs Z: %f Gs \n", Accx, Accy, Accz);
      uint8_t raw_gyro[6];
      readMPU(raw_gyro, MPU_GYRO_X_OUT, 6);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2206      	movs	r2, #6
 8001d7e:	2143      	movs	r1, #67	; 0x43
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fe95 	bl	8001ab0 <readMPU>
      int16_t raw_x_g, raw_y_g, raw_z_g;
      raw_x_g = raw_gyro[0] << 8 | raw_gyro[1];
 8001d86:	7b3b      	ldrb	r3, [r7, #12]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	7b7b      	ldrb	r3, [r7, #13]
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	873b      	strh	r3, [r7, #56]	; 0x38
      raw_y_g = raw_gyro[2] << 8 | raw_gyro[3];
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	86fb      	strh	r3, [r7, #54]	; 0x36
      raw_z_g = raw_gyro[4] << 8 | raw_gyro[5];
 8001da2:	7c3b      	ldrb	r3, [r7, #16]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	7c7b      	ldrb	r3, [r7, #17]
 8001daa:	b21b      	sxth	r3, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	86bb      	strh	r3, [r7, #52]	; 0x34
      rt.Gyrx = (float)(raw_x_g)/65.532;
 8001db0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ee17 0a90 	vmov	r0, s15
 8001dc0:	f7fe fbea 	bl	8000598 <__aeabi_f2d>
 8001dc4:	a324      	add	r3, pc, #144	; (adr r3, 8001e58 <getMPU+0x168>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fd67 	bl	800089c <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe ff2f 	bl	8000c38 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
      rt.Gyry = (float)(raw_y_g)/65.532;
 8001dde:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dea:	ee17 0a90 	vmov	r0, s15
 8001dee:	f7fe fbd3 	bl	8000598 <__aeabi_f2d>
 8001df2:	a319      	add	r3, pc, #100	; (adr r3, 8001e58 <getMPU+0x168>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fd50 	bl	800089c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe ff18 	bl	8000c38 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      rt.Gyrz = (float)(raw_z_g)/65.532;
 8001e0c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001e10:	ee07 3a90 	vmov	s15, r3
 8001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e18:	ee17 0a90 	vmov	r0, s15
 8001e1c:	f7fe fbbc 	bl	8000598 <__aeabi_f2d>
 8001e20:	a30d      	add	r3, pc, #52	; (adr r3, 8001e58 <getMPU+0x168>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f7fe fd39 	bl	800089c <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe ff01 	bl	8000c38 <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
//    printf("Gyro X: %f deg/s Y: %f deg/s Z: %f deg/s\n", Gx, Gy, Gz);
      return rt;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	f107 041c 	add.w	r4, r7, #28
 8001e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	3740      	adds	r7, #64	; 0x40
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bdb0      	pop	{r4, r5, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	49ba5e35 	.word	0x49ba5e35
 8001e5c:	4050620c 	.word	0x4050620c
 8001e60:	45000000 	.word	0x45000000
 8001e64:	00000000 	.word	0x00000000

08001e68 <detect_fall>:
unsigned int fall_window=0;


/* pushes MPU data to usb */

void detect_fall(MPU_measure m){
 8001e68:	b084      	sub	sp, #16
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	f107 0c10 	add.w	ip, r7, #16
 8001e74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    float accsq;
    accsq = m.Accx * m.Accx + m.Accy * m.Accy + m.Accz * m.Accz;
 8001e78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e84:	edd7 6a05 	vldr	s13, [r7, #20]
 8001e88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e94:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea4:	edc7 7a01 	vstr	s15, [r7, #4]
    if (accsq <= ACC_LFT_SQ && !fall_window)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fb75 	bl	8000598 <__aeabi_f2d>
 8001eae:	a32c      	add	r3, pc, #176	; (adr r3, 8001f60 <detect_fall+0xf8>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fe44 	bl	8000b40 <__aeabi_dcmple>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <detect_fall+0x64>
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <detect_fall+0xf0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <detect_fall+0x64>
        fall_window = FALL_DETECT_SAMPLES;
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <detect_fall+0xf0>)
 8001ec8:	2228      	movs	r2, #40	; 0x28
 8001eca:	601a      	str	r2, [r3, #0]
    if (!fall_window) return;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <detect_fall+0xf0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d032      	beq.n	8001f3a <detect_fall+0xd2>
    fall_window--;
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <detect_fall+0xf0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <detect_fall+0xf0>)
 8001edc:	6013      	str	r3, [r2, #0]
    if (accsq < ACC_UFT_SQ) return;
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fb5a 	bl	8000598 <__aeabi_f2d>
 8001ee4:	a31a      	add	r3, pc, #104	; (adr r3, 8001f50 <detect_fall+0xe8>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe fe1f 	bl	8000b2c <__aeabi_dcmplt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d124      	bne.n	8001f3e <detect_fall+0xd6>
    float gyrsq;
    gyrsq = m.Gyrx * m.Gyrx + m.Gyry * m.Gyry + m.Gyrz * m.Gyrz;
 8001ef4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ef8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f10:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f20:	edc7 7a00 	vstr	s15, [r7]
    if (gyrsq < GYR_UFT_SQ) return;
 8001f24:	edd7 7a00 	vldr	s15, [r7]
 8001f28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d407      	bmi.n	8001f42 <detect_fall+0xda>
    fall_detected = 1;
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <detect_fall+0xf4>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e004      	b.n	8001f44 <detect_fall+0xdc>
    if (!fall_window) return;
 8001f3a:	bf00      	nop
 8001f3c:	e002      	b.n	8001f44 <detect_fall+0xdc>
    if (accsq < ACC_UFT_SQ) return;
 8001f3e:	bf00      	nop
 8001f40:	e000      	b.n	8001f44 <detect_fall+0xdc>
    if (gyrsq < GYR_UFT_SQ) return;
 8001f42:	bf00      	nop
}
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f4c:	b004      	add	sp, #16
 8001f4e:	4770      	bx	lr
 8001f50:	7ae147ae 	.word	0x7ae147ae
 8001f54:	401eae14 	.word	0x401eae14
 8001f58:	2000060c 	.word	0x2000060c
 8001f5c:	200005fc 	.word	0x200005fc
 8001f60:	70a3d70a 	.word	0x70a3d70a
 8001f64:	3ff70a3d 	.word	0x3ff70a3d

08001f68 <push_MPU_data>:
void push_MPU_data(MPU_measure m){
 8001f68:	b084      	sub	sp, #16
 8001f6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f6e:	b090      	sub	sp, #64	; 0x40
 8001f70:	af0c      	add	r7, sp, #48	; 0x30
 8001f72:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("%f,%f,%f,%f,%f,%f,%d,%d\n", m.Accx, m.Accy, m.Accz, m.Gyrx, m.Gyry, m.Gyrz, fall_window, fall_detected);
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fb0b 	bl	8000598 <__aeabi_f2d>
 8001f82:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fb05 	bl	8000598 <__aeabi_f2d>
 8001f8e:	4604      	mov	r4, r0
 8001f90:	460d      	mov	r5, r1
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe faff 	bl	8000598 <__aeabi_f2d>
 8001f9a:	4680      	mov	r8, r0
 8001f9c:	4689      	mov	r9, r1
 8001f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe faf9 	bl	8000598 <__aeabi_f2d>
 8001fa6:	4682      	mov	sl, r0
 8001fa8:	468b      	mov	fp, r1
 8001faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe faf3 	bl	8000598 <__aeabi_f2d>
 8001fb2:	e9c7 0100 	strd	r0, r1, [r7]
 8001fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe faed 	bl	8000598 <__aeabi_f2d>
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <push_MPU_data+0x94>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <push_MPU_data+0x98>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001fc8:	920a      	str	r2, [sp, #40]	; 0x28
 8001fca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001fce:	ed97 7b00 	vldr	d7, [r7]
 8001fd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001fd6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001fda:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001fde:	e9cd 4500 	strd	r4, r5, [sp]
 8001fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fe6:	4807      	ldr	r0, [pc, #28]	; (8002004 <push_MPU_data+0x9c>)
 8001fe8:	f007 f9ac 	bl	8009344 <iprintf>
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff6:	b004      	add	sp, #16
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000060c 	.word	0x2000060c
 8002000:	200005fc 	.word	0x200005fc
 8002004:	0800d2ec 	.word	0x0800d2ec

08002008 <MPU_Interrupt>:

void MPU_Interrupt(){
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af02      	add	r7, sp, #8
    if (fall_detected) return;
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <MPU_Interrupt+0x80>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <MPU_Interrupt+0x6e>
    /* read MPU */
    MPU_measure mpu_data = getMPU();
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fe68 	bl	8001cf0 <getMPU>
    push_MPU_data(mpu_data);
 8002020:	466a      	mov	r2, sp
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	e893 0003 	ldmia.w	r3, {r0, r1}
 800202a:	e882 0003 	stmia.w	r2, {r0, r1}
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	f7ff ff98 	bl	8001f68 <push_MPU_data>
    detect_fall(mpu_data);
 8002038:	466a      	mov	r2, sp
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002042:	e882 0003 	stmia.w	r2, {r0, r1}
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800204c:	f7ff ff0c 	bl	8001e68 <detect_fall>

    /* clear interrupt*/
    uint8_t mpu_int_status;
    while(1){
        if (fall_detected) return;
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <MPU_Interrupt+0x80>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d110      	bne.n	800207a <MPU_Interrupt+0x72>
        readMPU(&mpu_int_status, MPU_INT_STATUS, 1);
 8002058:	1dfb      	adds	r3, r7, #7
 800205a:	2201      	movs	r2, #1
 800205c:	213a      	movs	r1, #58	; 0x3a
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fd26 	bl	8001ab0 <readMPU>
        if ((mpu_int_status & 0b1) != 1) {
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <MPU_Interrupt+0x76>
            printf("[ERROR] MPU interrupt Clear Failed!!!!\n");
 800206e:	4807      	ldr	r0, [pc, #28]	; (800208c <MPU_Interrupt+0x84>)
 8002070:	f007 f9ee 	bl	8009450 <puts>
        if (fall_detected) return;
 8002074:	e7ec      	b.n	8002050 <MPU_Interrupt+0x48>
    if (fall_detected) return;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <MPU_Interrupt+0x78>
        if (fall_detected) return;
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <MPU_Interrupt+0x78>
            continue;
        }
        break;
 800207e:	bf00      	nop
    }

}
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200005fc 	.word	0x200005fc
 800208c:	0800d308 	.word	0x0800d308

08002090 <Beep_sos>:

void Beep_sos(){
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
    TIM4->ARR = 2000;
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <Beep_sos+0xb8>)
 8002098:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
    for(int j=0; j<5; j++){
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e048      	b.n	8002136 <Beep_sos+0xa6>
    for (int i=0; i<3; i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	e00f      	b.n	80020ca <Beep_sos+0x3a>
    TIM4->CCR2 = 1000;
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <Beep_sos+0xb8>)
 80020ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(90);
 80020b2:	205a      	movs	r0, #90	; 0x5a
 80020b4:	f001 fd8a 	bl	8003bcc <HAL_Delay>
    TIM4->CCR2 = 0;
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <Beep_sos+0xb8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(90);
 80020be:	205a      	movs	r0, #90	; 0x5a
 80020c0:	f001 fd84 	bl	8003bcc <HAL_Delay>
    for (int i=0; i<3; i++){
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	3301      	adds	r3, #1
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	ddec      	ble.n	80020aa <Beep_sos+0x1a>
    }
    for (int i=0; i<3; i++){
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	e00f      	b.n	80020f6 <Beep_sos+0x66>
        TIM4->CCR2 = 1000;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <Beep_sos+0xb8>)
 80020d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(180);
 80020de:	20b4      	movs	r0, #180	; 0xb4
 80020e0:	f001 fd74 	bl	8003bcc <HAL_Delay>
        TIM4->CCR2 = 0;
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <Beep_sos+0xb8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 80020ea:	205a      	movs	r0, #90	; 0x5a
 80020ec:	f001 fd6e 	bl	8003bcc <HAL_Delay>
    for (int i=0; i<3; i++){
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3301      	adds	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	ddec      	ble.n	80020d6 <Beep_sos+0x46>
        }
    for (int i=0; i<3; i++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	e00f      	b.n	8002122 <Beep_sos+0x92>
        TIM4->CCR2 = 1000;
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <Beep_sos+0xb8>)
 8002104:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 800210a:	205a      	movs	r0, #90	; 0x5a
 800210c:	f001 fd5e 	bl	8003bcc <HAL_Delay>
        TIM4->CCR2 = 0;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <Beep_sos+0xb8>)
 8002112:	2200      	movs	r2, #0
 8002114:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8002116:	205a      	movs	r0, #90	; 0x5a
 8002118:	f001 fd58 	bl	8003bcc <HAL_Delay>
    for (int i=0; i<3; i++){
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3301      	adds	r3, #1
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b02      	cmp	r3, #2
 8002126:	ddec      	ble.n	8002102 <Beep_sos+0x72>
    }
    HAL_Delay(300);
 8002128:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800212c:	f001 fd4e 	bl	8003bcc <HAL_Delay>
    for(int j=0; j<5; j++){
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3301      	adds	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b04      	cmp	r3, #4
 800213a:	ddb3      	ble.n	80020a4 <Beep_sos+0x14>
    }

}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40000800 	.word	0x40000800

0800214c <Beep_sendmsg_warning>:

void Beep_sendmsg_warning(){
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
    for (int i=0; i<6; i++){
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e018      	b.n	800218a <Beep_sendmsg_warning+0x3e>
        TIM4->ARR = 3000;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <Beep_sendmsg_warning+0x54>)
 800215a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM4->CCR2 = 1500;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <Beep_sendmsg_warning+0x54>)
 8002162:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002166:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(150);
 8002168:	2096      	movs	r0, #150	; 0x96
 800216a:	f001 fd2f 	bl	8003bcc <HAL_Delay>
        TIM4->ARR = 2000;
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <Beep_sendmsg_warning+0x54>)
 8002170:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM4->CCR2 = 1000;
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <Beep_sendmsg_warning+0x54>)
 8002178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(150);
 800217e:	2096      	movs	r0, #150	; 0x96
 8002180:	f001 fd24 	bl	8003bcc <HAL_Delay>
    for (int i=0; i<6; i++){
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3301      	adds	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b05      	cmp	r3, #5
 800218e:	dde3      	ble.n	8002158 <Beep_sendmsg_warning+0xc>
    }
    TIM4->CCR2 =0;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <Beep_sendmsg_warning+0x54>)
 8002192:	2200      	movs	r2, #0
 8002194:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40000800 	.word	0x40000800

080021a4 <Beep_reset>:

void Beep_reset(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
    TIM4->ARR = 2000;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <Beep_reset+0x40>)
 80021aa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021ae:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCR2 = 1000;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <Beep_reset+0x40>)
 80021b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);
 80021b8:	2014      	movs	r0, #20
 80021ba:	f001 fd07 	bl	8003bcc <HAL_Delay>
    TIM4->ARR = 4000;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <Beep_reset+0x40>)
 80021c0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80021c4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCR2 = 2000;
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <Beep_reset+0x40>)
 80021c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);
 80021ce:	2014      	movs	r0, #20
 80021d0:	f001 fcfc 	bl	8003bcc <HAL_Delay>
    TIM4->CCR2 =0;
 80021d4:	4b03      	ldr	r3, [pc, #12]	; (80021e4 <Beep_reset+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	639a      	str	r2, [r3, #56]	; 0x38
    printf( "Reset beeper!\n\r" );
 80021da:	4803      	ldr	r0, [pc, #12]	; (80021e8 <Beep_reset+0x44>)
 80021dc:	f007 f8b2 	bl	8009344 <iprintf>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40000800 	.word	0x40000800
 80021e8:	0800d330 	.word	0x0800d330

080021ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ec:	b5b0      	push	{r4, r5, r7, lr}
 80021ee:	b0de      	sub	sp, #376	; 0x178
 80021f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f2:	f001 fc76 	bl	8003ae2 <HAL_Init>

  /* USER CODE BEGIN Init */
  cell.uart_ptr = &huart3;
 80021f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <main+0xac>)
 80021fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fe:	f000 fd0b 	bl	8002c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002202:	f000 fedb 	bl	8002fbc <MX_GPIO_Init>
  MX_I2C3_Init();
 8002206:	f000 fd8b 	bl	8002d20 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800220a:	f000 fdc7 	bl	8002d9c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 800220e:	f000 fe5d 	bl	8002ecc <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8002212:	f000 fe0f 	bl	8002e34 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002216:	f000 fd45 	bl	8002ca4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n");
 800221a:	4820      	ldr	r0, [pc, #128]	; (800229c <main+0xb0>)
 800221c:	f007 f918 	bl	8009450 <puts>
  MPUSleep(); // Turn off interrupts if on
 8002220:	f7ff fd58 	bl	8001cd4 <MPUSleep>
  printf( "Initializing!\n\r" );
 8002224:	481e      	ldr	r0, [pc, #120]	; (80022a0 <main+0xb4>)
 8002226:	f007 f88d 	bl	8009344 <iprintf>
  if ( !begin( &cell ) )
 800222a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe ff78 	bl	8001124 <begin>
 8002234:	4603      	mov	r3, r0
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <main+0x60>
    {
    printf( "Failed initialization\n\r" );
 8002240:	4818      	ldr	r0, [pc, #96]	; (80022a4 <main+0xb8>)
 8002242:	f007 f87f 	bl	8009344 <iprintf>
    return 1;
 8002246:	2301      	movs	r3, #1
 8002248:	f000 bcc5 	b.w	8002bd6 <main+0x9ea>
    }
  else
    {
    printf( "Found SIM7000 using hardware serial\n\r" );
 800224c:	4816      	ldr	r0, [pc, #88]	; (80022a8 <main+0xbc>)
 800224e:	f007 f879 	bl	8009344 <iprintf>
    }

  if ( !setNetworkSettings( &cell ) )
 8002252:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff f92e 	bl	80014b8 <setNetworkSettings>
 800225c:	4603      	mov	r3, r0
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <main+0x88>
    {
    printf( "Network settings NOT set\n\r" );
 8002268:	4810      	ldr	r0, [pc, #64]	; (80022ac <main+0xc0>)
 800226a:	f007 f86b 	bl	8009344 <iprintf>
    return 1;
 800226e:	2301      	movs	r3, #1
 8002270:	f000 bcb1 	b.w	8002bd6 <main+0x9ea>
    }
  else
    {
    printf( "Network settings set\n\r" );
 8002274:	480e      	ldr	r0, [pc, #56]	; (80022b0 <main+0xc4>)
 8002276:	f007 f865 	bl	8009344 <iprintf>
    }
  // initialized = 1;


  if ( !enableGPS( &cell, true ) ){
 800227a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227e:	2101      	movs	r1, #1
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f9d9 	bl	8001638 <enableGPS>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d115      	bne.n	80022b8 <main+0xcc>

		printf( "GPS enable has failed\n\t" );
 800228c:	4809      	ldr	r0, [pc, #36]	; (80022b4 <main+0xc8>)
 800228e:	f007 f859 	bl	8009344 <iprintf>
		return 1;
 8002292:	2301      	movs	r3, #1
 8002294:	f000 bc9f 	b.w	8002bd6 <main+0x9ea>
 8002298:	200006b4 	.word	0x200006b4
 800229c:	0800d340 	.word	0x0800d340
 80022a0:	0800d344 	.word	0x0800d344
 80022a4:	0800d354 	.word	0x0800d354
 80022a8:	0800d36c 	.word	0x0800d36c
 80022ac:	0800d394 	.word	0x0800d394
 80022b0:	0800d3b0 	.word	0x0800d3b0
 80022b4:	0800d3c8 	.word	0x0800d3c8
	  }
	  else{
		printf( "GPS enable has worked\n\r" );
 80022b8:	48dc      	ldr	r0, [pc, #880]	; (800262c <main+0x440>)
 80022ba:	f007 f843 	bl	8009344 <iprintf>

  /*biometric sensor setup*/
      /*--------------begin------------------*/
    	  HAL_StatusTypeDef ret;
    	  uint8_t buf[20];
    	  int HM_samples = 0x1;
 80022be:	2301      	movs	r3, #1
 80022c0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    	  bio_sensor_init( &sensor, &hi2c1, HM_ADDR, rst_pin_c, mfio_pin_c, def_sample_rate, DISABLE );
 80022c4:	2364      	movs	r3, #100	; 0x64
 80022c6:	49da      	ldr	r1, [pc, #872]	; (8002630 <main+0x444>)
 80022c8:	f107 001c 	add.w	r0, r7, #28
 80022cc:	2200      	movs	r2, #0
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	4ad8      	ldr	r2, [pc, #864]	; (8002634 <main+0x448>)
 80022d4:	466b      	mov	r3, sp
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	4614      	mov	r4, r2
 80022da:	801c      	strh	r4, [r3, #0]
 80022dc:	3302      	adds	r3, #2
 80022de:	0c12      	lsrs	r2, r2, #16
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	680b      	ldr	r3, [r1, #0]
 80022e4:	2255      	movs	r2, #85	; 0x55
 80022e6:	49d4      	ldr	r1, [pc, #848]	; (8002638 <main+0x44c>)
 80022e8:	f7ff fb9e 	bl	8001a28 <bio_sensor_init>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0); // Reset pin
 80022ec:	2200      	movs	r2, #0
 80022ee:	2101      	movs	r1, #1
 80022f0:	48d2      	ldr	r0, [pc, #840]	; (800263c <main+0x450>)
 80022f2:	f001 ff33 	bl	800415c <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  1); // MFIO pin
 80022f6:	2201      	movs	r2, #1
 80022f8:	2102      	movs	r1, #2
 80022fa:	48d0      	ldr	r0, [pc, #832]	; (800263c <main+0x450>)
 80022fc:	f001 ff2e 	bl	800415c <HAL_GPIO_WritePin>
    	  HAL_Delay(10);
 8002300:	200a      	movs	r0, #10
 8002302:	f001 fc63 	bl	8003bcc <HAL_Delay>
    	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1); // Reset is pulled
 8002306:	2201      	movs	r2, #1
 8002308:	2101      	movs	r1, #1
 800230a:	48cc      	ldr	r0, [pc, #816]	; (800263c <main+0x450>)
 800230c:	f001 ff26 	bl	800415c <HAL_GPIO_WritePin>
    	  HAL_Delay(50);
 8002310:	2032      	movs	r0, #50	; 0x32
 8002312:	f001 fc5b 	bl	8003bcc <HAL_Delay>
    	  HAL_Delay(1000);
 8002316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800231a:	f001 fc57 	bl	8003bcc <HAL_Delay>

    	  buf[0] = 0x02;
 800231e:	f107 0308 	add.w	r3, r7, #8
 8002322:	2202      	movs	r2, #2
 8002324:	701a      	strb	r2, [r3, #0]
    	  buf[1] = 0x00;
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	2200      	movs	r2, #0
 800232c:	705a      	strb	r2, [r3, #1]
    	  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 800232e:	f107 0208 	add.w	r2, r7, #8
 8002332:	f241 3388 	movw	r3, #5000	; 0x1388
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2302      	movs	r3, #2
 800233a:	21aa      	movs	r1, #170	; 0xaa
 800233c:	48be      	ldr	r0, [pc, #760]	; (8002638 <main+0x44c>)
 800233e:	f001 ffd7 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8002342:	4603      	mov	r3, r0
 8002344:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	  HAL_Delay(6);
 8002348:	2006      	movs	r0, #6
 800234a:	f001 fc3f 	bl	8003bcc <HAL_Delay>
    	  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 800234e:	f107 0208 	add.w	r2, r7, #8
 8002352:	f241 3388 	movw	r3, #5000	; 0x1388
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2302      	movs	r3, #2
 800235a:	21ab      	movs	r1, #171	; 0xab
 800235c:	48b6      	ldr	r0, [pc, #728]	; (8002638 <main+0x44c>)
 800235e:	f002 f8bb 	bl	80044d8 <HAL_I2C_Master_Receive>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	  printf("error code: %x application mode: %x\n\r", buf[0],buf[1]);
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	4619      	mov	r1, r3
 8002370:	f107 0308 	add.w	r3, r7, #8
 8002374:	785b      	ldrb	r3, [r3, #1]
 8002376:	461a      	mov	r2, r3
 8002378:	48b1      	ldr	r0, [pc, #708]	; (8002640 <main+0x454>)
 800237a:	f006 ffe3 	bl	8009344 <iprintf>
    	  set_pin_mode( &sensor._mfio_pin, IN );
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	3307      	adds	r3, #7
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fb32 	bl	80019f0 <set_pin_mode>

    	  buf[0] = 0x50;
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	2250      	movs	r2, #80	; 0x50
 8002392:	701a      	strb	r2, [r3, #0]
    	  buf[1] = 0x02; //says 02 in another place
 8002394:	f107 0308 	add.w	r3, r7, #8
 8002398:	2202      	movs	r2, #2
 800239a:	705a      	strb	r2, [r3, #1]
    	  buf[2] = 0x0B;
 800239c:	f107 0308 	add.w	r3, r7, #8
 80023a0:	220b      	movs	r2, #11
 80023a2:	709a      	strb	r2, [r3, #2]

    	  //A
    	  buf[3] = 0x00;
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	2200      	movs	r2, #0
 80023aa:	70da      	strb	r2, [r3, #3]
    	  buf[4] = 0x02;
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	2202      	movs	r2, #2
 80023b2:	711a      	strb	r2, [r3, #4]
    	  buf[5] = 0x6F;
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	226f      	movs	r2, #111	; 0x6f
 80023ba:	715a      	strb	r2, [r3, #5]
    	  buf[6] = 0x60;
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	2260      	movs	r2, #96	; 0x60
 80023c2:	719a      	strb	r2, [r3, #6]

    	  //B
    	  buf[7] = 0xFF;
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	22ff      	movs	r2, #255	; 0xff
 80023ca:	71da      	strb	r2, [r3, #7]
    	  buf[8] = 0xCB;
 80023cc:	f107 0308 	add.w	r3, r7, #8
 80023d0:	22cb      	movs	r2, #203	; 0xcb
 80023d2:	721a      	strb	r2, [r3, #8]
    	  buf[9] = 0x1D;
 80023d4:	f107 0308 	add.w	r3, r7, #8
 80023d8:	221d      	movs	r2, #29
 80023da:	725a      	strb	r2, [r3, #9]
    	  buf[10] = 0x12;
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	2212      	movs	r2, #18
 80023e2:	729a      	strb	r2, [r3, #10]

    	    	//C
    	  buf[11] = 0x00;
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	2200      	movs	r2, #0
 80023ea:	72da      	strb	r2, [r3, #11]
    	  buf[12] = 0xAB;
 80023ec:	f107 0308 	add.w	r3, r7, #8
 80023f0:	22ab      	movs	r2, #171	; 0xab
 80023f2:	731a      	strb	r2, [r3, #12]
    	  buf[13] = 0xF3;
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	22f3      	movs	r2, #243	; 0xf3
 80023fa:	735a      	strb	r2, [r3, #13]
    	  buf[14] = 0x7B;
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	227b      	movs	r2, #123	; 0x7b
 8002402:	739a      	strb	r2, [r3, #14]

    	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 15, 5000);
 8002404:	f107 0208 	add.w	r2, r7, #8
 8002408:	f241 3388 	movw	r3, #5000	; 0x1388
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	230f      	movs	r3, #15
 8002410:	21aa      	movs	r1, #170	; 0xaa
 8002412:	4889      	ldr	r0, [pc, #548]	; (8002638 <main+0x44c>)
 8002414:	f001 ff6c 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8002418:	4603      	mov	r3, r0
 800241a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	  HAL_Delay(20);
 800241e:	2014      	movs	r0, #20
 8002420:	f001 fbd4 	bl	8003bcc <HAL_Delay>
    	  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002424:	f107 0208 	add.w	r2, r7, #8
 8002428:	f241 3388 	movw	r3, #5000	; 0x1388
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	21ab      	movs	r1, #171	; 0xab
 8002432:	4881      	ldr	r0, [pc, #516]	; (8002638 <main+0x44c>)
 8002434:	f002 f850 	bl	80044d8 <HAL_I2C_Master_Receive>
 8002438:	4603      	mov	r3, r0
 800243a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	  if(buf[0] != 0x00 || ret != HAL_OK ){
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d103      	bne.n	8002450 <main+0x264>
 8002448:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <main+0x272>
    		  printf("Error setting mode: code %x\n\r", buf[0]);
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	487a      	ldr	r0, [pc, #488]	; (8002644 <main+0x458>)
 800245a:	f006 ff73 	bl	8009344 <iprintf>
    	  }
    	printf("Callibrated SpO2!\n");
 800245e:	487a      	ldr	r0, [pc, #488]	; (8002648 <main+0x45c>)
 8002460:	f006 fff6 	bl	8009450 <puts>

    	  /*set our mode to MODE 1*/
    	    buf[0] = 0x10;
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	2210      	movs	r2, #16
 800246a:	701a      	strb	r2, [r3, #0]
    	    buf[1] = 0x00;
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	2200      	movs	r2, #0
 8002472:	705a      	strb	r2, [r3, #1]
    	    buf[2] = 0x02;
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	2202      	movs	r2, #2
 800247a:	709a      	strb	r2, [r3, #2]
    	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800247c:	f107 0208 	add.w	r2, r7, #8
 8002480:	f241 3388 	movw	r3, #5000	; 0x1388
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2303      	movs	r3, #3
 8002488:	21aa      	movs	r1, #170	; 0xaa
 800248a:	486b      	ldr	r0, [pc, #428]	; (8002638 <main+0x44c>)
 800248c:	f001 ff30 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8002490:	4603      	mov	r3, r0
 8002492:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	    HAL_Delay(6);
 8002496:	2006      	movs	r0, #6
 8002498:	f001 fb98 	bl	8003bcc <HAL_Delay>
    	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800249c:	f107 0208 	add.w	r2, r7, #8
 80024a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2301      	movs	r3, #1
 80024a8:	21ab      	movs	r1, #171	; 0xab
 80024aa:	4863      	ldr	r0, [pc, #396]	; (8002638 <main+0x44c>)
 80024ac:	f002 f814 	bl	80044d8 <HAL_I2C_Master_Receive>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	    if(buf[0] != 0x00 || ret != HAL_OK ){
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <main+0x2dc>
 80024c0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <main+0x2ea>
    	        printf("Error setting mode: code %x\n\r", buf[0]);
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	485c      	ldr	r0, [pc, #368]	; (8002644 <main+0x458>)
 80024d2:	f006 ff37 	bl	8009344 <iprintf>
    	    }
    	    printf("mode set to raw and algo\n");
 80024d6:	485d      	ldr	r0, [pc, #372]	; (800264c <main+0x460>)
 80024d8:	f006 ffba 	bl	8009450 <puts>

    	    /*Set FIFO threshold as almost full at 0x0F*/
    	    buf[0] = 0x10;
 80024dc:	f107 0308 	add.w	r3, r7, #8
 80024e0:	2210      	movs	r2, #16
 80024e2:	701a      	strb	r2, [r3, #0]
    	    buf[1] = 0x01;
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	2201      	movs	r2, #1
 80024ea:	705a      	strb	r2, [r3, #1]
    	    buf[2] = 0x1;
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	2201      	movs	r2, #1
 80024f2:	709a      	strb	r2, [r3, #2]
    	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80024f4:	f107 0208 	add.w	r2, r7, #8
 80024f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2303      	movs	r3, #3
 8002500:	21aa      	movs	r1, #170	; 0xaa
 8002502:	484d      	ldr	r0, [pc, #308]	; (8002638 <main+0x44c>)
 8002504:	f001 fef4 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8002508:	4603      	mov	r3, r0
 800250a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	    HAL_Delay(6);
 800250e:	2006      	movs	r0, #6
 8002510:	f001 fb5c 	bl	8003bcc <HAL_Delay>
    	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002514:	f107 0208 	add.w	r2, r7, #8
 8002518:	f241 3388 	movw	r3, #5000	; 0x1388
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	21ab      	movs	r1, #171	; 0xab
 8002522:	4845      	ldr	r0, [pc, #276]	; (8002638 <main+0x44c>)
 8002524:	f001 ffd8 	bl	80044d8 <HAL_I2C_Master_Receive>
 8002528:	4603      	mov	r3, r0
 800252a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	      if(buf[0] != 0x00 || ret != HAL_OK ){
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <main+0x354>
 8002538:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <main+0x362>
    	        printf("Error setting FIFO threshold code: %x\n\r", buf[0]);
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4841      	ldr	r0, [pc, #260]	; (8002650 <main+0x464>)
 800254a:	f006 fefb 	bl	8009344 <iprintf>
    	      }
    	    printf("fifo set\n");
 800254e:	4841      	ldr	r0, [pc, #260]	; (8002654 <main+0x468>)
 8002550:	f006 ff7e 	bl	8009450 <puts>
    	    /*enable AGC*/
    	    buf[0] = 0x52;
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	2252      	movs	r2, #82	; 0x52
 800255a:	701a      	strb	r2, [r3, #0]
    	      buf[1] = 0x00;
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	2200      	movs	r2, #0
 8002562:	705a      	strb	r2, [r3, #1]
    	      buf[2] = 0x1;
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2201      	movs	r2, #1
 800256a:	709a      	strb	r2, [r3, #2]
    	      ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800256c:	f107 0208 	add.w	r2, r7, #8
 8002570:	f241 3388 	movw	r3, #5000	; 0x1388
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	21aa      	movs	r1, #170	; 0xaa
 800257a:	482f      	ldr	r0, [pc, #188]	; (8002638 <main+0x44c>)
 800257c:	f001 feb8 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8002580:	4603      	mov	r3, r0
 8002582:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	      HAL_Delay(25);
 8002586:	2019      	movs	r0, #25
 8002588:	f001 fb20 	bl	8003bcc <HAL_Delay>
    	      ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800258c:	f107 0208 	add.w	r2, r7, #8
 8002590:	f241 3388 	movw	r3, #5000	; 0x1388
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2301      	movs	r3, #1
 8002598:	21ab      	movs	r1, #171	; 0xab
 800259a:	4827      	ldr	r0, [pc, #156]	; (8002638 <main+0x44c>)
 800259c:	f001 ff9c 	bl	80044d8 <HAL_I2C_Master_Receive>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	        if(buf[0] != 0x00 || ret != HAL_OK ){
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <main+0x3cc>
 80025b0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d006      	beq.n	80025c6 <main+0x3da>
    	          printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	4619      	mov	r1, r3
 80025c0:	4825      	ldr	r0, [pc, #148]	; (8002658 <main+0x46c>)
 80025c2:	f006 febf 	bl	8009344 <iprintf>
    	        }
    	       printf("enable AGC \n");
 80025c6:	4825      	ldr	r0, [pc, #148]	; (800265c <main+0x470>)
 80025c8:	f006 ff42 	bl	8009450 <puts>



    	    /*enable the sensor*/
    	    buf[0] = 0x44;
 80025cc:	f107 0308 	add.w	r3, r7, #8
 80025d0:	2244      	movs	r2, #68	; 0x44
 80025d2:	701a      	strb	r2, [r3, #0]
    	    buf[1] = 0x03;
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	2203      	movs	r2, #3
 80025da:	705a      	strb	r2, [r3, #1]
    	    buf[2] = 0x1;
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	2201      	movs	r2, #1
 80025e2:	709a      	strb	r2, [r3, #2]
    	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80025e4:	f107 0208 	add.w	r2, r7, #8
 80025e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2303      	movs	r3, #3
 80025f0:	21aa      	movs	r1, #170	; 0xaa
 80025f2:	4811      	ldr	r0, [pc, #68]	; (8002638 <main+0x44c>)
 80025f4:	f001 fe7c 	bl	80042f0 <HAL_I2C_Master_Transmit>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	    HAL_Delay(45);
 80025fe:	202d      	movs	r0, #45	; 0x2d
 8002600:	f001 fae4 	bl	8003bcc <HAL_Delay>
    	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	f241 3388 	movw	r3, #5000	; 0x1388
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2301      	movs	r3, #1
 8002610:	21ab      	movs	r1, #171	; 0xab
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <main+0x44c>)
 8002614:	f001 ff60 	bl	80044d8 <HAL_I2C_Master_Receive>
 8002618:	4603      	mov	r3, r0
 800261a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	      if(buf[0] != 0x00 || ret != HAL_OK ){
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11f      	bne.n	8002668 <main+0x47c>
 8002628:	e01a      	b.n	8002660 <main+0x474>
 800262a:	bf00      	nop
 800262c:	0800d3e0 	.word	0x0800d3e0
 8002630:	0800d71c 	.word	0x0800d71c
 8002634:	0800d720 	.word	0x0800d720
 8002638:	20000744 	.word	0x20000744
 800263c:	48000c00 	.word	0x48000c00
 8002640:	0800d3f8 	.word	0x0800d3f8
 8002644:	0800d420 	.word	0x0800d420
 8002648:	0800d440 	.word	0x0800d440
 800264c:	0800d454 	.word	0x0800d454
 8002650:	0800d470 	.word	0x0800d470
 8002654:	0800d498 	.word	0x0800d498
 8002658:	0800d4a4 	.word	0x0800d4a4
 800265c:	0800d4c8 	.word	0x0800d4c8
 8002660:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002664:	2b00      	cmp	r3, #0
 8002666:	d006      	beq.n	8002676 <main+0x48a>
    	        printf("Error enabling sensor code: %x\n\r", buf[0]);
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4619      	mov	r1, r3
 8002670:	4881      	ldr	r0, [pc, #516]	; (8002878 <main+0x68c>)
 8002672:	f006 fe67 	bl	8009344 <iprintf>
    	      }
    	      printf("sensor set\n");
 8002676:	4881      	ldr	r0, [pc, #516]	; (800287c <main+0x690>)
 8002678:	f006 feea 	bl	8009450 <puts>


    	    /*enable the algorithm*/

    	      HAL_Delay(500);
 800267c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002680:	f001 faa4 	bl	8003bcc <HAL_Delay>
    	    buf[0] = 0x52;
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	2252      	movs	r2, #82	; 0x52
 800268a:	701a      	strb	r2, [r3, #0]
    	    buf[1] = 0x02;
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	2202      	movs	r2, #2
 8002692:	705a      	strb	r2, [r3, #1]
    	    buf[2] = 0x1;
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	2201      	movs	r2, #1
 800269a:	709a      	strb	r2, [r3, #2]
    	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800269c:	f107 0208 	add.w	r2, r7, #8
 80026a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2303      	movs	r3, #3
 80026a8:	21aa      	movs	r1, #170	; 0xaa
 80026aa:	4875      	ldr	r0, [pc, #468]	; (8002880 <main+0x694>)
 80026ac:	f001 fe20 	bl	80042f0 <HAL_I2C_Master_Transmit>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    	    HAL_Delay(45);
 80026b6:	202d      	movs	r0, #45	; 0x2d
 80026b8:	f001 fa88 	bl	8003bcc <HAL_Delay>
    	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80026bc:	f107 0208 	add.w	r2, r7, #8
 80026c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2301      	movs	r3, #1
 80026c8:	21ab      	movs	r1, #171	; 0xab
 80026ca:	486d      	ldr	r0, [pc, #436]	; (8002880 <main+0x694>)
 80026cc:	f001 ff04 	bl	80044d8 <HAL_I2C_Master_Receive>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    	      if(buf[0] != 0x00 || ret != HAL_OK ){
 80026d6:	f107 0308 	add.w	r3, r7, #8
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <main+0x4fc>
 80026e0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <main+0x50a>
    	        printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	4864      	ldr	r0, [pc, #400]	; (8002884 <main+0x698>)
 80026f2:	f006 fe27 	bl	8009344 <iprintf>
    	      }
    	      printf("enable algorithm \n");
 80026f6:	4864      	ldr	r0, [pc, #400]	; (8002888 <main+0x69c>)
 80026f8:	f006 feaa 	bl	8009450 <puts>


    	    //setting LED 2 amplitude
    	    buf[0] = 0x40;
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	2240      	movs	r2, #64	; 0x40
 8002702:	701a      	strb	r2, [r3, #0]
    		buf[1] = 0x03;
 8002704:	f107 0308 	add.w	r3, r7, #8
 8002708:	2203      	movs	r2, #3
 800270a:	705a      	strb	r2, [r3, #1]
    		buf[2] = 0x0D;
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	220d      	movs	r2, #13
 8002712:	709a      	strb	r2, [r3, #2]
    		buf[3] = 0x7F;
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	227f      	movs	r2, #127	; 0x7f
 800271a:	70da      	strb	r2, [r3, #3]
    		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 800271c:	f107 0208 	add.w	r2, r7, #8
 8002720:	f241 3388 	movw	r3, #5000	; 0x1388
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2304      	movs	r3, #4
 8002728:	21aa      	movs	r1, #170	; 0xaa
 800272a:	4855      	ldr	r0, [pc, #340]	; (8002880 <main+0x694>)
 800272c:	f001 fde0 	bl	80042f0 <HAL_I2C_Master_Transmit>
 8002730:	4603      	mov	r3, r0
 8002732:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    		HAL_Delay(45);
 8002736:	202d      	movs	r0, #45	; 0x2d
 8002738:	f001 fa48 	bl	8003bcc <HAL_Delay>
    		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800273c:	f107 0208 	add.w	r2, r7, #8
 8002740:	f241 3388 	movw	r3, #5000	; 0x1388
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2301      	movs	r3, #1
 8002748:	21ab      	movs	r1, #171	; 0xab
 800274a:	484d      	ldr	r0, [pc, #308]	; (8002880 <main+0x694>)
 800274c:	f001 fec4 	bl	80044d8 <HAL_I2C_Master_Receive>
 8002750:	4603      	mov	r3, r0
 8002752:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    		  if(buf[0] != 0x00 || ret != HAL_OK ){
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d103      	bne.n	8002768 <main+0x57c>
 8002760:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <main+0x58a>
    			printf("Error Changing LED2: %x\n\r", buf[0]);
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	4619      	mov	r1, r3
 8002770:	4846      	ldr	r0, [pc, #280]	; (800288c <main+0x6a0>)
 8002772:	f006 fde7 	bl	8009344 <iprintf>
    		  }
    		  printf("modified LED2 amplitude \n");
 8002776:	4846      	ldr	r0, [pc, #280]	; (8002890 <main+0x6a4>)
 8002778:	f006 fe6a 	bl	8009450 <puts>


    		  //setting LED 1 amplitude
    		buf[0] = 0x40;
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	2240      	movs	r2, #64	; 0x40
 8002782:	701a      	strb	r2, [r3, #0]
    		buf[1] = 0x03;
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	2203      	movs	r2, #3
 800278a:	705a      	strb	r2, [r3, #1]
    		buf[2] = 0x0C;
 800278c:	f107 0308 	add.w	r3, r7, #8
 8002790:	220c      	movs	r2, #12
 8002792:	709a      	strb	r2, [r3, #2]
    		buf[3] = 0x7F;
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	227f      	movs	r2, #127	; 0x7f
 800279a:	70da      	strb	r2, [r3, #3]
    		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 800279c:	f107 0208 	add.w	r2, r7, #8
 80027a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2304      	movs	r3, #4
 80027a8:	21aa      	movs	r1, #170	; 0xaa
 80027aa:	4835      	ldr	r0, [pc, #212]	; (8002880 <main+0x694>)
 80027ac:	f001 fda0 	bl	80042f0 <HAL_I2C_Master_Transmit>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    		HAL_Delay(45);
 80027b6:	202d      	movs	r0, #45	; 0x2d
 80027b8:	f001 fa08 	bl	8003bcc <HAL_Delay>
    		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	21ab      	movs	r1, #171	; 0xab
 80027ca:	482d      	ldr	r0, [pc, #180]	; (8002880 <main+0x694>)
 80027cc:	f001 fe84 	bl	80044d8 <HAL_I2C_Master_Receive>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    		  if(buf[0] != 0x00 || ret != HAL_OK ){
 80027d6:	f107 0308 	add.w	r3, r7, #8
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <main+0x5fc>
 80027e0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <main+0x60a>
    			printf("Error Changing LED1: %x\n\r", buf[0]);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4828      	ldr	r0, [pc, #160]	; (8002894 <main+0x6a8>)
 80027f2:	f006 fda7 	bl	8009344 <iprintf>
    		  }
    		  printf("modified LED1 amplitude \n");
 80027f6:	4828      	ldr	r0, [pc, #160]	; (8002898 <main+0x6ac>)
 80027f8:	f006 fe2a 	bl	8009450 <puts>





	    HAL_Delay(1000);
 80027fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002800:	f001 f9e4 	bl	8003bcc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fall_detected = 0;
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <main+0x6b0>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800280a:	2104      	movs	r1, #4
 800280c:	4824      	ldr	r0, [pc, #144]	; (80028a0 <main+0x6b4>)
 800280e:	f003 ffe5 	bl	80067dc <HAL_TIM_PWM_Start>
  SetupMPU();
 8002812:	f7ff fa51 	bl	8001cb8 <SetupMPU>
  TIM4->CCR2 = 0;
 8002816:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <main+0x6b8>)
 8002818:	2200      	movs	r2, #0
 800281a:	639a      	str	r2, [r3, #56]	; 0x38

  // Initialized at the beginning of the program.
  float latitude = 0.0;
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  float longitude = 0.0;
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

  // NVIC_EnableIRQ(EXTI4_IRQn);
    while(1)
        {
        if (fall_detected)
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <main+0x6b0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0fb      	beq.n	800282c <main+0x640>
            {
            MPUSleep(); /* turn off MPU */
 8002834:	f7ff fa4e 	bl	8001cd4 <MPUSleep>
            Beep_sos(); /* 30 sec */
 8002838:	f7ff fc2a 	bl	8002090 <Beep_sos>
            Beep_sendmsg_warning(); /* 3 sec */
 800283c:	f7ff fc86 	bl	800214c <Beep_sendmsg_warning>
            // read biometric sensor
            buf[0] = 0x12;
 8002840:	f107 0308 	add.w	r3, r7, #8
 8002844:	2212      	movs	r2, #18
 8002846:	701a      	strb	r2, [r3, #0]
            buf[1] = 0x01;
 8002848:	f107 0308 	add.w	r3, r7, #8
 800284c:	2201      	movs	r2, #1
 800284e:	705a      	strb	r2, [r3, #1]

            int heart_rate = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            int heart_rate_count = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            float blood_oxygen = 0;
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            int blood_oxygen_count = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
            int status = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

            for(int i = 0; i < 100; ++i){
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002876:	e107      	b.n	8002a88 <main+0x89c>
 8002878:	0800d4d4 	.word	0x0800d4d4
 800287c:	0800d4f8 	.word	0x0800d4f8
 8002880:	20000744 	.word	0x20000744
 8002884:	0800d4a4 	.word	0x0800d4a4
 8002888:	0800d504 	.word	0x0800d504
 800288c:	0800d518 	.word	0x0800d518
 8002890:	0800d534 	.word	0x0800d534
 8002894:	0800d550 	.word	0x0800d550
 8002898:	0800d56c 	.word	0x0800d56c
 800289c:	200005fc 	.word	0x200005fc
 80028a0:	20000668 	.word	0x20000668
 80028a4:	40000800 	.word	0x40000800
            	buf[0] = 0x00;
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
            	buf[1] = 0x00;
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	2200      	movs	r2, #0
 80028b6:	705a      	strb	r2, [r3, #1]
            	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 80028b8:	f107 0208 	add.w	r2, r7, #8
 80028bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2302      	movs	r3, #2
 80028c4:	21aa      	movs	r1, #170	; 0xaa
 80028c6:	48c6      	ldr	r0, [pc, #792]	; (8002be0 <main+0x9f4>)
 80028c8:	f001 fd12 	bl	80042f0 <HAL_I2C_Master_Transmit>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					  HAL_Delay(6);
 80028d2:	2006      	movs	r0, #6
 80028d4:	f001 f97a 	bl	8003bcc <HAL_Delay>
					  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 80028d8:	f107 0208 	add.w	r2, r7, #8
 80028dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2302      	movs	r3, #2
 80028e4:	21ab      	movs	r1, #171	; 0xab
 80028e6:	48be      	ldr	r0, [pc, #760]	; (8002be0 <main+0x9f4>)
 80028e8:	f001 fdf6 	bl	80044d8 <HAL_I2C_Master_Receive>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
				printf("status: %d %d \n",buf[0], buf[1]);
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f107 0308 	add.w	r3, r7, #8
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	461a      	mov	r2, r3
 8002902:	48b8      	ldr	r0, [pc, #736]	; (8002be4 <main+0x9f8>)
 8002904:	f006 fd1e 	bl	8009344 <iprintf>

				buf[0] = 0x12;
 8002908:	f107 0308 	add.w	r3, r7, #8
 800290c:	2212      	movs	r2, #18
 800290e:	701a      	strb	r2, [r3, #0]
				buf[1] = 0x01;
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	2201      	movs	r2, #1
 8002916:	705a      	strb	r2, [r3, #1]
            	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8002918:	f107 0208 	add.w	r2, r7, #8
 800291c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2302      	movs	r3, #2
 8002924:	21aa      	movs	r1, #170	; 0xaa
 8002926:	48ae      	ldr	r0, [pc, #696]	; (8002be0 <main+0x9f4>)
 8002928:	f001 fce2 	bl	80042f0 <HAL_I2C_Master_Transmit>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
				  HAL_Delay(6);
 8002932:	2006      	movs	r0, #6
 8002934:	f001 f94a 	bl	8003bcc <HAL_Delay>
				  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 10, 5000);
 8002938:	f107 0208 	add.w	r2, r7, #8
 800293c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	230a      	movs	r3, #10
 8002944:	21ab      	movs	r1, #171	; 0xab
 8002946:	48a6      	ldr	r0, [pc, #664]	; (8002be0 <main+0x9f4>)
 8002948:	f001 fdc6 	bl	80044d8 <HAL_I2C_Master_Receive>
 800294c:	4603      	mov	r3, r0
 800294e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
				  printf("error code: %d ", buf[0]);
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	48a3      	ldr	r0, [pc, #652]	; (8002be8 <main+0x9fc>)
 800295c:	f006 fcf2 	bl	8009344 <iprintf>
				  int heartRate = ((buf[1]) << 8);
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				  printf("data: %d %d %d %d\n", buf[1], buf[2], buf[3], buf[6]);
 800296c:	f107 0308 	add.w	r3, r7, #8
 8002970:	785b      	ldrb	r3, [r3, #1]
 8002972:	4619      	mov	r1, r3
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	789b      	ldrb	r3, [r3, #2]
 800297a:	461a      	mov	r2, r3
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	78db      	ldrb	r3, [r3, #3]
 8002982:	4618      	mov	r0, r3
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	799b      	ldrb	r3, [r3, #6]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4603      	mov	r3, r0
 800298e:	4897      	ldr	r0, [pc, #604]	; (8002bec <main+0xa00>)
 8002990:	f006 fcd8 	bl	8009344 <iprintf>
				  heartRate |= (buf[2]);
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	789b      	ldrb	r3, [r3, #2]
 800299a:	461a      	mov	r2, r3
 800299c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				  heartRate = heartRate/10;
 80029a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029aa:	4a91      	ldr	r2, [pc, #580]	; (8002bf0 <main+0xa04>)
 80029ac:	fb82 1203 	smull	r1, r2, r2, r3
 80029b0:	1092      	asrs	r2, r2, #2
 80029b2:	17db      	asrs	r3, r3, #31
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				  heart_rate += heartRate;
 80029ba:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80029be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029c2:	4413      	add	r3, r2
 80029c4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
				  if(heartRate != 0){
 80029c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <main+0x7ee>
					  heart_rate_count += 1;
 80029d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029d4:	3301      	adds	r3, #1
 80029d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				  }

				  // Confidence formatting
				  int confidence = buf[3];
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	78db      	ldrb	r3, [r3, #3]
 80029e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

				  //Blood oxygen level formatting
				  int oxygen = (buf[4]) << 8;
 80029e4:	f107 0308 	add.w	r3, r7, #8
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				  oxygen += buf[5];
 80029f0:	f107 0308 	add.w	r3, r7, #8
 80029f4:	795b      	ldrb	r3, [r3, #5]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029fc:	4413      	add	r3, r2
 80029fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				  blood_oxygen += oxygen/10.0;
 8002a02:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8002a06:	f7fd fdc7 	bl	8000598 <__aeabi_f2d>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002a12:	f7fd fdaf 	bl	8000574 <__aeabi_i2d>
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <main+0xa08>)
 8002a1c:	f7fd ff3e 	bl	800089c <__aeabi_ddiv>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4620      	mov	r0, r4
 8002a26:	4629      	mov	r1, r5
 8002a28:	f7fd fc58 	bl	80002dc <__adddf3>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7fe f900 	bl	8000c38 <__aeabi_d2f>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

				  if(blood_oxygen != 0){
 8002a3e:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8002a42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	d004      	beq.n	8002a56 <main+0x86a>
					  blood_oxygen_count += 1;
 8002a4c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002a50:	3301      	adds	r3, #1
 8002a52:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
					}

				  //"Machine State" - has a finger been detected?

				  status = buf[6];
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	799b      	ldrb	r3, [r3, #6]
 8002a5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
				  printf( "heartrate: %d, status: %d, blood_oxygen %d, confidence: %d\n\r", heartRate, status, oxygen, confidence );
 8002a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002a6a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002a6e:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002a72:	4861      	ldr	r0, [pc, #388]	; (8002bf8 <main+0xa0c>)
 8002a74:	f006 fc66 	bl	8009344 <iprintf>

				  HAL_Delay(100);
 8002a78:	2064      	movs	r0, #100	; 0x64
 8002a7a:	f001 f8a7 	bl	8003bcc <HAL_Delay>
            for(int i = 0; i < 100; ++i){
 8002a7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002a88:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002a8c:	2b63      	cmp	r3, #99	; 0x63
 8002a8e:	f77f af0b 	ble.w	80028a8 <main+0x6bc>
            } // end for
            if (heart_rate_count!=0){
 8002a92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <main+0x8be>
            heart_rate = heart_rate/heart_rate_count;
 8002a9a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002a9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002aa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002aa6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            }

            if (blood_oxygen_count!=0){
 8002aaa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <main+0x8de>
            blood_oxygen = blood_oxygen/blood_oxygen_count;
 8002ab2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ab6:	ee07 3a90 	vmov	s15, r3
 8002aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002abe:	edd7 6a55 	vldr	s13, [r7, #340]	; 0x154
 8002ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac6:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
            }
            //get GPS


            for(int i = 0; i<10; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ad0:	e023      	b.n	8002b1a <main+0x92e>
                {
            	  float lat = 0;
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
            	  float lon= 0;
 8002ada:	463b      	mov	r3, r7
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
            	  if ( !gGPS( &cell, &lat, &lon ) )
 8002ae2:	463a      	mov	r2, r7
 8002ae4:	1d39      	adds	r1, r7, #4
 8002ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fe54 	bl	8001798 <gGPS>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <main+0x912>
                    {
					printf( "GPS read has failed \n\t");
 8002af6:	4841      	ldr	r0, [pc, #260]	; (8002bfc <main+0xa10>)
 8002af8:	f006 fc24 	bl	8009344 <iprintf>
 8002afc:	e008      	b.n	8002b10 <main+0x924>
				    } // end if
                  else
                    {
                	latitude = lat;
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
				    longitude = lon;
 8002b06:	463b      	mov	r3, r7
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
				    break;
 8002b0e:	e008      	b.n	8002b22 <main+0x936>
            for(int i = 0; i<10; i++)
 8002b10:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	ddd7      	ble.n	8002ad2 <main+0x8e6>
			        } // end else
			     } // for
            printf("status: %d", status);
 8002b22:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8002b26:	4836      	ldr	r0, [pc, #216]	; (8002c00 <main+0xa14>)
 8002b28:	f006 fc0c 	bl	8009344 <iprintf>

            if(status != 3){
 8002b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d01e      	beq.n	8002b72 <main+0x986>
            	sprintf(message_buffer, "SOS! Injured at %f latitude %f longitude. Finger is off the sensor! measured: heart rate: %d blood oxygen: %d", latitude, longitude, heart_rate, (int)blood_oxygen);
 8002b34:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8002b38:	f7fd fd2e 	bl	8000598 <__aeabi_f2d>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8002b44:	f7fd fd28 	bl	8000598 <__aeabi_f2d>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8002b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b54:	ee17 1a90 	vmov	r1, s15
 8002b58:	9103      	str	r1, [sp, #12]
 8002b5a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8002b5e:	9102      	str	r1, [sp, #8]
 8002b60:	e9cd 2300 	strd	r2, r3, [sp]
 8002b64:	4622      	mov	r2, r4
 8002b66:	462b      	mov	r3, r5
 8002b68:	4926      	ldr	r1, [pc, #152]	; (8002c04 <main+0xa18>)
 8002b6a:	4827      	ldr	r0, [pc, #156]	; (8002c08 <main+0xa1c>)
 8002b6c:	f006 fc88 	bl	8009480 <siprintf>
 8002b70:	e01d      	b.n	8002bae <main+0x9c2>
            }
            else{
            	sprintf(message_buffer, "SOS! Injured at %f latitude %f longitude. Heart rate: %d blood oxygen: %d", latitude, longitude, heart_rate, (int)blood_oxygen);
 8002b72:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8002b76:	f7fd fd0f 	bl	8000598 <__aeabi_f2d>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8002b82:	f7fd fd09 	bl	8000598 <__aeabi_f2d>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8002b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b92:	ee17 1a90 	vmov	r1, s15
 8002b96:	9103      	str	r1, [sp, #12]
 8002b98:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8002b9c:	9102      	str	r1, [sp, #8]
 8002b9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	4919      	ldr	r1, [pc, #100]	; (8002c0c <main+0xa20>)
 8002ba8:	4817      	ldr	r0, [pc, #92]	; (8002c08 <main+0xa1c>)
 8002baa:	f006 fc69 	bl	8009480 <siprintf>
            }


            // send out message
            printf( "Here's the sos message: %s\n\r", message_buffer );
 8002bae:	4916      	ldr	r1, [pc, #88]	; (8002c08 <main+0xa1c>)
 8002bb0:	4817      	ldr	r0, [pc, #92]	; (8002c10 <main+0xa24>)
 8002bb2:	f006 fbc7 	bl	8009344 <iprintf>
            HAL_Delay( 1000 );
 8002bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bba:	f001 f807 	bl	8003bcc <HAL_Delay>
            sendSMS( &cell, message_buffer );
 8002bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc2:	4911      	ldr	r1, [pc, #68]	; (8002c08 <main+0xa1c>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fc95 	bl	80014f4 <sendSMS>
            fall_detected = 0;
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <main+0xa28>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
            SetupMPU(); /* reset MPU */
 8002bd0:	f7ff f872 	bl	8001cb8 <SetupMPU>
        if (fall_detected)
 8002bd4:	e62a      	b.n	800282c <main+0x640>
        } // end while
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdb0      	pop	{r4, r5, r7, pc}
 8002be0:	20000744 	.word	0x20000744
 8002be4:	0800d588 	.word	0x0800d588
 8002be8:	0800d598 	.word	0x0800d598
 8002bec:	0800d5a8 	.word	0x0800d5a8
 8002bf0:	66666667 	.word	0x66666667
 8002bf4:	40240000 	.word	0x40240000
 8002bf8:	0800d5bc 	.word	0x0800d5bc
 8002bfc:	0800d5fc 	.word	0x0800d5fc
 8002c00:	0800d614 	.word	0x0800d614
 8002c04:	0800d620 	.word	0x0800d620
 8002c08:	20000820 	.word	0x20000820
 8002c0c:	0800d690 	.word	0x0800d690
 8002c10:	0800d6dc 	.word	0x0800d6dc
 8002c14:	200005fc 	.word	0x200005fc

08002c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b096      	sub	sp, #88	; 0x58
 8002c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2244      	movs	r2, #68	; 0x44
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f005 fd16 	bl	8008658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c2c:	463b      	mov	r3, r7
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	60da      	str	r2, [r3, #12]
 8002c38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c3a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c3e:	f002 f871 	bl	8004d24 <HAL_PWREx_ControlVoltageScaling>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002c48:	f000 fc0a 	bl	8003460 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c50:	2301      	movs	r3, #1
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c58:	2360      	movs	r3, #96	; 0x60
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 f911 	bl	8004e8c <HAL_RCC_OscConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002c70:	f000 fbf6 	bl	8003460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c74:	230f      	movs	r3, #15
 8002c76:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c88:	463b      	mov	r3, r7
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f002 fd23 	bl	80056d8 <HAL_RCC_ClockConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002c98:	f000 fbe2 	bl	8003460 <Error_Handler>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3758      	adds	r7, #88	; 0x58
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002caa:	4a1c      	ldr	r2, [pc, #112]	; (8002d1c <MX_I2C1_Init+0x78>)
 8002cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cb0:	f640 6214 	movw	r2, #3604	; 0xe14
 8002cb4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002cb6:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cda:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ce0:	480d      	ldr	r0, [pc, #52]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002ce2:	f001 fa76 	bl	80041d2 <HAL_I2C_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002cec:	f000 fbb8 	bl	8003460 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4809      	ldr	r0, [pc, #36]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002cf4:	f001 ff5e 	bl	8004bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002cfe:	f000 fbaf 	bl	8003460 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d02:	2100      	movs	r1, #0
 8002d04:	4804      	ldr	r0, [pc, #16]	; (8002d18 <MX_I2C1_Init+0x74>)
 8002d06:	f001 ffa0 	bl	8004c4a <HAL_I2CEx_ConfigDigitalFilter>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002d10:	f000 fba6 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000744 	.word	0x20000744
 8002d1c:	40005400 	.word	0x40005400

08002d20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d26:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <MX_I2C3_Init+0x78>)
 8002d28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d2c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002d30:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d50:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002d5c:	480d      	ldr	r0, [pc, #52]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d5e:	f001 fa38 	bl	80041d2 <HAL_I2C_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002d68:	f000 fb7a 	bl	8003460 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4809      	ldr	r0, [pc, #36]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d70:	f001 ff20 	bl	8004bb4 <HAL_I2CEx_ConfigAnalogFilter>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002d7a:	f000 fb71 	bl	8003460 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4804      	ldr	r0, [pc, #16]	; (8002d94 <MX_I2C3_Init+0x74>)
 8002d82:	f001 ff62 	bl	8004c4a <HAL_I2CEx_ConfigDigitalFilter>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002d8c:	f000 fb68 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002d90:	bf00      	nop
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	2000061c 	.word	0x2000061c
 8002d98:	40005c00 	.word	0x40005c00

08002d9c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002da2:	4a23      	ldr	r2, [pc, #140]	; (8002e30 <MX_LPUART1_UART_Init+0x94>)
 8002da4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dac:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dae:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002dc2:	220c      	movs	r2, #12
 8002dc4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dcc:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002dde:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002de4:	4811      	ldr	r0, [pc, #68]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002de6:	f004 fc95 	bl	8007714 <HAL_UART_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002df0:	f000 fb36 	bl	8003460 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002df4:	2100      	movs	r1, #0
 8002df6:	480d      	ldr	r0, [pc, #52]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002df8:	f005 fafe 	bl	80083f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e02:	f000 fb2d 	bl	8003460 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e06:	2100      	movs	r1, #0
 8002e08:	4808      	ldr	r0, [pc, #32]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002e0a:	f005 fb33 	bl	8008474 <HAL_UARTEx_SetRxFifoThreshold>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e14:	f000 fb24 	bl	8003460 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002e18:	4804      	ldr	r0, [pc, #16]	; (8002e2c <MX_LPUART1_UART_Init+0x90>)
 8002e1a:	f005 fab4 	bl	8008386 <HAL_UARTEx_DisableFifoMode>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e24:	f000 fb1c 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000790 	.word	0x20000790
 8002e30:	40008000 	.word	0x40008000

08002e34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e38:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e3a:	4a23      	ldr	r2, [pc, #140]	; (8002ec8 <MX_USART3_UART_Init+0x94>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e7c:	4811      	ldr	r0, [pc, #68]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e7e:	f004 fc49 	bl	8007714 <HAL_UART_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e88:	f000 faea 	bl	8003460 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002e90:	f005 fab2 	bl	80083f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e9a:	f000 fae1 	bl	8003460 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002ea2:	f005 fae7 	bl	8008474 <HAL_UARTEx_SetRxFifoThreshold>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002eac:	f000 fad8 	bl	8003460 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002eb0:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <MX_USART3_UART_Init+0x90>)
 8002eb2:	f005 fa68 	bl	8008386 <HAL_UARTEx_DisableFifoMode>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ebc:	f000 fad0 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	200006b4 	.word	0x200006b4
 8002ec8:	40004800 	.word	0x40004800

08002ecc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eec:	463b      	mov	r3, r7
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
 8002efa:	615a      	str	r2, [r3, #20]
 8002efc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f00:	4a2d      	ldr	r2, [pc, #180]	; (8002fb8 <MX_TIM4_Init+0xec>)
 8002f02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f12:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f24:	4823      	ldr	r0, [pc, #140]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f26:	f003 fba1 	bl	800666c <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002f30:	f000 fa96 	bl	8003460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481c      	ldr	r0, [pc, #112]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f42:	f003 fe65 	bl	8006c10 <HAL_TIM_ConfigClockSource>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002f4c:	f000 fa88 	bl	8003460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f50:	4818      	ldr	r0, [pc, #96]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f52:	f003 fbe2 	bl	800671a <HAL_TIM_PWM_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002f5c:	f000 fa80 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f70:	f004 fb48 	bl	8007604 <HAL_TIMEx_MasterConfigSynchronization>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002f7a:	f000 fa71 	bl	8003460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7e:	2360      	movs	r3, #96	; 0x60
 8002f80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f90:	463b      	mov	r3, r7
 8002f92:	2204      	movs	r2, #4
 8002f94:	4619      	mov	r1, r3
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002f98:	f003 fd26 	bl	80069e8 <HAL_TIM_PWM_ConfigChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002fa2:	f000 fa5d 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002fa6:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <MX_TIM4_Init+0xe8>)
 8002fa8:	f000 fc30 	bl	800380c <HAL_TIM_MspPostInit>

}
 8002fac:	bf00      	nop
 8002fae:	3738      	adds	r7, #56	; 0x38
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000668 	.word	0x20000668
 8002fb8:	40000800 	.word	0x40000800

08002fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fd2:	4bb3      	ldr	r3, [pc, #716]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	4ab2      	ldr	r2, [pc, #712]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8002fd8:	f043 0310 	orr.w	r3, r3, #16
 8002fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fde:	4bb0      	ldr	r3, [pc, #704]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	4bad      	ldr	r3, [pc, #692]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4aac      	ldr	r2, [pc, #688]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff6:	4baa      	ldr	r3, [pc, #680]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003002:	4ba7      	ldr	r3, [pc, #668]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4aa6      	ldr	r2, [pc, #664]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003008:	f043 0320 	orr.w	r3, r3, #32
 800300c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300e:	4ba4      	ldr	r3, [pc, #656]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800301a:	4ba1      	ldr	r3, [pc, #644]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4aa0      	ldr	r2, [pc, #640]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003026:	4b9e      	ldr	r3, [pc, #632]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	4b9b      	ldr	r3, [pc, #620]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4a9a      	ldr	r2, [pc, #616]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800303e:	4b98      	ldr	r3, [pc, #608]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	613b      	str	r3, [r7, #16]
 8003048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	4b95      	ldr	r3, [pc, #596]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	4a94      	ldr	r2, [pc, #592]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003056:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003062:	4b8f      	ldr	r3, [pc, #572]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	4a8e      	ldr	r2, [pc, #568]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800306e:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800307a:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4a88      	ldr	r2, [pc, #544]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003086:	4b86      	ldr	r3, [pc, #536]	; (80032a0 <MX_GPIO_Init+0x2e4>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8003092:	f001 feeb 	bl	8004e6c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8003096:	2200      	movs	r2, #0
 8003098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800309c:	4881      	ldr	r0, [pc, #516]	; (80032a4 <MX_GPIO_Init+0x2e8>)
 800309e:	f001 f85d 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80030a2:	2200      	movs	r2, #0
 80030a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a8:	487f      	ldr	r0, [pc, #508]	; (80032a8 <MX_GPIO_Init+0x2ec>)
 80030aa:	f001 f857 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2103      	movs	r1, #3
 80030b2:	487e      	ldr	r0, [pc, #504]	; (80032ac <MX_GPIO_Init+0x2f0>)
 80030b4:	f001 f852 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030b8:	230c      	movs	r3, #12
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80030c8:	230d      	movs	r3, #13
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030d0:	4619      	mov	r1, r3
 80030d2:	4875      	ldr	r0, [pc, #468]	; (80032a8 <MX_GPIO_Init+0x2ec>)
 80030d4:	f000 feb0 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80030d8:	2307      	movs	r3, #7
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030dc:	2312      	movs	r3, #18
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030e8:	2304      	movs	r3, #4
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f0:	4619      	mov	r1, r3
 80030f2:	486c      	ldr	r0, [pc, #432]	; (80032a4 <MX_GPIO_Init+0x2e8>)
 80030f4:	f000 fea0 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003108:	230d      	movs	r3, #13
 800310a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	4864      	ldr	r0, [pc, #400]	; (80032a4 <MX_GPIO_Init+0x2e8>)
 8003114:	f000 fe90 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003118:	233c      	movs	r3, #60	; 0x3c
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800311c:	230b      	movs	r3, #11
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4861      	ldr	r0, [pc, #388]	; (80032b0 <MX_GPIO_Init+0x2f4>)
 800312c:	f000 fe84 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003130:	2301      	movs	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003140:	2301      	movs	r3, #1
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003148:	4619      	mov	r1, r3
 800314a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314e:	f000 fe73 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8003152:	230a      	movs	r3, #10
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003156:	230b      	movs	r3, #11
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003162:	4619      	mov	r1, r3
 8003164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003168:	f000 fe66 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800316c:	23f0      	movs	r3, #240	; 0xf0
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800317c:	2305      	movs	r3, #5
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800318a:	f000 fe55 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800318e:	2301      	movs	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319a:	2300      	movs	r3, #0
 800319c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800319e:	2302      	movs	r3, #2
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a6:	4619      	mov	r1, r3
 80031a8:	4842      	ldr	r0, [pc, #264]	; (80032b4 <MX_GPIO_Init+0x2f8>)
 80031aa:	f000 fe45 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031ae:	2302      	movs	r3, #2
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031b2:	230b      	movs	r3, #11
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031be:	4619      	mov	r1, r3
 80031c0:	483c      	ldr	r0, [pc, #240]	; (80032b4 <MX_GPIO_Init+0x2f8>)
 80031c2:	f000 fe39 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80031c6:	2344      	movs	r3, #68	; 0x44
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ca:	2303      	movs	r3, #3
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d6:	4619      	mov	r1, r3
 80031d8:	4836      	ldr	r0, [pc, #216]	; (80032b4 <MX_GPIO_Init+0x2f8>)
 80031da:	f000 fe2d 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f4:	4619      	mov	r1, r3
 80031f6:	482b      	ldr	r0, [pc, #172]	; (80032a4 <MX_GPIO_Init+0x2e8>)
 80031f8:	f000 fe1e 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 80031fc:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800320e:	2301      	movs	r3, #1
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003216:	4619      	mov	r1, r3
 8003218:	4823      	ldr	r0, [pc, #140]	; (80032a8 <MX_GPIO_Init+0x2ec>)
 800321a:	f000 fe0d 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800321e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003224:	2301      	movs	r3, #1
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	4619      	mov	r1, r3
 8003236:	481c      	ldr	r0, [pc, #112]	; (80032a8 <MX_GPIO_Init+0x2ec>)
 8003238:	f000 fdfe 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800323c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800324e:	2303      	movs	r3, #3
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003256:	4619      	mov	r1, r3
 8003258:	4813      	ldr	r0, [pc, #76]	; (80032a8 <MX_GPIO_Init+0x2ec>)
 800325a:	f000 fded 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800325e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003270:	2301      	movs	r3, #1
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003278:	4619      	mov	r1, r3
 800327a:	480e      	ldr	r0, [pc, #56]	; (80032b4 <MX_GPIO_Init+0x2f8>)
 800327c:	f000 fddc 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003280:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8003292:	230d      	movs	r3, #13
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	e00c      	b.n	80032b8 <MX_GPIO_Init+0x2fc>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	48001400 	.word	0x48001400
 80032a8:	48001000 	.word	0x48001000
 80032ac:	48000c00 	.word	0x48000c00
 80032b0:	48000800 	.word	0x48000800
 80032b4:	48000400 	.word	0x48000400
 80032b8:	485d      	ldr	r0, [pc, #372]	; (8003430 <MX_GPIO_Init+0x474>)
 80032ba:	f000 fdbd 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80032d0:	230e      	movs	r3, #14
 80032d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	4619      	mov	r1, r3
 80032da:	4855      	ldr	r0, [pc, #340]	; (8003430 <MX_GPIO_Init+0x474>)
 80032dc:	f000 fdac 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032e0:	2340      	movs	r3, #64	; 0x40
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80032f0:	230d      	movs	r3, #13
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f8:	4619      	mov	r1, r3
 80032fa:	484e      	ldr	r0, [pc, #312]	; (8003434 <MX_GPIO_Init+0x478>)
 80032fc:	f000 fd9c 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003310:	2302      	movs	r3, #2
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003318:	4619      	mov	r1, r3
 800331a:	4846      	ldr	r0, [pc, #280]	; (8003434 <MX_GPIO_Init+0x478>)
 800331c:	f000 fd8c 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003320:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003332:	230c      	movs	r3, #12
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333a:	4619      	mov	r1, r3
 800333c:	483d      	ldr	r0, [pc, #244]	; (8003434 <MX_GPIO_Init+0x478>)
 800333e:	f000 fd7b 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8003342:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003354:	230a      	movs	r3, #10
 8003356:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335c:	4619      	mov	r1, r3
 800335e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003362:	f000 fd69 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003378:	4619      	mov	r1, r3
 800337a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800337e:	f000 fd5b 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003382:	2303      	movs	r3, #3
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003396:	4619      	mov	r1, r3
 8003398:	4827      	ldr	r0, [pc, #156]	; (8003438 <MX_GPIO_Init+0x47c>)
 800339a:	f000 fd4d 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800339e:	2304      	movs	r3, #4
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80033ae:	230c      	movs	r3, #12
 80033b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033b6:	4619      	mov	r1, r3
 80033b8:	481f      	ldr	r0, [pc, #124]	; (8003438 <MX_GPIO_Init+0x47c>)
 80033ba:	f000 fd3d 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80033be:	2368      	movs	r3, #104	; 0x68
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033ce:	2307      	movs	r3, #7
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d6:	4619      	mov	r1, r3
 80033d8:	4817      	ldr	r0, [pc, #92]	; (8003438 <MX_GPIO_Init+0x47c>)
 80033da:	f000 fd2d 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033de:	2310      	movs	r3, #16
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f0:	4619      	mov	r1, r3
 80033f2:	4811      	ldr	r0, [pc, #68]	; (8003438 <MX_GPIO_Init+0x47c>)
 80033f4:	f000 fd20 	bl	8003e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80033f8:	2338      	movs	r3, #56	; 0x38
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003408:	2306      	movs	r3, #6
 800340a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003410:	4619      	mov	r1, r3
 8003412:	4807      	ldr	r0, [pc, #28]	; (8003430 <MX_GPIO_Init+0x474>)
 8003414:	f000 fd10 	bl	8003e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2100      	movs	r1, #0
 800341c:	200a      	movs	r0, #10
 800341e:	f000 fcd4 	bl	8003dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003422:	200a      	movs	r0, #10
 8003424:	f000 fced 	bl	8003e02 <HAL_NVIC_EnableIRQ>

}
 8003428:	bf00      	nop
 800342a:	3738      	adds	r7, #56	; 0x38
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	48000400 	.word	0x48000400
 8003434:	48000800 	.word	0x48000800
 8003438:	48000c00 	.word	0x48000c00

0800343c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8003444:	1d39      	adds	r1, r7, #4
 8003446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800344a:	2201      	movs	r2, #1
 800344c:	4803      	ldr	r0, [pc, #12]	; (800345c <__io_putchar+0x20>)
 800344e:	f004 f9b1 	bl	80077b4 <HAL_UART_Transmit>
  return ch;
 8003452:	687b      	ldr	r3, [r7, #4]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000790 	.word	0x20000790

08003460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003468:	e7fe      	b.n	8003468 <Error_Handler+0x8>
	...

0800346c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_MspInit+0x44>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_MspInit+0x44>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6613      	str	r3, [r2, #96]	; 0x60
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_MspInit+0x44>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_MspInit+0x44>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	4a08      	ldr	r2, [pc, #32]	; (80034b0 <HAL_MspInit+0x44>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_MspInit+0x44>)
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000

080034b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b0b0      	sub	sp, #192	; 0xc0
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034cc:	f107 0318 	add.w	r3, r7, #24
 80034d0:	2294      	movs	r2, #148	; 0x94
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f005 f8bf 	bl	8008658 <memset>
  if(hi2c->Instance==I2C1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_I2C_MspInit+0x134>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d13c      	bne.n	800355e <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034e4:	2340      	movs	r3, #64	; 0x40
 80034e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80034e8:	2300      	movs	r3, #0
 80034ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ec:	f107 0318 	add.w	r3, r7, #24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f002 fba3 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80034fc:	f7ff ffb0 	bl	8003460 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_I2C_MspInit+0x138>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_I2C_MspInit+0x138>)
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350c:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_I2C_MspInit+0x138>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800351c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003520:	2312      	movs	r3, #18
 8003522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352c:	2303      	movs	r3, #3
 800352e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003532:	2304      	movs	r3, #4
 8003534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003538:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800353c:	4619      	mov	r1, r3
 800353e:	482c      	ldr	r0, [pc, #176]	; (80035f0 <HAL_I2C_MspInit+0x13c>)
 8003540:	f000 fc7a 	bl	8003e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_I2C_MspInit+0x138>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_I2C_MspInit+0x138>)
 800354a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800354e:	6593      	str	r3, [r2, #88]	; 0x58
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_I2C_MspInit+0x138>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800355c:	e040      	b.n	80035e0 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <HAL_I2C_MspInit+0x140>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d13b      	bne.n	80035e0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800356c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800356e:	2300      	movs	r3, #0
 8003570:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003572:	f107 0318 	add.w	r3, r7, #24
 8003576:	4618      	mov	r0, r3
 8003578:	f002 fb60 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8003582:	f7ff ff6d 	bl	8003460 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003586:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_I2C_MspInit+0x138>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_I2C_MspInit+0x138>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_I2C_MspInit+0x138>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800359e:	2303      	movs	r3, #3
 80035a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a4:	2312      	movs	r3, #18
 80035a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	2303      	movs	r3, #3
 80035b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035b6:	2304      	movs	r3, #4
 80035b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035c0:	4619      	mov	r1, r3
 80035c2:	480d      	ldr	r0, [pc, #52]	; (80035f8 <HAL_I2C_MspInit+0x144>)
 80035c4:	f000 fc38 	bl	8003e38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_I2C_MspInit+0x138>)
 80035ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035cc:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_I2C_MspInit+0x138>)
 80035ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035d2:	6593      	str	r3, [r2, #88]	; 0x58
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_I2C_MspInit+0x138>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
}
 80035e0:	bf00      	nop
 80035e2:	37c0      	adds	r7, #192	; 0xc0
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40005400 	.word	0x40005400
 80035ec:	40021000 	.word	0x40021000
 80035f0:	48000400 	.word	0x48000400
 80035f4:	40005c00 	.word	0x40005c00
 80035f8:	48000800 	.word	0x48000800

080035fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0b0      	sub	sp, #192	; 0xc0
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003614:	f107 0318 	add.w	r3, r7, #24
 8003618:	2294      	movs	r2, #148	; 0x94
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f005 f81b 	bl	8008658 <memset>
  if(huart->Instance==LPUART1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a43      	ldr	r2, [pc, #268]	; (8003734 <HAL_UART_MspInit+0x138>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d13e      	bne.n	80036aa <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800362c:	2320      	movs	r3, #32
 800362e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003630:	2300      	movs	r3, #0
 8003632:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003634:	f107 0318 	add.w	r3, r7, #24
 8003638:	4618      	mov	r0, r3
 800363a:	f002 faff 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003644:	f7ff ff0c 	bl	8003460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_UART_MspInit+0x13c>)
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_UART_MspInit+0x13c>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <HAL_UART_MspInit+0x13c>)
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003660:	4b35      	ldr	r3, [pc, #212]	; (8003738 <HAL_UART_MspInit+0x13c>)
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <HAL_UART_MspInit+0x13c>)
 8003666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <HAL_UART_MspInit+0x13c>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8003678:	f001 fbf8 	bl	8004e6c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800367c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	2302      	movs	r3, #2
 8003686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003690:	2303      	movs	r3, #3
 8003692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003696:	2308      	movs	r3, #8
 8003698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800369c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80036a0:	4619      	mov	r1, r3
 80036a2:	4826      	ldr	r0, [pc, #152]	; (800373c <HAL_UART_MspInit+0x140>)
 80036a4:	f000 fbc8 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036a8:	e040      	b.n	800372c <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_UART_MspInit+0x144>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d13b      	bne.n	800372c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036b4:	2304      	movs	r3, #4
 80036b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80036b8:	2300      	movs	r3, #0
 80036ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036bc:	f107 0318 	add.w	r3, r7, #24
 80036c0:	4618      	mov	r0, r3
 80036c2:	f002 fabb 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80036cc:	f7ff fec8 	bl	8003460 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036d0:	4b19      	ldr	r3, [pc, #100]	; (8003738 <HAL_UART_MspInit+0x13c>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	4a18      	ldr	r2, [pc, #96]	; (8003738 <HAL_UART_MspInit+0x13c>)
 80036d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036da:	6593      	str	r3, [r2, #88]	; 0x58
 80036dc:	4b16      	ldr	r3, [pc, #88]	; (8003738 <HAL_UART_MspInit+0x13c>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_UART_MspInit+0x13c>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_UART_MspInit+0x13c>)
 80036ee:	f043 0308 	orr.w	r3, r3, #8
 80036f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_UART_MspInit+0x13c>)
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003714:	2303      	movs	r3, #3
 8003716:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800371a:	2307      	movs	r3, #7
 800371c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003720:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003724:	4619      	mov	r1, r3
 8003726:	4807      	ldr	r0, [pc, #28]	; (8003744 <HAL_UART_MspInit+0x148>)
 8003728:	f000 fb86 	bl	8003e38 <HAL_GPIO_Init>
}
 800372c:	bf00      	nop
 800372e:	37c0      	adds	r7, #192	; 0xc0
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40008000 	.word	0x40008000
 8003738:	40021000 	.word	0x40021000
 800373c:	48001800 	.word	0x48001800
 8003740:	40004800 	.word	0x40004800
 8003744:	48000c00 	.word	0x48000c00

08003748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a25      	ldr	r2, [pc, #148]	; (80037fc <HAL_TIM_Base_MspInit+0xb4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d144      	bne.n	80037f4 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800376a:	4b25      	ldr	r3, [pc, #148]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a24      	ldr	r2, [pc, #144]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
 8003776:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 8003790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	4a18      	ldr	r2, [pc, #96]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 80037a0:	f043 0310 	orr.w	r3, r3, #16
 80037a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037a6:	4b16      	ldr	r3, [pc, #88]	; (8003800 <HAL_TIM_Base_MspInit+0xb8>)
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80037b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80037b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037c4:	2302      	movs	r3, #2
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4619      	mov	r1, r3
 80037ce:	480d      	ldr	r0, [pc, #52]	; (8003804 <HAL_TIM_Base_MspInit+0xbc>)
 80037d0:	f000 fb32 	bl	8003e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037d4:	2301      	movs	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d8:	2302      	movs	r3, #2
 80037da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e0:	2300      	movs	r3, #0
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037e4:	2302      	movs	r3, #2
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <HAL_TIM_Base_MspInit+0xc0>)
 80037f0:	f000 fb22 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037f4:	bf00      	nop
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40000800 	.word	0x40000800
 8003800:	40021000 	.word	0x40021000
 8003804:	48000c00 	.word	0x48000c00
 8003808:	48001000 	.word	0x48001000

0800380c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a11      	ldr	r2, [pc, #68]	; (8003870 <HAL_TIM_MspPostInit+0x64>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d11b      	bne.n	8003866 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_TIM_MspPostInit+0x68>)
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_TIM_MspPostInit+0x68>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_TIM_MspPostInit+0x68>)
 800383c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003856:	2302      	movs	r3, #2
 8003858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	4619      	mov	r1, r3
 8003860:	4805      	ldr	r0, [pc, #20]	; (8003878 <HAL_TIM_MspPostInit+0x6c>)
 8003862:	f000 fae9 	bl	8003e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003866:	bf00      	nop
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40000800 	.word	0x40000800
 8003874:	40021000 	.word	0x40021000
 8003878:	48000400 	.word	0x48000400

0800387c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003880:	e7fe      	b.n	8003880 <NMI_Handler+0x4>

08003882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003886:	e7fe      	b.n	8003886 <HardFault_Handler+0x4>

08003888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800388c:	e7fe      	b.n	800388c <MemManage_Handler+0x4>

0800388e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800388e:	b480      	push	{r7}
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003892:	e7fe      	b.n	8003892 <BusFault_Handler+0x4>

08003894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003898:	e7fe      	b.n	8003898 <UsageFault_Handler+0x4>

0800389a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b6:	b480      	push	{r7}
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c8:	f000 f960 	bl	8003b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	MPU_Interrupt();
 80038d4:	f7fe fb98 	bl	8002008 <MPU_Interrupt>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80038d8:	2010      	movs	r0, #16
 80038da:	f000 fc57 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
	return 1;
 80038e6:	2301      	movs	r3, #1
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <_kill>:

int _kill(int pid, int sig)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038fc:	f004 fe68 	bl	80085d0 <__errno>
 8003900:	4603      	mov	r3, r0
 8003902:	2216      	movs	r2, #22
 8003904:	601a      	str	r2, [r3, #0]
	return -1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_exit>:

void _exit (int status)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800391a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ffe7 	bl	80038f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003924:	e7fe      	b.n	8003924 <_exit+0x12>

08003926 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e00a      	b.n	800394e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003938:	f3af 8000 	nop.w
 800393c:	4601      	mov	r1, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	60ba      	str	r2, [r7, #8]
 8003944:	b2ca      	uxtb	r2, r1
 8003946:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	dbf0      	blt.n	8003938 <_read+0x12>
	}

return len;
 8003956:	687b      	ldr	r3, [r7, #4]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e009      	b.n	8003986 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	60ba      	str	r2, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fd5e 	bl	800343c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3301      	adds	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	dbf1      	blt.n	8003972 <_write+0x12>
	}
	return len;
 800398e:	687b      	ldr	r3, [r7, #4]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_close>:

int _close(int file)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	return -1;
 80039a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039c0:	605a      	str	r2, [r3, #4]
	return 0;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_isatty>:

int _isatty(int file)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	return 1;
 80039d8:	2301      	movs	r3, #1
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
	return 0;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <_sbrk+0x5c>)
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <_sbrk+0x60>)
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <_sbrk+0x64>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <_sbrk+0x64>)
 8003a1e:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <_sbrk+0x68>)
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <_sbrk+0x64>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d207      	bcs.n	8003a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a30:	f004 fdce 	bl	80085d0 <__errno>
 8003a34:	4603      	mov	r3, r0
 8003a36:	220c      	movs	r2, #12
 8003a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3e:	e009      	b.n	8003a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	4a05      	ldr	r2, [pc, #20]	; (8003a64 <_sbrk+0x64>)
 8003a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a52:	68fb      	ldr	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200a0000 	.word	0x200a0000
 8003a60:	00000400 	.word	0x00000400
 8003a64:	20000610 	.word	0x20000610
 8003a68:	20000c38 	.word	0x20000c38

08003a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <SystemInit+0x20>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <SystemInit+0x20>)
 8003a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ac8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a94:	f7ff ffea 	bl	8003a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a98:	480c      	ldr	r0, [pc, #48]	; (8003acc <LoopForever+0x6>)
  ldr r1, =_edata
 8003a9a:	490d      	ldr	r1, [pc, #52]	; (8003ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <LoopForever+0xe>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa0:	e002      	b.n	8003aa8 <LoopCopyDataInit>

08003aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aa6:	3304      	adds	r3, #4

08003aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aac:	d3f9      	bcc.n	8003aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aae:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ab0:	4c0a      	ldr	r4, [pc, #40]	; (8003adc <LoopForever+0x16>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab4:	e001      	b.n	8003aba <LoopFillZerobss>

08003ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab8:	3204      	adds	r2, #4

08003aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003abc:	d3fb      	bcc.n	8003ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003abe:	f004 fd9f 	bl	8008600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ac2:	f7fe fb93 	bl	80021ec <main>

08003ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ac6:	e7fe      	b.n	8003ac6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ac8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003ad4:	0800dc58 	.word	0x0800dc58
  ldr r2, =_sbss
 8003ad8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003adc:	20000c34 	.word	0x20000c34

08003ae0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ae0:	e7fe      	b.n	8003ae0 <ADC1_IRQHandler>

08003ae2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aec:	2003      	movs	r0, #3
 8003aee:	f000 f961 	bl	8003db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003af2:	2000      	movs	r0, #0
 8003af4:	f000 f80e 	bl	8003b14 <HAL_InitTick>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	71fb      	strb	r3, [r7, #7]
 8003b02:	e001      	b.n	8003b08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b04:	f7ff fcb2 	bl	800346c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b08:	79fb      	ldrb	r3, [r7, #7]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_InitTick+0x6c>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d023      	beq.n	8003b70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b28:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <HAL_InitTick+0x70>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_InitTick+0x6c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f96d 	bl	8003e1e <HAL_SYSTICK_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10f      	bne.n	8003b6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d809      	bhi.n	8003b64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b50:	2200      	movs	r2, #0
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b58:	f000 f937 	bl	8003dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <HAL_InitTick+0x74>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e007      	b.n	8003b74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e004      	b.n	8003b74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	e001      	b.n	8003b74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000004 	.word	0x20000004

08003b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_IncTick+0x20>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_IncTick+0x24>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a04      	ldr	r2, [pc, #16]	; (8003bb0 <HAL_IncTick+0x24>)
 8003b9e:	6013      	str	r3, [r2, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	20000c20 	.word	0x20000c20

08003bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_GetTick+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000c20 	.word	0x20000c20

08003bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bd4:	f7ff ffee 	bl	8003bb4 <HAL_GetTick>
 8003bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be4:	d005      	beq.n	8003bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_Delay+0x44>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bf2:	bf00      	nop
 8003bf4:	f7ff ffde 	bl	8003bb4 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d8f7      	bhi.n	8003bf4 <HAL_Delay+0x28>
  {
  }
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000008 	.word	0x20000008

08003c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <__NVIC_SetPriorityGrouping+0x44>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c30:	4013      	ands	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c46:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <__NVIC_SetPriorityGrouping+0x44>)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	60d3      	str	r3, [r2, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <__NVIC_GetPriorityGrouping+0x18>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	f003 0307 	and.w	r3, r3, #7
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	db0b      	blt.n	8003ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	f003 021f 	and.w	r2, r3, #31
 8003c90:	4907      	ldr	r1, [pc, #28]	; (8003cb0 <__NVIC_EnableIRQ+0x38>)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	2001      	movs	r0, #1
 8003c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	e000e100 	.word	0xe000e100

08003cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	db0a      	blt.n	8003cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	490c      	ldr	r1, [pc, #48]	; (8003d00 <__NVIC_SetPriority+0x4c>)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cdc:	e00a      	b.n	8003cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4908      	ldr	r1, [pc, #32]	; (8003d04 <__NVIC_SetPriority+0x50>)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	3b04      	subs	r3, #4
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	761a      	strb	r2, [r3, #24]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000e100 	.word	0xe000e100
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f1c3 0307 	rsb	r3, r3, #7
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	bf28      	it	cs
 8003d26:	2304      	movcs	r3, #4
 8003d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d902      	bls.n	8003d38 <NVIC_EncodePriority+0x30>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3b03      	subs	r3, #3
 8003d36:	e000      	b.n	8003d3a <NVIC_EncodePriority+0x32>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	43d9      	mvns	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	4313      	orrs	r3, r2
         );
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3724      	adds	r7, #36	; 0x24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d80:	d301      	bcc.n	8003d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d82:	2301      	movs	r3, #1
 8003d84:	e00f      	b.n	8003da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <SysTick_Config+0x40>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d8e:	210f      	movs	r1, #15
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d94:	f7ff ff8e 	bl	8003cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <SysTick_Config+0x40>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <SysTick_Config+0x40>)
 8003da0:	2207      	movs	r2, #7
 8003da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	e000e010 	.word	0xe000e010

08003db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff29 	bl	8003c14 <__NVIC_SetPriorityGrouping>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ddc:	f7ff ff3e 	bl	8003c5c <__NVIC_GetPriorityGrouping>
 8003de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f7ff ff8e 	bl	8003d08 <NVIC_EncodePriority>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff5d 	bl	8003cb4 <__NVIC_SetPriority>
}
 8003dfa:	bf00      	nop
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	4603      	mov	r3, r0
 8003e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff31 	bl	8003c78 <__NVIC_EnableIRQ>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ffa2 	bl	8003d70 <SysTick_Config>
 8003e2c:	4603      	mov	r3, r0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e46:	e166      	b.n	8004116 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	4013      	ands	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8158 	beq.w	8004110 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d005      	beq.n	8003e78 <HAL_GPIO_Init+0x40>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d130      	bne.n	8003eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0201 	and.w	r2, r3, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d017      	beq.n	8003f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d123      	bne.n	8003f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	08da      	lsrs	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3208      	adds	r2, #8
 8003f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	220f      	movs	r2, #15
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	2203      	movs	r2, #3
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0203 	and.w	r2, r3, #3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80b2 	beq.w	8004110 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fac:	4b61      	ldr	r3, [pc, #388]	; (8004134 <HAL_GPIO_Init+0x2fc>)
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	4a60      	ldr	r2, [pc, #384]	; (8004134 <HAL_GPIO_Init+0x2fc>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb8:	4b5e      	ldr	r3, [pc, #376]	; (8004134 <HAL_GPIO_Init+0x2fc>)
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fc4:	4a5c      	ldr	r2, [pc, #368]	; (8004138 <HAL_GPIO_Init+0x300>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	3302      	adds	r3, #2
 8003fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	220f      	movs	r2, #15
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fee:	d02b      	beq.n	8004048 <HAL_GPIO_Init+0x210>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a52      	ldr	r2, [pc, #328]	; (800413c <HAL_GPIO_Init+0x304>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d025      	beq.n	8004044 <HAL_GPIO_Init+0x20c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a51      	ldr	r2, [pc, #324]	; (8004140 <HAL_GPIO_Init+0x308>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d01f      	beq.n	8004040 <HAL_GPIO_Init+0x208>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a50      	ldr	r2, [pc, #320]	; (8004144 <HAL_GPIO_Init+0x30c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d019      	beq.n	800403c <HAL_GPIO_Init+0x204>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4f      	ldr	r2, [pc, #316]	; (8004148 <HAL_GPIO_Init+0x310>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_GPIO_Init+0x200>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a4e      	ldr	r2, [pc, #312]	; (800414c <HAL_GPIO_Init+0x314>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00d      	beq.n	8004034 <HAL_GPIO_Init+0x1fc>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a4d      	ldr	r2, [pc, #308]	; (8004150 <HAL_GPIO_Init+0x318>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <HAL_GPIO_Init+0x1f8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a4c      	ldr	r2, [pc, #304]	; (8004154 <HAL_GPIO_Init+0x31c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d101      	bne.n	800402c <HAL_GPIO_Init+0x1f4>
 8004028:	2307      	movs	r3, #7
 800402a:	e00e      	b.n	800404a <HAL_GPIO_Init+0x212>
 800402c:	2308      	movs	r3, #8
 800402e:	e00c      	b.n	800404a <HAL_GPIO_Init+0x212>
 8004030:	2306      	movs	r3, #6
 8004032:	e00a      	b.n	800404a <HAL_GPIO_Init+0x212>
 8004034:	2305      	movs	r3, #5
 8004036:	e008      	b.n	800404a <HAL_GPIO_Init+0x212>
 8004038:	2304      	movs	r3, #4
 800403a:	e006      	b.n	800404a <HAL_GPIO_Init+0x212>
 800403c:	2303      	movs	r3, #3
 800403e:	e004      	b.n	800404a <HAL_GPIO_Init+0x212>
 8004040:	2302      	movs	r3, #2
 8004042:	e002      	b.n	800404a <HAL_GPIO_Init+0x212>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_GPIO_Init+0x212>
 8004048:	2300      	movs	r3, #0
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	f002 0203 	and.w	r2, r2, #3
 8004050:	0092      	lsls	r2, r2, #2
 8004052:	4093      	lsls	r3, r2
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800405a:	4937      	ldr	r1, [pc, #220]	; (8004138 <HAL_GPIO_Init+0x300>)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	3302      	adds	r3, #2
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004068:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_GPIO_Init+0x320>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800408c:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_GPIO_Init+0x320>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_GPIO_Init+0x320>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040b6:	4a28      	ldr	r2, [pc, #160]	; (8004158 <HAL_GPIO_Init+0x320>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_GPIO_Init+0x320>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_GPIO_Init+0x320>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_GPIO_Init+0x320>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <HAL_GPIO_Init+0x320>)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	f47f ae91 	bne.w	8003e48 <HAL_GPIO_Init+0x10>
  }
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40021000 	.word	0x40021000
 8004138:	40010000 	.word	0x40010000
 800413c:	48000400 	.word	0x48000400
 8004140:	48000800 	.word	0x48000800
 8004144:	48000c00 	.word	0x48000c00
 8004148:	48001000 	.word	0x48001000
 800414c:	48001400 	.word	0x48001400
 8004150:	48001800 	.word	0x48001800
 8004154:	48001c00 	.word	0x48001c00
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004178:	e002      	b.n	8004180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f806 	bl	80041bc <HAL_GPIO_EXTI_Callback>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010400 	.word	0x40010400

080041bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e081      	b.n	80042e8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f95b 	bl	80034b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2224      	movs	r2, #36	; 0x24
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004222:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004232:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d107      	bne.n	800424c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	e006      	b.n	800425a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004258:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d104      	bne.n	800426c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800426a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800428e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69d9      	ldr	r1, [r3, #28]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0201 	orr.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	461a      	mov	r2, r3
 80042fc:	460b      	mov	r3, r1
 80042fe:	817b      	strh	r3, [r7, #10]
 8004300:	4613      	mov	r3, r2
 8004302:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b20      	cmp	r3, #32
 800430e:	f040 80da 	bne.w	80044c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_I2C_Master_Transmit+0x30>
 800431c:	2302      	movs	r3, #2
 800431e:	e0d3      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1d8>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004328:	f7ff fc44 	bl	8003bb4 <HAL_GetTick>
 800432c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2319      	movs	r3, #25
 8004334:	2201      	movs	r2, #1
 8004336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f9e6 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e0be      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2221      	movs	r2, #33	; 0x21
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2210      	movs	r2, #16
 8004356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	893a      	ldrh	r2, [r7, #8]
 800436a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	2bff      	cmp	r3, #255	; 0xff
 800437a:	d90e      	bls.n	800439a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	b2da      	uxtb	r2, r3
 8004388:	8979      	ldrh	r1, [r7, #10]
 800438a:	4b51      	ldr	r3, [pc, #324]	; (80044d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fbdc 	bl	8004b50 <I2C_TransferConfig>
 8004398:	e06c      	b.n	8004474 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	8979      	ldrh	r1, [r7, #10]
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fbcb 	bl	8004b50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80043ba:	e05b      	b.n	8004474 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	6a39      	ldr	r1, [r7, #32]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f9e3 	bl	800478c <I2C_WaitOnTXISFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e07b      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d034      	beq.n	8004474 <HAL_I2C_Master_Transmit+0x184>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	2b00      	cmp	r3, #0
 8004410:	d130      	bne.n	8004474 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f975 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e04d      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2bff      	cmp	r3, #255	; 0xff
 8004434:	d90e      	bls.n	8004454 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	22ff      	movs	r2, #255	; 0xff
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	b2da      	uxtb	r2, r3
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	2300      	movs	r3, #0
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fb7f 	bl	8004b50 <I2C_TransferConfig>
 8004452:	e00f      	b.n	8004474 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	b2da      	uxtb	r2, r3
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fb6e 	bl	8004b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d19e      	bne.n	80043bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	6a39      	ldr	r1, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9c2 	bl	800480c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e01a      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2220      	movs	r2, #32
 8004498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80044a6:	400b      	ands	r3, r1
 80044a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	80002000 	.word	0x80002000
 80044d4:	fe00e800 	.word	0xfe00e800

080044d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
 80044e8:	4613      	mov	r3, r2
 80044ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	f040 80db 	bne.w	80046b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_I2C_Master_Receive+0x30>
 8004504:	2302      	movs	r3, #2
 8004506:	e0d4      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1da>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004510:	f7ff fb50 	bl	8003bb4 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8f2 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0bf      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2222      	movs	r2, #34	; 0x22
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2210      	movs	r2, #16
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	893a      	ldrh	r2, [r7, #8]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2bff      	cmp	r3, #255	; 0xff
 8004562:	d90e      	bls.n	8004582 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	22ff      	movs	r2, #255	; 0xff
 8004568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	b2da      	uxtb	r2, r3
 8004570:	8979      	ldrh	r1, [r7, #10]
 8004572:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_I2C_Master_Receive+0x1e4>)
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fae8 	bl	8004b50 <I2C_TransferConfig>
 8004580:	e06d      	b.n	800465e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	b2da      	uxtb	r2, r3
 8004592:	8979      	ldrh	r1, [r7, #10]
 8004594:	4b49      	ldr	r3, [pc, #292]	; (80046bc <HAL_I2C_Master_Receive+0x1e4>)
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fad7 	bl	8004b50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80045a2:	e05c      	b.n	800465e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6a39      	ldr	r1, [r7, #32]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f96b 	bl	8004884 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e07c      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d034      	beq.n	800465e <HAL_I2C_Master_Receive+0x186>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d130      	bne.n	800465e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	2200      	movs	r2, #0
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f880 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e04d      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	2bff      	cmp	r3, #255	; 0xff
 800461e:	d90e      	bls.n	800463e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	22ff      	movs	r2, #255	; 0xff
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	b2da      	uxtb	r2, r3
 800462c:	8979      	ldrh	r1, [r7, #10]
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fa8a 	bl	8004b50 <I2C_TransferConfig>
 800463c:	e00f      	b.n	800465e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	b2da      	uxtb	r2, r3
 800464e:	8979      	ldrh	r1, [r7, #10]
 8004650:	2300      	movs	r3, #0
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fa79 	bl	8004b50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d19d      	bne.n	80045a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	6a39      	ldr	r1, [r7, #32]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f8cd 	bl	800480c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e01a      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2220      	movs	r2, #32
 8004682:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <HAL_I2C_Master_Receive+0x1e8>)
 8004690:	400b      	ands	r3, r1
 8004692:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	e000      	b.n	80046b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	80002400 	.word	0x80002400
 80046c0:	fe00e800 	.word	0xfe00e800

080046c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d103      	bne.n	80046e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2200      	movs	r2, #0
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d007      	beq.n	8004700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	619a      	str	r2, [r3, #24]
  }
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471c:	e022      	b.n	8004764 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004724:	d01e      	beq.n	8004764 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7ff fa45 	bl	8003bb4 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d113      	bne.n	8004764 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e00f      	b.n	8004784 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4013      	ands	r3, r2
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	429a      	cmp	r2, r3
 8004780:	d0cd      	beq.n	800471e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004798:	e02c      	b.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f8ea 	bl	8004978 <I2C_IsErrorOccurred>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e02a      	b.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b4:	d01e      	beq.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7ff f9fd 	bl	8003bb4 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e007      	b.n	8004804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d1cb      	bne.n	800479a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004818:	e028      	b.n	800486c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f8aa 	bl	8004978 <I2C_IsErrorOccurred>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e026      	b.n	800487c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7ff f9c1 	bl	8003bb4 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d113      	bne.n	800486c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e007      	b.n	800487c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b20      	cmp	r3, #32
 8004878:	d1cf      	bne.n	800481a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004890:	e064      	b.n	800495c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f86e 	bl	8004978 <I2C_IsErrorOccurred>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e062      	b.n	800496c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d138      	bne.n	8004926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d105      	bne.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e04e      	b.n	800496c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d107      	bne.n	80048ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2210      	movs	r2, #16
 80048e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2204      	movs	r2, #4
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44
 80048ea:	e002      	b.n	80048f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2220      	movs	r2, #32
 80048f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b1b      	ldr	r3, [pc, #108]	; (8004974 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004906:	400b      	ands	r3, r1
 8004908:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e022      	b.n	800496c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7ff f945 	bl	8003bb4 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e007      	b.n	800496c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	2b04      	cmp	r3, #4
 8004968:	d193      	bne.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fe00e800 	.word	0xfe00e800

08004978 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d075      	beq.n	8004a90 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2210      	movs	r2, #16
 80049aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049ac:	e056      	b.n	8004a5c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b4:	d052      	beq.n	8004a5c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7ff f8fd 	bl	8003bb4 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <I2C_IsErrorOccurred+0x54>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d147      	bne.n	8004a5c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ee:	d12e      	bne.n	8004a4e <I2C_IsErrorOccurred+0xd6>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f6:	d02a      	beq.n	8004a4e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80049f8:	7cfb      	ldrb	r3, [r7, #19]
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d027      	beq.n	8004a4e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a0c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a0e:	f7ff f8d1 	bl	8003bb4 <HAL_GetTick>
 8004a12:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a14:	e01b      	b.n	8004a4e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a16:	f7ff f8cd 	bl	8003bb4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b19      	cmp	r3, #25
 8004a22:	d914      	bls.n	8004a4e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d1dc      	bne.n	8004a16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d003      	beq.n	8004a72 <I2C_IsErrorOccurred+0xfa>
 8004a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d09d      	beq.n	80049ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f043 0304 	orr.w	r3, r3, #4
 8004a88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00b      	beq.n	8004aba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	f043 0308 	orr.w	r3, r3, #8
 8004aca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01c      	beq.n	8004b40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fddc 	bl	80046c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <I2C_IsErrorOccurred+0x1d4>)
 8004b18:	400b      	ands	r3, r1
 8004b1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3728      	adds	r7, #40	; 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	fe00e800 	.word	0xfe00e800

08004b50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	817b      	strh	r3, [r7, #10]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b62:	897b      	ldrh	r3, [r7, #10]
 8004b64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b68:	7a7b      	ldrb	r3, [r7, #9]
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b70:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b7e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	0d5b      	lsrs	r3, r3, #21
 8004b8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b8e:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <I2C_TransferConfig+0x60>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	43db      	mvns	r3, r3
 8004b94:	ea02 0103 	and.w	r1, r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	03ff63ff 	.word	0x03ff63ff

08004bb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d138      	bne.n	8004c3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e032      	b.n	8004c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6819      	ldr	r1, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d139      	bne.n	8004cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e033      	b.n	8004cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2224      	movs	r2, #36	; 0x24
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf4:	d102      	bne.n	8004cfc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cfa:	e00b      	b.n	8004d14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0a:	d102      	bne.n	8004d12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d10:	e000      	b.n	8004d14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004d12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40007000 	.word	0x40007000

08004d24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d141      	bne.n	8004db6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d32:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d131      	bne.n	8004da4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d40:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d46:	4a46      	ldr	r2, [pc, #280]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d50:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d58:	4a41      	ldr	r2, [pc, #260]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004d60:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2232      	movs	r2, #50	; 0x32
 8004d66:	fb02 f303 	mul.w	r3, r2, r3
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	0c9b      	lsrs	r3, r3, #18
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d76:	e002      	b.n	8004d7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d7e:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8a:	d102      	bne.n	8004d92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f2      	bne.n	8004d78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d92:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9e:	d158      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e057      	b.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004da4:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004daa:	4a2d      	ldr	r2, [pc, #180]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004db4:	e04d      	b.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dbc:	d141      	bne.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dbe:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dca:	d131      	bne.n	8004e30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd2:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ddc:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004dec:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2232      	movs	r2, #50	; 0x32
 8004df2:	fb02 f303 	mul.w	r3, r2, r3
 8004df6:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	0c9b      	lsrs	r3, r3, #18
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e02:	e002      	b.n	8004e0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d102      	bne.n	8004e1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f2      	bne.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d112      	bne.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e011      	b.n	8004e54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e40:	e007      	b.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40007000 	.word	0x40007000
 8004e64:	20000000 	.word	0x20000000
 8004e68:	431bde83 	.word	0x431bde83

08004e6c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e7a:	6053      	str	r3, [r2, #4]
}
 8004e7c:	bf00      	nop
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40007000 	.word	0x40007000

08004e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f000 bc16 	b.w	80056cc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ea0:	4ba0      	ldr	r3, [pc, #640]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eaa:	4b9e      	ldr	r3, [pc, #632]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80e4 	beq.w	800508a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x4c>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	f040 808b 	bne.w	8004fe6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	f040 8087 	bne.w	8004fe6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ed8:	4b92      	ldr	r3, [pc, #584]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x64>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e3ed      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	4b8b      	ldr	r3, [pc, #556]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <HAL_RCC_OscConfig+0x7e>
 8004f00:	4b88      	ldr	r3, [pc, #544]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f08:	e005      	b.n	8004f16 <HAL_RCC_OscConfig+0x8a>
 8004f0a:	4b86      	ldr	r3, [pc, #536]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d223      	bcs.n	8004f62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fdca 	bl	8005ab8 <RCC_SetFlashLatencyFromMSIRange>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e3ce      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f2e:	4b7d      	ldr	r3, [pc, #500]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7c      	ldr	r2, [pc, #496]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f34:	f043 0308 	orr.w	r3, r3, #8
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b7a      	ldr	r3, [pc, #488]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	4977      	ldr	r1, [pc, #476]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f4c:	4b75      	ldr	r3, [pc, #468]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	4972      	ldr	r1, [pc, #456]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
 8004f60:	e025      	b.n	8004fae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f62:	4b70      	ldr	r3, [pc, #448]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6f      	ldr	r2, [pc, #444]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b6d      	ldr	r3, [pc, #436]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	496a      	ldr	r1, [pc, #424]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f80:	4b68      	ldr	r3, [pc, #416]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	4965      	ldr	r1, [pc, #404]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fd8a 	bl	8005ab8 <RCC_SetFlashLatencyFromMSIRange>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e38e      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fae:	f000 fcbf 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	495a      	ldr	r1, [pc, #360]	; (8005128 <HAL_RCC_OscConfig+0x29c>)
 8004fc0:	5ccb      	ldrb	r3, [r1, r3]
 8004fc2:	f003 031f 	and.w	r3, r3, #31
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a58      	ldr	r2, [pc, #352]	; (800512c <HAL_RCC_OscConfig+0x2a0>)
 8004fcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fce:	4b58      	ldr	r3, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x2a4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fd9e 	bl	8003b14 <HAL_InitTick>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d052      	beq.n	8005088 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	e372      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d032      	beq.n	8005054 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fee:	4b4d      	ldr	r3, [pc, #308]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a4c      	ldr	r2, [pc, #304]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ffa:	f7fe fddb 	bl	8003bb4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005002:	f7fe fdd7 	bl	8003bb4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e35b      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005014:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005020:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a3f      	ldr	r2, [pc, #252]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8005026:	f043 0308 	orr.w	r3, r3, #8
 800502a:	6013      	str	r3, [r2, #0]
 800502c:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	493a      	ldr	r1, [pc, #232]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800503e:	4b39      	ldr	r3, [pc, #228]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	4935      	ldr	r1, [pc, #212]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800504e:	4313      	orrs	r3, r2
 8005050:	604b      	str	r3, [r1, #4]
 8005052:	e01a      	b.n	800508a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005054:	4b33      	ldr	r3, [pc, #204]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a32      	ldr	r2, [pc, #200]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005060:	f7fe fda8 	bl	8003bb4 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005068:	f7fe fda4 	bl	8003bb4 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e328      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800507a:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1dc>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005088:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d073      	beq.n	800517e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_OscConfig+0x21c>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d10e      	bne.n	80050c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d10b      	bne.n	80050c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d063      	beq.n	800517c <HAL_RCC_OscConfig+0x2f0>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d15f      	bne.n	800517c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e305      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c8:	d106      	bne.n	80050d8 <HAL_RCC_OscConfig+0x24c>
 80050ca:	4b16      	ldr	r3, [pc, #88]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a15      	ldr	r2, [pc, #84]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e01d      	b.n	8005114 <HAL_RCC_OscConfig+0x288>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e0:	d10c      	bne.n	80050fc <HAL_RCC_OscConfig+0x270>
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a0f      	ldr	r2, [pc, #60]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0x288>
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a08      	ldr	r2, [pc, #32]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 8005102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a05      	ldr	r2, [pc, #20]	; (8005124 <HAL_RCC_OscConfig+0x298>)
 800510e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01b      	beq.n	8005154 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511c:	f7fe fd4a 	bl	8003bb4 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005122:	e010      	b.n	8005146 <HAL_RCC_OscConfig+0x2ba>
 8005124:	40021000 	.word	0x40021000
 8005128:	0800d724 	.word	0x0800d724
 800512c:	20000000 	.word	0x20000000
 8005130:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005134:	f7fe fd3e 	bl	8003bb4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b64      	cmp	r3, #100	; 0x64
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e2c2      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005146:	4baf      	ldr	r3, [pc, #700]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x2a8>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005154:	f7fe fd2e 	bl	8003bb4 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe fd2a 	bl	8003bb4 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e2ae      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516e:	4ba5      	ldr	r3, [pc, #660]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x2d0>
 800517a:	e000      	b.n	800517e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800517c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d060      	beq.n	800524c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d005      	beq.n	800519c <HAL_RCC_OscConfig+0x310>
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d119      	bne.n	80051ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d116      	bne.n	80051ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800519c:	4b99      	ldr	r3, [pc, #612]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_OscConfig+0x328>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e28b      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b93      	ldr	r3, [pc, #588]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	061b      	lsls	r3, r3, #24
 80051c2:	4990      	ldr	r1, [pc, #576]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051c8:	e040      	b.n	800524c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d023      	beq.n	800521a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d2:	4b8c      	ldr	r3, [pc, #560]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a8b      	ldr	r2, [pc, #556]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fe fce9 	bl	8003bb4 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e6:	f7fe fce5 	bl	8003bb4 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e269      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f8:	4b82      	ldr	r3, [pc, #520]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005204:	4b7f      	ldr	r3, [pc, #508]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	497c      	ldr	r1, [pc, #496]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005214:	4313      	orrs	r3, r2
 8005216:	604b      	str	r3, [r1, #4]
 8005218:	e018      	b.n	800524c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521a:	4b7a      	ldr	r3, [pc, #488]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a79      	ldr	r2, [pc, #484]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fe fcc5 	bl	8003bb4 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fe fcc1 	bl	8003bb4 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e245      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005240:	4b70      	ldr	r3, [pc, #448]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d03c      	beq.n	80052d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01c      	beq.n	800529a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005260:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005266:	4a67      	ldr	r2, [pc, #412]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fe fca0 	bl	8003bb4 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fe fc9c 	bl	8003bb4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e220      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800528a:	4b5e      	ldr	r3, [pc, #376]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800528c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ef      	beq.n	8005278 <HAL_RCC_OscConfig+0x3ec>
 8005298:	e01b      	b.n	80052d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529a:	4b5a      	ldr	r3, [pc, #360]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	4a58      	ldr	r2, [pc, #352]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052aa:	f7fe fc83 	bl	8003bb4 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052b2:	f7fe fc7f 	bl	8003bb4 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e203      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c4:	4b4f      	ldr	r3, [pc, #316]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80052c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ef      	bne.n	80052b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80a6 	beq.w	800542c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e0:	2300      	movs	r3, #0
 80052e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052e4:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f0:	4b44      	ldr	r3, [pc, #272]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	4a43      	ldr	r2, [pc, #268]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80052f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6593      	str	r3, [r2, #88]	; 0x58
 80052fc:	4b41      	ldr	r3, [pc, #260]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80052fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005308:	2301      	movs	r3, #1
 800530a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530c:	4b3e      	ldr	r3, [pc, #248]	; (8005408 <HAL_RCC_OscConfig+0x57c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d118      	bne.n	800534a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005318:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCC_OscConfig+0x57c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a3a      	ldr	r2, [pc, #232]	; (8005408 <HAL_RCC_OscConfig+0x57c>)
 800531e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005322:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005324:	f7fe fc46 	bl	8003bb4 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532c:	f7fe fc42 	bl	8003bb4 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1c6      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533e:	4b32      	ldr	r3, [pc, #200]	; (8005408 <HAL_RCC_OscConfig+0x57c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d108      	bne.n	8005364 <HAL_RCC_OscConfig+0x4d8>
 8005352:	4b2c      	ldr	r3, [pc, #176]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005362:	e024      	b.n	80053ae <HAL_RCC_OscConfig+0x522>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b05      	cmp	r3, #5
 800536a:	d110      	bne.n	800538e <HAL_RCC_OscConfig+0x502>
 800536c:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	4a24      	ldr	r2, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005374:	f043 0304 	orr.w	r3, r3, #4
 8005378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800537c:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a20      	ldr	r2, [pc, #128]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800538c:	e00f      	b.n	80053ae <HAL_RCC_OscConfig+0x522>
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 8005396:	f023 0301 	bic.w	r3, r3, #1
 800539a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80053a6:	f023 0304 	bic.w	r3, r3, #4
 80053aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d016      	beq.n	80053e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b6:	f7fe fbfd 	bl	8003bb4 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053be:	f7fe fbf9 	bl	8003bb4 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e17b      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_RCC_OscConfig+0x578>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ed      	beq.n	80053be <HAL_RCC_OscConfig+0x532>
 80053e2:	e01a      	b.n	800541a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fe fbe6 	bl	8003bb4 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053ea:	e00f      	b.n	800540c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fe fbe2 	bl	8003bb4 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d906      	bls.n	800540c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e164      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000
 8005408:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800540c:	4ba8      	ldr	r3, [pc, #672]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e8      	bne.n	80053ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800541a:	7ffb      	ldrb	r3, [r7, #31]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005420:	4ba3      	ldr	r3, [pc, #652]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005424:	4aa2      	ldr	r2, [pc, #648]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d03c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01c      	beq.n	800547a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005440:	4b9b      	ldr	r3, [pc, #620]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005446:	4a9a      	ldr	r2, [pc, #616]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005450:	f7fe fbb0 	bl	8003bb4 <HAL_GetTick>
 8005454:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005456:	e008      	b.n	800546a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005458:	f7fe fbac 	bl	8003bb4 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	2b02      	cmp	r3, #2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e130      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800546a:	4b91      	ldr	r3, [pc, #580]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800546c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ef      	beq.n	8005458 <HAL_RCC_OscConfig+0x5cc>
 8005478:	e01b      	b.n	80054b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800547a:	4b8d      	ldr	r3, [pc, #564]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800547c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005480:	4a8b      	ldr	r2, [pc, #556]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005482:	f023 0301 	bic.w	r3, r3, #1
 8005486:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fe fb93 	bl	8003bb4 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005492:	f7fe fb8f 	bl	8003bb4 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e113      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054a4:	4b82      	ldr	r3, [pc, #520]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80054a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1ef      	bne.n	8005492 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8107 	beq.w	80056ca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	f040 80cb 	bne.w	800565c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054c6:	4b7a      	ldr	r3, [pc, #488]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0203 	and.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d12c      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	3b01      	subs	r3, #1
 80054e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d123      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d11b      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005508:	429a      	cmp	r2, r3
 800550a:	d113      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	3b01      	subs	r3, #1
 800551a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d109      	bne.n	8005534 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d06d      	beq.n	8005610 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d068      	beq.n	800560c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800553a:	4b5d      	ldr	r3, [pc, #372]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d105      	bne.n	8005552 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005546:	4b5a      	ldr	r3, [pc, #360]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0ba      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005556:	4b56      	ldr	r3, [pc, #344]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a55      	ldr	r2, [pc, #340]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800555c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005560:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005562:	f7fe fb27 	bl	8003bb4 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556a:	f7fe fb23 	bl	8003bb4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e0a7      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800557c:	4b4c      	ldr	r3, [pc, #304]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005588:	4b49      	ldr	r3, [pc, #292]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <HAL_RCC_OscConfig+0x828>)
 800558e:	4013      	ands	r3, r2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005598:	3a01      	subs	r2, #1
 800559a:	0112      	lsls	r2, r2, #4
 800559c:	4311      	orrs	r1, r2
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055a2:	0212      	lsls	r2, r2, #8
 80055a4:	4311      	orrs	r1, r2
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055aa:	0852      	lsrs	r2, r2, #1
 80055ac:	3a01      	subs	r2, #1
 80055ae:	0552      	lsls	r2, r2, #21
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055b6:	0852      	lsrs	r2, r2, #1
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0652      	lsls	r2, r2, #25
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055c2:	06d2      	lsls	r2, r2, #27
 80055c4:	430a      	orrs	r2, r1
 80055c6:	493a      	ldr	r1, [pc, #232]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055cc:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a37      	ldr	r2, [pc, #220]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80055d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055d8:	4b35      	ldr	r3, [pc, #212]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a34      	ldr	r2, [pc, #208]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055e4:	f7fe fae6 	bl	8003bb4 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fe fae2 	bl	8003bb4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e066      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055fe:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800560a:	e05e      	b.n	80056ca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e05d      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005610:	4b27      	ldr	r3, [pc, #156]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d156      	bne.n	80056ca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800561c:	4b24      	ldr	r3, [pc, #144]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a23      	ldr	r2, [pc, #140]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005626:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005628:	4b21      	ldr	r3, [pc, #132]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800562e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005634:	f7fe fabe 	bl	8003bb4 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563c:	f7fe faba 	bl	8003bb4 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e03e      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800564e:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x7b0>
 800565a:	e036      	b.n	80056ca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b0c      	cmp	r3, #12
 8005660:	d031      	beq.n	80056c6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005662:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a12      	ldr	r2, [pc, #72]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800566c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d105      	bne.n	8005686 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005680:	f023 0303 	bic.w	r3, r3, #3
 8005684:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_OscConfig+0x824>)
 800568c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005694:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fe fa8d 	bl	8003bb4 <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569c:	e00c      	b.n	80056b8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800569e:	f7fe fa89 	bl	8003bb4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d905      	bls.n	80056b8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e00d      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
 80056b0:	40021000 	.word	0x40021000
 80056b4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_OscConfig+0x848>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ec      	bne.n	800569e <HAL_RCC_OscConfig+0x812>
 80056c4:	e001      	b.n	80056ca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000

080056d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e10f      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b89      	ldr	r3, [pc, #548]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d910      	bls.n	8005720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b86      	ldr	r3, [pc, #536]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 020f 	bic.w	r2, r3, #15
 8005706:	4984      	ldr	r1, [pc, #528]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b82      	ldr	r3, [pc, #520]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0f7      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	f000 8089 	beq.w	8005840 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d133      	bne.n	800579e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005736:	4b79      	ldr	r3, [pc, #484]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0e4      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005746:	f000 fa11 	bl	8005b6c <RCC_GetSysClockFreqFromPLLSource>
 800574a:	4603      	mov	r3, r0
 800574c:	4a74      	ldr	r2, [pc, #464]	; (8005920 <HAL_RCC_ClockConfig+0x248>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d955      	bls.n	80057fe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005752:	4b72      	ldr	r3, [pc, #456]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800575e:	4b6f      	ldr	r3, [pc, #444]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005766:	4a6d      	ldr	r2, [pc, #436]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800576c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800576e:	2380      	movs	r3, #128	; 0x80
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e044      	b.n	80057fe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03e      	beq.n	80057fe <HAL_RCC_ClockConfig+0x126>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d13a      	bne.n	80057fe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005788:	4b64      	ldr	r3, [pc, #400]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005790:	4a62      	ldr	r2, [pc, #392]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005796:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005798:	2380      	movs	r3, #128	; 0x80
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e02f      	b.n	80057fe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057a6:	4b5d      	ldr	r3, [pc, #372]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d115      	bne.n	80057de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0ac      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057be:	4b57      	ldr	r3, [pc, #348]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0a0      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057ce:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e098      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80057de:	f000 f8a7 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 80057e2:	4603      	mov	r3, r0
 80057e4:	4a4e      	ldr	r2, [pc, #312]	; (8005920 <HAL_RCC_ClockConfig+0x248>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d909      	bls.n	80057fe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ea:	4b4c      	ldr	r3, [pc, #304]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f2:	4a4a      	ldr	r2, [pc, #296]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057fe:	4b47      	ldr	r3, [pc, #284]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4944      	ldr	r1, [pc, #272]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 800580c:	4313      	orrs	r3, r2
 800580e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fe f9d0 	bl	8003bb4 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	e00a      	b.n	800582e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005818:	f7fe f9cc 	bl	8003bb4 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e070      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	4b3b      	ldr	r3, [pc, #236]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 020c 	and.w	r2, r3, #12
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	429a      	cmp	r2, r3
 800583e:	d1eb      	bne.n	8005818 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d009      	beq.n	8005860 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800584c:	4b33      	ldr	r3, [pc, #204]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4930      	ldr	r1, [pc, #192]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]
 800585e:	e008      	b.n	8005872 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d105      	bne.n	8005872 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005866:	4b2d      	ldr	r3, [pc, #180]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	4a2c      	ldr	r2, [pc, #176]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 800586c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005870:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d210      	bcs.n	80058a2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 020f 	bic.w	r2, r3, #15
 8005888:	4923      	ldr	r1, [pc, #140]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	4313      	orrs	r3, r2
 800588e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005890:	4b21      	ldr	r3, [pc, #132]	; (8005918 <HAL_RCC_ClockConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e036      	b.n	8005910 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d008      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058ae:	4b1b      	ldr	r3, [pc, #108]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	4918      	ldr	r1, [pc, #96]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058cc:	4b13      	ldr	r3, [pc, #76]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4910      	ldr	r1, [pc, #64]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058e0:	f000 f826 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 80058e4:	4602      	mov	r2, r0
 80058e6:	4b0d      	ldr	r3, [pc, #52]	; (800591c <HAL_RCC_ClockConfig+0x244>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	091b      	lsrs	r3, r3, #4
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	490c      	ldr	r1, [pc, #48]	; (8005924 <HAL_RCC_ClockConfig+0x24c>)
 80058f2:	5ccb      	ldrb	r3, [r1, r3]
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <HAL_RCC_ClockConfig+0x250>)
 80058fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_ClockConfig+0x254>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe f905 	bl	8003b14 <HAL_InitTick>
 800590a:	4603      	mov	r3, r0
 800590c:	73fb      	strb	r3, [r7, #15]

  return status;
 800590e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40022000 	.word	0x40022000
 800591c:	40021000 	.word	0x40021000
 8005920:	04c4b400 	.word	0x04c4b400
 8005924:	0800d724 	.word	0x0800d724
 8005928:	20000000 	.word	0x20000000
 800592c:	20000004 	.word	0x20000004

08005930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005930:	b480      	push	{r7}
 8005932:	b089      	sub	sp, #36	; 0x24
 8005934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	2300      	movs	r3, #0
 800593c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800593e:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005948:	4b3b      	ldr	r3, [pc, #236]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0x34>
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b0c      	cmp	r3, #12
 800595c:	d121      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d11e      	bne.n	80059a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005964:	4b34      	ldr	r3, [pc, #208]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d107      	bne.n	8005980 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005970:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	f003 030f 	and.w	r3, r3, #15
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e005      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005980:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800598c:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005994:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10d      	bne.n	80059b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059a0:	e00a      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d102      	bne.n	80059ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059a8:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e004      	b.n	80059b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059b4:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80059b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d134      	bne.n	8005a28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059be:	4b1e      	ldr	r3, [pc, #120]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d003      	beq.n	80059d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d003      	beq.n	80059dc <HAL_RCC_GetSysClockFreq+0xac>
 80059d4:	e005      	b.n	80059e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80059d8:	617b      	str	r3, [r7, #20]
      break;
 80059da:	e005      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059dc:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80059de:	617b      	str	r3, [r7, #20]
      break;
 80059e0:	e002      	b.n	80059e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	617b      	str	r3, [r7, #20]
      break;
 80059e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e8:	4b13      	ldr	r3, [pc, #76]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	091b      	lsrs	r3, r3, #4
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3301      	adds	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	fb02 f203 	mul.w	r2, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	0e5b      	lsrs	r3, r3, #25
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	3301      	adds	r3, #1
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a28:	69bb      	ldr	r3, [r7, #24]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3724      	adds	r7, #36	; 0x24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	0800d73c 	.word	0x0800d73c
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	007a1200 	.word	0x007a1200

08005a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000000 	.word	0x20000000

08005a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a64:	f7ff fff0 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4904      	ldr	r1, [pc, #16]	; (8005a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000
 8005a88:	0800d734 	.word	0x0800d734

08005a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a90:	f7ff ffda 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0adb      	lsrs	r3, r3, #11
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4904      	ldr	r1, [pc, #16]	; (8005ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	0800d734 	.word	0x0800d734

08005ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ad0:	f7ff f908 	bl	8004ce4 <HAL_PWREx_GetVoltageRange>
 8005ad4:	6178      	str	r0, [r7, #20]
 8005ad6:	e014      	b.n	8005b02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ad8:	4b22      	ldr	r3, [pc, #136]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005adc:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ae4:	4b1f      	ldr	r3, [pc, #124]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aec:	60fb      	str	r3, [r7, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005af0:	f7ff f8f8 	bl	8004ce4 <HAL_PWREx_GetVoltageRange>
 8005af4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005af6:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	4a1a      	ldr	r2, [pc, #104]	; (8005b64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b08:	d10b      	bne.n	8005b22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b80      	cmp	r3, #128	; 0x80
 8005b0e:	d913      	bls.n	8005b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2ba0      	cmp	r3, #160	; 0xa0
 8005b14:	d902      	bls.n	8005b1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b16:	2302      	movs	r3, #2
 8005b18:	613b      	str	r3, [r7, #16]
 8005b1a:	e00d      	b.n	8005b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	e00a      	b.n	8005b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b7f      	cmp	r3, #127	; 0x7f
 8005b26:	d902      	bls.n	8005b2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005b28:	2302      	movs	r3, #2
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	e004      	b.n	8005b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b70      	cmp	r3, #112	; 0x70
 8005b32:	d101      	bne.n	8005b38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b34:	2301      	movs	r3, #1
 8005b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b38:	4b0b      	ldr	r3, [pc, #44]	; (8005b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 020f 	bic.w	r2, r3, #15
 8005b40:	4909      	ldr	r1, [pc, #36]	; (8005b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b48:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d001      	beq.n	8005b5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40022000 	.word	0x40022000

08005b6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005b76:	4b2d      	ldr	r3, [pc, #180]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d118      	bne.n	8005bb4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b82:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e005      	b.n	8005baa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b9e:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005baa:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d003      	beq.n	8005bcc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d003      	beq.n	8005bd2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005bca:	e005      	b.n	8005bd8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005bcc:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005bce:	613b      	str	r3, [r7, #16]
    break;
 8005bd0:	e005      	b.n	8005bde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005bd2:	4b19      	ldr	r3, [pc, #100]	; (8005c38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005bd4:	613b      	str	r3, [r7, #16]
    break;
 8005bd6:	e002      	b.n	8005bde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	613b      	str	r3, [r7, #16]
    break;
 8005bdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	3301      	adds	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	fb02 f203 	mul.w	r2, r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c04:	4b09      	ldr	r3, [pc, #36]	; (8005c2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	0e5b      	lsrs	r3, r3, #25
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005c1e:	683b      	ldr	r3, [r7, #0]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	0800d73c 	.word	0x0800d73c
 8005c34:	00f42400 	.word	0x00f42400
 8005c38:	007a1200 	.word	0x007a1200

08005c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c44:	2300      	movs	r3, #0
 8005c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c48:	2300      	movs	r3, #0
 8005c4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d040      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d02a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c60:	2b80      	cmp	r3, #128	; 0x80
 8005c62:	d825      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c64:	2b60      	cmp	r3, #96	; 0x60
 8005c66:	d026      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005c68:	2b60      	cmp	r3, #96	; 0x60
 8005c6a:	d821      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d006      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d81d      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	d010      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005c7c:	e018      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c7e:	4b89      	ldr	r3, [pc, #548]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a88      	ldr	r2, [pc, #544]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c88:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c8a:	e015      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2100      	movs	r1, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 fb02 	bl	800629c <RCCEx_PLLSAI1_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3320      	adds	r3, #32
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fbed 	bl	8006484 <RCCEx_PLLSAI2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cae:	e003      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	74fb      	strb	r3, [r7, #19]
      break;
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10b      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cbe:	4b79      	ldr	r3, [pc, #484]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cc4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ccc:	4975      	ldr	r1, [pc, #468]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005cd4:	e001      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d047      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cee:	d030      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d82a      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfa:	d02a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d00:	d824      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d06:	d008      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d81e      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d16:	d010      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005d18:	e018      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d1a:	4b62      	ldr	r3, [pc, #392]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	4a61      	ldr	r2, [pc, #388]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d26:	e015      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fab4 	bl	800629c <RCCEx_PLLSAI1_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d38:	e00c      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3320      	adds	r3, #32
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fb9f 	bl	8006484 <RCCEx_PLLSAI2_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d4a:	e003      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	74fb      	strb	r3, [r7, #19]
      break;
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d54:	7cfb      	ldrb	r3, [r7, #19]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d5a:	4b52      	ldr	r3, [pc, #328]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d68:	494e      	ldr	r1, [pc, #312]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005d70:	e001      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	7cfb      	ldrb	r3, [r7, #19]
 8005d74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 809f 	beq.w	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d84:	2300      	movs	r3, #0
 8005d86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d88:	4b46      	ldr	r3, [pc, #280]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	4a40      	ldr	r2, [pc, #256]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da8:	6593      	str	r3, [r2, #88]	; 0x58
 8005daa:	4b3e      	ldr	r3, [pc, #248]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db2:	60bb      	str	r3, [r7, #8]
 8005db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db6:	2301      	movs	r3, #1
 8005db8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dba:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a3a      	ldr	r2, [pc, #232]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dc6:	f7fd fef5 	bl	8003bb4 <HAL_GetTick>
 8005dca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dcc:	e009      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dce:	f7fd fef1 	bl	8003bb4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d902      	bls.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	74fb      	strb	r3, [r7, #19]
        break;
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005de2:	4b31      	ldr	r3, [pc, #196]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ef      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d15b      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01f      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d019      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e12:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e1e:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e34:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e3e:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd feb0 	bl	8003bb4 <HAL_GetTick>
 8005e54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e56:	e00b      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fd feac 	bl	8003bb4 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d902      	bls.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	74fb      	strb	r3, [r7, #19]
            break;
 8005e6e:	e006      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e70:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ec      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10c      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e84:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e94:	4903      	ldr	r1, [pc, #12]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	74bb      	strb	r3, [r7, #18]
 8005ea2:	e005      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	7cfb      	ldrb	r3, [r7, #19]
 8005eae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eb0:	7c7b      	ldrb	r3, [r7, #17]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d105      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb6:	4ba0      	ldr	r3, [pc, #640]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	4a9f      	ldr	r2, [pc, #636]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ec0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ece:	4b9a      	ldr	r3, [pc, #616]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f023 0203 	bic.w	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	4996      	ldr	r1, [pc, #600]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ef0:	4b91      	ldr	r3, [pc, #580]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f023 020c 	bic.w	r2, r3, #12
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	498e      	ldr	r1, [pc, #568]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f12:	4b89      	ldr	r3, [pc, #548]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	4985      	ldr	r1, [pc, #532]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f34:	4b80      	ldr	r3, [pc, #512]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f42:	497d      	ldr	r1, [pc, #500]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f56:	4b78      	ldr	r3, [pc, #480]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	4974      	ldr	r1, [pc, #464]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f78:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	496c      	ldr	r1, [pc, #432]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f9a:	4b67      	ldr	r3, [pc, #412]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa8:	4963      	ldr	r1, [pc, #396]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fbc:	4b5e      	ldr	r3, [pc, #376]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fca:	495b      	ldr	r1, [pc, #364]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fde:	4b56      	ldr	r3, [pc, #344]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	4952      	ldr	r1, [pc, #328]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006000:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	494a      	ldr	r1, [pc, #296]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006022:	4b45      	ldr	r3, [pc, #276]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	4941      	ldr	r1, [pc, #260]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006044:	4b3c      	ldr	r3, [pc, #240]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800604a:	f023 0203 	bic.w	r2, r3, #3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006052:	4939      	ldr	r1, [pc, #228]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d028      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006066:	4b34      	ldr	r3, [pc, #208]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	4930      	ldr	r1, [pc, #192]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006084:	d106      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006086:	4b2c      	ldr	r3, [pc, #176]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4a2b      	ldr	r2, [pc, #172]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800608c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006090:	60d3      	str	r3, [r2, #12]
 8006092:	e011      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800609c:	d10c      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2101      	movs	r1, #1
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 f8f9 	bl	800629c <RCCEx_PLLSAI1_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060ae:	7cfb      	ldrb	r3, [r7, #19]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80060b4:	7cfb      	ldrb	r3, [r7, #19]
 80060b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d04d      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060cc:	d108      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80060ce:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d4:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80060de:	e012      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80060e0:	4b15      	ldr	r3, [pc, #84]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060e6:	4a14      	ldr	r2, [pc, #80]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80060f0:	4b11      	ldr	r3, [pc, #68]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060fe:	490e      	ldr	r1, [pc, #56]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006100:	4313      	orrs	r3, r2
 8006102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800610a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610e:	d106      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a08      	ldr	r2, [pc, #32]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611a:	60d3      	str	r3, [r2, #12]
 800611c:	e020      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006126:	d109      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006128:	4b03      	ldr	r3, [pc, #12]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a02      	ldr	r2, [pc, #8]	; (8006138 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006132:	60d3      	str	r3, [r2, #12]
 8006134:	e014      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006136:	bf00      	nop
 8006138:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006144:	d10c      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3304      	adds	r3, #4
 800614a:	2101      	movs	r1, #1
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f8a5 	bl	800629c <RCCEx_PLLSAI1_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800615c:	7cfb      	ldrb	r3, [r7, #19]
 800615e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d028      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800616c:	4b4a      	ldr	r3, [pc, #296]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617a:	4947      	ldr	r1, [pc, #284]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800617c:	4313      	orrs	r3, r2
 800617e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800618a:	d106      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800618c:	4b42      	ldr	r3, [pc, #264]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a41      	ldr	r2, [pc, #260]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006196:	60d3      	str	r3, [r2, #12]
 8006198:	e011      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061a2:	d10c      	bne.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	2101      	movs	r1, #1
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f876 	bl	800629c <RCCEx_PLLSAI1_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061b4:	7cfb      	ldrb	r3, [r7, #19]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01e      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061ca:	4b33      	ldr	r3, [pc, #204]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061da:	492f      	ldr	r1, [pc, #188]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ec:	d10c      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	2102      	movs	r1, #2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f851 	bl	800629c <RCCEx_PLLSAI1_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006204:	7cfb      	ldrb	r3, [r7, #19]
 8006206:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006214:	4b20      	ldr	r3, [pc, #128]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800621a:	f023 0204 	bic.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006224:	491c      	ldr	r1, [pc, #112]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006238:	4b17      	ldr	r3, [pc, #92]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800623a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800623e:	f023 0218 	bic.w	r2, r3, #24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006248:	4913      	ldr	r1, [pc, #76]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800625e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800626c:	490a      	ldr	r1, [pc, #40]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800627a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800627e:	d105      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	4a04      	ldr	r2, [pc, #16]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800628a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800628c:	7cbb      	ldrb	r3, [r7, #18]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000

0800629c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062aa:	4b72      	ldr	r3, [pc, #456]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062b6:	4b6f      	ldr	r3, [pc, #444]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0203 	and.w	r2, r3, #3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d103      	bne.n	80062ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
       ||
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d142      	bne.n	8006354 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
 80062d2:	e03f      	b.n	8006354 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d018      	beq.n	800630e <RCCEx_PLLSAI1_Config+0x72>
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d825      	bhi.n	800632c <RCCEx_PLLSAI1_Config+0x90>
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d002      	beq.n	80062ea <RCCEx_PLLSAI1_Config+0x4e>
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d009      	beq.n	80062fc <RCCEx_PLLSAI1_Config+0x60>
 80062e8:	e020      	b.n	800632c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ea:	4b62      	ldr	r3, [pc, #392]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11d      	bne.n	8006332 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062fa:	e01a      	b.n	8006332 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062fc:	4b5d      	ldr	r3, [pc, #372]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006304:	2b00      	cmp	r3, #0
 8006306:	d116      	bne.n	8006336 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800630c:	e013      	b.n	8006336 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800630e:	4b59      	ldr	r3, [pc, #356]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10f      	bne.n	800633a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800631a:	4b56      	ldr	r3, [pc, #344]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800632a:	e006      	b.n	800633a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      break;
 8006330:	e004      	b.n	800633c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006332:	bf00      	nop
 8006334:	e002      	b.n	800633c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800633a:	bf00      	nop
    }

    if(status == HAL_OK)
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d108      	bne.n	8006354 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006342:	4b4c      	ldr	r3, [pc, #304]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f023 0203 	bic.w	r2, r3, #3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4949      	ldr	r1, [pc, #292]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006350:	4313      	orrs	r3, r2
 8006352:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 8086 	bne.w	8006468 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800635c:	4b45      	ldr	r3, [pc, #276]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a44      	ldr	r2, [pc, #272]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006362:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006368:	f7fd fc24 	bl	8003bb4 <HAL_GetTick>
 800636c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800636e:	e009      	b.n	8006384 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006370:	f7fd fc20 	bl	8003bb4 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d902      	bls.n	8006384 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	73fb      	strb	r3, [r7, #15]
        break;
 8006382:	e005      	b.n	8006390 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006384:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1ef      	bne.n	8006370 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d168      	bne.n	8006468 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d113      	bne.n	80063c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800639c:	4b35      	ldr	r3, [pc, #212]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	4b35      	ldr	r3, [pc, #212]	; (8006478 <RCCEx_PLLSAI1_Config+0x1dc>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6892      	ldr	r2, [r2, #8]
 80063a8:	0211      	lsls	r1, r2, #8
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68d2      	ldr	r2, [r2, #12]
 80063ae:	06d2      	lsls	r2, r2, #27
 80063b0:	4311      	orrs	r1, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6852      	ldr	r2, [r2, #4]
 80063b6:	3a01      	subs	r2, #1
 80063b8:	0112      	lsls	r2, r2, #4
 80063ba:	430a      	orrs	r2, r1
 80063bc:	492d      	ldr	r1, [pc, #180]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]
 80063c2:	e02d      	b.n	8006420 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d115      	bne.n	80063f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063ca:	4b2a      	ldr	r3, [pc, #168]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063cc:	691a      	ldr	r2, [r3, #16]
 80063ce:	4b2b      	ldr	r3, [pc, #172]	; (800647c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6892      	ldr	r2, [r2, #8]
 80063d6:	0211      	lsls	r1, r2, #8
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6912      	ldr	r2, [r2, #16]
 80063dc:	0852      	lsrs	r2, r2, #1
 80063de:	3a01      	subs	r2, #1
 80063e0:	0552      	lsls	r2, r2, #21
 80063e2:	4311      	orrs	r1, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6852      	ldr	r2, [r2, #4]
 80063e8:	3a01      	subs	r2, #1
 80063ea:	0112      	lsls	r2, r2, #4
 80063ec:	430a      	orrs	r2, r1
 80063ee:	4921      	ldr	r1, [pc, #132]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	610b      	str	r3, [r1, #16]
 80063f4:	e014      	b.n	8006420 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063f6:	4b1f      	ldr	r3, [pc, #124]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	4b21      	ldr	r3, [pc, #132]	; (8006480 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6892      	ldr	r2, [r2, #8]
 8006402:	0211      	lsls	r1, r2, #8
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	6952      	ldr	r2, [r2, #20]
 8006408:	0852      	lsrs	r2, r2, #1
 800640a:	3a01      	subs	r2, #1
 800640c:	0652      	lsls	r2, r2, #25
 800640e:	4311      	orrs	r1, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6852      	ldr	r2, [r2, #4]
 8006414:	3a01      	subs	r2, #1
 8006416:	0112      	lsls	r2, r2, #4
 8006418:	430a      	orrs	r2, r1
 800641a:	4916      	ldr	r1, [pc, #88]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 800641c:	4313      	orrs	r3, r2
 800641e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006420:	4b14      	ldr	r3, [pc, #80]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a13      	ldr	r2, [pc, #76]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800642a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642c:	f7fd fbc2 	bl	8003bb4 <HAL_GetTick>
 8006430:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006432:	e009      	b.n	8006448 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006434:	f7fd fbbe 	bl	8003bb4 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d902      	bls.n	8006448 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	73fb      	strb	r3, [r7, #15]
          break;
 8006446:	e005      	b.n	8006454 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0ef      	beq.n	8006434 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	4904      	ldr	r1, [pc, #16]	; (8006474 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006464:	4313      	orrs	r3, r2
 8006466:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
 8006478:	07ff800f 	.word	0x07ff800f
 800647c:	ff9f800f 	.word	0xff9f800f
 8006480:	f9ff800f 	.word	0xf9ff800f

08006484 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006492:	4b72      	ldr	r3, [pc, #456]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00e      	beq.n	80064bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800649e:	4b6f      	ldr	r3, [pc, #444]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f003 0203 	and.w	r2, r3, #3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d103      	bne.n	80064b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
       ||
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d142      	bne.n	800653c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
 80064ba:	e03f      	b.n	800653c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d018      	beq.n	80064f6 <RCCEx_PLLSAI2_Config+0x72>
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d825      	bhi.n	8006514 <RCCEx_PLLSAI2_Config+0x90>
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d002      	beq.n	80064d2 <RCCEx_PLLSAI2_Config+0x4e>
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d009      	beq.n	80064e4 <RCCEx_PLLSAI2_Config+0x60>
 80064d0:	e020      	b.n	8006514 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064d2:	4b62      	ldr	r3, [pc, #392]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d11d      	bne.n	800651a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e2:	e01a      	b.n	800651a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064e4:	4b5d      	ldr	r3, [pc, #372]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d116      	bne.n	800651e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064f4:	e013      	b.n	800651e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064f6:	4b59      	ldr	r3, [pc, #356]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006502:	4b56      	ldr	r3, [pc, #344]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006512:	e006      	b.n	8006522 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
      break;
 8006518:	e004      	b.n	8006524 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800651a:	bf00      	nop
 800651c:	e002      	b.n	8006524 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800651e:	bf00      	nop
 8006520:	e000      	b.n	8006524 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006522:	bf00      	nop
    }

    if(status == HAL_OK)
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800652a:	4b4c      	ldr	r3, [pc, #304]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f023 0203 	bic.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4949      	ldr	r1, [pc, #292]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006538:	4313      	orrs	r3, r2
 800653a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 8086 	bne.w	8006650 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006544:	4b45      	ldr	r3, [pc, #276]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a44      	ldr	r2, [pc, #272]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 800654a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800654e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006550:	f7fd fb30 	bl	8003bb4 <HAL_GetTick>
 8006554:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006556:	e009      	b.n	800656c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006558:	f7fd fb2c 	bl	8003bb4 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d902      	bls.n	800656c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
        break;
 800656a:	e005      	b.n	8006578 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800656c:	4b3b      	ldr	r3, [pc, #236]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1ef      	bne.n	8006558 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d168      	bne.n	8006650 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d113      	bne.n	80065ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006584:	4b35      	ldr	r3, [pc, #212]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006586:	695a      	ldr	r2, [r3, #20]
 8006588:	4b35      	ldr	r3, [pc, #212]	; (8006660 <RCCEx_PLLSAI2_Config+0x1dc>)
 800658a:	4013      	ands	r3, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6892      	ldr	r2, [r2, #8]
 8006590:	0211      	lsls	r1, r2, #8
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68d2      	ldr	r2, [r2, #12]
 8006596:	06d2      	lsls	r2, r2, #27
 8006598:	4311      	orrs	r1, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6852      	ldr	r2, [r2, #4]
 800659e:	3a01      	subs	r2, #1
 80065a0:	0112      	lsls	r2, r2, #4
 80065a2:	430a      	orrs	r2, r1
 80065a4:	492d      	ldr	r1, [pc, #180]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	614b      	str	r3, [r1, #20]
 80065aa:	e02d      	b.n	8006608 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d115      	bne.n	80065de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065b2:	4b2a      	ldr	r3, [pc, #168]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065b4:	695a      	ldr	r2, [r3, #20]
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <RCCEx_PLLSAI2_Config+0x1e0>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6892      	ldr	r2, [r2, #8]
 80065be:	0211      	lsls	r1, r2, #8
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6912      	ldr	r2, [r2, #16]
 80065c4:	0852      	lsrs	r2, r2, #1
 80065c6:	3a01      	subs	r2, #1
 80065c8:	0552      	lsls	r2, r2, #21
 80065ca:	4311      	orrs	r1, r2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6852      	ldr	r2, [r2, #4]
 80065d0:	3a01      	subs	r2, #1
 80065d2:	0112      	lsls	r2, r2, #4
 80065d4:	430a      	orrs	r2, r1
 80065d6:	4921      	ldr	r1, [pc, #132]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	614b      	str	r3, [r1, #20]
 80065dc:	e014      	b.n	8006608 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80065de:	4b1f      	ldr	r3, [pc, #124]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	4b21      	ldr	r3, [pc, #132]	; (8006668 <RCCEx_PLLSAI2_Config+0x1e4>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6892      	ldr	r2, [r2, #8]
 80065ea:	0211      	lsls	r1, r2, #8
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6952      	ldr	r2, [r2, #20]
 80065f0:	0852      	lsrs	r2, r2, #1
 80065f2:	3a01      	subs	r2, #1
 80065f4:	0652      	lsls	r2, r2, #25
 80065f6:	4311      	orrs	r1, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6852      	ldr	r2, [r2, #4]
 80065fc:	3a01      	subs	r2, #1
 80065fe:	0112      	lsls	r2, r2, #4
 8006600:	430a      	orrs	r2, r1
 8006602:	4916      	ldr	r1, [pc, #88]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006604:	4313      	orrs	r3, r2
 8006606:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006608:	4b14      	ldr	r3, [pc, #80]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a13      	ldr	r2, [pc, #76]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 800660e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006612:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fd face 	bl	8003bb4 <HAL_GetTick>
 8006618:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800661a:	e009      	b.n	8006630 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800661c:	f7fd faca 	bl	8003bb4 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d902      	bls.n	8006630 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	73fb      	strb	r3, [r7, #15]
          break;
 800662e:	e005      	b.n	800663c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0ef      	beq.n	800661c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	4904      	ldr	r1, [pc, #16]	; (800665c <RCCEx_PLLSAI2_Config+0x1d8>)
 800664c:	4313      	orrs	r3, r2
 800664e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40021000 	.word	0x40021000
 8006660:	07ff800f 	.word	0x07ff800f
 8006664:	ff9f800f 	.word	0xff9f800f
 8006668:	f9ff800f 	.word	0xf9ff800f

0800666c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e049      	b.n	8006712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fd f858 	bl	8003748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f000 fb7a 	bl	8006da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d101      	bne.n	800672c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e049      	b.n	80067c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f841 	bl	80067c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f000 fb23 	bl	8006da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <HAL_TIM_PWM_Start+0x24>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	bf14      	ite	ne
 80067f8:	2301      	movne	r3, #1
 80067fa:	2300      	moveq	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	e03c      	b.n	800687a <HAL_TIM_PWM_Start+0x9e>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d109      	bne.n	800681a <HAL_TIM_PWM_Start+0x3e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b01      	cmp	r3, #1
 8006810:	bf14      	ite	ne
 8006812:	2301      	movne	r3, #1
 8006814:	2300      	moveq	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	e02f      	b.n	800687a <HAL_TIM_PWM_Start+0x9e>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d109      	bne.n	8006834 <HAL_TIM_PWM_Start+0x58>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b01      	cmp	r3, #1
 800682a:	bf14      	ite	ne
 800682c:	2301      	movne	r3, #1
 800682e:	2300      	moveq	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e022      	b.n	800687a <HAL_TIM_PWM_Start+0x9e>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b0c      	cmp	r3, #12
 8006838:	d109      	bne.n	800684e <HAL_TIM_PWM_Start+0x72>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b01      	cmp	r3, #1
 8006844:	bf14      	ite	ne
 8006846:	2301      	movne	r3, #1
 8006848:	2300      	moveq	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	e015      	b.n	800687a <HAL_TIM_PWM_Start+0x9e>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b10      	cmp	r3, #16
 8006852:	d109      	bne.n	8006868 <HAL_TIM_PWM_Start+0x8c>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	bf14      	ite	ne
 8006860:	2301      	movne	r3, #1
 8006862:	2300      	moveq	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	e008      	b.n	800687a <HAL_TIM_PWM_Start+0x9e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	bf14      	ite	ne
 8006874:	2301      	movne	r3, #1
 8006876:	2300      	moveq	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e09c      	b.n	80069bc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <HAL_TIM_PWM_Start+0xb6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006890:	e023      	b.n	80068da <HAL_TIM_PWM_Start+0xfe>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b04      	cmp	r3, #4
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_PWM_Start+0xc6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a0:	e01b      	b.n	80068da <HAL_TIM_PWM_Start+0xfe>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_PWM_Start+0xd6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b0:	e013      	b.n	80068da <HAL_TIM_PWM_Start+0xfe>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b0c      	cmp	r3, #12
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_PWM_Start+0xe6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c0:	e00b      	b.n	80068da <HAL_TIM_PWM_Start+0xfe>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d104      	bne.n	80068d2 <HAL_TIM_PWM_Start+0xf6>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d0:	e003      	b.n	80068da <HAL_TIM_PWM_Start+0xfe>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fe68 	bl	80075b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a35      	ldr	r2, [pc, #212]	; (80069c4 <HAL_TIM_PWM_Start+0x1e8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d013      	beq.n	800691a <HAL_TIM_PWM_Start+0x13e>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <HAL_TIM_PWM_Start+0x1ec>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00e      	beq.n	800691a <HAL_TIM_PWM_Start+0x13e>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a32      	ldr	r2, [pc, #200]	; (80069cc <HAL_TIM_PWM_Start+0x1f0>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_TIM_PWM_Start+0x13e>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a31      	ldr	r2, [pc, #196]	; (80069d0 <HAL_TIM_PWM_Start+0x1f4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_TIM_PWM_Start+0x13e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a2f      	ldr	r2, [pc, #188]	; (80069d4 <HAL_TIM_PWM_Start+0x1f8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d101      	bne.n	800691e <HAL_TIM_PWM_Start+0x142>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <HAL_TIM_PWM_Start+0x144>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006932:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <HAL_TIM_PWM_Start+0x1e8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_TIM_PWM_Start+0x19e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006946:	d018      	beq.n	800697a <HAL_TIM_PWM_Start+0x19e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a22      	ldr	r2, [pc, #136]	; (80069d8 <HAL_TIM_PWM_Start+0x1fc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_TIM_PWM_Start+0x19e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a21      	ldr	r2, [pc, #132]	; (80069dc <HAL_TIM_PWM_Start+0x200>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_TIM_PWM_Start+0x19e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_TIM_PWM_Start+0x204>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIM_PWM_Start+0x19e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <HAL_TIM_PWM_Start+0x1ec>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIM_PWM_Start+0x19e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <HAL_TIM_PWM_Start+0x1f0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d115      	bne.n	80069a6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <HAL_TIM_PWM_Start+0x208>)
 8006982:	4013      	ands	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b06      	cmp	r3, #6
 800698a:	d015      	beq.n	80069b8 <HAL_TIM_PWM_Start+0x1dc>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006992:	d011      	beq.n	80069b8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0201 	orr.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	e008      	b.n	80069b8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0201 	orr.w	r2, r2, #1
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	e000      	b.n	80069ba <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40013400 	.word	0x40013400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
 80069e4:	00010007 	.word	0x00010007

080069e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0ff      	b.n	8006c06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b14      	cmp	r3, #20
 8006a12:	f200 80f0 	bhi.w	8006bf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a71 	.word	0x08006a71
 8006a20:	08006bf7 	.word	0x08006bf7
 8006a24:	08006bf7 	.word	0x08006bf7
 8006a28:	08006bf7 	.word	0x08006bf7
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006bf7 	.word	0x08006bf7
 8006a34:	08006bf7 	.word	0x08006bf7
 8006a38:	08006bf7 	.word	0x08006bf7
 8006a3c:	08006af3 	.word	0x08006af3
 8006a40:	08006bf7 	.word	0x08006bf7
 8006a44:	08006bf7 	.word	0x08006bf7
 8006a48:	08006bf7 	.word	0x08006bf7
 8006a4c:	08006b33 	.word	0x08006b33
 8006a50:	08006bf7 	.word	0x08006bf7
 8006a54:	08006bf7 	.word	0x08006bf7
 8006a58:	08006bf7 	.word	0x08006bf7
 8006a5c:	08006b75 	.word	0x08006b75
 8006a60:	08006bf7 	.word	0x08006bf7
 8006a64:	08006bf7 	.word	0x08006bf7
 8006a68:	08006bf7 	.word	0x08006bf7
 8006a6c:	08006bb5 	.word	0x08006bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa2e 	bl	8006ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0208 	orr.w	r2, r2, #8
 8006a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0204 	bic.w	r2, r2, #4
 8006a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6999      	ldr	r1, [r3, #24]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	619a      	str	r2, [r3, #24]
      break;
 8006aae:	e0a5      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fa9e 	bl	8006ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6999      	ldr	r1, [r3, #24]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	021a      	lsls	r2, r3, #8
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	619a      	str	r2, [r3, #24]
      break;
 8006af0:	e084      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fb07 	bl	800710c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0208 	orr.w	r2, r2, #8
 8006b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0204 	bic.w	r2, r2, #4
 8006b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69d9      	ldr	r1, [r3, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691a      	ldr	r2, [r3, #16]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	61da      	str	r2, [r3, #28]
      break;
 8006b30:	e064      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fb6f 	bl	800721c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	69d9      	ldr	r1, [r3, #28]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	021a      	lsls	r2, r3, #8
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	61da      	str	r2, [r3, #28]
      break;
 8006b72:	e043      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 fbb8 	bl	80072f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0208 	orr.w	r2, r2, #8
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bb2:	e023      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fbfc 	bl	80073b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	021a      	lsls	r2, r3, #8
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bf4:	e002      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop

08006c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_TIM_ConfigClockSource+0x1c>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e0b6      	b.n	8006d9a <HAL_TIM_ConfigClockSource+0x18a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c68:	d03e      	beq.n	8006ce8 <HAL_TIM_ConfigClockSource+0xd8>
 8006c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c6e:	f200 8087 	bhi.w	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c76:	f000 8086 	beq.w	8006d86 <HAL_TIM_ConfigClockSource+0x176>
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	d87f      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006c80:	2b70      	cmp	r3, #112	; 0x70
 8006c82:	d01a      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0xaa>
 8006c84:	2b70      	cmp	r3, #112	; 0x70
 8006c86:	d87b      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006c88:	2b60      	cmp	r3, #96	; 0x60
 8006c8a:	d050      	beq.n	8006d2e <HAL_TIM_ConfigClockSource+0x11e>
 8006c8c:	2b60      	cmp	r3, #96	; 0x60
 8006c8e:	d877      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006c90:	2b50      	cmp	r3, #80	; 0x50
 8006c92:	d03c      	beq.n	8006d0e <HAL_TIM_ConfigClockSource+0xfe>
 8006c94:	2b50      	cmp	r3, #80	; 0x50
 8006c96:	d873      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d058      	beq.n	8006d4e <HAL_TIM_ConfigClockSource+0x13e>
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d86f      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006ca0:	2b30      	cmp	r3, #48	; 0x30
 8006ca2:	d064      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x15e>
 8006ca4:	2b30      	cmp	r3, #48	; 0x30
 8006ca6:	d86b      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d060      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x15e>
 8006cac:	2b20      	cmp	r3, #32
 8006cae:	d867      	bhi.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05c      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x15e>
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d05a      	beq.n	8006d6e <HAL_TIM_ConfigClockSource+0x15e>
 8006cb8:	e062      	b.n	8006d80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6899      	ldr	r1, [r3, #8]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f000 fc55 	bl	8007578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	609a      	str	r2, [r3, #8]
      break;
 8006ce6:	e04f      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	6899      	ldr	r1, [r3, #8]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f000 fc3e 	bl	8007578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d0a:	609a      	str	r2, [r3, #8]
      break;
 8006d0c:	e03c      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	6859      	ldr	r1, [r3, #4]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f000 fbb2 	bl	8007484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2150      	movs	r1, #80	; 0x50
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fc0b 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 8006d2c:	e02c      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6859      	ldr	r1, [r3, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f000 fbd1 	bl	80074e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2160      	movs	r1, #96	; 0x60
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fbfb 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 8006d4c:	e01c      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6859      	ldr	r1, [r3, #4]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f000 fb92 	bl	8007484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2140      	movs	r1, #64	; 0x40
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fbeb 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 8006d6c:	e00c      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f000 fbe2 	bl	8007542 <TIM_ITRx_SetConfig>
      break;
 8006d7e:	e003      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
      break;
 8006d84:	e000      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
	...

08006da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a40      	ldr	r2, [pc, #256]	; (8006eb8 <TIM_Base_SetConfig+0x114>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <TIM_Base_SetConfig+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d00f      	beq.n	8006de4 <TIM_Base_SetConfig+0x40>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a3d      	ldr	r2, [pc, #244]	; (8006ebc <TIM_Base_SetConfig+0x118>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <TIM_Base_SetConfig+0x40>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a3c      	ldr	r2, [pc, #240]	; (8006ec0 <TIM_Base_SetConfig+0x11c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d007      	beq.n	8006de4 <TIM_Base_SetConfig+0x40>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a3b      	ldr	r2, [pc, #236]	; (8006ec4 <TIM_Base_SetConfig+0x120>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d003      	beq.n	8006de4 <TIM_Base_SetConfig+0x40>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a3a      	ldr	r2, [pc, #232]	; (8006ec8 <TIM_Base_SetConfig+0x124>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d108      	bne.n	8006df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2f      	ldr	r2, [pc, #188]	; (8006eb8 <TIM_Base_SetConfig+0x114>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d01f      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e04:	d01b      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <TIM_Base_SetConfig+0x118>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d017      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a2b      	ldr	r2, [pc, #172]	; (8006ec0 <TIM_Base_SetConfig+0x11c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <TIM_Base_SetConfig+0x120>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00f      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a29      	ldr	r2, [pc, #164]	; (8006ec8 <TIM_Base_SetConfig+0x124>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00b      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a28      	ldr	r2, [pc, #160]	; (8006ecc <TIM_Base_SetConfig+0x128>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d007      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a27      	ldr	r2, [pc, #156]	; (8006ed0 <TIM_Base_SetConfig+0x12c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d003      	beq.n	8006e3e <TIM_Base_SetConfig+0x9a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a26      	ldr	r2, [pc, #152]	; (8006ed4 <TIM_Base_SetConfig+0x130>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d108      	bne.n	8006e50 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a10      	ldr	r2, [pc, #64]	; (8006eb8 <TIM_Base_SetConfig+0x114>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00f      	beq.n	8006e9c <TIM_Base_SetConfig+0xf8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <TIM_Base_SetConfig+0x124>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00b      	beq.n	8006e9c <TIM_Base_SetConfig+0xf8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a11      	ldr	r2, [pc, #68]	; (8006ecc <TIM_Base_SetConfig+0x128>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d007      	beq.n	8006e9c <TIM_Base_SetConfig+0xf8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <TIM_Base_SetConfig+0x12c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_Base_SetConfig+0xf8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a0f      	ldr	r2, [pc, #60]	; (8006ed4 <TIM_Base_SetConfig+0x130>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d103      	bne.n	8006ea4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	615a      	str	r2, [r3, #20]
}
 8006eaa:	bf00      	nop
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40000400 	.word	0x40000400
 8006ec0:	40000800 	.word	0x40000800
 8006ec4:	40000c00 	.word	0x40000c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800

08006ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0303 	bic.w	r3, r3, #3
 8006f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f023 0302 	bic.w	r3, r3, #2
 8006f24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a2c      	ldr	r2, [pc, #176]	; (8006fe4 <TIM_OC1_SetConfig+0x10c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00f      	beq.n	8006f58 <TIM_OC1_SetConfig+0x80>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a2b      	ldr	r2, [pc, #172]	; (8006fe8 <TIM_OC1_SetConfig+0x110>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <TIM_OC1_SetConfig+0x80>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <TIM_OC1_SetConfig+0x114>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d007      	beq.n	8006f58 <TIM_OC1_SetConfig+0x80>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a29      	ldr	r2, [pc, #164]	; (8006ff0 <TIM_OC1_SetConfig+0x118>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_OC1_SetConfig+0x80>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a28      	ldr	r2, [pc, #160]	; (8006ff4 <TIM_OC1_SetConfig+0x11c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d10c      	bne.n	8006f72 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0308 	bic.w	r3, r3, #8
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f023 0304 	bic.w	r3, r3, #4
 8006f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1b      	ldr	r2, [pc, #108]	; (8006fe4 <TIM_OC1_SetConfig+0x10c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00f      	beq.n	8006f9a <TIM_OC1_SetConfig+0xc2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1a      	ldr	r2, [pc, #104]	; (8006fe8 <TIM_OC1_SetConfig+0x110>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00b      	beq.n	8006f9a <TIM_OC1_SetConfig+0xc2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a19      	ldr	r2, [pc, #100]	; (8006fec <TIM_OC1_SetConfig+0x114>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d007      	beq.n	8006f9a <TIM_OC1_SetConfig+0xc2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a18      	ldr	r2, [pc, #96]	; (8006ff0 <TIM_OC1_SetConfig+0x118>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d003      	beq.n	8006f9a <TIM_OC1_SetConfig+0xc2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a17      	ldr	r2, [pc, #92]	; (8006ff4 <TIM_OC1_SetConfig+0x11c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d111      	bne.n	8006fbe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0210 	bic.w	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f023 0320 	bic.w	r3, r3, #32
 8007046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a28      	ldr	r2, [pc, #160]	; (80070f8 <TIM_OC2_SetConfig+0x100>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_OC2_SetConfig+0x6c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a27      	ldr	r2, [pc, #156]	; (80070fc <TIM_OC2_SetConfig+0x104>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d10d      	bne.n	8007080 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800707e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a1d      	ldr	r2, [pc, #116]	; (80070f8 <TIM_OC2_SetConfig+0x100>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00f      	beq.n	80070a8 <TIM_OC2_SetConfig+0xb0>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <TIM_OC2_SetConfig+0x104>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00b      	beq.n	80070a8 <TIM_OC2_SetConfig+0xb0>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <TIM_OC2_SetConfig+0x108>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d007      	beq.n	80070a8 <TIM_OC2_SetConfig+0xb0>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <TIM_OC2_SetConfig+0x10c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_OC2_SetConfig+0xb0>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a19      	ldr	r2, [pc, #100]	; (8007108 <TIM_OC2_SetConfig+0x110>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d113      	bne.n	80070d0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	621a      	str	r2, [r3, #32]
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40012c00 	.word	0x40012c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400
 8007108:	40014800 	.word	0x40014800

0800710c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a27      	ldr	r2, [pc, #156]	; (8007208 <TIM_OC3_SetConfig+0xfc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_OC3_SetConfig+0x6a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a26      	ldr	r2, [pc, #152]	; (800720c <TIM_OC3_SetConfig+0x100>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10d      	bne.n	8007192 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800717c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a1c      	ldr	r2, [pc, #112]	; (8007208 <TIM_OC3_SetConfig+0xfc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_OC3_SetConfig+0xae>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a1b      	ldr	r2, [pc, #108]	; (800720c <TIM_OC3_SetConfig+0x100>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_OC3_SetConfig+0xae>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a1a      	ldr	r2, [pc, #104]	; (8007210 <TIM_OC3_SetConfig+0x104>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_OC3_SetConfig+0xae>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <TIM_OC3_SetConfig+0x108>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_OC3_SetConfig+0xae>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a18      	ldr	r2, [pc, #96]	; (8007218 <TIM_OC3_SetConfig+0x10c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d113      	bne.n	80071e2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	bf00      	nop
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40014000 	.word	0x40014000
 8007214:	40014400 	.word	0x40014400
 8007218:	40014800 	.word	0x40014800

0800721c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a18      	ldr	r2, [pc, #96]	; (80072dc <TIM_OC4_SetConfig+0xc0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00f      	beq.n	80072a0 <TIM_OC4_SetConfig+0x84>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <TIM_OC4_SetConfig+0xc4>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00b      	beq.n	80072a0 <TIM_OC4_SetConfig+0x84>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <TIM_OC4_SetConfig+0xc8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d007      	beq.n	80072a0 <TIM_OC4_SetConfig+0x84>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <TIM_OC4_SetConfig+0xcc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d003      	beq.n	80072a0 <TIM_OC4_SetConfig+0x84>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a14      	ldr	r2, [pc, #80]	; (80072ec <TIM_OC4_SetConfig+0xd0>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d109      	bne.n	80072b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	019b      	lsls	r3, r3, #6
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	621a      	str	r2, [r3, #32]
}
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40012c00 	.word	0x40012c00
 80072e0:	40013400 	.word	0x40013400
 80072e4:	40014000 	.word	0x40014000
 80072e8:	40014400 	.word	0x40014400
 80072ec:	40014800 	.word	0x40014800

080072f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800731e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a17      	ldr	r2, [pc, #92]	; (80073a4 <TIM_OC5_SetConfig+0xb4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00f      	beq.n	800736a <TIM_OC5_SetConfig+0x7a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a16      	ldr	r2, [pc, #88]	; (80073a8 <TIM_OC5_SetConfig+0xb8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00b      	beq.n	800736a <TIM_OC5_SetConfig+0x7a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a15      	ldr	r2, [pc, #84]	; (80073ac <TIM_OC5_SetConfig+0xbc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d007      	beq.n	800736a <TIM_OC5_SetConfig+0x7a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a14      	ldr	r2, [pc, #80]	; (80073b0 <TIM_OC5_SetConfig+0xc0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_OC5_SetConfig+0x7a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a13      	ldr	r2, [pc, #76]	; (80073b4 <TIM_OC5_SetConfig+0xc4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d109      	bne.n	800737e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	621a      	str	r2, [r3, #32]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40013400 	.word	0x40013400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40014400 	.word	0x40014400
 80073b4:	40014800 	.word	0x40014800

080073b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	051b      	lsls	r3, r3, #20
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a18      	ldr	r2, [pc, #96]	; (8007470 <TIM_OC6_SetConfig+0xb8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00f      	beq.n	8007434 <TIM_OC6_SetConfig+0x7c>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a17      	ldr	r2, [pc, #92]	; (8007474 <TIM_OC6_SetConfig+0xbc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00b      	beq.n	8007434 <TIM_OC6_SetConfig+0x7c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a16      	ldr	r2, [pc, #88]	; (8007478 <TIM_OC6_SetConfig+0xc0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d007      	beq.n	8007434 <TIM_OC6_SetConfig+0x7c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a15      	ldr	r2, [pc, #84]	; (800747c <TIM_OC6_SetConfig+0xc4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_OC6_SetConfig+0x7c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a14      	ldr	r2, [pc, #80]	; (8007480 <TIM_OC6_SetConfig+0xc8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d109      	bne.n	8007448 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800743a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	029b      	lsls	r3, r3, #10
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	621a      	str	r2, [r3, #32]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40013400 	.word	0x40013400
 8007478:	40014000 	.word	0x40014000
 800747c:	40014400 	.word	0x40014400
 8007480:	40014800 	.word	0x40014800

08007484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f023 0201 	bic.w	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f023 030a 	bic.w	r3, r3, #10
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	621a      	str	r2, [r3, #32]
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f023 0210 	bic.w	r2, r3, #16
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a1b      	ldr	r3, [r3, #32]
 8007504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800750c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	031b      	lsls	r3, r3, #12
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	4313      	orrs	r3, r2
 8007516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800751e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	621a      	str	r2, [r3, #32]
}
 8007536:	bf00      	nop
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007542:	b480      	push	{r7}
 8007544:	b085      	sub	sp, #20
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	f043 0307 	orr.w	r3, r3, #7
 8007564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	609a      	str	r2, [r3, #8]
}
 800756c:	bf00      	nop
 800756e:	3714      	adds	r7, #20
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	021a      	lsls	r2, r3, #8
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	431a      	orrs	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4313      	orrs	r3, r2
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	609a      	str	r2, [r3, #8]
}
 80075ac:	bf00      	nop
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f003 031f 	and.w	r3, r3, #31
 80075ca:	2201      	movs	r2, #1
 80075cc:	fa02 f303 	lsl.w	r3, r2, r3
 80075d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1a      	ldr	r2, [r3, #32]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	43db      	mvns	r3, r3
 80075da:	401a      	ands	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f003 031f 	and.w	r3, r3, #31
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	fa01 f303 	lsl.w	r3, r1, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007618:	2302      	movs	r3, #2
 800761a:	e068      	b.n	80076ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2202      	movs	r2, #2
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a2e      	ldr	r2, [pc, #184]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d004      	beq.n	8007650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a2d      	ldr	r2, [pc, #180]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d108      	bne.n	8007662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d01d      	beq.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768e:	d018      	beq.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a13      	ldr	r2, [pc, #76]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a14      	ldr	r2, [pc, #80]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d10c      	bne.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40013400 	.word	0x40013400
 8007704:	40000400 	.word	0x40000400
 8007708:	40000800 	.word	0x40000800
 800770c:	40000c00 	.word	0x40000c00
 8007710:	40014000 	.word	0x40014000

08007714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e042      	b.n	80077ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fb ff5f 	bl	80035fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2224      	movs	r2, #36	; 0x24
 8007742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0201 	bic.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f998 	bl	8007a8c <UART_SetConfig>
 800775c:	4603      	mov	r3, r0
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e022      	b.n	80077ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc54 	bl	800801c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fcdb 	bl	8008160 <UART_CheckIdleState>
 80077aa:	4603      	mov	r3, r0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	603b      	str	r3, [r7, #0]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	f040 8084 	bne.w	80078d8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Transmit+0x28>
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e07c      	b.n	80078da <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_UART_Transmit+0x3a>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e075      	b.n	80078da <HAL_UART_Transmit+0x126>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2221      	movs	r2, #33	; 0x21
 8007802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007806:	f7fc f9d5 	bl	8003bb4 <HAL_GetTick>
 800780a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007824:	d108      	bne.n	8007838 <HAL_UART_Transmit+0x84>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	e003      	b.n	8007840 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007848:	e02d      	b.n	80078a6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2200      	movs	r2, #0
 8007852:	2180      	movs	r1, #128	; 0x80
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 fcce 	bl	80081f6 <UART_WaitOnFlagUntilTimeout>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e03a      	b.n	80078da <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	881a      	ldrh	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007876:	b292      	uxth	r2, r2
 8007878:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	3302      	adds	r3, #2
 800787e:	61bb      	str	r3, [r7, #24]
 8007880:	e008      	b.n	8007894 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	b292      	uxth	r2, r2
 800788c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	3301      	adds	r3, #1
 8007892:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1cb      	bne.n	800784a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2200      	movs	r2, #0
 80078ba:	2140      	movs	r1, #64	; 0x40
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fc9a 	bl	80081f6 <UART_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e006      	b.n	80078da <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e000      	b.n	80078da <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80078d8:	2302      	movs	r3, #2
  }
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3720      	adds	r7, #32
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b08a      	sub	sp, #40	; 0x28
 80078e6:	af02      	add	r7, sp, #8
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	f040 80c1 	bne.w	8007a80 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_UART_Receive+0x28>
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e0b9      	b.n	8007a82 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_UART_Receive+0x3a>
 8007918:	2302      	movs	r3, #2
 800791a:	e0b2      	b.n	8007a82 <HAL_UART_Receive+0x1a0>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2222      	movs	r2, #34	; 0x22
 8007930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800793a:	f7fc f93b 	bl	8003bb4 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d10e      	bne.n	8007978 <HAL_UART_Receive+0x96>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <HAL_UART_Receive+0x8c>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800796c:	e02d      	b.n	80079ca <HAL_UART_Receive+0xe8>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	22ff      	movs	r2, #255	; 0xff
 8007972:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007976:	e028      	b.n	80079ca <HAL_UART_Receive+0xe8>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10d      	bne.n	800799c <HAL_UART_Receive+0xba>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <HAL_UART_Receive+0xb0>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	22ff      	movs	r2, #255	; 0xff
 800798c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007990:	e01b      	b.n	80079ca <HAL_UART_Receive+0xe8>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	227f      	movs	r2, #127	; 0x7f
 8007996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800799a:	e016      	b.n	80079ca <HAL_UART_Receive+0xe8>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a4:	d10d      	bne.n	80079c2 <HAL_UART_Receive+0xe0>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <HAL_UART_Receive+0xd6>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	227f      	movs	r2, #127	; 0x7f
 80079b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079b6:	e008      	b.n	80079ca <HAL_UART_Receive+0xe8>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	223f      	movs	r2, #63	; 0x3f
 80079bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80079c0:	e003      	b.n	80079ca <HAL_UART_Receive+0xe8>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	d108      	bne.n	80079ee <HAL_UART_Receive+0x10c>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e003      	b.n	80079f6 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80079fe:	e033      	b.n	8007a68 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2200      	movs	r2, #0
 8007a08:	2120      	movs	r1, #32
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fbf3 	bl	80081f6 <UART_WaitOnFlagUntilTimeout>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e033      	b.n	8007a82 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10c      	bne.n	8007a3a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	8a7b      	ldrh	r3, [r7, #18]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3302      	adds	r3, #2
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e00d      	b.n	8007a56 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	8a7b      	ldrh	r3, [r7, #18]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	4013      	ands	r3, r2
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	3301      	adds	r3, #1
 8007a54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1c5      	bne.n	8007a00 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e000      	b.n	8007a82 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8007a80:	2302      	movs	r3, #2
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a8c:	b5b0      	push	{r4, r5, r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4bb1      	ldr	r3, [pc, #708]	; (8007d7c <UART_SetConfig+0x2f0>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4aa6      	ldr	r2, [pc, #664]	; (8007d80 <UART_SetConfig+0x2f4>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	69f9      	ldr	r1, [r7, #28]
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a97      	ldr	r2, [pc, #604]	; (8007d84 <UART_SetConfig+0x2f8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d120      	bne.n	8007b6e <UART_SetConfig+0xe2>
 8007b2c:	4b96      	ldr	r3, [pc, #600]	; (8007d88 <UART_SetConfig+0x2fc>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d816      	bhi.n	8007b68 <UART_SetConfig+0xdc>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb4>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b5d 	.word	0x08007b5d
 8007b48:	08007b57 	.word	0x08007b57
 8007b4c:	08007b63 	.word	0x08007b63
 8007b50:	2301      	movs	r3, #1
 8007b52:	76fb      	strb	r3, [r7, #27]
 8007b54:	e0e7      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007b56:	2302      	movs	r3, #2
 8007b58:	76fb      	strb	r3, [r7, #27]
 8007b5a:	e0e4      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	76fb      	strb	r3, [r7, #27]
 8007b60:	e0e1      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007b62:	2308      	movs	r3, #8
 8007b64:	76fb      	strb	r3, [r7, #27]
 8007b66:	e0de      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007b68:	2310      	movs	r3, #16
 8007b6a:	76fb      	strb	r3, [r7, #27]
 8007b6c:	e0db      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a86      	ldr	r2, [pc, #536]	; (8007d8c <UART_SetConfig+0x300>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d132      	bne.n	8007bde <UART_SetConfig+0x152>
 8007b78:	4b83      	ldr	r3, [pc, #524]	; (8007d88 <UART_SetConfig+0x2fc>)
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7e:	f003 030c 	and.w	r3, r3, #12
 8007b82:	2b0c      	cmp	r3, #12
 8007b84:	d828      	bhi.n	8007bd8 <UART_SetConfig+0x14c>
 8007b86:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <UART_SetConfig+0x100>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bc1 	.word	0x08007bc1
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007bd9 	.word	0x08007bd9
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007bcd 	.word	0x08007bcd
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007bc7 	.word	0x08007bc7
 8007bb0:	08007bd9 	.word	0x08007bd9
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007bd9 	.word	0x08007bd9
 8007bbc:	08007bd3 	.word	0x08007bd3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	76fb      	strb	r3, [r7, #27]
 8007bc4:	e0af      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	76fb      	strb	r3, [r7, #27]
 8007bca:	e0ac      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	76fb      	strb	r3, [r7, #27]
 8007bd0:	e0a9      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007bd2:	2308      	movs	r3, #8
 8007bd4:	76fb      	strb	r3, [r7, #27]
 8007bd6:	e0a6      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	76fb      	strb	r3, [r7, #27]
 8007bdc:	e0a3      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a6b      	ldr	r2, [pc, #428]	; (8007d90 <UART_SetConfig+0x304>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d120      	bne.n	8007c2a <UART_SetConfig+0x19e>
 8007be8:	4b67      	ldr	r3, [pc, #412]	; (8007d88 <UART_SetConfig+0x2fc>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bf2:	2b30      	cmp	r3, #48	; 0x30
 8007bf4:	d013      	beq.n	8007c1e <UART_SetConfig+0x192>
 8007bf6:	2b30      	cmp	r3, #48	; 0x30
 8007bf8:	d814      	bhi.n	8007c24 <UART_SetConfig+0x198>
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d009      	beq.n	8007c12 <UART_SetConfig+0x186>
 8007bfe:	2b20      	cmp	r3, #32
 8007c00:	d810      	bhi.n	8007c24 <UART_SetConfig+0x198>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <UART_SetConfig+0x180>
 8007c06:	2b10      	cmp	r3, #16
 8007c08:	d006      	beq.n	8007c18 <UART_SetConfig+0x18c>
 8007c0a:	e00b      	b.n	8007c24 <UART_SetConfig+0x198>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	76fb      	strb	r3, [r7, #27]
 8007c10:	e089      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c12:	2302      	movs	r3, #2
 8007c14:	76fb      	strb	r3, [r7, #27]
 8007c16:	e086      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	76fb      	strb	r3, [r7, #27]
 8007c1c:	e083      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c1e:	2308      	movs	r3, #8
 8007c20:	76fb      	strb	r3, [r7, #27]
 8007c22:	e080      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c24:	2310      	movs	r3, #16
 8007c26:	76fb      	strb	r3, [r7, #27]
 8007c28:	e07d      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a59      	ldr	r2, [pc, #356]	; (8007d94 <UART_SetConfig+0x308>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d120      	bne.n	8007c76 <UART_SetConfig+0x1ea>
 8007c34:	4b54      	ldr	r3, [pc, #336]	; (8007d88 <UART_SetConfig+0x2fc>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c3e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c40:	d013      	beq.n	8007c6a <UART_SetConfig+0x1de>
 8007c42:	2bc0      	cmp	r3, #192	; 0xc0
 8007c44:	d814      	bhi.n	8007c70 <UART_SetConfig+0x1e4>
 8007c46:	2b80      	cmp	r3, #128	; 0x80
 8007c48:	d009      	beq.n	8007c5e <UART_SetConfig+0x1d2>
 8007c4a:	2b80      	cmp	r3, #128	; 0x80
 8007c4c:	d810      	bhi.n	8007c70 <UART_SetConfig+0x1e4>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d002      	beq.n	8007c58 <UART_SetConfig+0x1cc>
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d006      	beq.n	8007c64 <UART_SetConfig+0x1d8>
 8007c56:	e00b      	b.n	8007c70 <UART_SetConfig+0x1e4>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	76fb      	strb	r3, [r7, #27]
 8007c5c:	e063      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	76fb      	strb	r3, [r7, #27]
 8007c62:	e060      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c64:	2304      	movs	r3, #4
 8007c66:	76fb      	strb	r3, [r7, #27]
 8007c68:	e05d      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	76fb      	strb	r3, [r7, #27]
 8007c6e:	e05a      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c70:	2310      	movs	r3, #16
 8007c72:	76fb      	strb	r3, [r7, #27]
 8007c74:	e057      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a47      	ldr	r2, [pc, #284]	; (8007d98 <UART_SetConfig+0x30c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d125      	bne.n	8007ccc <UART_SetConfig+0x240>
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <UART_SetConfig+0x2fc>)
 8007c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c8e:	d017      	beq.n	8007cc0 <UART_SetConfig+0x234>
 8007c90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c94:	d817      	bhi.n	8007cc6 <UART_SetConfig+0x23a>
 8007c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c9a:	d00b      	beq.n	8007cb4 <UART_SetConfig+0x228>
 8007c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ca0:	d811      	bhi.n	8007cc6 <UART_SetConfig+0x23a>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <UART_SetConfig+0x222>
 8007ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007caa:	d006      	beq.n	8007cba <UART_SetConfig+0x22e>
 8007cac:	e00b      	b.n	8007cc6 <UART_SetConfig+0x23a>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	76fb      	strb	r3, [r7, #27]
 8007cb2:	e038      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	76fb      	strb	r3, [r7, #27]
 8007cb8:	e035      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007cba:	2304      	movs	r3, #4
 8007cbc:	76fb      	strb	r3, [r7, #27]
 8007cbe:	e032      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	76fb      	strb	r3, [r7, #27]
 8007cc4:	e02f      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	76fb      	strb	r3, [r7, #27]
 8007cca:	e02c      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	; (8007d80 <UART_SetConfig+0x2f4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d125      	bne.n	8007d22 <UART_SetConfig+0x296>
 8007cd6:	4b2c      	ldr	r3, [pc, #176]	; (8007d88 <UART_SetConfig+0x2fc>)
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ce0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ce4:	d017      	beq.n	8007d16 <UART_SetConfig+0x28a>
 8007ce6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cea:	d817      	bhi.n	8007d1c <UART_SetConfig+0x290>
 8007cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf0:	d00b      	beq.n	8007d0a <UART_SetConfig+0x27e>
 8007cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cf6:	d811      	bhi.n	8007d1c <UART_SetConfig+0x290>
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <UART_SetConfig+0x278>
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d00:	d006      	beq.n	8007d10 <UART_SetConfig+0x284>
 8007d02:	e00b      	b.n	8007d1c <UART_SetConfig+0x290>
 8007d04:	2300      	movs	r3, #0
 8007d06:	76fb      	strb	r3, [r7, #27]
 8007d08:	e00d      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	76fb      	strb	r3, [r7, #27]
 8007d0e:	e00a      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007d10:	2304      	movs	r3, #4
 8007d12:	76fb      	strb	r3, [r7, #27]
 8007d14:	e007      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007d16:	2308      	movs	r3, #8
 8007d18:	76fb      	strb	r3, [r7, #27]
 8007d1a:	e004      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	76fb      	strb	r3, [r7, #27]
 8007d20:	e001      	b.n	8007d26 <UART_SetConfig+0x29a>
 8007d22:	2310      	movs	r3, #16
 8007d24:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a15      	ldr	r2, [pc, #84]	; (8007d80 <UART_SetConfig+0x2f4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	f040 809f 	bne.w	8007e70 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d32:	7efb      	ldrb	r3, [r7, #27]
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d837      	bhi.n	8007da8 <UART_SetConfig+0x31c>
 8007d38:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <UART_SetConfig+0x2b4>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d65 	.word	0x08007d65
 8007d44:	08007da9 	.word	0x08007da9
 8007d48:	08007d6d 	.word	0x08007d6d
 8007d4c:	08007da9 	.word	0x08007da9
 8007d50:	08007d73 	.word	0x08007d73
 8007d54:	08007da9 	.word	0x08007da9
 8007d58:	08007da9 	.word	0x08007da9
 8007d5c:	08007da9 	.word	0x08007da9
 8007d60:	08007da1 	.word	0x08007da1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d64:	f7fd fe7c 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8007d68:	6178      	str	r0, [r7, #20]
        break;
 8007d6a:	e022      	b.n	8007db2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <UART_SetConfig+0x310>)
 8007d6e:	617b      	str	r3, [r7, #20]
        break;
 8007d70:	e01f      	b.n	8007db2 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d72:	f7fd fddd 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 8007d76:	6178      	str	r0, [r7, #20]
        break;
 8007d78:	e01b      	b.n	8007db2 <UART_SetConfig+0x326>
 8007d7a:	bf00      	nop
 8007d7c:	cfff69f3 	.word	0xcfff69f3
 8007d80:	40008000 	.word	0x40008000
 8007d84:	40013800 	.word	0x40013800
 8007d88:	40021000 	.word	0x40021000
 8007d8c:	40004400 	.word	0x40004400
 8007d90:	40004800 	.word	0x40004800
 8007d94:	40004c00 	.word	0x40004c00
 8007d98:	40005000 	.word	0x40005000
 8007d9c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da4:	617b      	str	r3, [r7, #20]
        break;
 8007da6:	e004      	b.n	8007db2 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	76bb      	strb	r3, [r7, #26]
        break;
 8007db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8119 	beq.w	8007fec <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	4a95      	ldr	r2, [pc, #596]	; (8008014 <UART_SetConfig+0x588>)
 8007dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dcc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	4413      	add	r3, r2
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d305      	bcc.n	8007dea <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d902      	bls.n	8007df0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	76bb      	strb	r3, [r7, #26]
 8007dee:	e0fd      	b.n	8007fec <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f04f 0100 	mov.w	r1, #0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	4a85      	ldr	r2, [pc, #532]	; (8008014 <UART_SetConfig+0x588>)
 8007dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	f7f8 ff66 	bl	8000cd8 <__aeabi_uldivmod>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4610      	mov	r0, r2
 8007e12:	4619      	mov	r1, r3
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	020b      	lsls	r3, r1, #8
 8007e1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e22:	0202      	lsls	r2, r0, #8
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	6849      	ldr	r1, [r1, #4]
 8007e28:	0849      	lsrs	r1, r1, #1
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	1814      	adds	r4, r2, r0
 8007e32:	eb43 0501 	adc.w	r5, r3, r1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f04f 0300 	mov.w	r3, #0
 8007e40:	4620      	mov	r0, r4
 8007e42:	4629      	mov	r1, r5
 8007e44:	f7f8 ff48 	bl	8000cd8 <__aeabi_uldivmod>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e56:	d308      	bcc.n	8007e6a <UART_SetConfig+0x3de>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5e:	d204      	bcs.n	8007e6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	60da      	str	r2, [r3, #12]
 8007e68:	e0c0      	b.n	8007fec <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	76bb      	strb	r3, [r7, #26]
 8007e6e:	e0bd      	b.n	8007fec <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e78:	d164      	bne.n	8007f44 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8007e7a:	7efb      	ldrb	r3, [r7, #27]
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d828      	bhi.n	8007ed2 <UART_SetConfig+0x446>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0x3fc>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007eb5 	.word	0x08007eb5
 8007e90:	08007ebd 	.word	0x08007ebd
 8007e94:	08007ed3 	.word	0x08007ed3
 8007e98:	08007ec3 	.word	0x08007ec3
 8007e9c:	08007ed3 	.word	0x08007ed3
 8007ea0:	08007ed3 	.word	0x08007ed3
 8007ea4:	08007ed3 	.word	0x08007ed3
 8007ea8:	08007ecb 	.word	0x08007ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fd fdd8 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	6178      	str	r0, [r7, #20]
        break;
 8007eb2:	e013      	b.n	8007edc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb4:	f7fd fdea 	bl	8005a8c <HAL_RCC_GetPCLK2Freq>
 8007eb8:	6178      	str	r0, [r7, #20]
        break;
 8007eba:	e00f      	b.n	8007edc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ebc:	4b56      	ldr	r3, [pc, #344]	; (8008018 <UART_SetConfig+0x58c>)
 8007ebe:	617b      	str	r3, [r7, #20]
        break;
 8007ec0:	e00c      	b.n	8007edc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec2:	f7fd fd35 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 8007ec6:	6178      	str	r0, [r7, #20]
        break;
 8007ec8:	e008      	b.n	8007edc <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ece:	617b      	str	r3, [r7, #20]
        break;
 8007ed0:	e004      	b.n	8007edc <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	76bb      	strb	r3, [r7, #26]
        break;
 8007eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8084 	beq.w	8007fec <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	4a4a      	ldr	r2, [pc, #296]	; (8008014 <UART_SetConfig+0x588>)
 8007eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ef6:	005a      	lsls	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	441a      	add	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b0f      	cmp	r3, #15
 8007f0e:	d916      	bls.n	8007f3e <UART_SetConfig+0x4b2>
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f16:	d212      	bcs.n	8007f3e <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f023 030f 	bic.w	r3, r3, #15
 8007f20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	89fb      	ldrh	r3, [r7, #14]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	89fa      	ldrh	r2, [r7, #14]
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	e056      	b.n	8007fec <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	76bb      	strb	r3, [r7, #26]
 8007f42:	e053      	b.n	8007fec <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f44:	7efb      	ldrb	r3, [r7, #27]
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d827      	bhi.n	8007f9a <UART_SetConfig+0x50e>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x4c4>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f9b 	.word	0x08007f9b
 8007f60:	08007f8b 	.word	0x08007f8b
 8007f64:	08007f9b 	.word	0x08007f9b
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007f9b 	.word	0x08007f9b
 8007f70:	08007f93 	.word	0x08007f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7fd fd74 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8007f78:	6178      	str	r0, [r7, #20]
        break;
 8007f7a:	e013      	b.n	8007fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fd fd86 	bl	8005a8c <HAL_RCC_GetPCLK2Freq>
 8007f80:	6178      	str	r0, [r7, #20]
        break;
 8007f82:	e00f      	b.n	8007fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f84:	4b24      	ldr	r3, [pc, #144]	; (8008018 <UART_SetConfig+0x58c>)
 8007f86:	617b      	str	r3, [r7, #20]
        break;
 8007f88:	e00c      	b.n	8007fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fd fcd1 	bl	8005930 <HAL_RCC_GetSysClockFreq>
 8007f8e:	6178      	str	r0, [r7, #20]
        break;
 8007f90:	e008      	b.n	8007fa4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f96:	617b      	str	r3, [r7, #20]
        break;
 8007f98:	e004      	b.n	8007fa4 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	76bb      	strb	r3, [r7, #26]
        break;
 8007fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d020      	beq.n	8007fec <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	4a19      	ldr	r2, [pc, #100]	; (8008014 <UART_SetConfig+0x588>)
 8007fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	441a      	add	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	2b0f      	cmp	r3, #15
 8007fd2:	d909      	bls.n	8007fe8 <UART_SetConfig+0x55c>
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fda:	d205      	bcs.n	8007fe8 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	e001      	b.n	8007fec <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008008:	7ebb      	ldrb	r3, [r7, #26]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bdb0      	pop	{r4, r5, r7, pc}
 8008012:	bf00      	nop
 8008014:	0800d76c 	.word	0x0800d76c
 8008018:	00f42400 	.word	0x00f42400

0800801c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00a      	beq.n	800808a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	f003 0308 	and.w	r3, r3, #8
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00a      	beq.n	80080ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	f003 0310 	and.w	r3, r3, #16
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00a      	beq.n	80080ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01a      	beq.n	8008132 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800811a:	d10a      	bne.n	8008132 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	605a      	str	r2, [r3, #4]
  }
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af02      	add	r7, sp, #8
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008170:	f7fb fd20 	bl	8003bb4 <HAL_GetTick>
 8008174:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b08      	cmp	r3, #8
 8008182:	d10e      	bne.n	80081a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008184:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f82f 	bl	80081f6 <UART_WaitOnFlagUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e025      	b.n	80081ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0304 	and.w	r3, r3, #4
 80081ac:	2b04      	cmp	r3, #4
 80081ae:	d10e      	bne.n	80081ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f819 	bl	80081f6 <UART_WaitOnFlagUntilTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e00f      	b.n	80081ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b09c      	sub	sp, #112	; 0x70
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	4613      	mov	r3, r2
 8008204:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008206:	e0a9      	b.n	800835c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820e:	f000 80a5 	beq.w	800835c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008212:	f7fb fccf 	bl	8003bb4 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800821e:	429a      	cmp	r2, r3
 8008220:	d302      	bcc.n	8008228 <UART_WaitOnFlagUntilTimeout+0x32>
 8008222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008224:	2b00      	cmp	r3, #0
 8008226:	d140      	bne.n	80082aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008238:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800823c:	667b      	str	r3, [r7, #100]	; 0x64
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008248:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800824c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1e6      	bne.n	8008228 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008264:	e853 3f00 	ldrex	r3, [r3]
 8008268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800826a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826c:	f023 0301 	bic.w	r3, r3, #1
 8008270:	663b      	str	r3, [r7, #96]	; 0x60
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800827a:	64ba      	str	r2, [r7, #72]	; 0x48
 800827c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1e5      	bne.n	800825a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e069      	b.n	800837e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d051      	beq.n	800835c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c6:	d149      	bne.n	800835c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f0:	637b      	str	r3, [r7, #52]	; 0x34
 80082f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e6      	bne.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3308      	adds	r3, #8
 800830a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	613b      	str	r3, [r7, #16]
   return(result);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	66bb      	str	r3, [r7, #104]	; 0x68
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3308      	adds	r3, #8
 8008322:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008324:	623a      	str	r2, [r7, #32]
 8008326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	61bb      	str	r3, [r7, #24]
   return(result);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e010      	b.n	800837e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69da      	ldr	r2, [r3, #28]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	4013      	ands	r3, r2
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	429a      	cmp	r2, r3
 800836a:	bf0c      	ite	eq
 800836c:	2301      	moveq	r3, #1
 800836e:	2300      	movne	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	429a      	cmp	r2, r3
 8008378:	f43f af46 	beq.w	8008208 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3770      	adds	r7, #112	; 0x70
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008386:	b480      	push	{r7}
 8008388:	b085      	sub	sp, #20
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_UARTEx_DisableFifoMode+0x16>
 8008398:	2302      	movs	r3, #2
 800839a:	e027      	b.n	80083ec <HAL_UARTEx_DisableFifoMode+0x66>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	; 0x24
 80083a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0201 	bic.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800840c:	2302      	movs	r3, #2
 800840e:	e02d      	b.n	800846c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2224      	movs	r2, #36	; 0x24
 800841c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f84f 	bl	80084f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008488:	2302      	movs	r3, #2
 800848a:	e02d      	b.n	80084e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2224      	movs	r2, #36	; 0x24
 8008498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0201 	bic.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f811 	bl	80084f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d108      	bne.n	8008512 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008510:	e031      	b.n	8008576 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008512:	2308      	movs	r3, #8
 8008514:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008516:	2308      	movs	r3, #8
 8008518:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	0e5b      	lsrs	r3, r3, #25
 8008522:	b2db      	uxtb	r3, r3
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	0f5b      	lsrs	r3, r3, #29
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	7b3a      	ldrb	r2, [r7, #12]
 800853e:	4911      	ldr	r1, [pc, #68]	; (8008584 <UARTEx_SetNbDataToProcess+0x94>)
 8008540:	5c8a      	ldrb	r2, [r1, r2]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008546:	7b3a      	ldrb	r2, [r7, #12]
 8008548:	490f      	ldr	r1, [pc, #60]	; (8008588 <UARTEx_SetNbDataToProcess+0x98>)
 800854a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800854c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008550:	b29a      	uxth	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	7b7a      	ldrb	r2, [r7, #13]
 800855c:	4909      	ldr	r1, [pc, #36]	; (8008584 <UARTEx_SetNbDataToProcess+0x94>)
 800855e:	5c8a      	ldrb	r2, [r1, r2]
 8008560:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008564:	7b7a      	ldrb	r2, [r7, #13]
 8008566:	4908      	ldr	r1, [pc, #32]	; (8008588 <UARTEx_SetNbDataToProcess+0x98>)
 8008568:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800856a:	fb93 f3f2 	sdiv	r3, r3, r2
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008576:	bf00      	nop
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	0800d784 	.word	0x0800d784
 8008588:	0800d78c 	.word	0x0800d78c

0800858c <__assert_func>:
 800858c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800858e:	4614      	mov	r4, r2
 8008590:	461a      	mov	r2, r3
 8008592:	4b09      	ldr	r3, [pc, #36]	; (80085b8 <__assert_func+0x2c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4605      	mov	r5, r0
 8008598:	68d8      	ldr	r0, [r3, #12]
 800859a:	b14c      	cbz	r4, 80085b0 <__assert_func+0x24>
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <__assert_func+0x30>)
 800859e:	9100      	str	r1, [sp, #0]
 80085a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085a4:	4906      	ldr	r1, [pc, #24]	; (80085c0 <__assert_func+0x34>)
 80085a6:	462b      	mov	r3, r5
 80085a8:	f000 f818 	bl	80085dc <fiprintf>
 80085ac:	f001 fea6 	bl	800a2fc <abort>
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <__assert_func+0x38>)
 80085b2:	461c      	mov	r4, r3
 80085b4:	e7f3      	b.n	800859e <__assert_func+0x12>
 80085b6:	bf00      	nop
 80085b8:	2000000c 	.word	0x2000000c
 80085bc:	0800d794 	.word	0x0800d794
 80085c0:	0800d7a1 	.word	0x0800d7a1
 80085c4:	0800d7cf 	.word	0x0800d7cf

080085c8 <atof>:
 80085c8:	2100      	movs	r1, #0
 80085ca:	f001 bdcb 	b.w	800a164 <strtod>
	...

080085d0 <__errno>:
 80085d0:	4b01      	ldr	r3, [pc, #4]	; (80085d8 <__errno+0x8>)
 80085d2:	6818      	ldr	r0, [r3, #0]
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	2000000c 	.word	0x2000000c

080085dc <fiprintf>:
 80085dc:	b40e      	push	{r1, r2, r3}
 80085de:	b503      	push	{r0, r1, lr}
 80085e0:	4601      	mov	r1, r0
 80085e2:	ab03      	add	r3, sp, #12
 80085e4:	4805      	ldr	r0, [pc, #20]	; (80085fc <fiprintf+0x20>)
 80085e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ea:	6800      	ldr	r0, [r0, #0]
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	f000 f90f 	bl	8008810 <_vfiprintf_r>
 80085f2:	b002      	add	sp, #8
 80085f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f8:	b003      	add	sp, #12
 80085fa:	4770      	bx	lr
 80085fc:	2000000c 	.word	0x2000000c

08008600 <__libc_init_array>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4d0d      	ldr	r5, [pc, #52]	; (8008638 <__libc_init_array+0x38>)
 8008604:	4c0d      	ldr	r4, [pc, #52]	; (800863c <__libc_init_array+0x3c>)
 8008606:	1b64      	subs	r4, r4, r5
 8008608:	10a4      	asrs	r4, r4, #2
 800860a:	2600      	movs	r6, #0
 800860c:	42a6      	cmp	r6, r4
 800860e:	d109      	bne.n	8008624 <__libc_init_array+0x24>
 8008610:	4d0b      	ldr	r5, [pc, #44]	; (8008640 <__libc_init_array+0x40>)
 8008612:	4c0c      	ldr	r4, [pc, #48]	; (8008644 <__libc_init_array+0x44>)
 8008614:	f004 fa32 	bl	800ca7c <_init>
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	2600      	movs	r6, #0
 800861e:	42a6      	cmp	r6, r4
 8008620:	d105      	bne.n	800862e <__libc_init_array+0x2e>
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f855 3b04 	ldr.w	r3, [r5], #4
 8008628:	4798      	blx	r3
 800862a:	3601      	adds	r6, #1
 800862c:	e7ee      	b.n	800860c <__libc_init_array+0xc>
 800862e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008632:	4798      	blx	r3
 8008634:	3601      	adds	r6, #1
 8008636:	e7f2      	b.n	800861e <__libc_init_array+0x1e>
 8008638:	0800dc50 	.word	0x0800dc50
 800863c:	0800dc50 	.word	0x0800dc50
 8008640:	0800dc50 	.word	0x0800dc50
 8008644:	0800dc54 	.word	0x0800dc54

08008648 <malloc>:
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <malloc+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f000 b85b 	b.w	8008708 <_malloc_r>
 8008652:	bf00      	nop
 8008654:	2000000c 	.word	0x2000000c

08008658 <memset>:
 8008658:	4402      	add	r2, r0
 800865a:	4603      	mov	r3, r0
 800865c:	4293      	cmp	r3, r2
 800865e:	d100      	bne.n	8008662 <memset+0xa>
 8008660:	4770      	bx	lr
 8008662:	f803 1b01 	strb.w	r1, [r3], #1
 8008666:	e7f9      	b.n	800865c <memset+0x4>

08008668 <_free_r>:
 8008668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866a:	2900      	cmp	r1, #0
 800866c:	d048      	beq.n	8008700 <_free_r+0x98>
 800866e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008672:	9001      	str	r0, [sp, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f1a1 0404 	sub.w	r4, r1, #4
 800867a:	bfb8      	it	lt
 800867c:	18e4      	addlt	r4, r4, r3
 800867e:	f003 fa87 	bl	800bb90 <__malloc_lock>
 8008682:	4a20      	ldr	r2, [pc, #128]	; (8008704 <_free_r+0x9c>)
 8008684:	9801      	ldr	r0, [sp, #4]
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	4615      	mov	r5, r2
 800868a:	b933      	cbnz	r3, 800869a <_free_r+0x32>
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6014      	str	r4, [r2, #0]
 8008690:	b003      	add	sp, #12
 8008692:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008696:	f003 ba81 	b.w	800bb9c <__malloc_unlock>
 800869a:	42a3      	cmp	r3, r4
 800869c:	d90b      	bls.n	80086b6 <_free_r+0x4e>
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	1862      	adds	r2, r4, r1
 80086a2:	4293      	cmp	r3, r2
 80086a4:	bf04      	itt	eq
 80086a6:	681a      	ldreq	r2, [r3, #0]
 80086a8:	685b      	ldreq	r3, [r3, #4]
 80086aa:	6063      	str	r3, [r4, #4]
 80086ac:	bf04      	itt	eq
 80086ae:	1852      	addeq	r2, r2, r1
 80086b0:	6022      	streq	r2, [r4, #0]
 80086b2:	602c      	str	r4, [r5, #0]
 80086b4:	e7ec      	b.n	8008690 <_free_r+0x28>
 80086b6:	461a      	mov	r2, r3
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	b10b      	cbz	r3, 80086c0 <_free_r+0x58>
 80086bc:	42a3      	cmp	r3, r4
 80086be:	d9fa      	bls.n	80086b6 <_free_r+0x4e>
 80086c0:	6811      	ldr	r1, [r2, #0]
 80086c2:	1855      	adds	r5, r2, r1
 80086c4:	42a5      	cmp	r5, r4
 80086c6:	d10b      	bne.n	80086e0 <_free_r+0x78>
 80086c8:	6824      	ldr	r4, [r4, #0]
 80086ca:	4421      	add	r1, r4
 80086cc:	1854      	adds	r4, r2, r1
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	6011      	str	r1, [r2, #0]
 80086d2:	d1dd      	bne.n	8008690 <_free_r+0x28>
 80086d4:	681c      	ldr	r4, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	4421      	add	r1, r4
 80086dc:	6011      	str	r1, [r2, #0]
 80086de:	e7d7      	b.n	8008690 <_free_r+0x28>
 80086e0:	d902      	bls.n	80086e8 <_free_r+0x80>
 80086e2:	230c      	movs	r3, #12
 80086e4:	6003      	str	r3, [r0, #0]
 80086e6:	e7d3      	b.n	8008690 <_free_r+0x28>
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	1961      	adds	r1, r4, r5
 80086ec:	428b      	cmp	r3, r1
 80086ee:	bf04      	itt	eq
 80086f0:	6819      	ldreq	r1, [r3, #0]
 80086f2:	685b      	ldreq	r3, [r3, #4]
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	bf04      	itt	eq
 80086f8:	1949      	addeq	r1, r1, r5
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	6054      	str	r4, [r2, #4]
 80086fe:	e7c7      	b.n	8008690 <_free_r+0x28>
 8008700:	b003      	add	sp, #12
 8008702:	bd30      	pop	{r4, r5, pc}
 8008704:	20000614 	.word	0x20000614

08008708 <_malloc_r>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	1ccd      	adds	r5, r1, #3
 800870c:	f025 0503 	bic.w	r5, r5, #3
 8008710:	3508      	adds	r5, #8
 8008712:	2d0c      	cmp	r5, #12
 8008714:	bf38      	it	cc
 8008716:	250c      	movcc	r5, #12
 8008718:	2d00      	cmp	r5, #0
 800871a:	4606      	mov	r6, r0
 800871c:	db01      	blt.n	8008722 <_malloc_r+0x1a>
 800871e:	42a9      	cmp	r1, r5
 8008720:	d903      	bls.n	800872a <_malloc_r+0x22>
 8008722:	230c      	movs	r3, #12
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	2000      	movs	r0, #0
 8008728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800872a:	f003 fa31 	bl	800bb90 <__malloc_lock>
 800872e:	4921      	ldr	r1, [pc, #132]	; (80087b4 <_malloc_r+0xac>)
 8008730:	680a      	ldr	r2, [r1, #0]
 8008732:	4614      	mov	r4, r2
 8008734:	b99c      	cbnz	r4, 800875e <_malloc_r+0x56>
 8008736:	4f20      	ldr	r7, [pc, #128]	; (80087b8 <_malloc_r+0xb0>)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	b923      	cbnz	r3, 8008746 <_malloc_r+0x3e>
 800873c:	4621      	mov	r1, r4
 800873e:	4630      	mov	r0, r6
 8008740:	f000 fe8e 	bl	8009460 <_sbrk_r>
 8008744:	6038      	str	r0, [r7, #0]
 8008746:	4629      	mov	r1, r5
 8008748:	4630      	mov	r0, r6
 800874a:	f000 fe89 	bl	8009460 <_sbrk_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d123      	bne.n	800879a <_malloc_r+0x92>
 8008752:	230c      	movs	r3, #12
 8008754:	6033      	str	r3, [r6, #0]
 8008756:	4630      	mov	r0, r6
 8008758:	f003 fa20 	bl	800bb9c <__malloc_unlock>
 800875c:	e7e3      	b.n	8008726 <_malloc_r+0x1e>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	1b5b      	subs	r3, r3, r5
 8008762:	d417      	bmi.n	8008794 <_malloc_r+0x8c>
 8008764:	2b0b      	cmp	r3, #11
 8008766:	d903      	bls.n	8008770 <_malloc_r+0x68>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	441c      	add	r4, r3
 800876c:	6025      	str	r5, [r4, #0]
 800876e:	e004      	b.n	800877a <_malloc_r+0x72>
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	42a2      	cmp	r2, r4
 8008774:	bf0c      	ite	eq
 8008776:	600b      	streq	r3, [r1, #0]
 8008778:	6053      	strne	r3, [r2, #4]
 800877a:	4630      	mov	r0, r6
 800877c:	f003 fa0e 	bl	800bb9c <__malloc_unlock>
 8008780:	f104 000b 	add.w	r0, r4, #11
 8008784:	1d23      	adds	r3, r4, #4
 8008786:	f020 0007 	bic.w	r0, r0, #7
 800878a:	1ac2      	subs	r2, r0, r3
 800878c:	d0cc      	beq.n	8008728 <_malloc_r+0x20>
 800878e:	1a1b      	subs	r3, r3, r0
 8008790:	50a3      	str	r3, [r4, r2]
 8008792:	e7c9      	b.n	8008728 <_malloc_r+0x20>
 8008794:	4622      	mov	r2, r4
 8008796:	6864      	ldr	r4, [r4, #4]
 8008798:	e7cc      	b.n	8008734 <_malloc_r+0x2c>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d0e3      	beq.n	800876c <_malloc_r+0x64>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 fe5a 	bl	8009460 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d1dd      	bne.n	800876c <_malloc_r+0x64>
 80087b0:	e7cf      	b.n	8008752 <_malloc_r+0x4a>
 80087b2:	bf00      	nop
 80087b4:	20000614 	.word	0x20000614
 80087b8:	20000618 	.word	0x20000618

080087bc <__sfputc_r>:
 80087bc:	6893      	ldr	r3, [r2, #8]
 80087be:	3b01      	subs	r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	b410      	push	{r4}
 80087c4:	6093      	str	r3, [r2, #8]
 80087c6:	da08      	bge.n	80087da <__sfputc_r+0x1e>
 80087c8:	6994      	ldr	r4, [r2, #24]
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	db01      	blt.n	80087d2 <__sfputc_r+0x16>
 80087ce:	290a      	cmp	r1, #10
 80087d0:	d103      	bne.n	80087da <__sfputc_r+0x1e>
 80087d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087d6:	f001 bcd1 	b.w	800a17c <__swbuf_r>
 80087da:	6813      	ldr	r3, [r2, #0]
 80087dc:	1c58      	adds	r0, r3, #1
 80087de:	6010      	str	r0, [r2, #0]
 80087e0:	7019      	strb	r1, [r3, #0]
 80087e2:	4608      	mov	r0, r1
 80087e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <__sfputs_r>:
 80087ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	4614      	mov	r4, r2
 80087f2:	18d5      	adds	r5, r2, r3
 80087f4:	42ac      	cmp	r4, r5
 80087f6:	d101      	bne.n	80087fc <__sfputs_r+0x12>
 80087f8:	2000      	movs	r0, #0
 80087fa:	e007      	b.n	800880c <__sfputs_r+0x22>
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	463a      	mov	r2, r7
 8008802:	4630      	mov	r0, r6
 8008804:	f7ff ffda 	bl	80087bc <__sfputc_r>
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	d1f3      	bne.n	80087f4 <__sfputs_r+0xa>
 800880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008810 <_vfiprintf_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	460d      	mov	r5, r1
 8008816:	b09d      	sub	sp, #116	; 0x74
 8008818:	4614      	mov	r4, r2
 800881a:	4698      	mov	r8, r3
 800881c:	4606      	mov	r6, r0
 800881e:	b118      	cbz	r0, 8008828 <_vfiprintf_r+0x18>
 8008820:	6983      	ldr	r3, [r0, #24]
 8008822:	b90b      	cbnz	r3, 8008828 <_vfiprintf_r+0x18>
 8008824:	f002 fd02 	bl	800b22c <__sinit>
 8008828:	4b89      	ldr	r3, [pc, #548]	; (8008a50 <_vfiprintf_r+0x240>)
 800882a:	429d      	cmp	r5, r3
 800882c:	d11b      	bne.n	8008866 <_vfiprintf_r+0x56>
 800882e:	6875      	ldr	r5, [r6, #4]
 8008830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008832:	07d9      	lsls	r1, r3, #31
 8008834:	d405      	bmi.n	8008842 <_vfiprintf_r+0x32>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	059a      	lsls	r2, r3, #22
 800883a:	d402      	bmi.n	8008842 <_vfiprintf_r+0x32>
 800883c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883e:	f003 f906 	bl	800ba4e <__retarget_lock_acquire_recursive>
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	071b      	lsls	r3, r3, #28
 8008846:	d501      	bpl.n	800884c <_vfiprintf_r+0x3c>
 8008848:	692b      	ldr	r3, [r5, #16]
 800884a:	b9eb      	cbnz	r3, 8008888 <_vfiprintf_r+0x78>
 800884c:	4629      	mov	r1, r5
 800884e:	4630      	mov	r0, r6
 8008850:	f001 fce6 	bl	800a220 <__swsetup_r>
 8008854:	b1c0      	cbz	r0, 8008888 <_vfiprintf_r+0x78>
 8008856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008858:	07dc      	lsls	r4, r3, #31
 800885a:	d50e      	bpl.n	800887a <_vfiprintf_r+0x6a>
 800885c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008860:	b01d      	add	sp, #116	; 0x74
 8008862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008866:	4b7b      	ldr	r3, [pc, #492]	; (8008a54 <_vfiprintf_r+0x244>)
 8008868:	429d      	cmp	r5, r3
 800886a:	d101      	bne.n	8008870 <_vfiprintf_r+0x60>
 800886c:	68b5      	ldr	r5, [r6, #8]
 800886e:	e7df      	b.n	8008830 <_vfiprintf_r+0x20>
 8008870:	4b79      	ldr	r3, [pc, #484]	; (8008a58 <_vfiprintf_r+0x248>)
 8008872:	429d      	cmp	r5, r3
 8008874:	bf08      	it	eq
 8008876:	68f5      	ldreq	r5, [r6, #12]
 8008878:	e7da      	b.n	8008830 <_vfiprintf_r+0x20>
 800887a:	89ab      	ldrh	r3, [r5, #12]
 800887c:	0598      	lsls	r0, r3, #22
 800887e:	d4ed      	bmi.n	800885c <_vfiprintf_r+0x4c>
 8008880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008882:	f003 f8e5 	bl	800ba50 <__retarget_lock_release_recursive>
 8008886:	e7e9      	b.n	800885c <_vfiprintf_r+0x4c>
 8008888:	2300      	movs	r3, #0
 800888a:	9309      	str	r3, [sp, #36]	; 0x24
 800888c:	2320      	movs	r3, #32
 800888e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008892:	f8cd 800c 	str.w	r8, [sp, #12]
 8008896:	2330      	movs	r3, #48	; 0x30
 8008898:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a5c <_vfiprintf_r+0x24c>
 800889c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088a0:	f04f 0901 	mov.w	r9, #1
 80088a4:	4623      	mov	r3, r4
 80088a6:	469a      	mov	sl, r3
 80088a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ac:	b10a      	cbz	r2, 80088b2 <_vfiprintf_r+0xa2>
 80088ae:	2a25      	cmp	r2, #37	; 0x25
 80088b0:	d1f9      	bne.n	80088a6 <_vfiprintf_r+0x96>
 80088b2:	ebba 0b04 	subs.w	fp, sl, r4
 80088b6:	d00b      	beq.n	80088d0 <_vfiprintf_r+0xc0>
 80088b8:	465b      	mov	r3, fp
 80088ba:	4622      	mov	r2, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	4630      	mov	r0, r6
 80088c0:	f7ff ff93 	bl	80087ea <__sfputs_r>
 80088c4:	3001      	adds	r0, #1
 80088c6:	f000 80aa 	beq.w	8008a1e <_vfiprintf_r+0x20e>
 80088ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088cc:	445a      	add	r2, fp
 80088ce:	9209      	str	r2, [sp, #36]	; 0x24
 80088d0:	f89a 3000 	ldrb.w	r3, [sl]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80a2 	beq.w	8008a1e <_vfiprintf_r+0x20e>
 80088da:	2300      	movs	r3, #0
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088e4:	f10a 0a01 	add.w	sl, sl, #1
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	9307      	str	r3, [sp, #28]
 80088ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088f0:	931a      	str	r3, [sp, #104]	; 0x68
 80088f2:	4654      	mov	r4, sl
 80088f4:	2205      	movs	r2, #5
 80088f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fa:	4858      	ldr	r0, [pc, #352]	; (8008a5c <_vfiprintf_r+0x24c>)
 80088fc:	f7f7 fc98 	bl	8000230 <memchr>
 8008900:	9a04      	ldr	r2, [sp, #16]
 8008902:	b9d8      	cbnz	r0, 800893c <_vfiprintf_r+0x12c>
 8008904:	06d1      	lsls	r1, r2, #27
 8008906:	bf44      	itt	mi
 8008908:	2320      	movmi	r3, #32
 800890a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800890e:	0713      	lsls	r3, r2, #28
 8008910:	bf44      	itt	mi
 8008912:	232b      	movmi	r3, #43	; 0x2b
 8008914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008918:	f89a 3000 	ldrb.w	r3, [sl]
 800891c:	2b2a      	cmp	r3, #42	; 0x2a
 800891e:	d015      	beq.n	800894c <_vfiprintf_r+0x13c>
 8008920:	9a07      	ldr	r2, [sp, #28]
 8008922:	4654      	mov	r4, sl
 8008924:	2000      	movs	r0, #0
 8008926:	f04f 0c0a 	mov.w	ip, #10
 800892a:	4621      	mov	r1, r4
 800892c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008930:	3b30      	subs	r3, #48	; 0x30
 8008932:	2b09      	cmp	r3, #9
 8008934:	d94e      	bls.n	80089d4 <_vfiprintf_r+0x1c4>
 8008936:	b1b0      	cbz	r0, 8008966 <_vfiprintf_r+0x156>
 8008938:	9207      	str	r2, [sp, #28]
 800893a:	e014      	b.n	8008966 <_vfiprintf_r+0x156>
 800893c:	eba0 0308 	sub.w	r3, r0, r8
 8008940:	fa09 f303 	lsl.w	r3, r9, r3
 8008944:	4313      	orrs	r3, r2
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	46a2      	mov	sl, r4
 800894a:	e7d2      	b.n	80088f2 <_vfiprintf_r+0xe2>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	1d19      	adds	r1, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	9103      	str	r1, [sp, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfbb      	ittet	lt
 8008958:	425b      	neglt	r3, r3
 800895a:	f042 0202 	orrlt.w	r2, r2, #2
 800895e:	9307      	strge	r3, [sp, #28]
 8008960:	9307      	strlt	r3, [sp, #28]
 8008962:	bfb8      	it	lt
 8008964:	9204      	strlt	r2, [sp, #16]
 8008966:	7823      	ldrb	r3, [r4, #0]
 8008968:	2b2e      	cmp	r3, #46	; 0x2e
 800896a:	d10c      	bne.n	8008986 <_vfiprintf_r+0x176>
 800896c:	7863      	ldrb	r3, [r4, #1]
 800896e:	2b2a      	cmp	r3, #42	; 0x2a
 8008970:	d135      	bne.n	80089de <_vfiprintf_r+0x1ce>
 8008972:	9b03      	ldr	r3, [sp, #12]
 8008974:	1d1a      	adds	r2, r3, #4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	9203      	str	r2, [sp, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	bfb8      	it	lt
 800897e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008982:	3402      	adds	r4, #2
 8008984:	9305      	str	r3, [sp, #20]
 8008986:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a6c <_vfiprintf_r+0x25c>
 800898a:	7821      	ldrb	r1, [r4, #0]
 800898c:	2203      	movs	r2, #3
 800898e:	4650      	mov	r0, sl
 8008990:	f7f7 fc4e 	bl	8000230 <memchr>
 8008994:	b140      	cbz	r0, 80089a8 <_vfiprintf_r+0x198>
 8008996:	2340      	movs	r3, #64	; 0x40
 8008998:	eba0 000a 	sub.w	r0, r0, sl
 800899c:	fa03 f000 	lsl.w	r0, r3, r0
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	4303      	orrs	r3, r0
 80089a4:	3401      	adds	r4, #1
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ac:	482c      	ldr	r0, [pc, #176]	; (8008a60 <_vfiprintf_r+0x250>)
 80089ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089b2:	2206      	movs	r2, #6
 80089b4:	f7f7 fc3c 	bl	8000230 <memchr>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d03f      	beq.n	8008a3c <_vfiprintf_r+0x22c>
 80089bc:	4b29      	ldr	r3, [pc, #164]	; (8008a64 <_vfiprintf_r+0x254>)
 80089be:	bb1b      	cbnz	r3, 8008a08 <_vfiprintf_r+0x1f8>
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	3307      	adds	r3, #7
 80089c4:	f023 0307 	bic.w	r3, r3, #7
 80089c8:	3308      	adds	r3, #8
 80089ca:	9303      	str	r3, [sp, #12]
 80089cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ce:	443b      	add	r3, r7
 80089d0:	9309      	str	r3, [sp, #36]	; 0x24
 80089d2:	e767      	b.n	80088a4 <_vfiprintf_r+0x94>
 80089d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089d8:	460c      	mov	r4, r1
 80089da:	2001      	movs	r0, #1
 80089dc:	e7a5      	b.n	800892a <_vfiprintf_r+0x11a>
 80089de:	2300      	movs	r3, #0
 80089e0:	3401      	adds	r4, #1
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	4619      	mov	r1, r3
 80089e6:	f04f 0c0a 	mov.w	ip, #10
 80089ea:	4620      	mov	r0, r4
 80089ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089f0:	3a30      	subs	r2, #48	; 0x30
 80089f2:	2a09      	cmp	r2, #9
 80089f4:	d903      	bls.n	80089fe <_vfiprintf_r+0x1ee>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0c5      	beq.n	8008986 <_vfiprintf_r+0x176>
 80089fa:	9105      	str	r1, [sp, #20]
 80089fc:	e7c3      	b.n	8008986 <_vfiprintf_r+0x176>
 80089fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a02:	4604      	mov	r4, r0
 8008a04:	2301      	movs	r3, #1
 8008a06:	e7f0      	b.n	80089ea <_vfiprintf_r+0x1da>
 8008a08:	ab03      	add	r3, sp, #12
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4b16      	ldr	r3, [pc, #88]	; (8008a68 <_vfiprintf_r+0x258>)
 8008a10:	a904      	add	r1, sp, #16
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 f8cc 	bl	8008bb0 <_printf_float>
 8008a18:	4607      	mov	r7, r0
 8008a1a:	1c78      	adds	r0, r7, #1
 8008a1c:	d1d6      	bne.n	80089cc <_vfiprintf_r+0x1bc>
 8008a1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a20:	07d9      	lsls	r1, r3, #31
 8008a22:	d405      	bmi.n	8008a30 <_vfiprintf_r+0x220>
 8008a24:	89ab      	ldrh	r3, [r5, #12]
 8008a26:	059a      	lsls	r2, r3, #22
 8008a28:	d402      	bmi.n	8008a30 <_vfiprintf_r+0x220>
 8008a2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a2c:	f003 f810 	bl	800ba50 <__retarget_lock_release_recursive>
 8008a30:	89ab      	ldrh	r3, [r5, #12]
 8008a32:	065b      	lsls	r3, r3, #25
 8008a34:	f53f af12 	bmi.w	800885c <_vfiprintf_r+0x4c>
 8008a38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a3a:	e711      	b.n	8008860 <_vfiprintf_r+0x50>
 8008a3c:	ab03      	add	r3, sp, #12
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	462a      	mov	r2, r5
 8008a42:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <_vfiprintf_r+0x258>)
 8008a44:	a904      	add	r1, sp, #16
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 fb56 	bl	80090f8 <_printf_i>
 8008a4c:	e7e4      	b.n	8008a18 <_vfiprintf_r+0x208>
 8008a4e:	bf00      	nop
 8008a50:	0800d924 	.word	0x0800d924
 8008a54:	0800d944 	.word	0x0800d944
 8008a58:	0800d904 	.word	0x0800d904
 8008a5c:	0800d7d4 	.word	0x0800d7d4
 8008a60:	0800d7de 	.word	0x0800d7de
 8008a64:	08008bb1 	.word	0x08008bb1
 8008a68:	080087eb 	.word	0x080087eb
 8008a6c:	0800d7da 	.word	0x0800d7da

08008a70 <__cvt>:
 8008a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	ec55 4b10 	vmov	r4, r5, d0
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	460e      	mov	r6, r1
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	462b      	mov	r3, r5
 8008a80:	bfbb      	ittet	lt
 8008a82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a86:	461d      	movlt	r5, r3
 8008a88:	2300      	movge	r3, #0
 8008a8a:	232d      	movlt	r3, #45	; 0x2d
 8008a8c:	700b      	strb	r3, [r1, #0]
 8008a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a94:	4691      	mov	r9, r2
 8008a96:	f023 0820 	bic.w	r8, r3, #32
 8008a9a:	bfbc      	itt	lt
 8008a9c:	4622      	movlt	r2, r4
 8008a9e:	4614      	movlt	r4, r2
 8008aa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008aa4:	d005      	beq.n	8008ab2 <__cvt+0x42>
 8008aa6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008aaa:	d100      	bne.n	8008aae <__cvt+0x3e>
 8008aac:	3601      	adds	r6, #1
 8008aae:	2102      	movs	r1, #2
 8008ab0:	e000      	b.n	8008ab4 <__cvt+0x44>
 8008ab2:	2103      	movs	r1, #3
 8008ab4:	ab03      	add	r3, sp, #12
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	ab02      	add	r3, sp, #8
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	ec45 4b10 	vmov	d0, r4, r5
 8008ac0:	4653      	mov	r3, sl
 8008ac2:	4632      	mov	r2, r6
 8008ac4:	f001 fcac 	bl	800a420 <_dtoa_r>
 8008ac8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008acc:	4607      	mov	r7, r0
 8008ace:	d102      	bne.n	8008ad6 <__cvt+0x66>
 8008ad0:	f019 0f01 	tst.w	r9, #1
 8008ad4:	d022      	beq.n	8008b1c <__cvt+0xac>
 8008ad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ada:	eb07 0906 	add.w	r9, r7, r6
 8008ade:	d110      	bne.n	8008b02 <__cvt+0x92>
 8008ae0:	783b      	ldrb	r3, [r7, #0]
 8008ae2:	2b30      	cmp	r3, #48	; 0x30
 8008ae4:	d10a      	bne.n	8008afc <__cvt+0x8c>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4620      	mov	r0, r4
 8008aec:	4629      	mov	r1, r5
 8008aee:	f7f8 f813 	bl	8000b18 <__aeabi_dcmpeq>
 8008af2:	b918      	cbnz	r0, 8008afc <__cvt+0x8c>
 8008af4:	f1c6 0601 	rsb	r6, r6, #1
 8008af8:	f8ca 6000 	str.w	r6, [sl]
 8008afc:	f8da 3000 	ldr.w	r3, [sl]
 8008b00:	4499      	add	r9, r3
 8008b02:	2200      	movs	r2, #0
 8008b04:	2300      	movs	r3, #0
 8008b06:	4620      	mov	r0, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7f8 f805 	bl	8000b18 <__aeabi_dcmpeq>
 8008b0e:	b108      	cbz	r0, 8008b14 <__cvt+0xa4>
 8008b10:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b14:	2230      	movs	r2, #48	; 0x30
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	454b      	cmp	r3, r9
 8008b1a:	d307      	bcc.n	8008b2c <__cvt+0xbc>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b20:	1bdb      	subs	r3, r3, r7
 8008b22:	4638      	mov	r0, r7
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	b004      	add	sp, #16
 8008b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2c:	1c59      	adds	r1, r3, #1
 8008b2e:	9103      	str	r1, [sp, #12]
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	e7f0      	b.n	8008b16 <__cvt+0xa6>

08008b34 <__exponent>:
 8008b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b36:	4603      	mov	r3, r0
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	bfb8      	it	lt
 8008b3c:	4249      	neglt	r1, r1
 8008b3e:	f803 2b02 	strb.w	r2, [r3], #2
 8008b42:	bfb4      	ite	lt
 8008b44:	222d      	movlt	r2, #45	; 0x2d
 8008b46:	222b      	movge	r2, #43	; 0x2b
 8008b48:	2909      	cmp	r1, #9
 8008b4a:	7042      	strb	r2, [r0, #1]
 8008b4c:	dd2a      	ble.n	8008ba4 <__exponent+0x70>
 8008b4e:	f10d 0407 	add.w	r4, sp, #7
 8008b52:	46a4      	mov	ip, r4
 8008b54:	270a      	movs	r7, #10
 8008b56:	46a6      	mov	lr, r4
 8008b58:	460a      	mov	r2, r1
 8008b5a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b5e:	fb07 1516 	mls	r5, r7, r6, r1
 8008b62:	3530      	adds	r5, #48	; 0x30
 8008b64:	2a63      	cmp	r2, #99	; 0x63
 8008b66:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008b6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b6e:	4631      	mov	r1, r6
 8008b70:	dcf1      	bgt.n	8008b56 <__exponent+0x22>
 8008b72:	3130      	adds	r1, #48	; 0x30
 8008b74:	f1ae 0502 	sub.w	r5, lr, #2
 8008b78:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b7c:	1c44      	adds	r4, r0, #1
 8008b7e:	4629      	mov	r1, r5
 8008b80:	4561      	cmp	r1, ip
 8008b82:	d30a      	bcc.n	8008b9a <__exponent+0x66>
 8008b84:	f10d 0209 	add.w	r2, sp, #9
 8008b88:	eba2 020e 	sub.w	r2, r2, lr
 8008b8c:	4565      	cmp	r5, ip
 8008b8e:	bf88      	it	hi
 8008b90:	2200      	movhi	r2, #0
 8008b92:	4413      	add	r3, r2
 8008b94:	1a18      	subs	r0, r3, r0
 8008b96:	b003      	add	sp, #12
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b9e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ba2:	e7ed      	b.n	8008b80 <__exponent+0x4c>
 8008ba4:	2330      	movs	r3, #48	; 0x30
 8008ba6:	3130      	adds	r1, #48	; 0x30
 8008ba8:	7083      	strb	r3, [r0, #2]
 8008baa:	70c1      	strb	r1, [r0, #3]
 8008bac:	1d03      	adds	r3, r0, #4
 8008bae:	e7f1      	b.n	8008b94 <__exponent+0x60>

08008bb0 <_printf_float>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	ed2d 8b02 	vpush	{d8}
 8008bb8:	b08d      	sub	sp, #52	; 0x34
 8008bba:	460c      	mov	r4, r1
 8008bbc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	461f      	mov	r7, r3
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	f002 ff3d 	bl	800ba44 <_localeconv_r>
 8008bca:	f8d0 a000 	ldr.w	sl, [r0]
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7f7 fb20 	bl	8000214 <strlen>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bd8:	6823      	ldr	r3, [r4, #0]
 8008bda:	9305      	str	r3, [sp, #20]
 8008bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8008be0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008be4:	3307      	adds	r3, #7
 8008be6:	f023 0307 	bic.w	r3, r3, #7
 8008bea:	f103 0208 	add.w	r2, r3, #8
 8008bee:	f8c8 2000 	str.w	r2, [r8]
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bfa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008bfe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c02:	9307      	str	r3, [sp, #28]
 8008c04:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c08:	ee08 0a10 	vmov	s16, r0
 8008c0c:	4b9f      	ldr	r3, [pc, #636]	; (8008e8c <_printf_float+0x2dc>)
 8008c0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c16:	f7f7 ffb1 	bl	8000b7c <__aeabi_dcmpun>
 8008c1a:	bb88      	cbnz	r0, 8008c80 <_printf_float+0xd0>
 8008c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c20:	4b9a      	ldr	r3, [pc, #616]	; (8008e8c <_printf_float+0x2dc>)
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c26:	f7f7 ff8b 	bl	8000b40 <__aeabi_dcmple>
 8008c2a:	bb48      	cbnz	r0, 8008c80 <_printf_float+0xd0>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	4640      	mov	r0, r8
 8008c32:	4649      	mov	r1, r9
 8008c34:	f7f7 ff7a 	bl	8000b2c <__aeabi_dcmplt>
 8008c38:	b110      	cbz	r0, 8008c40 <_printf_float+0x90>
 8008c3a:	232d      	movs	r3, #45	; 0x2d
 8008c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c40:	4b93      	ldr	r3, [pc, #588]	; (8008e90 <_printf_float+0x2e0>)
 8008c42:	4894      	ldr	r0, [pc, #592]	; (8008e94 <_printf_float+0x2e4>)
 8008c44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c48:	bf94      	ite	ls
 8008c4a:	4698      	movls	r8, r3
 8008c4c:	4680      	movhi	r8, r0
 8008c4e:	2303      	movs	r3, #3
 8008c50:	6123      	str	r3, [r4, #16]
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	f023 0204 	bic.w	r2, r3, #4
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	f04f 0900 	mov.w	r9, #0
 8008c5e:	9700      	str	r7, [sp, #0]
 8008c60:	4633      	mov	r3, r6
 8008c62:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f9d8 	bl	800901c <_printf_common>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f040 8090 	bne.w	8008d92 <_printf_float+0x1e2>
 8008c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c76:	b00d      	add	sp, #52	; 0x34
 8008c78:	ecbd 8b02 	vpop	{d8}
 8008c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c80:	4642      	mov	r2, r8
 8008c82:	464b      	mov	r3, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	4649      	mov	r1, r9
 8008c88:	f7f7 ff78 	bl	8000b7c <__aeabi_dcmpun>
 8008c8c:	b140      	cbz	r0, 8008ca0 <_printf_float+0xf0>
 8008c8e:	464b      	mov	r3, r9
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbc      	itt	lt
 8008c94:	232d      	movlt	r3, #45	; 0x2d
 8008c96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c9a:	487f      	ldr	r0, [pc, #508]	; (8008e98 <_printf_float+0x2e8>)
 8008c9c:	4b7f      	ldr	r3, [pc, #508]	; (8008e9c <_printf_float+0x2ec>)
 8008c9e:	e7d1      	b.n	8008c44 <_printf_float+0x94>
 8008ca0:	6863      	ldr	r3, [r4, #4]
 8008ca2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ca6:	9206      	str	r2, [sp, #24]
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	d13f      	bne.n	8008d2c <_printf_float+0x17c>
 8008cac:	2306      	movs	r3, #6
 8008cae:	6063      	str	r3, [r4, #4]
 8008cb0:	9b05      	ldr	r3, [sp, #20]
 8008cb2:	6861      	ldr	r1, [r4, #4]
 8008cb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	ab0a      	add	r3, sp, #40	; 0x28
 8008cbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cc2:	ab09      	add	r3, sp, #36	; 0x24
 8008cc4:	ec49 8b10 	vmov	d0, r8, r9
 8008cc8:	9300      	str	r3, [sp, #0]
 8008cca:	6022      	str	r2, [r4, #0]
 8008ccc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f7ff fecd 	bl	8008a70 <__cvt>
 8008cd6:	9b06      	ldr	r3, [sp, #24]
 8008cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cda:	2b47      	cmp	r3, #71	; 0x47
 8008cdc:	4680      	mov	r8, r0
 8008cde:	d108      	bne.n	8008cf2 <_printf_float+0x142>
 8008ce0:	1cc8      	adds	r0, r1, #3
 8008ce2:	db02      	blt.n	8008cea <_printf_float+0x13a>
 8008ce4:	6863      	ldr	r3, [r4, #4]
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	dd41      	ble.n	8008d6e <_printf_float+0x1be>
 8008cea:	f1ab 0b02 	sub.w	fp, fp, #2
 8008cee:	fa5f fb8b 	uxtb.w	fp, fp
 8008cf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cf6:	d820      	bhi.n	8008d3a <_printf_float+0x18a>
 8008cf8:	3901      	subs	r1, #1
 8008cfa:	465a      	mov	r2, fp
 8008cfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d00:	9109      	str	r1, [sp, #36]	; 0x24
 8008d02:	f7ff ff17 	bl	8008b34 <__exponent>
 8008d06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d08:	1813      	adds	r3, r2, r0
 8008d0a:	2a01      	cmp	r2, #1
 8008d0c:	4681      	mov	r9, r0
 8008d0e:	6123      	str	r3, [r4, #16]
 8008d10:	dc02      	bgt.n	8008d18 <_printf_float+0x168>
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	07d2      	lsls	r2, r2, #31
 8008d16:	d501      	bpl.n	8008d1c <_printf_float+0x16c>
 8008d18:	3301      	adds	r3, #1
 8008d1a:	6123      	str	r3, [r4, #16]
 8008d1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d09c      	beq.n	8008c5e <_printf_float+0xae>
 8008d24:	232d      	movs	r3, #45	; 0x2d
 8008d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d2a:	e798      	b.n	8008c5e <_printf_float+0xae>
 8008d2c:	9a06      	ldr	r2, [sp, #24]
 8008d2e:	2a47      	cmp	r2, #71	; 0x47
 8008d30:	d1be      	bne.n	8008cb0 <_printf_float+0x100>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1bc      	bne.n	8008cb0 <_printf_float+0x100>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7b9      	b.n	8008cae <_printf_float+0xfe>
 8008d3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d3e:	d118      	bne.n	8008d72 <_printf_float+0x1c2>
 8008d40:	2900      	cmp	r1, #0
 8008d42:	6863      	ldr	r3, [r4, #4]
 8008d44:	dd0b      	ble.n	8008d5e <_printf_float+0x1ae>
 8008d46:	6121      	str	r1, [r4, #16]
 8008d48:	b913      	cbnz	r3, 8008d50 <_printf_float+0x1a0>
 8008d4a:	6822      	ldr	r2, [r4, #0]
 8008d4c:	07d0      	lsls	r0, r2, #31
 8008d4e:	d502      	bpl.n	8008d56 <_printf_float+0x1a6>
 8008d50:	3301      	adds	r3, #1
 8008d52:	440b      	add	r3, r1
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d58:	f04f 0900 	mov.w	r9, #0
 8008d5c:	e7de      	b.n	8008d1c <_printf_float+0x16c>
 8008d5e:	b913      	cbnz	r3, 8008d66 <_printf_float+0x1b6>
 8008d60:	6822      	ldr	r2, [r4, #0]
 8008d62:	07d2      	lsls	r2, r2, #31
 8008d64:	d501      	bpl.n	8008d6a <_printf_float+0x1ba>
 8008d66:	3302      	adds	r3, #2
 8008d68:	e7f4      	b.n	8008d54 <_printf_float+0x1a4>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e7f2      	b.n	8008d54 <_printf_float+0x1a4>
 8008d6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d74:	4299      	cmp	r1, r3
 8008d76:	db05      	blt.n	8008d84 <_printf_float+0x1d4>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	6121      	str	r1, [r4, #16]
 8008d7c:	07d8      	lsls	r0, r3, #31
 8008d7e:	d5ea      	bpl.n	8008d56 <_printf_float+0x1a6>
 8008d80:	1c4b      	adds	r3, r1, #1
 8008d82:	e7e7      	b.n	8008d54 <_printf_float+0x1a4>
 8008d84:	2900      	cmp	r1, #0
 8008d86:	bfd4      	ite	le
 8008d88:	f1c1 0202 	rsble	r2, r1, #2
 8008d8c:	2201      	movgt	r2, #1
 8008d8e:	4413      	add	r3, r2
 8008d90:	e7e0      	b.n	8008d54 <_printf_float+0x1a4>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	055a      	lsls	r2, r3, #21
 8008d96:	d407      	bmi.n	8008da8 <_printf_float+0x1f8>
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4628      	mov	r0, r5
 8008da0:	47b8      	blx	r7
 8008da2:	3001      	adds	r0, #1
 8008da4:	d12c      	bne.n	8008e00 <_printf_float+0x250>
 8008da6:	e764      	b.n	8008c72 <_printf_float+0xc2>
 8008da8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dac:	f240 80e0 	bls.w	8008f70 <_printf_float+0x3c0>
 8008db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008db4:	2200      	movs	r2, #0
 8008db6:	2300      	movs	r3, #0
 8008db8:	f7f7 feae 	bl	8000b18 <__aeabi_dcmpeq>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d034      	beq.n	8008e2a <_printf_float+0x27a>
 8008dc0:	4a37      	ldr	r2, [pc, #220]	; (8008ea0 <_printf_float+0x2f0>)
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	47b8      	blx	r7
 8008dca:	3001      	adds	r0, #1
 8008dcc:	f43f af51 	beq.w	8008c72 <_printf_float+0xc2>
 8008dd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	db02      	blt.n	8008dde <_printf_float+0x22e>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	07d8      	lsls	r0, r3, #31
 8008ddc:	d510      	bpl.n	8008e00 <_printf_float+0x250>
 8008dde:	ee18 3a10 	vmov	r3, s16
 8008de2:	4652      	mov	r2, sl
 8008de4:	4631      	mov	r1, r6
 8008de6:	4628      	mov	r0, r5
 8008de8:	47b8      	blx	r7
 8008dea:	3001      	adds	r0, #1
 8008dec:	f43f af41 	beq.w	8008c72 <_printf_float+0xc2>
 8008df0:	f04f 0800 	mov.w	r8, #0
 8008df4:	f104 091a 	add.w	r9, r4, #26
 8008df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	4543      	cmp	r3, r8
 8008dfe:	dc09      	bgt.n	8008e14 <_printf_float+0x264>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	079b      	lsls	r3, r3, #30
 8008e04:	f100 8105 	bmi.w	8009012 <_printf_float+0x462>
 8008e08:	68e0      	ldr	r0, [r4, #12]
 8008e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0c:	4298      	cmp	r0, r3
 8008e0e:	bfb8      	it	lt
 8008e10:	4618      	movlt	r0, r3
 8008e12:	e730      	b.n	8008c76 <_printf_float+0xc6>
 8008e14:	2301      	movs	r3, #1
 8008e16:	464a      	mov	r2, r9
 8008e18:	4631      	mov	r1, r6
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f af27 	beq.w	8008c72 <_printf_float+0xc2>
 8008e24:	f108 0801 	add.w	r8, r8, #1
 8008e28:	e7e6      	b.n	8008df8 <_printf_float+0x248>
 8008e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dc39      	bgt.n	8008ea4 <_printf_float+0x2f4>
 8008e30:	4a1b      	ldr	r2, [pc, #108]	; (8008ea0 <_printf_float+0x2f0>)
 8008e32:	2301      	movs	r3, #1
 8008e34:	4631      	mov	r1, r6
 8008e36:	4628      	mov	r0, r5
 8008e38:	47b8      	blx	r7
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f43f af19 	beq.w	8008c72 <_printf_float+0xc2>
 8008e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e44:	4313      	orrs	r3, r2
 8008e46:	d102      	bne.n	8008e4e <_printf_float+0x29e>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	07d9      	lsls	r1, r3, #31
 8008e4c:	d5d8      	bpl.n	8008e00 <_printf_float+0x250>
 8008e4e:	ee18 3a10 	vmov	r3, s16
 8008e52:	4652      	mov	r2, sl
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f af09 	beq.w	8008c72 <_printf_float+0xc2>
 8008e60:	f04f 0900 	mov.w	r9, #0
 8008e64:	f104 0a1a 	add.w	sl, r4, #26
 8008e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6a:	425b      	negs	r3, r3
 8008e6c:	454b      	cmp	r3, r9
 8008e6e:	dc01      	bgt.n	8008e74 <_printf_float+0x2c4>
 8008e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e72:	e792      	b.n	8008d9a <_printf_float+0x1ea>
 8008e74:	2301      	movs	r3, #1
 8008e76:	4652      	mov	r2, sl
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	f43f aef7 	beq.w	8008c72 <_printf_float+0xc2>
 8008e84:	f109 0901 	add.w	r9, r9, #1
 8008e88:	e7ee      	b.n	8008e68 <_printf_float+0x2b8>
 8008e8a:	bf00      	nop
 8008e8c:	7fefffff 	.word	0x7fefffff
 8008e90:	0800d7e5 	.word	0x0800d7e5
 8008e94:	0800d7e9 	.word	0x0800d7e9
 8008e98:	0800d7f1 	.word	0x0800d7f1
 8008e9c:	0800d7ed 	.word	0x0800d7ed
 8008ea0:	0800d7f5 	.word	0x0800d7f5
 8008ea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ea6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	bfa8      	it	ge
 8008eac:	461a      	movge	r2, r3
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	4691      	mov	r9, r2
 8008eb2:	dc37      	bgt.n	8008f24 <_printf_float+0x374>
 8008eb4:	f04f 0b00 	mov.w	fp, #0
 8008eb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ebc:	f104 021a 	add.w	r2, r4, #26
 8008ec0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ec2:	9305      	str	r3, [sp, #20]
 8008ec4:	eba3 0309 	sub.w	r3, r3, r9
 8008ec8:	455b      	cmp	r3, fp
 8008eca:	dc33      	bgt.n	8008f34 <_printf_float+0x384>
 8008ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	db3b      	blt.n	8008f4c <_printf_float+0x39c>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	07da      	lsls	r2, r3, #31
 8008ed8:	d438      	bmi.n	8008f4c <_printf_float+0x39c>
 8008eda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	eba2 0901 	sub.w	r9, r2, r1
 8008ee6:	4599      	cmp	r9, r3
 8008ee8:	bfa8      	it	ge
 8008eea:	4699      	movge	r9, r3
 8008eec:	f1b9 0f00 	cmp.w	r9, #0
 8008ef0:	dc35      	bgt.n	8008f5e <_printf_float+0x3ae>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008efa:	f104 0a1a 	add.w	sl, r4, #26
 8008efe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f02:	1a9b      	subs	r3, r3, r2
 8008f04:	eba3 0309 	sub.w	r3, r3, r9
 8008f08:	4543      	cmp	r3, r8
 8008f0a:	f77f af79 	ble.w	8008e00 <_printf_float+0x250>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4652      	mov	r2, sl
 8008f12:	4631      	mov	r1, r6
 8008f14:	4628      	mov	r0, r5
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f43f aeaa 	beq.w	8008c72 <_printf_float+0xc2>
 8008f1e:	f108 0801 	add.w	r8, r8, #1
 8008f22:	e7ec      	b.n	8008efe <_printf_float+0x34e>
 8008f24:	4613      	mov	r3, r2
 8008f26:	4631      	mov	r1, r6
 8008f28:	4642      	mov	r2, r8
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d1c0      	bne.n	8008eb4 <_printf_float+0x304>
 8008f32:	e69e      	b.n	8008c72 <_printf_float+0xc2>
 8008f34:	2301      	movs	r3, #1
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	9205      	str	r2, [sp, #20]
 8008f3c:	47b8      	blx	r7
 8008f3e:	3001      	adds	r0, #1
 8008f40:	f43f ae97 	beq.w	8008c72 <_printf_float+0xc2>
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	f10b 0b01 	add.w	fp, fp, #1
 8008f4a:	e7b9      	b.n	8008ec0 <_printf_float+0x310>
 8008f4c:	ee18 3a10 	vmov	r3, s16
 8008f50:	4652      	mov	r2, sl
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d1be      	bne.n	8008eda <_printf_float+0x32a>
 8008f5c:	e689      	b.n	8008c72 <_printf_float+0xc2>
 8008f5e:	9a05      	ldr	r2, [sp, #20]
 8008f60:	464b      	mov	r3, r9
 8008f62:	4442      	add	r2, r8
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d1c1      	bne.n	8008ef2 <_printf_float+0x342>
 8008f6e:	e680      	b.n	8008c72 <_printf_float+0xc2>
 8008f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f72:	2a01      	cmp	r2, #1
 8008f74:	dc01      	bgt.n	8008f7a <_printf_float+0x3ca>
 8008f76:	07db      	lsls	r3, r3, #31
 8008f78:	d538      	bpl.n	8008fec <_printf_float+0x43c>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4642      	mov	r2, r8
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b8      	blx	r7
 8008f84:	3001      	adds	r0, #1
 8008f86:	f43f ae74 	beq.w	8008c72 <_printf_float+0xc2>
 8008f8a:	ee18 3a10 	vmov	r3, s16
 8008f8e:	4652      	mov	r2, sl
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	f43f ae6b 	beq.w	8008c72 <_printf_float+0xc2>
 8008f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f7f7 fdb8 	bl	8000b18 <__aeabi_dcmpeq>
 8008fa8:	b9d8      	cbnz	r0, 8008fe2 <_printf_float+0x432>
 8008faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fac:	f108 0201 	add.w	r2, r8, #1
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d10e      	bne.n	8008fda <_printf_float+0x42a>
 8008fbc:	e659      	b.n	8008c72 <_printf_float+0xc2>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f ae52 	beq.w	8008c72 <_printf_float+0xc2>
 8008fce:	f108 0801 	add.w	r8, r8, #1
 8008fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	4543      	cmp	r3, r8
 8008fd8:	dcf1      	bgt.n	8008fbe <_printf_float+0x40e>
 8008fda:	464b      	mov	r3, r9
 8008fdc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008fe0:	e6dc      	b.n	8008d9c <_printf_float+0x1ec>
 8008fe2:	f04f 0800 	mov.w	r8, #0
 8008fe6:	f104 0a1a 	add.w	sl, r4, #26
 8008fea:	e7f2      	b.n	8008fd2 <_printf_float+0x422>
 8008fec:	2301      	movs	r3, #1
 8008fee:	4642      	mov	r2, r8
 8008ff0:	e7df      	b.n	8008fb2 <_printf_float+0x402>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	464a      	mov	r2, r9
 8008ff6:	4631      	mov	r1, r6
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b8      	blx	r7
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f43f ae38 	beq.w	8008c72 <_printf_float+0xc2>
 8009002:	f108 0801 	add.w	r8, r8, #1
 8009006:	68e3      	ldr	r3, [r4, #12]
 8009008:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800900a:	1a5b      	subs	r3, r3, r1
 800900c:	4543      	cmp	r3, r8
 800900e:	dcf0      	bgt.n	8008ff2 <_printf_float+0x442>
 8009010:	e6fa      	b.n	8008e08 <_printf_float+0x258>
 8009012:	f04f 0800 	mov.w	r8, #0
 8009016:	f104 0919 	add.w	r9, r4, #25
 800901a:	e7f4      	b.n	8009006 <_printf_float+0x456>

0800901c <_printf_common>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	4616      	mov	r6, r2
 8009022:	4699      	mov	r9, r3
 8009024:	688a      	ldr	r2, [r1, #8]
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800902c:	4293      	cmp	r3, r2
 800902e:	bfb8      	it	lt
 8009030:	4613      	movlt	r3, r2
 8009032:	6033      	str	r3, [r6, #0]
 8009034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009038:	4607      	mov	r7, r0
 800903a:	460c      	mov	r4, r1
 800903c:	b10a      	cbz	r2, 8009042 <_printf_common+0x26>
 800903e:	3301      	adds	r3, #1
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	0699      	lsls	r1, r3, #26
 8009046:	bf42      	ittt	mi
 8009048:	6833      	ldrmi	r3, [r6, #0]
 800904a:	3302      	addmi	r3, #2
 800904c:	6033      	strmi	r3, [r6, #0]
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	f015 0506 	ands.w	r5, r5, #6
 8009054:	d106      	bne.n	8009064 <_printf_common+0x48>
 8009056:	f104 0a19 	add.w	sl, r4, #25
 800905a:	68e3      	ldr	r3, [r4, #12]
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	1a9b      	subs	r3, r3, r2
 8009060:	42ab      	cmp	r3, r5
 8009062:	dc26      	bgt.n	80090b2 <_printf_common+0x96>
 8009064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009068:	1e13      	subs	r3, r2, #0
 800906a:	6822      	ldr	r2, [r4, #0]
 800906c:	bf18      	it	ne
 800906e:	2301      	movne	r3, #1
 8009070:	0692      	lsls	r2, r2, #26
 8009072:	d42b      	bmi.n	80090cc <_printf_common+0xb0>
 8009074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009078:	4649      	mov	r1, r9
 800907a:	4638      	mov	r0, r7
 800907c:	47c0      	blx	r8
 800907e:	3001      	adds	r0, #1
 8009080:	d01e      	beq.n	80090c0 <_printf_common+0xa4>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	68e5      	ldr	r5, [r4, #12]
 8009086:	6832      	ldr	r2, [r6, #0]
 8009088:	f003 0306 	and.w	r3, r3, #6
 800908c:	2b04      	cmp	r3, #4
 800908e:	bf08      	it	eq
 8009090:	1aad      	subeq	r5, r5, r2
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	6922      	ldr	r2, [r4, #16]
 8009096:	bf0c      	ite	eq
 8009098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800909c:	2500      	movne	r5, #0
 800909e:	4293      	cmp	r3, r2
 80090a0:	bfc4      	itt	gt
 80090a2:	1a9b      	subgt	r3, r3, r2
 80090a4:	18ed      	addgt	r5, r5, r3
 80090a6:	2600      	movs	r6, #0
 80090a8:	341a      	adds	r4, #26
 80090aa:	42b5      	cmp	r5, r6
 80090ac:	d11a      	bne.n	80090e4 <_printf_common+0xc8>
 80090ae:	2000      	movs	r0, #0
 80090b0:	e008      	b.n	80090c4 <_printf_common+0xa8>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4652      	mov	r2, sl
 80090b6:	4649      	mov	r1, r9
 80090b8:	4638      	mov	r0, r7
 80090ba:	47c0      	blx	r8
 80090bc:	3001      	adds	r0, #1
 80090be:	d103      	bne.n	80090c8 <_printf_common+0xac>
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c8:	3501      	adds	r5, #1
 80090ca:	e7c6      	b.n	800905a <_printf_common+0x3e>
 80090cc:	18e1      	adds	r1, r4, r3
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	2030      	movs	r0, #48	; 0x30
 80090d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090d6:	4422      	add	r2, r4
 80090d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090e0:	3302      	adds	r3, #2
 80090e2:	e7c7      	b.n	8009074 <_printf_common+0x58>
 80090e4:	2301      	movs	r3, #1
 80090e6:	4622      	mov	r2, r4
 80090e8:	4649      	mov	r1, r9
 80090ea:	4638      	mov	r0, r7
 80090ec:	47c0      	blx	r8
 80090ee:	3001      	adds	r0, #1
 80090f0:	d0e6      	beq.n	80090c0 <_printf_common+0xa4>
 80090f2:	3601      	adds	r6, #1
 80090f4:	e7d9      	b.n	80090aa <_printf_common+0x8e>
	...

080090f8 <_printf_i>:
 80090f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	460c      	mov	r4, r1
 80090fe:	4691      	mov	r9, r2
 8009100:	7e27      	ldrb	r7, [r4, #24]
 8009102:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009104:	2f78      	cmp	r7, #120	; 0x78
 8009106:	4680      	mov	r8, r0
 8009108:	469a      	mov	sl, r3
 800910a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800910e:	d807      	bhi.n	8009120 <_printf_i+0x28>
 8009110:	2f62      	cmp	r7, #98	; 0x62
 8009112:	d80a      	bhi.n	800912a <_printf_i+0x32>
 8009114:	2f00      	cmp	r7, #0
 8009116:	f000 80d8 	beq.w	80092ca <_printf_i+0x1d2>
 800911a:	2f58      	cmp	r7, #88	; 0x58
 800911c:	f000 80a3 	beq.w	8009266 <_printf_i+0x16e>
 8009120:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009128:	e03a      	b.n	80091a0 <_printf_i+0xa8>
 800912a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800912e:	2b15      	cmp	r3, #21
 8009130:	d8f6      	bhi.n	8009120 <_printf_i+0x28>
 8009132:	a001      	add	r0, pc, #4	; (adr r0, 8009138 <_printf_i+0x40>)
 8009134:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009138:	08009191 	.word	0x08009191
 800913c:	080091a5 	.word	0x080091a5
 8009140:	08009121 	.word	0x08009121
 8009144:	08009121 	.word	0x08009121
 8009148:	08009121 	.word	0x08009121
 800914c:	08009121 	.word	0x08009121
 8009150:	080091a5 	.word	0x080091a5
 8009154:	08009121 	.word	0x08009121
 8009158:	08009121 	.word	0x08009121
 800915c:	08009121 	.word	0x08009121
 8009160:	08009121 	.word	0x08009121
 8009164:	080092b1 	.word	0x080092b1
 8009168:	080091d5 	.word	0x080091d5
 800916c:	08009293 	.word	0x08009293
 8009170:	08009121 	.word	0x08009121
 8009174:	08009121 	.word	0x08009121
 8009178:	080092d3 	.word	0x080092d3
 800917c:	08009121 	.word	0x08009121
 8009180:	080091d5 	.word	0x080091d5
 8009184:	08009121 	.word	0x08009121
 8009188:	08009121 	.word	0x08009121
 800918c:	0800929b 	.word	0x0800929b
 8009190:	680b      	ldr	r3, [r1, #0]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	600a      	str	r2, [r1, #0]
 8009198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800919c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091a0:	2301      	movs	r3, #1
 80091a2:	e0a3      	b.n	80092ec <_printf_i+0x1f4>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	6808      	ldr	r0, [r1, #0]
 80091a8:	062e      	lsls	r6, r5, #24
 80091aa:	f100 0304 	add.w	r3, r0, #4
 80091ae:	d50a      	bpl.n	80091c6 <_printf_i+0xce>
 80091b0:	6805      	ldr	r5, [r0, #0]
 80091b2:	600b      	str	r3, [r1, #0]
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	da03      	bge.n	80091c0 <_printf_i+0xc8>
 80091b8:	232d      	movs	r3, #45	; 0x2d
 80091ba:	426d      	negs	r5, r5
 80091bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c0:	485e      	ldr	r0, [pc, #376]	; (800933c <_printf_i+0x244>)
 80091c2:	230a      	movs	r3, #10
 80091c4:	e019      	b.n	80091fa <_printf_i+0x102>
 80091c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80091ca:	6805      	ldr	r5, [r0, #0]
 80091cc:	600b      	str	r3, [r1, #0]
 80091ce:	bf18      	it	ne
 80091d0:	b22d      	sxthne	r5, r5
 80091d2:	e7ef      	b.n	80091b4 <_printf_i+0xbc>
 80091d4:	680b      	ldr	r3, [r1, #0]
 80091d6:	6825      	ldr	r5, [r4, #0]
 80091d8:	1d18      	adds	r0, r3, #4
 80091da:	6008      	str	r0, [r1, #0]
 80091dc:	0628      	lsls	r0, r5, #24
 80091de:	d501      	bpl.n	80091e4 <_printf_i+0xec>
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	e002      	b.n	80091ea <_printf_i+0xf2>
 80091e4:	0669      	lsls	r1, r5, #25
 80091e6:	d5fb      	bpl.n	80091e0 <_printf_i+0xe8>
 80091e8:	881d      	ldrh	r5, [r3, #0]
 80091ea:	4854      	ldr	r0, [pc, #336]	; (800933c <_printf_i+0x244>)
 80091ec:	2f6f      	cmp	r7, #111	; 0x6f
 80091ee:	bf0c      	ite	eq
 80091f0:	2308      	moveq	r3, #8
 80091f2:	230a      	movne	r3, #10
 80091f4:	2100      	movs	r1, #0
 80091f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091fa:	6866      	ldr	r6, [r4, #4]
 80091fc:	60a6      	str	r6, [r4, #8]
 80091fe:	2e00      	cmp	r6, #0
 8009200:	bfa2      	ittt	ge
 8009202:	6821      	ldrge	r1, [r4, #0]
 8009204:	f021 0104 	bicge.w	r1, r1, #4
 8009208:	6021      	strge	r1, [r4, #0]
 800920a:	b90d      	cbnz	r5, 8009210 <_printf_i+0x118>
 800920c:	2e00      	cmp	r6, #0
 800920e:	d04d      	beq.n	80092ac <_printf_i+0x1b4>
 8009210:	4616      	mov	r6, r2
 8009212:	fbb5 f1f3 	udiv	r1, r5, r3
 8009216:	fb03 5711 	mls	r7, r3, r1, r5
 800921a:	5dc7      	ldrb	r7, [r0, r7]
 800921c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009220:	462f      	mov	r7, r5
 8009222:	42bb      	cmp	r3, r7
 8009224:	460d      	mov	r5, r1
 8009226:	d9f4      	bls.n	8009212 <_printf_i+0x11a>
 8009228:	2b08      	cmp	r3, #8
 800922a:	d10b      	bne.n	8009244 <_printf_i+0x14c>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	07df      	lsls	r7, r3, #31
 8009230:	d508      	bpl.n	8009244 <_printf_i+0x14c>
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	6861      	ldr	r1, [r4, #4]
 8009236:	4299      	cmp	r1, r3
 8009238:	bfde      	ittt	le
 800923a:	2330      	movle	r3, #48	; 0x30
 800923c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009240:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009244:	1b92      	subs	r2, r2, r6
 8009246:	6122      	str	r2, [r4, #16]
 8009248:	f8cd a000 	str.w	sl, [sp]
 800924c:	464b      	mov	r3, r9
 800924e:	aa03      	add	r2, sp, #12
 8009250:	4621      	mov	r1, r4
 8009252:	4640      	mov	r0, r8
 8009254:	f7ff fee2 	bl	800901c <_printf_common>
 8009258:	3001      	adds	r0, #1
 800925a:	d14c      	bne.n	80092f6 <_printf_i+0x1fe>
 800925c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009260:	b004      	add	sp, #16
 8009262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009266:	4835      	ldr	r0, [pc, #212]	; (800933c <_printf_i+0x244>)
 8009268:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	680e      	ldr	r6, [r1, #0]
 8009270:	061f      	lsls	r7, r3, #24
 8009272:	f856 5b04 	ldr.w	r5, [r6], #4
 8009276:	600e      	str	r6, [r1, #0]
 8009278:	d514      	bpl.n	80092a4 <_printf_i+0x1ac>
 800927a:	07d9      	lsls	r1, r3, #31
 800927c:	bf44      	itt	mi
 800927e:	f043 0320 	orrmi.w	r3, r3, #32
 8009282:	6023      	strmi	r3, [r4, #0]
 8009284:	b91d      	cbnz	r5, 800928e <_printf_i+0x196>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	f023 0320 	bic.w	r3, r3, #32
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	2310      	movs	r3, #16
 8009290:	e7b0      	b.n	80091f4 <_printf_i+0xfc>
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	f043 0320 	orr.w	r3, r3, #32
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	2378      	movs	r3, #120	; 0x78
 800929c:	4828      	ldr	r0, [pc, #160]	; (8009340 <_printf_i+0x248>)
 800929e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092a2:	e7e3      	b.n	800926c <_printf_i+0x174>
 80092a4:	065e      	lsls	r6, r3, #25
 80092a6:	bf48      	it	mi
 80092a8:	b2ad      	uxthmi	r5, r5
 80092aa:	e7e6      	b.n	800927a <_printf_i+0x182>
 80092ac:	4616      	mov	r6, r2
 80092ae:	e7bb      	b.n	8009228 <_printf_i+0x130>
 80092b0:	680b      	ldr	r3, [r1, #0]
 80092b2:	6826      	ldr	r6, [r4, #0]
 80092b4:	6960      	ldr	r0, [r4, #20]
 80092b6:	1d1d      	adds	r5, r3, #4
 80092b8:	600d      	str	r5, [r1, #0]
 80092ba:	0635      	lsls	r5, r6, #24
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	d501      	bpl.n	80092c4 <_printf_i+0x1cc>
 80092c0:	6018      	str	r0, [r3, #0]
 80092c2:	e002      	b.n	80092ca <_printf_i+0x1d2>
 80092c4:	0671      	lsls	r1, r6, #25
 80092c6:	d5fb      	bpl.n	80092c0 <_printf_i+0x1c8>
 80092c8:	8018      	strh	r0, [r3, #0]
 80092ca:	2300      	movs	r3, #0
 80092cc:	6123      	str	r3, [r4, #16]
 80092ce:	4616      	mov	r6, r2
 80092d0:	e7ba      	b.n	8009248 <_printf_i+0x150>
 80092d2:	680b      	ldr	r3, [r1, #0]
 80092d4:	1d1a      	adds	r2, r3, #4
 80092d6:	600a      	str	r2, [r1, #0]
 80092d8:	681e      	ldr	r6, [r3, #0]
 80092da:	6862      	ldr	r2, [r4, #4]
 80092dc:	2100      	movs	r1, #0
 80092de:	4630      	mov	r0, r6
 80092e0:	f7f6 ffa6 	bl	8000230 <memchr>
 80092e4:	b108      	cbz	r0, 80092ea <_printf_i+0x1f2>
 80092e6:	1b80      	subs	r0, r0, r6
 80092e8:	6060      	str	r0, [r4, #4]
 80092ea:	6863      	ldr	r3, [r4, #4]
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	2300      	movs	r3, #0
 80092f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f4:	e7a8      	b.n	8009248 <_printf_i+0x150>
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	4632      	mov	r2, r6
 80092fa:	4649      	mov	r1, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	47d0      	blx	sl
 8009300:	3001      	adds	r0, #1
 8009302:	d0ab      	beq.n	800925c <_printf_i+0x164>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	079b      	lsls	r3, r3, #30
 8009308:	d413      	bmi.n	8009332 <_printf_i+0x23a>
 800930a:	68e0      	ldr	r0, [r4, #12]
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	4298      	cmp	r0, r3
 8009310:	bfb8      	it	lt
 8009312:	4618      	movlt	r0, r3
 8009314:	e7a4      	b.n	8009260 <_printf_i+0x168>
 8009316:	2301      	movs	r3, #1
 8009318:	4632      	mov	r2, r6
 800931a:	4649      	mov	r1, r9
 800931c:	4640      	mov	r0, r8
 800931e:	47d0      	blx	sl
 8009320:	3001      	adds	r0, #1
 8009322:	d09b      	beq.n	800925c <_printf_i+0x164>
 8009324:	3501      	adds	r5, #1
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	9903      	ldr	r1, [sp, #12]
 800932a:	1a5b      	subs	r3, r3, r1
 800932c:	42ab      	cmp	r3, r5
 800932e:	dcf2      	bgt.n	8009316 <_printf_i+0x21e>
 8009330:	e7eb      	b.n	800930a <_printf_i+0x212>
 8009332:	2500      	movs	r5, #0
 8009334:	f104 0619 	add.w	r6, r4, #25
 8009338:	e7f5      	b.n	8009326 <_printf_i+0x22e>
 800933a:	bf00      	nop
 800933c:	0800d7f7 	.word	0x0800d7f7
 8009340:	0800d808 	.word	0x0800d808

08009344 <iprintf>:
 8009344:	b40f      	push	{r0, r1, r2, r3}
 8009346:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <iprintf+0x2c>)
 8009348:	b513      	push	{r0, r1, r4, lr}
 800934a:	681c      	ldr	r4, [r3, #0]
 800934c:	b124      	cbz	r4, 8009358 <iprintf+0x14>
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	b913      	cbnz	r3, 8009358 <iprintf+0x14>
 8009352:	4620      	mov	r0, r4
 8009354:	f001 ff6a 	bl	800b22c <__sinit>
 8009358:	ab05      	add	r3, sp, #20
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	68a1      	ldr	r1, [r4, #8]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff fa55 	bl	8008810 <_vfiprintf_r>
 8009366:	b002      	add	sp, #8
 8009368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800936c:	b004      	add	sp, #16
 800936e:	4770      	bx	lr
 8009370:	2000000c 	.word	0x2000000c

08009374 <_puts_r>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4605      	mov	r5, r0
 800937a:	b118      	cbz	r0, 8009384 <_puts_r+0x10>
 800937c:	6983      	ldr	r3, [r0, #24]
 800937e:	b90b      	cbnz	r3, 8009384 <_puts_r+0x10>
 8009380:	f001 ff54 	bl	800b22c <__sinit>
 8009384:	69ab      	ldr	r3, [r5, #24]
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	b913      	cbnz	r3, 8009390 <_puts_r+0x1c>
 800938a:	4628      	mov	r0, r5
 800938c:	f001 ff4e 	bl	800b22c <__sinit>
 8009390:	4b2c      	ldr	r3, [pc, #176]	; (8009444 <_puts_r+0xd0>)
 8009392:	429c      	cmp	r4, r3
 8009394:	d120      	bne.n	80093d8 <_puts_r+0x64>
 8009396:	686c      	ldr	r4, [r5, #4]
 8009398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d405      	bmi.n	80093aa <_puts_r+0x36>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	0598      	lsls	r0, r3, #22
 80093a2:	d402      	bmi.n	80093aa <_puts_r+0x36>
 80093a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a6:	f002 fb52 	bl	800ba4e <__retarget_lock_acquire_recursive>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	0719      	lsls	r1, r3, #28
 80093ae:	d51d      	bpl.n	80093ec <_puts_r+0x78>
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	b1db      	cbz	r3, 80093ec <_puts_r+0x78>
 80093b4:	3e01      	subs	r6, #1
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093bc:	3b01      	subs	r3, #1
 80093be:	60a3      	str	r3, [r4, #8]
 80093c0:	bb39      	cbnz	r1, 8009412 <_puts_r+0x9e>
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da38      	bge.n	8009438 <_puts_r+0xc4>
 80093c6:	4622      	mov	r2, r4
 80093c8:	210a      	movs	r1, #10
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 fed6 	bl	800a17c <__swbuf_r>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d011      	beq.n	80093f8 <_puts_r+0x84>
 80093d4:	250a      	movs	r5, #10
 80093d6:	e011      	b.n	80093fc <_puts_r+0x88>
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <_puts_r+0xd4>)
 80093da:	429c      	cmp	r4, r3
 80093dc:	d101      	bne.n	80093e2 <_puts_r+0x6e>
 80093de:	68ac      	ldr	r4, [r5, #8]
 80093e0:	e7da      	b.n	8009398 <_puts_r+0x24>
 80093e2:	4b1a      	ldr	r3, [pc, #104]	; (800944c <_puts_r+0xd8>)
 80093e4:	429c      	cmp	r4, r3
 80093e6:	bf08      	it	eq
 80093e8:	68ec      	ldreq	r4, [r5, #12]
 80093ea:	e7d5      	b.n	8009398 <_puts_r+0x24>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 ff16 	bl	800a220 <__swsetup_r>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d0dd      	beq.n	80093b4 <_puts_r+0x40>
 80093f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80093fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093fe:	07da      	lsls	r2, r3, #31
 8009400:	d405      	bmi.n	800940e <_puts_r+0x9a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	059b      	lsls	r3, r3, #22
 8009406:	d402      	bmi.n	800940e <_puts_r+0x9a>
 8009408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940a:	f002 fb21 	bl	800ba50 <__retarget_lock_release_recursive>
 800940e:	4628      	mov	r0, r5
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	2b00      	cmp	r3, #0
 8009414:	da04      	bge.n	8009420 <_puts_r+0xac>
 8009416:	69a2      	ldr	r2, [r4, #24]
 8009418:	429a      	cmp	r2, r3
 800941a:	dc06      	bgt.n	800942a <_puts_r+0xb6>
 800941c:	290a      	cmp	r1, #10
 800941e:	d004      	beq.n	800942a <_puts_r+0xb6>
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	7019      	strb	r1, [r3, #0]
 8009428:	e7c5      	b.n	80093b6 <_puts_r+0x42>
 800942a:	4622      	mov	r2, r4
 800942c:	4628      	mov	r0, r5
 800942e:	f000 fea5 	bl	800a17c <__swbuf_r>
 8009432:	3001      	adds	r0, #1
 8009434:	d1bf      	bne.n	80093b6 <_puts_r+0x42>
 8009436:	e7df      	b.n	80093f8 <_puts_r+0x84>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	250a      	movs	r5, #10
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	6022      	str	r2, [r4, #0]
 8009440:	701d      	strb	r5, [r3, #0]
 8009442:	e7db      	b.n	80093fc <_puts_r+0x88>
 8009444:	0800d924 	.word	0x0800d924
 8009448:	0800d944 	.word	0x0800d944
 800944c:	0800d904 	.word	0x0800d904

08009450 <puts>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <puts+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f7ff bf8d 	b.w	8009374 <_puts_r>
 800945a:	bf00      	nop
 800945c:	2000000c 	.word	0x2000000c

08009460 <_sbrk_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d06      	ldr	r5, [pc, #24]	; (800947c <_sbrk_r+0x1c>)
 8009464:	2300      	movs	r3, #0
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	f7fa fac8 	bl	8003a00 <_sbrk>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_sbrk_r+0x1a>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_sbrk_r+0x1a>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	20000c30 	.word	0x20000c30

08009480 <siprintf>:
 8009480:	b40e      	push	{r1, r2, r3}
 8009482:	b500      	push	{lr}
 8009484:	b09c      	sub	sp, #112	; 0x70
 8009486:	ab1d      	add	r3, sp, #116	; 0x74
 8009488:	9002      	str	r0, [sp, #8]
 800948a:	9006      	str	r0, [sp, #24]
 800948c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009490:	4809      	ldr	r0, [pc, #36]	; (80094b8 <siprintf+0x38>)
 8009492:	9107      	str	r1, [sp, #28]
 8009494:	9104      	str	r1, [sp, #16]
 8009496:	4909      	ldr	r1, [pc, #36]	; (80094bc <siprintf+0x3c>)
 8009498:	f853 2b04 	ldr.w	r2, [r3], #4
 800949c:	9105      	str	r1, [sp, #20]
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	a902      	add	r1, sp, #8
 80094a4:	f003 f8cc 	bl	800c640 <_svfiprintf_r>
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	b01c      	add	sp, #112	; 0x70
 80094b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b4:	b003      	add	sp, #12
 80094b6:	4770      	bx	lr
 80094b8:	2000000c 	.word	0x2000000c
 80094bc:	ffff0208 	.word	0xffff0208

080094c0 <strncpy>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	3901      	subs	r1, #1
 80094c4:	4603      	mov	r3, r0
 80094c6:	b132      	cbz	r2, 80094d6 <strncpy+0x16>
 80094c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80094cc:	f803 4b01 	strb.w	r4, [r3], #1
 80094d0:	3a01      	subs	r2, #1
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d1f7      	bne.n	80094c6 <strncpy+0x6>
 80094d6:	441a      	add	r2, r3
 80094d8:	2100      	movs	r1, #0
 80094da:	4293      	cmp	r3, r2
 80094dc:	d100      	bne.n	80094e0 <strncpy+0x20>
 80094de:	bd10      	pop	{r4, pc}
 80094e0:	f803 1b01 	strb.w	r1, [r3], #1
 80094e4:	e7f9      	b.n	80094da <strncpy+0x1a>

080094e6 <strstr>:
 80094e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094e8:	780c      	ldrb	r4, [r1, #0]
 80094ea:	b164      	cbz	r4, 8009506 <strstr+0x20>
 80094ec:	4603      	mov	r3, r0
 80094ee:	781a      	ldrb	r2, [r3, #0]
 80094f0:	4618      	mov	r0, r3
 80094f2:	1c5e      	adds	r6, r3, #1
 80094f4:	b90a      	cbnz	r2, 80094fa <strstr+0x14>
 80094f6:	4610      	mov	r0, r2
 80094f8:	e005      	b.n	8009506 <strstr+0x20>
 80094fa:	4294      	cmp	r4, r2
 80094fc:	d108      	bne.n	8009510 <strstr+0x2a>
 80094fe:	460d      	mov	r5, r1
 8009500:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8009504:	b902      	cbnz	r2, 8009508 <strstr+0x22>
 8009506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009508:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800950c:	4297      	cmp	r7, r2
 800950e:	d0f7      	beq.n	8009500 <strstr+0x1a>
 8009510:	4633      	mov	r3, r6
 8009512:	e7ec      	b.n	80094ee <strstr+0x8>

08009514 <sulp>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4604      	mov	r4, r0
 8009518:	460d      	mov	r5, r1
 800951a:	ec45 4b10 	vmov	d0, r4, r5
 800951e:	4616      	mov	r6, r2
 8009520:	f002 feae 	bl	800c280 <__ulp>
 8009524:	ec51 0b10 	vmov	r0, r1, d0
 8009528:	b17e      	cbz	r6, 800954a <sulp+0x36>
 800952a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800952e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009532:	2b00      	cmp	r3, #0
 8009534:	dd09      	ble.n	800954a <sulp+0x36>
 8009536:	051b      	lsls	r3, r3, #20
 8009538:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800953c:	2400      	movs	r4, #0
 800953e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009542:	4622      	mov	r2, r4
 8009544:	462b      	mov	r3, r5
 8009546:	f7f7 f87f 	bl	8000648 <__aeabi_dmul>
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	0000      	movs	r0, r0
	...

08009550 <_strtod_l>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	b0a3      	sub	sp, #140	; 0x8c
 8009556:	461f      	mov	r7, r3
 8009558:	2300      	movs	r3, #0
 800955a:	931e      	str	r3, [sp, #120]	; 0x78
 800955c:	4ba4      	ldr	r3, [pc, #656]	; (80097f0 <_strtod_l+0x2a0>)
 800955e:	9219      	str	r2, [sp, #100]	; 0x64
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	9307      	str	r3, [sp, #28]
 8009564:	4604      	mov	r4, r0
 8009566:	4618      	mov	r0, r3
 8009568:	4688      	mov	r8, r1
 800956a:	f7f6 fe53 	bl	8000214 <strlen>
 800956e:	f04f 0a00 	mov.w	sl, #0
 8009572:	4605      	mov	r5, r0
 8009574:	f04f 0b00 	mov.w	fp, #0
 8009578:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800957c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800957e:	781a      	ldrb	r2, [r3, #0]
 8009580:	2a2b      	cmp	r2, #43	; 0x2b
 8009582:	d04c      	beq.n	800961e <_strtod_l+0xce>
 8009584:	d839      	bhi.n	80095fa <_strtod_l+0xaa>
 8009586:	2a0d      	cmp	r2, #13
 8009588:	d832      	bhi.n	80095f0 <_strtod_l+0xa0>
 800958a:	2a08      	cmp	r2, #8
 800958c:	d832      	bhi.n	80095f4 <_strtod_l+0xa4>
 800958e:	2a00      	cmp	r2, #0
 8009590:	d03c      	beq.n	800960c <_strtod_l+0xbc>
 8009592:	2300      	movs	r3, #0
 8009594:	930e      	str	r3, [sp, #56]	; 0x38
 8009596:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009598:	7833      	ldrb	r3, [r6, #0]
 800959a:	2b30      	cmp	r3, #48	; 0x30
 800959c:	f040 80b4 	bne.w	8009708 <_strtod_l+0x1b8>
 80095a0:	7873      	ldrb	r3, [r6, #1]
 80095a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095a6:	2b58      	cmp	r3, #88	; 0x58
 80095a8:	d16c      	bne.n	8009684 <_strtod_l+0x134>
 80095aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	ab1e      	add	r3, sp, #120	; 0x78
 80095b0:	9702      	str	r7, [sp, #8]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4a8f      	ldr	r2, [pc, #572]	; (80097f4 <_strtod_l+0x2a4>)
 80095b6:	ab1f      	add	r3, sp, #124	; 0x7c
 80095b8:	a91d      	add	r1, sp, #116	; 0x74
 80095ba:	4620      	mov	r0, r4
 80095bc:	f001 ff3a 	bl	800b434 <__gethex>
 80095c0:	f010 0707 	ands.w	r7, r0, #7
 80095c4:	4605      	mov	r5, r0
 80095c6:	d005      	beq.n	80095d4 <_strtod_l+0x84>
 80095c8:	2f06      	cmp	r7, #6
 80095ca:	d12a      	bne.n	8009622 <_strtod_l+0xd2>
 80095cc:	3601      	adds	r6, #1
 80095ce:	2300      	movs	r3, #0
 80095d0:	961d      	str	r6, [sp, #116]	; 0x74
 80095d2:	930e      	str	r3, [sp, #56]	; 0x38
 80095d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 8596 	bne.w	800a108 <_strtod_l+0xbb8>
 80095dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095de:	b1db      	cbz	r3, 8009618 <_strtod_l+0xc8>
 80095e0:	4652      	mov	r2, sl
 80095e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095e6:	ec43 2b10 	vmov	d0, r2, r3
 80095ea:	b023      	add	sp, #140	; 0x8c
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	2a20      	cmp	r2, #32
 80095f2:	d1ce      	bne.n	8009592 <_strtod_l+0x42>
 80095f4:	3301      	adds	r3, #1
 80095f6:	931d      	str	r3, [sp, #116]	; 0x74
 80095f8:	e7c0      	b.n	800957c <_strtod_l+0x2c>
 80095fa:	2a2d      	cmp	r2, #45	; 0x2d
 80095fc:	d1c9      	bne.n	8009592 <_strtod_l+0x42>
 80095fe:	2201      	movs	r2, #1
 8009600:	920e      	str	r2, [sp, #56]	; 0x38
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	921d      	str	r2, [sp, #116]	; 0x74
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1c4      	bne.n	8009596 <_strtod_l+0x46>
 800960c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800960e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009612:	2b00      	cmp	r3, #0
 8009614:	f040 8576 	bne.w	800a104 <_strtod_l+0xbb4>
 8009618:	4652      	mov	r2, sl
 800961a:	465b      	mov	r3, fp
 800961c:	e7e3      	b.n	80095e6 <_strtod_l+0x96>
 800961e:	2200      	movs	r2, #0
 8009620:	e7ee      	b.n	8009600 <_strtod_l+0xb0>
 8009622:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009624:	b13a      	cbz	r2, 8009636 <_strtod_l+0xe6>
 8009626:	2135      	movs	r1, #53	; 0x35
 8009628:	a820      	add	r0, sp, #128	; 0x80
 800962a:	f002 ff34 	bl	800c496 <__copybits>
 800962e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009630:	4620      	mov	r0, r4
 8009632:	f002 faf9 	bl	800bc28 <_Bfree>
 8009636:	3f01      	subs	r7, #1
 8009638:	2f05      	cmp	r7, #5
 800963a:	d807      	bhi.n	800964c <_strtod_l+0xfc>
 800963c:	e8df f007 	tbb	[pc, r7]
 8009640:	1d180b0e 	.word	0x1d180b0e
 8009644:	030e      	.short	0x030e
 8009646:	f04f 0b00 	mov.w	fp, #0
 800964a:	46da      	mov	sl, fp
 800964c:	0728      	lsls	r0, r5, #28
 800964e:	d5c1      	bpl.n	80095d4 <_strtod_l+0x84>
 8009650:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009654:	e7be      	b.n	80095d4 <_strtod_l+0x84>
 8009656:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800965a:	e7f7      	b.n	800964c <_strtod_l+0xfc>
 800965c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8009660:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009662:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009666:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800966a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800966e:	e7ed      	b.n	800964c <_strtod_l+0xfc>
 8009670:	f8df b184 	ldr.w	fp, [pc, #388]	; 80097f8 <_strtod_l+0x2a8>
 8009674:	f04f 0a00 	mov.w	sl, #0
 8009678:	e7e8      	b.n	800964c <_strtod_l+0xfc>
 800967a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800967e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009682:	e7e3      	b.n	800964c <_strtod_l+0xfc>
 8009684:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	921d      	str	r2, [sp, #116]	; 0x74
 800968a:	785b      	ldrb	r3, [r3, #1]
 800968c:	2b30      	cmp	r3, #48	; 0x30
 800968e:	d0f9      	beq.n	8009684 <_strtod_l+0x134>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d09f      	beq.n	80095d4 <_strtod_l+0x84>
 8009694:	2301      	movs	r3, #1
 8009696:	f04f 0900 	mov.w	r9, #0
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800969e:	930a      	str	r3, [sp, #40]	; 0x28
 80096a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80096a4:	464f      	mov	r7, r9
 80096a6:	220a      	movs	r2, #10
 80096a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80096aa:	7806      	ldrb	r6, [r0, #0]
 80096ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80096b0:	b2d9      	uxtb	r1, r3
 80096b2:	2909      	cmp	r1, #9
 80096b4:	d92a      	bls.n	800970c <_strtod_l+0x1bc>
 80096b6:	9907      	ldr	r1, [sp, #28]
 80096b8:	462a      	mov	r2, r5
 80096ba:	f003 f950 	bl	800c95e <strncmp>
 80096be:	b398      	cbz	r0, 8009728 <_strtod_l+0x1d8>
 80096c0:	2000      	movs	r0, #0
 80096c2:	4633      	mov	r3, r6
 80096c4:	463d      	mov	r5, r7
 80096c6:	9007      	str	r0, [sp, #28]
 80096c8:	4602      	mov	r2, r0
 80096ca:	2b65      	cmp	r3, #101	; 0x65
 80096cc:	d001      	beq.n	80096d2 <_strtod_l+0x182>
 80096ce:	2b45      	cmp	r3, #69	; 0x45
 80096d0:	d118      	bne.n	8009704 <_strtod_l+0x1b4>
 80096d2:	b91d      	cbnz	r5, 80096dc <_strtod_l+0x18c>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4303      	orrs	r3, r0
 80096d8:	d098      	beq.n	800960c <_strtod_l+0xbc>
 80096da:	2500      	movs	r5, #0
 80096dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80096e0:	f108 0301 	add.w	r3, r8, #1
 80096e4:	931d      	str	r3, [sp, #116]	; 0x74
 80096e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80096ea:	2b2b      	cmp	r3, #43	; 0x2b
 80096ec:	d075      	beq.n	80097da <_strtod_l+0x28a>
 80096ee:	2b2d      	cmp	r3, #45	; 0x2d
 80096f0:	d07b      	beq.n	80097ea <_strtod_l+0x29a>
 80096f2:	f04f 0c00 	mov.w	ip, #0
 80096f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80096fa:	2909      	cmp	r1, #9
 80096fc:	f240 8082 	bls.w	8009804 <_strtod_l+0x2b4>
 8009700:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009704:	2600      	movs	r6, #0
 8009706:	e09d      	b.n	8009844 <_strtod_l+0x2f4>
 8009708:	2300      	movs	r3, #0
 800970a:	e7c4      	b.n	8009696 <_strtod_l+0x146>
 800970c:	2f08      	cmp	r7, #8
 800970e:	bfd8      	it	le
 8009710:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009712:	f100 0001 	add.w	r0, r0, #1
 8009716:	bfda      	itte	le
 8009718:	fb02 3301 	mlale	r3, r2, r1, r3
 800971c:	9309      	strle	r3, [sp, #36]	; 0x24
 800971e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009722:	3701      	adds	r7, #1
 8009724:	901d      	str	r0, [sp, #116]	; 0x74
 8009726:	e7bf      	b.n	80096a8 <_strtod_l+0x158>
 8009728:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800972a:	195a      	adds	r2, r3, r5
 800972c:	921d      	str	r2, [sp, #116]	; 0x74
 800972e:	5d5b      	ldrb	r3, [r3, r5]
 8009730:	2f00      	cmp	r7, #0
 8009732:	d037      	beq.n	80097a4 <_strtod_l+0x254>
 8009734:	9007      	str	r0, [sp, #28]
 8009736:	463d      	mov	r5, r7
 8009738:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800973c:	2a09      	cmp	r2, #9
 800973e:	d912      	bls.n	8009766 <_strtod_l+0x216>
 8009740:	2201      	movs	r2, #1
 8009742:	e7c2      	b.n	80096ca <_strtod_l+0x17a>
 8009744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	921d      	str	r2, [sp, #116]	; 0x74
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	3001      	adds	r0, #1
 800974e:	2b30      	cmp	r3, #48	; 0x30
 8009750:	d0f8      	beq.n	8009744 <_strtod_l+0x1f4>
 8009752:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009756:	2a08      	cmp	r2, #8
 8009758:	f200 84db 	bhi.w	800a112 <_strtod_l+0xbc2>
 800975c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800975e:	9007      	str	r0, [sp, #28]
 8009760:	2000      	movs	r0, #0
 8009762:	920a      	str	r2, [sp, #40]	; 0x28
 8009764:	4605      	mov	r5, r0
 8009766:	3b30      	subs	r3, #48	; 0x30
 8009768:	f100 0201 	add.w	r2, r0, #1
 800976c:	d014      	beq.n	8009798 <_strtod_l+0x248>
 800976e:	9907      	ldr	r1, [sp, #28]
 8009770:	4411      	add	r1, r2
 8009772:	9107      	str	r1, [sp, #28]
 8009774:	462a      	mov	r2, r5
 8009776:	eb00 0e05 	add.w	lr, r0, r5
 800977a:	210a      	movs	r1, #10
 800977c:	4572      	cmp	r2, lr
 800977e:	d113      	bne.n	80097a8 <_strtod_l+0x258>
 8009780:	182a      	adds	r2, r5, r0
 8009782:	2a08      	cmp	r2, #8
 8009784:	f105 0501 	add.w	r5, r5, #1
 8009788:	4405      	add	r5, r0
 800978a:	dc1c      	bgt.n	80097c6 <_strtod_l+0x276>
 800978c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800978e:	220a      	movs	r2, #10
 8009790:	fb02 3301 	mla	r3, r2, r1, r3
 8009794:	9309      	str	r3, [sp, #36]	; 0x24
 8009796:	2200      	movs	r2, #0
 8009798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800979a:	1c59      	adds	r1, r3, #1
 800979c:	911d      	str	r1, [sp, #116]	; 0x74
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	4610      	mov	r0, r2
 80097a2:	e7c9      	b.n	8009738 <_strtod_l+0x1e8>
 80097a4:	4638      	mov	r0, r7
 80097a6:	e7d2      	b.n	800974e <_strtod_l+0x1fe>
 80097a8:	2a08      	cmp	r2, #8
 80097aa:	dc04      	bgt.n	80097b6 <_strtod_l+0x266>
 80097ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097ae:	434e      	muls	r6, r1
 80097b0:	9609      	str	r6, [sp, #36]	; 0x24
 80097b2:	3201      	adds	r2, #1
 80097b4:	e7e2      	b.n	800977c <_strtod_l+0x22c>
 80097b6:	f102 0c01 	add.w	ip, r2, #1
 80097ba:	f1bc 0f10 	cmp.w	ip, #16
 80097be:	bfd8      	it	le
 80097c0:	fb01 f909 	mulle.w	r9, r1, r9
 80097c4:	e7f5      	b.n	80097b2 <_strtod_l+0x262>
 80097c6:	2d10      	cmp	r5, #16
 80097c8:	bfdc      	itt	le
 80097ca:	220a      	movle	r2, #10
 80097cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80097d0:	e7e1      	b.n	8009796 <_strtod_l+0x246>
 80097d2:	2300      	movs	r3, #0
 80097d4:	9307      	str	r3, [sp, #28]
 80097d6:	2201      	movs	r2, #1
 80097d8:	e77c      	b.n	80096d4 <_strtod_l+0x184>
 80097da:	f04f 0c00 	mov.w	ip, #0
 80097de:	f108 0302 	add.w	r3, r8, #2
 80097e2:	931d      	str	r3, [sp, #116]	; 0x74
 80097e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80097e8:	e785      	b.n	80096f6 <_strtod_l+0x1a6>
 80097ea:	f04f 0c01 	mov.w	ip, #1
 80097ee:	e7f6      	b.n	80097de <_strtod_l+0x28e>
 80097f0:	0800d9d0 	.word	0x0800d9d0
 80097f4:	0800d81c 	.word	0x0800d81c
 80097f8:	7ff00000 	.word	0x7ff00000
 80097fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097fe:	1c59      	adds	r1, r3, #1
 8009800:	911d      	str	r1, [sp, #116]	; 0x74
 8009802:	785b      	ldrb	r3, [r3, #1]
 8009804:	2b30      	cmp	r3, #48	; 0x30
 8009806:	d0f9      	beq.n	80097fc <_strtod_l+0x2ac>
 8009808:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800980c:	2908      	cmp	r1, #8
 800980e:	f63f af79 	bhi.w	8009704 <_strtod_l+0x1b4>
 8009812:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009816:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009818:	9308      	str	r3, [sp, #32]
 800981a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800981c:	1c59      	adds	r1, r3, #1
 800981e:	911d      	str	r1, [sp, #116]	; 0x74
 8009820:	785b      	ldrb	r3, [r3, #1]
 8009822:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009826:	2e09      	cmp	r6, #9
 8009828:	d937      	bls.n	800989a <_strtod_l+0x34a>
 800982a:	9e08      	ldr	r6, [sp, #32]
 800982c:	1b89      	subs	r1, r1, r6
 800982e:	2908      	cmp	r1, #8
 8009830:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009834:	dc02      	bgt.n	800983c <_strtod_l+0x2ec>
 8009836:	4576      	cmp	r6, lr
 8009838:	bfa8      	it	ge
 800983a:	4676      	movge	r6, lr
 800983c:	f1bc 0f00 	cmp.w	ip, #0
 8009840:	d000      	beq.n	8009844 <_strtod_l+0x2f4>
 8009842:	4276      	negs	r6, r6
 8009844:	2d00      	cmp	r5, #0
 8009846:	d14f      	bne.n	80098e8 <_strtod_l+0x398>
 8009848:	9904      	ldr	r1, [sp, #16]
 800984a:	4301      	orrs	r1, r0
 800984c:	f47f aec2 	bne.w	80095d4 <_strtod_l+0x84>
 8009850:	2a00      	cmp	r2, #0
 8009852:	f47f aedb 	bne.w	800960c <_strtod_l+0xbc>
 8009856:	2b69      	cmp	r3, #105	; 0x69
 8009858:	d027      	beq.n	80098aa <_strtod_l+0x35a>
 800985a:	dc24      	bgt.n	80098a6 <_strtod_l+0x356>
 800985c:	2b49      	cmp	r3, #73	; 0x49
 800985e:	d024      	beq.n	80098aa <_strtod_l+0x35a>
 8009860:	2b4e      	cmp	r3, #78	; 0x4e
 8009862:	f47f aed3 	bne.w	800960c <_strtod_l+0xbc>
 8009866:	499e      	ldr	r1, [pc, #632]	; (8009ae0 <_strtod_l+0x590>)
 8009868:	a81d      	add	r0, sp, #116	; 0x74
 800986a:	f002 f83b 	bl	800b8e4 <__match>
 800986e:	2800      	cmp	r0, #0
 8009870:	f43f aecc 	beq.w	800960c <_strtod_l+0xbc>
 8009874:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b28      	cmp	r3, #40	; 0x28
 800987a:	d12d      	bne.n	80098d8 <_strtod_l+0x388>
 800987c:	4999      	ldr	r1, [pc, #612]	; (8009ae4 <_strtod_l+0x594>)
 800987e:	aa20      	add	r2, sp, #128	; 0x80
 8009880:	a81d      	add	r0, sp, #116	; 0x74
 8009882:	f002 f843 	bl	800b90c <__hexnan>
 8009886:	2805      	cmp	r0, #5
 8009888:	d126      	bne.n	80098d8 <_strtod_l+0x388>
 800988a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800988c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009890:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009894:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009898:	e69c      	b.n	80095d4 <_strtod_l+0x84>
 800989a:	210a      	movs	r1, #10
 800989c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80098a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80098a4:	e7b9      	b.n	800981a <_strtod_l+0x2ca>
 80098a6:	2b6e      	cmp	r3, #110	; 0x6e
 80098a8:	e7db      	b.n	8009862 <_strtod_l+0x312>
 80098aa:	498f      	ldr	r1, [pc, #572]	; (8009ae8 <_strtod_l+0x598>)
 80098ac:	a81d      	add	r0, sp, #116	; 0x74
 80098ae:	f002 f819 	bl	800b8e4 <__match>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f43f aeaa 	beq.w	800960c <_strtod_l+0xbc>
 80098b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ba:	498c      	ldr	r1, [pc, #560]	; (8009aec <_strtod_l+0x59c>)
 80098bc:	3b01      	subs	r3, #1
 80098be:	a81d      	add	r0, sp, #116	; 0x74
 80098c0:	931d      	str	r3, [sp, #116]	; 0x74
 80098c2:	f002 f80f 	bl	800b8e4 <__match>
 80098c6:	b910      	cbnz	r0, 80098ce <_strtod_l+0x37e>
 80098c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ca:	3301      	adds	r3, #1
 80098cc:	931d      	str	r3, [sp, #116]	; 0x74
 80098ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009afc <_strtod_l+0x5ac>
 80098d2:	f04f 0a00 	mov.w	sl, #0
 80098d6:	e67d      	b.n	80095d4 <_strtod_l+0x84>
 80098d8:	4885      	ldr	r0, [pc, #532]	; (8009af0 <_strtod_l+0x5a0>)
 80098da:	f002 ffb1 	bl	800c840 <nan>
 80098de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80098e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80098e6:	e675      	b.n	80095d4 <_strtod_l+0x84>
 80098e8:	9b07      	ldr	r3, [sp, #28]
 80098ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ec:	1af3      	subs	r3, r6, r3
 80098ee:	2f00      	cmp	r7, #0
 80098f0:	bf08      	it	eq
 80098f2:	462f      	moveq	r7, r5
 80098f4:	2d10      	cmp	r5, #16
 80098f6:	9308      	str	r3, [sp, #32]
 80098f8:	46a8      	mov	r8, r5
 80098fa:	bfa8      	it	ge
 80098fc:	f04f 0810 	movge.w	r8, #16
 8009900:	f7f6 fe28 	bl	8000554 <__aeabi_ui2d>
 8009904:	2d09      	cmp	r5, #9
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	dd13      	ble.n	8009934 <_strtod_l+0x3e4>
 800990c:	4b79      	ldr	r3, [pc, #484]	; (8009af4 <_strtod_l+0x5a4>)
 800990e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009912:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009916:	f7f6 fe97 	bl	8000648 <__aeabi_dmul>
 800991a:	4682      	mov	sl, r0
 800991c:	4648      	mov	r0, r9
 800991e:	468b      	mov	fp, r1
 8009920:	f7f6 fe18 	bl	8000554 <__aeabi_ui2d>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	4650      	mov	r0, sl
 800992a:	4659      	mov	r1, fp
 800992c:	f7f6 fcd6 	bl	80002dc <__adddf3>
 8009930:	4682      	mov	sl, r0
 8009932:	468b      	mov	fp, r1
 8009934:	2d0f      	cmp	r5, #15
 8009936:	dc38      	bgt.n	80099aa <_strtod_l+0x45a>
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	2b00      	cmp	r3, #0
 800993c:	f43f ae4a 	beq.w	80095d4 <_strtod_l+0x84>
 8009940:	dd24      	ble.n	800998c <_strtod_l+0x43c>
 8009942:	2b16      	cmp	r3, #22
 8009944:	dc0b      	bgt.n	800995e <_strtod_l+0x40e>
 8009946:	4d6b      	ldr	r5, [pc, #428]	; (8009af4 <_strtod_l+0x5a4>)
 8009948:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800994c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009950:	4652      	mov	r2, sl
 8009952:	465b      	mov	r3, fp
 8009954:	f7f6 fe78 	bl	8000648 <__aeabi_dmul>
 8009958:	4682      	mov	sl, r0
 800995a:	468b      	mov	fp, r1
 800995c:	e63a      	b.n	80095d4 <_strtod_l+0x84>
 800995e:	9a08      	ldr	r2, [sp, #32]
 8009960:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009964:	4293      	cmp	r3, r2
 8009966:	db20      	blt.n	80099aa <_strtod_l+0x45a>
 8009968:	4c62      	ldr	r4, [pc, #392]	; (8009af4 <_strtod_l+0x5a4>)
 800996a:	f1c5 050f 	rsb	r5, r5, #15
 800996e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009972:	4652      	mov	r2, sl
 8009974:	465b      	mov	r3, fp
 8009976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800997a:	f7f6 fe65 	bl	8000648 <__aeabi_dmul>
 800997e:	9b08      	ldr	r3, [sp, #32]
 8009980:	1b5d      	subs	r5, r3, r5
 8009982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800998a:	e7e3      	b.n	8009954 <_strtod_l+0x404>
 800998c:	9b08      	ldr	r3, [sp, #32]
 800998e:	3316      	adds	r3, #22
 8009990:	db0b      	blt.n	80099aa <_strtod_l+0x45a>
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	4a57      	ldr	r2, [pc, #348]	; (8009af4 <_strtod_l+0x5a4>)
 8009996:	1b9e      	subs	r6, r3, r6
 8009998:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800999c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099a0:	4650      	mov	r0, sl
 80099a2:	4659      	mov	r1, fp
 80099a4:	f7f6 ff7a 	bl	800089c <__aeabi_ddiv>
 80099a8:	e7d6      	b.n	8009958 <_strtod_l+0x408>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	eba5 0808 	sub.w	r8, r5, r8
 80099b0:	4498      	add	r8, r3
 80099b2:	f1b8 0f00 	cmp.w	r8, #0
 80099b6:	dd71      	ble.n	8009a9c <_strtod_l+0x54c>
 80099b8:	f018 030f 	ands.w	r3, r8, #15
 80099bc:	d00a      	beq.n	80099d4 <_strtod_l+0x484>
 80099be:	494d      	ldr	r1, [pc, #308]	; (8009af4 <_strtod_l+0x5a4>)
 80099c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099c4:	4652      	mov	r2, sl
 80099c6:	465b      	mov	r3, fp
 80099c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099cc:	f7f6 fe3c 	bl	8000648 <__aeabi_dmul>
 80099d0:	4682      	mov	sl, r0
 80099d2:	468b      	mov	fp, r1
 80099d4:	f038 080f 	bics.w	r8, r8, #15
 80099d8:	d04d      	beq.n	8009a76 <_strtod_l+0x526>
 80099da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80099de:	dd22      	ble.n	8009a26 <_strtod_l+0x4d6>
 80099e0:	2500      	movs	r5, #0
 80099e2:	462e      	mov	r6, r5
 80099e4:	9509      	str	r5, [sp, #36]	; 0x24
 80099e6:	9507      	str	r5, [sp, #28]
 80099e8:	2322      	movs	r3, #34	; 0x22
 80099ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009afc <_strtod_l+0x5ac>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	f04f 0a00 	mov.w	sl, #0
 80099f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f43f adec 	beq.w	80095d4 <_strtod_l+0x84>
 80099fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099fe:	4620      	mov	r0, r4
 8009a00:	f002 f912 	bl	800bc28 <_Bfree>
 8009a04:	9907      	ldr	r1, [sp, #28]
 8009a06:	4620      	mov	r0, r4
 8009a08:	f002 f90e 	bl	800bc28 <_Bfree>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f002 f90a 	bl	800bc28 <_Bfree>
 8009a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a16:	4620      	mov	r0, r4
 8009a18:	f002 f906 	bl	800bc28 <_Bfree>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4620      	mov	r0, r4
 8009a20:	f002 f902 	bl	800bc28 <_Bfree>
 8009a24:	e5d6      	b.n	80095d4 <_strtod_l+0x84>
 8009a26:	2300      	movs	r3, #0
 8009a28:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009a2c:	4650      	mov	r0, sl
 8009a2e:	4659      	mov	r1, fp
 8009a30:	4699      	mov	r9, r3
 8009a32:	f1b8 0f01 	cmp.w	r8, #1
 8009a36:	dc21      	bgt.n	8009a7c <_strtod_l+0x52c>
 8009a38:	b10b      	cbz	r3, 8009a3e <_strtod_l+0x4ee>
 8009a3a:	4682      	mov	sl, r0
 8009a3c:	468b      	mov	fp, r1
 8009a3e:	4b2e      	ldr	r3, [pc, #184]	; (8009af8 <_strtod_l+0x5a8>)
 8009a40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009a44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009a48:	4652      	mov	r2, sl
 8009a4a:	465b      	mov	r3, fp
 8009a4c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009a50:	f7f6 fdfa 	bl	8000648 <__aeabi_dmul>
 8009a54:	4b29      	ldr	r3, [pc, #164]	; (8009afc <_strtod_l+0x5ac>)
 8009a56:	460a      	mov	r2, r1
 8009a58:	400b      	ands	r3, r1
 8009a5a:	4929      	ldr	r1, [pc, #164]	; (8009b00 <_strtod_l+0x5b0>)
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	4682      	mov	sl, r0
 8009a60:	d8be      	bhi.n	80099e0 <_strtod_l+0x490>
 8009a62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a66:	428b      	cmp	r3, r1
 8009a68:	bf86      	itte	hi
 8009a6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009b04 <_strtod_l+0x5b4>
 8009a6e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009a72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009a76:	2300      	movs	r3, #0
 8009a78:	9304      	str	r3, [sp, #16]
 8009a7a:	e081      	b.n	8009b80 <_strtod_l+0x630>
 8009a7c:	f018 0f01 	tst.w	r8, #1
 8009a80:	d007      	beq.n	8009a92 <_strtod_l+0x542>
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <_strtod_l+0x5a8>)
 8009a84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f7f6 fddc 	bl	8000648 <__aeabi_dmul>
 8009a90:	2301      	movs	r3, #1
 8009a92:	f109 0901 	add.w	r9, r9, #1
 8009a96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a9a:	e7ca      	b.n	8009a32 <_strtod_l+0x4e2>
 8009a9c:	d0eb      	beq.n	8009a76 <_strtod_l+0x526>
 8009a9e:	f1c8 0800 	rsb	r8, r8, #0
 8009aa2:	f018 020f 	ands.w	r2, r8, #15
 8009aa6:	d00a      	beq.n	8009abe <_strtod_l+0x56e>
 8009aa8:	4b12      	ldr	r3, [pc, #72]	; (8009af4 <_strtod_l+0x5a4>)
 8009aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aae:	4650      	mov	r0, sl
 8009ab0:	4659      	mov	r1, fp
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fef1 	bl	800089c <__aeabi_ddiv>
 8009aba:	4682      	mov	sl, r0
 8009abc:	468b      	mov	fp, r1
 8009abe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ac2:	d0d8      	beq.n	8009a76 <_strtod_l+0x526>
 8009ac4:	f1b8 0f1f 	cmp.w	r8, #31
 8009ac8:	dd1e      	ble.n	8009b08 <_strtod_l+0x5b8>
 8009aca:	2500      	movs	r5, #0
 8009acc:	462e      	mov	r6, r5
 8009ace:	9509      	str	r5, [sp, #36]	; 0x24
 8009ad0:	9507      	str	r5, [sp, #28]
 8009ad2:	2322      	movs	r3, #34	; 0x22
 8009ad4:	f04f 0a00 	mov.w	sl, #0
 8009ad8:	f04f 0b00 	mov.w	fp, #0
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	e789      	b.n	80099f4 <_strtod_l+0x4a4>
 8009ae0:	0800d7f2 	.word	0x0800d7f2
 8009ae4:	0800d830 	.word	0x0800d830
 8009ae8:	0800d7ea 	.word	0x0800d7ea
 8009aec:	0800d873 	.word	0x0800d873
 8009af0:	0800d7cf 	.word	0x0800d7cf
 8009af4:	0800da70 	.word	0x0800da70
 8009af8:	0800da48 	.word	0x0800da48
 8009afc:	7ff00000 	.word	0x7ff00000
 8009b00:	7ca00000 	.word	0x7ca00000
 8009b04:	7fefffff 	.word	0x7fefffff
 8009b08:	f018 0310 	ands.w	r3, r8, #16
 8009b0c:	bf18      	it	ne
 8009b0e:	236a      	movne	r3, #106	; 0x6a
 8009b10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009ec8 <_strtod_l+0x978>
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	4650      	mov	r0, sl
 8009b18:	4659      	mov	r1, fp
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f018 0f01 	tst.w	r8, #1
 8009b20:	d004      	beq.n	8009b2c <_strtod_l+0x5dc>
 8009b22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009b26:	f7f6 fd8f 	bl	8000648 <__aeabi_dmul>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009b30:	f109 0908 	add.w	r9, r9, #8
 8009b34:	d1f2      	bne.n	8009b1c <_strtod_l+0x5cc>
 8009b36:	b10b      	cbz	r3, 8009b3c <_strtod_l+0x5ec>
 8009b38:	4682      	mov	sl, r0
 8009b3a:	468b      	mov	fp, r1
 8009b3c:	9b04      	ldr	r3, [sp, #16]
 8009b3e:	b1bb      	cbz	r3, 8009b70 <_strtod_l+0x620>
 8009b40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009b44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	4659      	mov	r1, fp
 8009b4c:	dd10      	ble.n	8009b70 <_strtod_l+0x620>
 8009b4e:	2b1f      	cmp	r3, #31
 8009b50:	f340 8128 	ble.w	8009da4 <_strtod_l+0x854>
 8009b54:	2b34      	cmp	r3, #52	; 0x34
 8009b56:	bfde      	ittt	le
 8009b58:	3b20      	suble	r3, #32
 8009b5a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009b5e:	fa02 f303 	lslle.w	r3, r2, r3
 8009b62:	f04f 0a00 	mov.w	sl, #0
 8009b66:	bfcc      	ite	gt
 8009b68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009b6c:	ea03 0b01 	andle.w	fp, r3, r1
 8009b70:	2200      	movs	r2, #0
 8009b72:	2300      	movs	r3, #0
 8009b74:	4650      	mov	r0, sl
 8009b76:	4659      	mov	r1, fp
 8009b78:	f7f6 ffce 	bl	8000b18 <__aeabi_dcmpeq>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d1a4      	bne.n	8009aca <_strtod_l+0x57a>
 8009b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009b86:	462b      	mov	r3, r5
 8009b88:	463a      	mov	r2, r7
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f002 f8b8 	bl	800bd00 <__s2b>
 8009b90:	9009      	str	r0, [sp, #36]	; 0x24
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f43f af24 	beq.w	80099e0 <_strtod_l+0x490>
 8009b98:	9b07      	ldr	r3, [sp, #28]
 8009b9a:	1b9e      	subs	r6, r3, r6
 8009b9c:	9b08      	ldr	r3, [sp, #32]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfb4      	ite	lt
 8009ba2:	4633      	movlt	r3, r6
 8009ba4:	2300      	movge	r3, #0
 8009ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8009ba8:	9b08      	ldr	r3, [sp, #32]
 8009baa:	2500      	movs	r5, #0
 8009bac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bb0:	9318      	str	r3, [sp, #96]	; 0x60
 8009bb2:	462e      	mov	r6, r5
 8009bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	6859      	ldr	r1, [r3, #4]
 8009bba:	f001 fff5 	bl	800bba8 <_Balloc>
 8009bbe:	9007      	str	r0, [sp, #28]
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f af11 	beq.w	80099e8 <_strtod_l+0x498>
 8009bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc8:	691a      	ldr	r2, [r3, #16]
 8009bca:	3202      	adds	r2, #2
 8009bcc:	f103 010c 	add.w	r1, r3, #12
 8009bd0:	0092      	lsls	r2, r2, #2
 8009bd2:	300c      	adds	r0, #12
 8009bd4:	f001 ffb4 	bl	800bb40 <memcpy>
 8009bd8:	ec4b ab10 	vmov	d0, sl, fp
 8009bdc:	aa20      	add	r2, sp, #128	; 0x80
 8009bde:	a91f      	add	r1, sp, #124	; 0x7c
 8009be0:	4620      	mov	r0, r4
 8009be2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009be6:	f002 fbc7 	bl	800c378 <__d2b>
 8009bea:	901e      	str	r0, [sp, #120]	; 0x78
 8009bec:	2800      	cmp	r0, #0
 8009bee:	f43f aefb 	beq.w	80099e8 <_strtod_l+0x498>
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f002 f91d 	bl	800be34 <__i2b>
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f43f aef3 	beq.w	80099e8 <_strtod_l+0x498>
 8009c02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009c04:	9904      	ldr	r1, [sp, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	bfab      	itete	ge
 8009c0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009c0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009c0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009c10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009c14:	bfac      	ite	ge
 8009c16:	eb03 0902 	addge.w	r9, r3, r2
 8009c1a:	1ad7      	sublt	r7, r2, r3
 8009c1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c1e:	eba3 0801 	sub.w	r8, r3, r1
 8009c22:	4490      	add	r8, r2
 8009c24:	4ba3      	ldr	r3, [pc, #652]	; (8009eb4 <_strtod_l+0x964>)
 8009c26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009c2a:	4598      	cmp	r8, r3
 8009c2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c30:	f280 80cc 	bge.w	8009dcc <_strtod_l+0x87c>
 8009c34:	eba3 0308 	sub.w	r3, r3, r8
 8009c38:	2b1f      	cmp	r3, #31
 8009c3a:	eba2 0203 	sub.w	r2, r2, r3
 8009c3e:	f04f 0101 	mov.w	r1, #1
 8009c42:	f300 80b6 	bgt.w	8009db2 <_strtod_l+0x862>
 8009c46:	fa01 f303 	lsl.w	r3, r1, r3
 8009c4a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c50:	eb09 0802 	add.w	r8, r9, r2
 8009c54:	9b04      	ldr	r3, [sp, #16]
 8009c56:	45c1      	cmp	r9, r8
 8009c58:	4417      	add	r7, r2
 8009c5a:	441f      	add	r7, r3
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	bfa8      	it	ge
 8009c60:	4643      	movge	r3, r8
 8009c62:	42bb      	cmp	r3, r7
 8009c64:	bfa8      	it	ge
 8009c66:	463b      	movge	r3, r7
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfc2      	ittt	gt
 8009c6c:	eba8 0803 	subgt.w	r8, r8, r3
 8009c70:	1aff      	subgt	r7, r7, r3
 8009c72:	eba9 0903 	subgt.w	r9, r9, r3
 8009c76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dd17      	ble.n	8009cac <_strtod_l+0x75c>
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	461a      	mov	r2, r3
 8009c80:	4620      	mov	r0, r4
 8009c82:	f002 f993 	bl	800bfac <__pow5mult>
 8009c86:	4606      	mov	r6, r0
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	f43f aead 	beq.w	80099e8 <_strtod_l+0x498>
 8009c8e:	4601      	mov	r1, r0
 8009c90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c92:	4620      	mov	r0, r4
 8009c94:	f002 f8e4 	bl	800be60 <__multiply>
 8009c98:	900f      	str	r0, [sp, #60]	; 0x3c
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	f43f aea4 	beq.w	80099e8 <_strtod_l+0x498>
 8009ca0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f001 ffc0 	bl	800bc28 <_Bfree>
 8009ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009caa:	931e      	str	r3, [sp, #120]	; 0x78
 8009cac:	f1b8 0f00 	cmp.w	r8, #0
 8009cb0:	f300 8091 	bgt.w	8009dd6 <_strtod_l+0x886>
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	dd08      	ble.n	8009ccc <_strtod_l+0x77c>
 8009cba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009cbc:	9907      	ldr	r1, [sp, #28]
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f002 f974 	bl	800bfac <__pow5mult>
 8009cc4:	9007      	str	r0, [sp, #28]
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f43f ae8e 	beq.w	80099e8 <_strtod_l+0x498>
 8009ccc:	2f00      	cmp	r7, #0
 8009cce:	dd08      	ble.n	8009ce2 <_strtod_l+0x792>
 8009cd0:	9907      	ldr	r1, [sp, #28]
 8009cd2:	463a      	mov	r2, r7
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f002 f9c3 	bl	800c060 <__lshift>
 8009cda:	9007      	str	r0, [sp, #28]
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	f43f ae83 	beq.w	80099e8 <_strtod_l+0x498>
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	dd08      	ble.n	8009cfa <_strtod_l+0x7aa>
 8009ce8:	4631      	mov	r1, r6
 8009cea:	464a      	mov	r2, r9
 8009cec:	4620      	mov	r0, r4
 8009cee:	f002 f9b7 	bl	800c060 <__lshift>
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f43f ae77 	beq.w	80099e8 <_strtod_l+0x498>
 8009cfa:	9a07      	ldr	r2, [sp, #28]
 8009cfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f002 fa36 	bl	800c170 <__mdiff>
 8009d04:	4605      	mov	r5, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	f43f ae6e 	beq.w	80099e8 <_strtod_l+0x498>
 8009d0c:	68c3      	ldr	r3, [r0, #12]
 8009d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d10:	2300      	movs	r3, #0
 8009d12:	60c3      	str	r3, [r0, #12]
 8009d14:	4631      	mov	r1, r6
 8009d16:	f002 fa0f 	bl	800c138 <__mcmp>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	da65      	bge.n	8009dea <_strtod_l+0x89a>
 8009d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d20:	ea53 030a 	orrs.w	r3, r3, sl
 8009d24:	f040 8087 	bne.w	8009e36 <_strtod_l+0x8e6>
 8009d28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f040 8082 	bne.w	8009e36 <_strtod_l+0x8e6>
 8009d32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d36:	0d1b      	lsrs	r3, r3, #20
 8009d38:	051b      	lsls	r3, r3, #20
 8009d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d3e:	d97a      	bls.n	8009e36 <_strtod_l+0x8e6>
 8009d40:	696b      	ldr	r3, [r5, #20]
 8009d42:	b913      	cbnz	r3, 8009d4a <_strtod_l+0x7fa>
 8009d44:	692b      	ldr	r3, [r5, #16]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	dd75      	ble.n	8009e36 <_strtod_l+0x8e6>
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f002 f986 	bl	800c060 <__lshift>
 8009d54:	4631      	mov	r1, r6
 8009d56:	4605      	mov	r5, r0
 8009d58:	f002 f9ee 	bl	800c138 <__mcmp>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	dd6a      	ble.n	8009e36 <_strtod_l+0x8e6>
 8009d60:	9904      	ldr	r1, [sp, #16]
 8009d62:	4a55      	ldr	r2, [pc, #340]	; (8009eb8 <_strtod_l+0x968>)
 8009d64:	465b      	mov	r3, fp
 8009d66:	2900      	cmp	r1, #0
 8009d68:	f000 8085 	beq.w	8009e76 <_strtod_l+0x926>
 8009d6c:	ea02 010b 	and.w	r1, r2, fp
 8009d70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d74:	dc7f      	bgt.n	8009e76 <_strtod_l+0x926>
 8009d76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d7a:	f77f aeaa 	ble.w	8009ad2 <_strtod_l+0x582>
 8009d7e:	4a4f      	ldr	r2, [pc, #316]	; (8009ebc <_strtod_l+0x96c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009d86:	4650      	mov	r0, sl
 8009d88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fc5b 	bl	8000648 <__aeabi_dmul>
 8009d92:	460b      	mov	r3, r1
 8009d94:	4303      	orrs	r3, r0
 8009d96:	bf08      	it	eq
 8009d98:	2322      	moveq	r3, #34	; 0x22
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	468b      	mov	fp, r1
 8009d9e:	bf08      	it	eq
 8009da0:	6023      	streq	r3, [r4, #0]
 8009da2:	e62b      	b.n	80099fc <_strtod_l+0x4ac>
 8009da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009da8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dac:	ea03 0a0a 	and.w	sl, r3, sl
 8009db0:	e6de      	b.n	8009b70 <_strtod_l+0x620>
 8009db2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009db6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009dba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009dbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009dc2:	fa01 f308 	lsl.w	r3, r1, r8
 8009dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8009dc8:	9111      	str	r1, [sp, #68]	; 0x44
 8009dca:	e741      	b.n	8009c50 <_strtod_l+0x700>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	9311      	str	r3, [sp, #68]	; 0x44
 8009dd4:	e73c      	b.n	8009c50 <_strtod_l+0x700>
 8009dd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f002 f940 	bl	800c060 <__lshift>
 8009de0:	901e      	str	r0, [sp, #120]	; 0x78
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f47f af66 	bne.w	8009cb4 <_strtod_l+0x764>
 8009de8:	e5fe      	b.n	80099e8 <_strtod_l+0x498>
 8009dea:	465f      	mov	r7, fp
 8009dec:	d16e      	bne.n	8009ecc <_strtod_l+0x97c>
 8009dee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009df0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df4:	b342      	cbz	r2, 8009e48 <_strtod_l+0x8f8>
 8009df6:	4a32      	ldr	r2, [pc, #200]	; (8009ec0 <_strtod_l+0x970>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d128      	bne.n	8009e4e <_strtod_l+0x8fe>
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	4650      	mov	r0, sl
 8009e00:	b1eb      	cbz	r3, 8009e3e <_strtod_l+0x8ee>
 8009e02:	4a2d      	ldr	r2, [pc, #180]	; (8009eb8 <_strtod_l+0x968>)
 8009e04:	403a      	ands	r2, r7
 8009e06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009e0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009e0e:	d819      	bhi.n	8009e44 <_strtod_l+0x8f4>
 8009e10:	0d12      	lsrs	r2, r2, #20
 8009e12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e16:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1a:	4298      	cmp	r0, r3
 8009e1c:	d117      	bne.n	8009e4e <_strtod_l+0x8fe>
 8009e1e:	4b29      	ldr	r3, [pc, #164]	; (8009ec4 <_strtod_l+0x974>)
 8009e20:	429f      	cmp	r7, r3
 8009e22:	d102      	bne.n	8009e2a <_strtod_l+0x8da>
 8009e24:	3001      	adds	r0, #1
 8009e26:	f43f addf 	beq.w	80099e8 <_strtod_l+0x498>
 8009e2a:	4b23      	ldr	r3, [pc, #140]	; (8009eb8 <_strtod_l+0x968>)
 8009e2c:	403b      	ands	r3, r7
 8009e2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009e32:	f04f 0a00 	mov.w	sl, #0
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1a0      	bne.n	8009d7e <_strtod_l+0x82e>
 8009e3c:	e5de      	b.n	80099fc <_strtod_l+0x4ac>
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e42:	e7ea      	b.n	8009e1a <_strtod_l+0x8ca>
 8009e44:	460b      	mov	r3, r1
 8009e46:	e7e8      	b.n	8009e1a <_strtod_l+0x8ca>
 8009e48:	ea53 030a 	orrs.w	r3, r3, sl
 8009e4c:	d088      	beq.n	8009d60 <_strtod_l+0x810>
 8009e4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e50:	b1db      	cbz	r3, 8009e8a <_strtod_l+0x93a>
 8009e52:	423b      	tst	r3, r7
 8009e54:	d0ef      	beq.n	8009e36 <_strtod_l+0x8e6>
 8009e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e58:	9a04      	ldr	r2, [sp, #16]
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	4659      	mov	r1, fp
 8009e5e:	b1c3      	cbz	r3, 8009e92 <_strtod_l+0x942>
 8009e60:	f7ff fb58 	bl	8009514 <sulp>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e6c:	f7f6 fa36 	bl	80002dc <__adddf3>
 8009e70:	4682      	mov	sl, r0
 8009e72:	468b      	mov	fp, r1
 8009e74:	e7df      	b.n	8009e36 <_strtod_l+0x8e6>
 8009e76:	4013      	ands	r3, r2
 8009e78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009e88:	e7d5      	b.n	8009e36 <_strtod_l+0x8e6>
 8009e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e8c:	ea13 0f0a 	tst.w	r3, sl
 8009e90:	e7e0      	b.n	8009e54 <_strtod_l+0x904>
 8009e92:	f7ff fb3f 	bl	8009514 <sulp>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e9e:	f7f6 fa1b 	bl	80002d8 <__aeabi_dsub>
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4682      	mov	sl, r0
 8009ea8:	468b      	mov	fp, r1
 8009eaa:	f7f6 fe35 	bl	8000b18 <__aeabi_dcmpeq>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d0c1      	beq.n	8009e36 <_strtod_l+0x8e6>
 8009eb2:	e60e      	b.n	8009ad2 <_strtod_l+0x582>
 8009eb4:	fffffc02 	.word	0xfffffc02
 8009eb8:	7ff00000 	.word	0x7ff00000
 8009ebc:	39500000 	.word	0x39500000
 8009ec0:	000fffff 	.word	0x000fffff
 8009ec4:	7fefffff 	.word	0x7fefffff
 8009ec8:	0800d848 	.word	0x0800d848
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4628      	mov	r0, r5
 8009ed0:	f002 faae 	bl	800c430 <__ratio>
 8009ed4:	ec59 8b10 	vmov	r8, r9, d0
 8009ed8:	ee10 0a10 	vmov	r0, s0
 8009edc:	2200      	movs	r2, #0
 8009ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ee2:	4649      	mov	r1, r9
 8009ee4:	f7f6 fe2c 	bl	8000b40 <__aeabi_dcmple>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d07c      	beq.n	8009fe6 <_strtod_l+0xa96>
 8009eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d04c      	beq.n	8009f8c <_strtod_l+0xa3c>
 8009ef2:	4b95      	ldr	r3, [pc, #596]	; (800a148 <_strtod_l+0xbf8>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009efa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a148 <_strtod_l+0xbf8>
 8009efe:	f04f 0800 	mov.w	r8, #0
 8009f02:	4b92      	ldr	r3, [pc, #584]	; (800a14c <_strtod_l+0xbfc>)
 8009f04:	403b      	ands	r3, r7
 8009f06:	9311      	str	r3, [sp, #68]	; 0x44
 8009f08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f0a:	4b91      	ldr	r3, [pc, #580]	; (800a150 <_strtod_l+0xc00>)
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	f040 80b2 	bne.w	800a076 <_strtod_l+0xb26>
 8009f12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f1e:	ec4b ab10 	vmov	d0, sl, fp
 8009f22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009f26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009f2a:	f002 f9a9 	bl	800c280 <__ulp>
 8009f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f32:	ec53 2b10 	vmov	r2, r3, d0
 8009f36:	f7f6 fb87 	bl	8000648 <__aeabi_dmul>
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	f7f6 f9cd 	bl	80002dc <__adddf3>
 8009f42:	460b      	mov	r3, r1
 8009f44:	4981      	ldr	r1, [pc, #516]	; (800a14c <_strtod_l+0xbfc>)
 8009f46:	4a83      	ldr	r2, [pc, #524]	; (800a154 <_strtod_l+0xc04>)
 8009f48:	4019      	ands	r1, r3
 8009f4a:	4291      	cmp	r1, r2
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	d95e      	bls.n	800a00e <_strtod_l+0xabe>
 8009f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d103      	bne.n	8009f62 <_strtod_l+0xa12>
 8009f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	f43f ad43 	beq.w	80099e8 <_strtod_l+0x498>
 8009f62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a160 <_strtod_l+0xc10>
 8009f66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009f6a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f001 fe5b 	bl	800bc28 <_Bfree>
 8009f72:	9907      	ldr	r1, [sp, #28]
 8009f74:	4620      	mov	r0, r4
 8009f76:	f001 fe57 	bl	800bc28 <_Bfree>
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f001 fe53 	bl	800bc28 <_Bfree>
 8009f82:	4629      	mov	r1, r5
 8009f84:	4620      	mov	r0, r4
 8009f86:	f001 fe4f 	bl	800bc28 <_Bfree>
 8009f8a:	e613      	b.n	8009bb4 <_strtod_l+0x664>
 8009f8c:	f1ba 0f00 	cmp.w	sl, #0
 8009f90:	d11b      	bne.n	8009fca <_strtod_l+0xa7a>
 8009f92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f96:	b9f3      	cbnz	r3, 8009fd6 <_strtod_l+0xa86>
 8009f98:	4b6b      	ldr	r3, [pc, #428]	; (800a148 <_strtod_l+0xbf8>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	f7f6 fdc4 	bl	8000b2c <__aeabi_dcmplt>
 8009fa4:	b9d0      	cbnz	r0, 8009fdc <_strtod_l+0xa8c>
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	4b6b      	ldr	r3, [pc, #428]	; (800a158 <_strtod_l+0xc08>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	f7f6 fb4b 	bl	8000648 <__aeabi_dmul>
 8009fb2:	4680      	mov	r8, r0
 8009fb4:	4689      	mov	r9, r1
 8009fb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009fbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8009fc0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009fc8:	e79b      	b.n	8009f02 <_strtod_l+0x9b2>
 8009fca:	f1ba 0f01 	cmp.w	sl, #1
 8009fce:	d102      	bne.n	8009fd6 <_strtod_l+0xa86>
 8009fd0:	2f00      	cmp	r7, #0
 8009fd2:	f43f ad7e 	beq.w	8009ad2 <_strtod_l+0x582>
 8009fd6:	4b61      	ldr	r3, [pc, #388]	; (800a15c <_strtod_l+0xc0c>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	e78c      	b.n	8009ef6 <_strtod_l+0x9a6>
 8009fdc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a158 <_strtod_l+0xc08>
 8009fe0:	f04f 0800 	mov.w	r8, #0
 8009fe4:	e7e7      	b.n	8009fb6 <_strtod_l+0xa66>
 8009fe6:	4b5c      	ldr	r3, [pc, #368]	; (800a158 <_strtod_l+0xc08>)
 8009fe8:	4640      	mov	r0, r8
 8009fea:	4649      	mov	r1, r9
 8009fec:	2200      	movs	r2, #0
 8009fee:	f7f6 fb2b 	bl	8000648 <__aeabi_dmul>
 8009ff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ff4:	4680      	mov	r8, r0
 8009ff6:	4689      	mov	r9, r1
 8009ff8:	b933      	cbnz	r3, 800a008 <_strtod_l+0xab8>
 8009ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ffe:	9012      	str	r0, [sp, #72]	; 0x48
 800a000:	9313      	str	r3, [sp, #76]	; 0x4c
 800a002:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a006:	e7dd      	b.n	8009fc4 <_strtod_l+0xa74>
 800a008:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a00c:	e7f9      	b.n	800a002 <_strtod_l+0xab2>
 800a00e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a012:	9b04      	ldr	r3, [sp, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1a8      	bne.n	8009f6a <_strtod_l+0xa1a>
 800a018:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a01c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a01e:	0d1b      	lsrs	r3, r3, #20
 800a020:	051b      	lsls	r3, r3, #20
 800a022:	429a      	cmp	r2, r3
 800a024:	d1a1      	bne.n	8009f6a <_strtod_l+0xa1a>
 800a026:	4640      	mov	r0, r8
 800a028:	4649      	mov	r1, r9
 800a02a:	f7f6 fe6d 	bl	8000d08 <__aeabi_d2lz>
 800a02e:	f7f6 fadd 	bl	80005ec <__aeabi_l2d>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4640      	mov	r0, r8
 800a038:	4649      	mov	r1, r9
 800a03a:	f7f6 f94d 	bl	80002d8 <__aeabi_dsub>
 800a03e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a040:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a044:	ea43 030a 	orr.w	r3, r3, sl
 800a048:	4313      	orrs	r3, r2
 800a04a:	4680      	mov	r8, r0
 800a04c:	4689      	mov	r9, r1
 800a04e:	d053      	beq.n	800a0f8 <_strtod_l+0xba8>
 800a050:	a335      	add	r3, pc, #212	; (adr r3, 800a128 <_strtod_l+0xbd8>)
 800a052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a056:	f7f6 fd69 	bl	8000b2c <__aeabi_dcmplt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f47f acce 	bne.w	80099fc <_strtod_l+0x4ac>
 800a060:	a333      	add	r3, pc, #204	; (adr r3, 800a130 <_strtod_l+0xbe0>)
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 fd7d 	bl	8000b68 <__aeabi_dcmpgt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	f43f af7b 	beq.w	8009f6a <_strtod_l+0xa1a>
 800a074:	e4c2      	b.n	80099fc <_strtod_l+0x4ac>
 800a076:	9b04      	ldr	r3, [sp, #16]
 800a078:	b333      	cbz	r3, 800a0c8 <_strtod_l+0xb78>
 800a07a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a07c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a080:	d822      	bhi.n	800a0c8 <_strtod_l+0xb78>
 800a082:	a32d      	add	r3, pc, #180	; (adr r3, 800a138 <_strtod_l+0xbe8>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	4640      	mov	r0, r8
 800a08a:	4649      	mov	r1, r9
 800a08c:	f7f6 fd58 	bl	8000b40 <__aeabi_dcmple>
 800a090:	b1a0      	cbz	r0, 800a0bc <_strtod_l+0xb6c>
 800a092:	4649      	mov	r1, r9
 800a094:	4640      	mov	r0, r8
 800a096:	f7f6 fdaf 	bl	8000bf8 <__aeabi_d2uiz>
 800a09a:	2801      	cmp	r0, #1
 800a09c:	bf38      	it	cc
 800a09e:	2001      	movcc	r0, #1
 800a0a0:	f7f6 fa58 	bl	8000554 <__aeabi_ui2d>
 800a0a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	4689      	mov	r9, r1
 800a0aa:	bb13      	cbnz	r3, 800a0f2 <_strtod_l+0xba2>
 800a0ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0b0:	9014      	str	r0, [sp, #80]	; 0x50
 800a0b2:	9315      	str	r3, [sp, #84]	; 0x54
 800a0b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a0b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a0bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a0c4:	1a9b      	subs	r3, r3, r2
 800a0c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a0d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0d4:	f002 f8d4 	bl	800c280 <__ulp>
 800a0d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0dc:	ec53 2b10 	vmov	r2, r3, d0
 800a0e0:	f7f6 fab2 	bl	8000648 <__aeabi_dmul>
 800a0e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0e8:	f7f6 f8f8 	bl	80002dc <__adddf3>
 800a0ec:	4682      	mov	sl, r0
 800a0ee:	468b      	mov	fp, r1
 800a0f0:	e78f      	b.n	800a012 <_strtod_l+0xac2>
 800a0f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a0f6:	e7dd      	b.n	800a0b4 <_strtod_l+0xb64>
 800a0f8:	a311      	add	r3, pc, #68	; (adr r3, 800a140 <_strtod_l+0xbf0>)
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	f7f6 fd15 	bl	8000b2c <__aeabi_dcmplt>
 800a102:	e7b4      	b.n	800a06e <_strtod_l+0xb1e>
 800a104:	2300      	movs	r3, #0
 800a106:	930e      	str	r3, [sp, #56]	; 0x38
 800a108:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a10a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	f7ff ba65 	b.w	80095dc <_strtod_l+0x8c>
 800a112:	2b65      	cmp	r3, #101	; 0x65
 800a114:	f43f ab5d 	beq.w	80097d2 <_strtod_l+0x282>
 800a118:	2b45      	cmp	r3, #69	; 0x45
 800a11a:	f43f ab5a 	beq.w	80097d2 <_strtod_l+0x282>
 800a11e:	2201      	movs	r2, #1
 800a120:	f7ff bb92 	b.w	8009848 <_strtod_l+0x2f8>
 800a124:	f3af 8000 	nop.w
 800a128:	94a03595 	.word	0x94a03595
 800a12c:	3fdfffff 	.word	0x3fdfffff
 800a130:	35afe535 	.word	0x35afe535
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	ffc00000 	.word	0xffc00000
 800a13c:	41dfffff 	.word	0x41dfffff
 800a140:	94a03595 	.word	0x94a03595
 800a144:	3fcfffff 	.word	0x3fcfffff
 800a148:	3ff00000 	.word	0x3ff00000
 800a14c:	7ff00000 	.word	0x7ff00000
 800a150:	7fe00000 	.word	0x7fe00000
 800a154:	7c9fffff 	.word	0x7c9fffff
 800a158:	3fe00000 	.word	0x3fe00000
 800a15c:	bff00000 	.word	0xbff00000
 800a160:	7fefffff 	.word	0x7fefffff

0800a164 <strtod>:
 800a164:	460a      	mov	r2, r1
 800a166:	4601      	mov	r1, r0
 800a168:	4802      	ldr	r0, [pc, #8]	; (800a174 <strtod+0x10>)
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <strtod+0x14>)
 800a16c:	6800      	ldr	r0, [r0, #0]
 800a16e:	f7ff b9ef 	b.w	8009550 <_strtod_l>
 800a172:	bf00      	nop
 800a174:	2000000c 	.word	0x2000000c
 800a178:	20000074 	.word	0x20000074

0800a17c <__swbuf_r>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	460e      	mov	r6, r1
 800a180:	4614      	mov	r4, r2
 800a182:	4605      	mov	r5, r0
 800a184:	b118      	cbz	r0, 800a18e <__swbuf_r+0x12>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <__swbuf_r+0x12>
 800a18a:	f001 f84f 	bl	800b22c <__sinit>
 800a18e:	4b21      	ldr	r3, [pc, #132]	; (800a214 <__swbuf_r+0x98>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d12b      	bne.n	800a1ec <__swbuf_r+0x70>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	69a3      	ldr	r3, [r4, #24]
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	071a      	lsls	r2, r3, #28
 800a19e:	d52f      	bpl.n	800a200 <__swbuf_r+0x84>
 800a1a0:	6923      	ldr	r3, [r4, #16]
 800a1a2:	b36b      	cbz	r3, 800a200 <__swbuf_r+0x84>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	1ac0      	subs	r0, r0, r3
 800a1aa:	6963      	ldr	r3, [r4, #20]
 800a1ac:	b2f6      	uxtb	r6, r6
 800a1ae:	4283      	cmp	r3, r0
 800a1b0:	4637      	mov	r7, r6
 800a1b2:	dc04      	bgt.n	800a1be <__swbuf_r+0x42>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 ffa4 	bl	800b104 <_fflush_r>
 800a1bc:	bb30      	cbnz	r0, 800a20c <__swbuf_r+0x90>
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	60a3      	str	r3, [r4, #8]
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	6022      	str	r2, [r4, #0]
 800a1ca:	701e      	strb	r6, [r3, #0]
 800a1cc:	6963      	ldr	r3, [r4, #20]
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	4283      	cmp	r3, r0
 800a1d2:	d004      	beq.n	800a1de <__swbuf_r+0x62>
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	07db      	lsls	r3, r3, #31
 800a1d8:	d506      	bpl.n	800a1e8 <__swbuf_r+0x6c>
 800a1da:	2e0a      	cmp	r6, #10
 800a1dc:	d104      	bne.n	800a1e8 <__swbuf_r+0x6c>
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	f000 ff8f 	bl	800b104 <_fflush_r>
 800a1e6:	b988      	cbnz	r0, 800a20c <__swbuf_r+0x90>
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <__swbuf_r+0x9c>)
 800a1ee:	429c      	cmp	r4, r3
 800a1f0:	d101      	bne.n	800a1f6 <__swbuf_r+0x7a>
 800a1f2:	68ac      	ldr	r4, [r5, #8]
 800a1f4:	e7cf      	b.n	800a196 <__swbuf_r+0x1a>
 800a1f6:	4b09      	ldr	r3, [pc, #36]	; (800a21c <__swbuf_r+0xa0>)
 800a1f8:	429c      	cmp	r4, r3
 800a1fa:	bf08      	it	eq
 800a1fc:	68ec      	ldreq	r4, [r5, #12]
 800a1fe:	e7ca      	b.n	800a196 <__swbuf_r+0x1a>
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f80c 	bl	800a220 <__swsetup_r>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d0cb      	beq.n	800a1a4 <__swbuf_r+0x28>
 800a20c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a210:	e7ea      	b.n	800a1e8 <__swbuf_r+0x6c>
 800a212:	bf00      	nop
 800a214:	0800d924 	.word	0x0800d924
 800a218:	0800d944 	.word	0x0800d944
 800a21c:	0800d904 	.word	0x0800d904

0800a220 <__swsetup_r>:
 800a220:	4b32      	ldr	r3, [pc, #200]	; (800a2ec <__swsetup_r+0xcc>)
 800a222:	b570      	push	{r4, r5, r6, lr}
 800a224:	681d      	ldr	r5, [r3, #0]
 800a226:	4606      	mov	r6, r0
 800a228:	460c      	mov	r4, r1
 800a22a:	b125      	cbz	r5, 800a236 <__swsetup_r+0x16>
 800a22c:	69ab      	ldr	r3, [r5, #24]
 800a22e:	b913      	cbnz	r3, 800a236 <__swsetup_r+0x16>
 800a230:	4628      	mov	r0, r5
 800a232:	f000 fffb 	bl	800b22c <__sinit>
 800a236:	4b2e      	ldr	r3, [pc, #184]	; (800a2f0 <__swsetup_r+0xd0>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	d10f      	bne.n	800a25c <__swsetup_r+0x3c>
 800a23c:	686c      	ldr	r4, [r5, #4]
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a244:	0719      	lsls	r1, r3, #28
 800a246:	d42c      	bmi.n	800a2a2 <__swsetup_r+0x82>
 800a248:	06dd      	lsls	r5, r3, #27
 800a24a:	d411      	bmi.n	800a270 <__swsetup_r+0x50>
 800a24c:	2309      	movs	r3, #9
 800a24e:	6033      	str	r3, [r6, #0]
 800a250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a25a:	e03e      	b.n	800a2da <__swsetup_r+0xba>
 800a25c:	4b25      	ldr	r3, [pc, #148]	; (800a2f4 <__swsetup_r+0xd4>)
 800a25e:	429c      	cmp	r4, r3
 800a260:	d101      	bne.n	800a266 <__swsetup_r+0x46>
 800a262:	68ac      	ldr	r4, [r5, #8]
 800a264:	e7eb      	b.n	800a23e <__swsetup_r+0x1e>
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <__swsetup_r+0xd8>)
 800a268:	429c      	cmp	r4, r3
 800a26a:	bf08      	it	eq
 800a26c:	68ec      	ldreq	r4, [r5, #12]
 800a26e:	e7e6      	b.n	800a23e <__swsetup_r+0x1e>
 800a270:	0758      	lsls	r0, r3, #29
 800a272:	d512      	bpl.n	800a29a <__swsetup_r+0x7a>
 800a274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a276:	b141      	cbz	r1, 800a28a <__swsetup_r+0x6a>
 800a278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a27c:	4299      	cmp	r1, r3
 800a27e:	d002      	beq.n	800a286 <__swsetup_r+0x66>
 800a280:	4630      	mov	r0, r6
 800a282:	f7fe f9f1 	bl	8008668 <_free_r>
 800a286:	2300      	movs	r3, #0
 800a288:	6363      	str	r3, [r4, #52]	; 0x34
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	2300      	movs	r3, #0
 800a294:	6063      	str	r3, [r4, #4]
 800a296:	6923      	ldr	r3, [r4, #16]
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	f043 0308 	orr.w	r3, r3, #8
 800a2a0:	81a3      	strh	r3, [r4, #12]
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	b94b      	cbnz	r3, 800a2ba <__swsetup_r+0x9a>
 800a2a6:	89a3      	ldrh	r3, [r4, #12]
 800a2a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b0:	d003      	beq.n	800a2ba <__swsetup_r+0x9a>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f001 fbf1 	bl	800ba9c <__smakebuf_r>
 800a2ba:	89a0      	ldrh	r0, [r4, #12]
 800a2bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2c0:	f010 0301 	ands.w	r3, r0, #1
 800a2c4:	d00a      	beq.n	800a2dc <__swsetup_r+0xbc>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60a3      	str	r3, [r4, #8]
 800a2ca:	6963      	ldr	r3, [r4, #20]
 800a2cc:	425b      	negs	r3, r3
 800a2ce:	61a3      	str	r3, [r4, #24]
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b943      	cbnz	r3, 800a2e6 <__swsetup_r+0xc6>
 800a2d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2d8:	d1ba      	bne.n	800a250 <__swsetup_r+0x30>
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	0781      	lsls	r1, r0, #30
 800a2de:	bf58      	it	pl
 800a2e0:	6963      	ldrpl	r3, [r4, #20]
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	e7f4      	b.n	800a2d0 <__swsetup_r+0xb0>
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e7f7      	b.n	800a2da <__swsetup_r+0xba>
 800a2ea:	bf00      	nop
 800a2ec:	2000000c 	.word	0x2000000c
 800a2f0:	0800d924 	.word	0x0800d924
 800a2f4:	0800d944 	.word	0x0800d944
 800a2f8:	0800d904 	.word	0x0800d904

0800a2fc <abort>:
 800a2fc:	b508      	push	{r3, lr}
 800a2fe:	2006      	movs	r0, #6
 800a300:	f002 face 	bl	800c8a0 <raise>
 800a304:	2001      	movs	r0, #1
 800a306:	f7f9 fb04 	bl	8003912 <_exit>

0800a30a <quorem>:
 800a30a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30e:	6903      	ldr	r3, [r0, #16]
 800a310:	690c      	ldr	r4, [r1, #16]
 800a312:	42a3      	cmp	r3, r4
 800a314:	4607      	mov	r7, r0
 800a316:	f2c0 8081 	blt.w	800a41c <quorem+0x112>
 800a31a:	3c01      	subs	r4, #1
 800a31c:	f101 0814 	add.w	r8, r1, #20
 800a320:	f100 0514 	add.w	r5, r0, #20
 800a324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a32e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a332:	3301      	adds	r3, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a33a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a33e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a342:	d331      	bcc.n	800a3a8 <quorem+0x9e>
 800a344:	f04f 0e00 	mov.w	lr, #0
 800a348:	4640      	mov	r0, r8
 800a34a:	46ac      	mov	ip, r5
 800a34c:	46f2      	mov	sl, lr
 800a34e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a352:	b293      	uxth	r3, r2
 800a354:	fb06 e303 	mla	r3, r6, r3, lr
 800a358:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	ebaa 0303 	sub.w	r3, sl, r3
 800a362:	0c12      	lsrs	r2, r2, #16
 800a364:	f8dc a000 	ldr.w	sl, [ip]
 800a368:	fb06 e202 	mla	r2, r6, r2, lr
 800a36c:	fa13 f38a 	uxtah	r3, r3, sl
 800a370:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a374:	fa1f fa82 	uxth.w	sl, r2
 800a378:	f8dc 2000 	ldr.w	r2, [ip]
 800a37c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a380:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a384:	b29b      	uxth	r3, r3
 800a386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a38a:	4581      	cmp	r9, r0
 800a38c:	f84c 3b04 	str.w	r3, [ip], #4
 800a390:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a394:	d2db      	bcs.n	800a34e <quorem+0x44>
 800a396:	f855 300b 	ldr.w	r3, [r5, fp]
 800a39a:	b92b      	cbnz	r3, 800a3a8 <quorem+0x9e>
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	3b04      	subs	r3, #4
 800a3a0:	429d      	cmp	r5, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	d32e      	bcc.n	800a404 <quorem+0xfa>
 800a3a6:	613c      	str	r4, [r7, #16]
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f001 fec5 	bl	800c138 <__mcmp>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	db24      	blt.n	800a3fc <quorem+0xf2>
 800a3b2:	3601      	adds	r6, #1
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f04f 0c00 	mov.w	ip, #0
 800a3ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3be:	f8d0 e000 	ldr.w	lr, [r0]
 800a3c2:	b293      	uxth	r3, r2
 800a3c4:	ebac 0303 	sub.w	r3, ip, r3
 800a3c8:	0c12      	lsrs	r2, r2, #16
 800a3ca:	fa13 f38e 	uxtah	r3, r3, lr
 800a3ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3dc:	45c1      	cmp	r9, r8
 800a3de:	f840 3b04 	str.w	r3, [r0], #4
 800a3e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3e6:	d2e8      	bcs.n	800a3ba <quorem+0xb0>
 800a3e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3f0:	b922      	cbnz	r2, 800a3fc <quorem+0xf2>
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	d30a      	bcc.n	800a410 <quorem+0x106>
 800a3fa:	613c      	str	r4, [r7, #16]
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	b003      	add	sp, #12
 800a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	3b04      	subs	r3, #4
 800a408:	2a00      	cmp	r2, #0
 800a40a:	d1cc      	bne.n	800a3a6 <quorem+0x9c>
 800a40c:	3c01      	subs	r4, #1
 800a40e:	e7c7      	b.n	800a3a0 <quorem+0x96>
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	3b04      	subs	r3, #4
 800a414:	2a00      	cmp	r2, #0
 800a416:	d1f0      	bne.n	800a3fa <quorem+0xf0>
 800a418:	3c01      	subs	r4, #1
 800a41a:	e7eb      	b.n	800a3f4 <quorem+0xea>
 800a41c:	2000      	movs	r0, #0
 800a41e:	e7ee      	b.n	800a3fe <quorem+0xf4>

0800a420 <_dtoa_r>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b02 	vpush	{d8}
 800a428:	ec57 6b10 	vmov	r6, r7, d0
 800a42c:	b095      	sub	sp, #84	; 0x54
 800a42e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a430:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a43a:	4604      	mov	r4, r0
 800a43c:	9209      	str	r2, [sp, #36]	; 0x24
 800a43e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a440:	b975      	cbnz	r5, 800a460 <_dtoa_r+0x40>
 800a442:	2010      	movs	r0, #16
 800a444:	f7fe f900 	bl	8008648 <malloc>
 800a448:	4602      	mov	r2, r0
 800a44a:	6260      	str	r0, [r4, #36]	; 0x24
 800a44c:	b920      	cbnz	r0, 800a458 <_dtoa_r+0x38>
 800a44e:	4bb2      	ldr	r3, [pc, #712]	; (800a718 <_dtoa_r+0x2f8>)
 800a450:	21ea      	movs	r1, #234	; 0xea
 800a452:	48b2      	ldr	r0, [pc, #712]	; (800a71c <_dtoa_r+0x2fc>)
 800a454:	f7fe f89a 	bl	800858c <__assert_func>
 800a458:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a45c:	6005      	str	r5, [r0, #0]
 800a45e:	60c5      	str	r5, [r0, #12]
 800a460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a462:	6819      	ldr	r1, [r3, #0]
 800a464:	b151      	cbz	r1, 800a47c <_dtoa_r+0x5c>
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	604a      	str	r2, [r1, #4]
 800a46a:	2301      	movs	r3, #1
 800a46c:	4093      	lsls	r3, r2
 800a46e:	608b      	str	r3, [r1, #8]
 800a470:	4620      	mov	r0, r4
 800a472:	f001 fbd9 	bl	800bc28 <_Bfree>
 800a476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	1e3b      	subs	r3, r7, #0
 800a47e:	bfb9      	ittee	lt
 800a480:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a484:	9303      	strlt	r3, [sp, #12]
 800a486:	2300      	movge	r3, #0
 800a488:	f8c8 3000 	strge.w	r3, [r8]
 800a48c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a490:	4ba3      	ldr	r3, [pc, #652]	; (800a720 <_dtoa_r+0x300>)
 800a492:	bfbc      	itt	lt
 800a494:	2201      	movlt	r2, #1
 800a496:	f8c8 2000 	strlt.w	r2, [r8]
 800a49a:	ea33 0309 	bics.w	r3, r3, r9
 800a49e:	d11b      	bne.n	800a4d8 <_dtoa_r+0xb8>
 800a4a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4ac:	4333      	orrs	r3, r6
 800a4ae:	f000 857a 	beq.w	800afa6 <_dtoa_r+0xb86>
 800a4b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b4:	b963      	cbnz	r3, 800a4d0 <_dtoa_r+0xb0>
 800a4b6:	4b9b      	ldr	r3, [pc, #620]	; (800a724 <_dtoa_r+0x304>)
 800a4b8:	e024      	b.n	800a504 <_dtoa_r+0xe4>
 800a4ba:	4b9b      	ldr	r3, [pc, #620]	; (800a728 <_dtoa_r+0x308>)
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	3308      	adds	r3, #8
 800a4c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	9800      	ldr	r0, [sp, #0]
 800a4c6:	b015      	add	sp, #84	; 0x54
 800a4c8:	ecbd 8b02 	vpop	{d8}
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	4b94      	ldr	r3, [pc, #592]	; (800a724 <_dtoa_r+0x304>)
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	3303      	adds	r3, #3
 800a4d6:	e7f3      	b.n	800a4c0 <_dtoa_r+0xa0>
 800a4d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	ec51 0b17 	vmov	r0, r1, d7
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a4e8:	f7f6 fb16 	bl	8000b18 <__aeabi_dcmpeq>
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	b158      	cbz	r0, 800a508 <_dtoa_r+0xe8>
 800a4f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 8551 	beq.w	800afa0 <_dtoa_r+0xb80>
 800a4fe:	488b      	ldr	r0, [pc, #556]	; (800a72c <_dtoa_r+0x30c>)
 800a500:	6018      	str	r0, [r3, #0]
 800a502:	1e43      	subs	r3, r0, #1
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	e7dd      	b.n	800a4c4 <_dtoa_r+0xa4>
 800a508:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a50c:	aa12      	add	r2, sp, #72	; 0x48
 800a50e:	a913      	add	r1, sp, #76	; 0x4c
 800a510:	4620      	mov	r0, r4
 800a512:	f001 ff31 	bl	800c378 <__d2b>
 800a516:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a51a:	4683      	mov	fp, r0
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	d07c      	beq.n	800a61a <_dtoa_r+0x1fa>
 800a520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a522:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a52a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a52e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a532:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a53a:	4b7d      	ldr	r3, [pc, #500]	; (800a730 <_dtoa_r+0x310>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	f7f5 fec9 	bl	80002d8 <__aeabi_dsub>
 800a546:	a36e      	add	r3, pc, #440	; (adr r3, 800a700 <_dtoa_r+0x2e0>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f6 f87c 	bl	8000648 <__aeabi_dmul>
 800a550:	a36d      	add	r3, pc, #436	; (adr r3, 800a708 <_dtoa_r+0x2e8>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f7f5 fec1 	bl	80002dc <__adddf3>
 800a55a:	4606      	mov	r6, r0
 800a55c:	4628      	mov	r0, r5
 800a55e:	460f      	mov	r7, r1
 800a560:	f7f6 f808 	bl	8000574 <__aeabi_i2d>
 800a564:	a36a      	add	r3, pc, #424	; (adr r3, 800a710 <_dtoa_r+0x2f0>)
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	f7f6 f86d 	bl	8000648 <__aeabi_dmul>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	4630      	mov	r0, r6
 800a574:	4639      	mov	r1, r7
 800a576:	f7f5 feb1 	bl	80002dc <__adddf3>
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	f7f6 fb13 	bl	8000ba8 <__aeabi_d2iz>
 800a582:	2200      	movs	r2, #0
 800a584:	4682      	mov	sl, r0
 800a586:	2300      	movs	r3, #0
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 face 	bl	8000b2c <__aeabi_dcmplt>
 800a590:	b148      	cbz	r0, 800a5a6 <_dtoa_r+0x186>
 800a592:	4650      	mov	r0, sl
 800a594:	f7f5 ffee 	bl	8000574 <__aeabi_i2d>
 800a598:	4632      	mov	r2, r6
 800a59a:	463b      	mov	r3, r7
 800a59c:	f7f6 fabc 	bl	8000b18 <__aeabi_dcmpeq>
 800a5a0:	b908      	cbnz	r0, 800a5a6 <_dtoa_r+0x186>
 800a5a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a5a6:	f1ba 0f16 	cmp.w	sl, #22
 800a5aa:	d854      	bhi.n	800a656 <_dtoa_r+0x236>
 800a5ac:	4b61      	ldr	r3, [pc, #388]	; (800a734 <_dtoa_r+0x314>)
 800a5ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5ba:	f7f6 fab7 	bl	8000b2c <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d04b      	beq.n	800a65a <_dtoa_r+0x23a>
 800a5c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5cc:	1b5d      	subs	r5, r3, r5
 800a5ce:	1e6b      	subs	r3, r5, #1
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	bf43      	ittte	mi
 800a5d4:	2300      	movmi	r3, #0
 800a5d6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a5da:	9304      	strmi	r3, [sp, #16]
 800a5dc:	f04f 0800 	movpl.w	r8, #0
 800a5e0:	f1ba 0f00 	cmp.w	sl, #0
 800a5e4:	db3b      	blt.n	800a65e <_dtoa_r+0x23e>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a5ec:	4453      	add	r3, sl
 800a5ee:	9304      	str	r3, [sp, #16]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9306      	str	r3, [sp, #24]
 800a5f4:	9b05      	ldr	r3, [sp, #20]
 800a5f6:	2b09      	cmp	r3, #9
 800a5f8:	d869      	bhi.n	800a6ce <_dtoa_r+0x2ae>
 800a5fa:	2b05      	cmp	r3, #5
 800a5fc:	bfc4      	itt	gt
 800a5fe:	3b04      	subgt	r3, #4
 800a600:	9305      	strgt	r3, [sp, #20]
 800a602:	9b05      	ldr	r3, [sp, #20]
 800a604:	f1a3 0302 	sub.w	r3, r3, #2
 800a608:	bfcc      	ite	gt
 800a60a:	2500      	movgt	r5, #0
 800a60c:	2501      	movle	r5, #1
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d869      	bhi.n	800a6e6 <_dtoa_r+0x2c6>
 800a612:	e8df f003 	tbb	[pc, r3]
 800a616:	4e2c      	.short	0x4e2c
 800a618:	5a4c      	.short	0x5a4c
 800a61a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a61e:	441d      	add	r5, r3
 800a620:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a624:	2b20      	cmp	r3, #32
 800a626:	bfc1      	itttt	gt
 800a628:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a62c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a630:	fa09 f303 	lslgt.w	r3, r9, r3
 800a634:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a638:	bfda      	itte	le
 800a63a:	f1c3 0320 	rsble	r3, r3, #32
 800a63e:	fa06 f003 	lslle.w	r0, r6, r3
 800a642:	4318      	orrgt	r0, r3
 800a644:	f7f5 ff86 	bl	8000554 <__aeabi_ui2d>
 800a648:	2301      	movs	r3, #1
 800a64a:	4606      	mov	r6, r0
 800a64c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a650:	3d01      	subs	r5, #1
 800a652:	9310      	str	r3, [sp, #64]	; 0x40
 800a654:	e771      	b.n	800a53a <_dtoa_r+0x11a>
 800a656:	2301      	movs	r3, #1
 800a658:	e7b6      	b.n	800a5c8 <_dtoa_r+0x1a8>
 800a65a:	900e      	str	r0, [sp, #56]	; 0x38
 800a65c:	e7b5      	b.n	800a5ca <_dtoa_r+0x1aa>
 800a65e:	f1ca 0300 	rsb	r3, sl, #0
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	2300      	movs	r3, #0
 800a666:	eba8 080a 	sub.w	r8, r8, sl
 800a66a:	930d      	str	r3, [sp, #52]	; 0x34
 800a66c:	e7c2      	b.n	800a5f4 <_dtoa_r+0x1d4>
 800a66e:	2300      	movs	r3, #0
 800a670:	9308      	str	r3, [sp, #32]
 800a672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	dc39      	bgt.n	800a6ec <_dtoa_r+0x2cc>
 800a678:	f04f 0901 	mov.w	r9, #1
 800a67c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a680:	464b      	mov	r3, r9
 800a682:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a686:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a688:	2200      	movs	r2, #0
 800a68a:	6042      	str	r2, [r0, #4]
 800a68c:	2204      	movs	r2, #4
 800a68e:	f102 0614 	add.w	r6, r2, #20
 800a692:	429e      	cmp	r6, r3
 800a694:	6841      	ldr	r1, [r0, #4]
 800a696:	d92f      	bls.n	800a6f8 <_dtoa_r+0x2d8>
 800a698:	4620      	mov	r0, r4
 800a69a:	f001 fa85 	bl	800bba8 <_Balloc>
 800a69e:	9000      	str	r0, [sp, #0]
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d14b      	bne.n	800a73c <_dtoa_r+0x31c>
 800a6a4:	4b24      	ldr	r3, [pc, #144]	; (800a738 <_dtoa_r+0x318>)
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6ac:	e6d1      	b.n	800a452 <_dtoa_r+0x32>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e7de      	b.n	800a670 <_dtoa_r+0x250>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9308      	str	r3, [sp, #32]
 800a6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b8:	eb0a 0903 	add.w	r9, sl, r3
 800a6bc:	f109 0301 	add.w	r3, r9, #1
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	bfb8      	it	lt
 800a6c6:	2301      	movlt	r3, #1
 800a6c8:	e7dd      	b.n	800a686 <_dtoa_r+0x266>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e7f2      	b.n	800a6b4 <_dtoa_r+0x294>
 800a6ce:	2501      	movs	r5, #1
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9305      	str	r3, [sp, #20]
 800a6d4:	9508      	str	r5, [sp, #32]
 800a6d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6e0:	2312      	movs	r3, #18
 800a6e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e4:	e7cf      	b.n	800a686 <_dtoa_r+0x266>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	9308      	str	r3, [sp, #32]
 800a6ea:	e7f4      	b.n	800a6d6 <_dtoa_r+0x2b6>
 800a6ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a6f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	e7c6      	b.n	800a686 <_dtoa_r+0x266>
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	6041      	str	r1, [r0, #4]
 800a6fc:	0052      	lsls	r2, r2, #1
 800a6fe:	e7c6      	b.n	800a68e <_dtoa_r+0x26e>
 800a700:	636f4361 	.word	0x636f4361
 800a704:	3fd287a7 	.word	0x3fd287a7
 800a708:	8b60c8b3 	.word	0x8b60c8b3
 800a70c:	3fc68a28 	.word	0x3fc68a28
 800a710:	509f79fb 	.word	0x509f79fb
 800a714:	3fd34413 	.word	0x3fd34413
 800a718:	0800d87d 	.word	0x0800d87d
 800a71c:	0800d894 	.word	0x0800d894
 800a720:	7ff00000 	.word	0x7ff00000
 800a724:	0800d879 	.word	0x0800d879
 800a728:	0800d870 	.word	0x0800d870
 800a72c:	0800d7f6 	.word	0x0800d7f6
 800a730:	3ff80000 	.word	0x3ff80000
 800a734:	0800da70 	.word	0x0800da70
 800a738:	0800d8f3 	.word	0x0800d8f3
 800a73c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a73e:	9a00      	ldr	r2, [sp, #0]
 800a740:	601a      	str	r2, [r3, #0]
 800a742:	9b01      	ldr	r3, [sp, #4]
 800a744:	2b0e      	cmp	r3, #14
 800a746:	f200 80ad 	bhi.w	800a8a4 <_dtoa_r+0x484>
 800a74a:	2d00      	cmp	r5, #0
 800a74c:	f000 80aa 	beq.w	800a8a4 <_dtoa_r+0x484>
 800a750:	f1ba 0f00 	cmp.w	sl, #0
 800a754:	dd36      	ble.n	800a7c4 <_dtoa_r+0x3a4>
 800a756:	4ac3      	ldr	r2, [pc, #780]	; (800aa64 <_dtoa_r+0x644>)
 800a758:	f00a 030f 	and.w	r3, sl, #15
 800a75c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a760:	ed93 7b00 	vldr	d7, [r3]
 800a764:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a768:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a76c:	eeb0 8a47 	vmov.f32	s16, s14
 800a770:	eef0 8a67 	vmov.f32	s17, s15
 800a774:	d016      	beq.n	800a7a4 <_dtoa_r+0x384>
 800a776:	4bbc      	ldr	r3, [pc, #752]	; (800aa68 <_dtoa_r+0x648>)
 800a778:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a77c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a780:	f7f6 f88c 	bl	800089c <__aeabi_ddiv>
 800a784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a788:	f007 070f 	and.w	r7, r7, #15
 800a78c:	2503      	movs	r5, #3
 800a78e:	4eb6      	ldr	r6, [pc, #728]	; (800aa68 <_dtoa_r+0x648>)
 800a790:	b957      	cbnz	r7, 800a7a8 <_dtoa_r+0x388>
 800a792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a796:	ec53 2b18 	vmov	r2, r3, d8
 800a79a:	f7f6 f87f 	bl	800089c <__aeabi_ddiv>
 800a79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a2:	e029      	b.n	800a7f8 <_dtoa_r+0x3d8>
 800a7a4:	2502      	movs	r5, #2
 800a7a6:	e7f2      	b.n	800a78e <_dtoa_r+0x36e>
 800a7a8:	07f9      	lsls	r1, r7, #31
 800a7aa:	d508      	bpl.n	800a7be <_dtoa_r+0x39e>
 800a7ac:	ec51 0b18 	vmov	r0, r1, d8
 800a7b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7b4:	f7f5 ff48 	bl	8000648 <__aeabi_dmul>
 800a7b8:	ec41 0b18 	vmov	d8, r0, r1
 800a7bc:	3501      	adds	r5, #1
 800a7be:	107f      	asrs	r7, r7, #1
 800a7c0:	3608      	adds	r6, #8
 800a7c2:	e7e5      	b.n	800a790 <_dtoa_r+0x370>
 800a7c4:	f000 80a6 	beq.w	800a914 <_dtoa_r+0x4f4>
 800a7c8:	f1ca 0600 	rsb	r6, sl, #0
 800a7cc:	4ba5      	ldr	r3, [pc, #660]	; (800aa64 <_dtoa_r+0x644>)
 800a7ce:	4fa6      	ldr	r7, [pc, #664]	; (800aa68 <_dtoa_r+0x648>)
 800a7d0:	f006 020f 	and.w	r2, r6, #15
 800a7d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7e0:	f7f5 ff32 	bl	8000648 <__aeabi_dmul>
 800a7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7e8:	1136      	asrs	r6, r6, #4
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	2502      	movs	r5, #2
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	f040 8085 	bne.w	800a8fe <_dtoa_r+0x4de>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1d2      	bne.n	800a79e <_dtoa_r+0x37e>
 800a7f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 808c 	beq.w	800a918 <_dtoa_r+0x4f8>
 800a800:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a804:	4b99      	ldr	r3, [pc, #612]	; (800aa6c <_dtoa_r+0x64c>)
 800a806:	2200      	movs	r2, #0
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f6 f98e 	bl	8000b2c <__aeabi_dcmplt>
 800a810:	2800      	cmp	r0, #0
 800a812:	f000 8081 	beq.w	800a918 <_dtoa_r+0x4f8>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d07d      	beq.n	800a918 <_dtoa_r+0x4f8>
 800a81c:	f1b9 0f00 	cmp.w	r9, #0
 800a820:	dd3c      	ble.n	800a89c <_dtoa_r+0x47c>
 800a822:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a826:	9307      	str	r3, [sp, #28]
 800a828:	2200      	movs	r2, #0
 800a82a:	4b91      	ldr	r3, [pc, #580]	; (800aa70 <_dtoa_r+0x650>)
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 ff0a 	bl	8000648 <__aeabi_dmul>
 800a834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a838:	3501      	adds	r5, #1
 800a83a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a83e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a842:	4628      	mov	r0, r5
 800a844:	f7f5 fe96 	bl	8000574 <__aeabi_i2d>
 800a848:	4632      	mov	r2, r6
 800a84a:	463b      	mov	r3, r7
 800a84c:	f7f5 fefc 	bl	8000648 <__aeabi_dmul>
 800a850:	4b88      	ldr	r3, [pc, #544]	; (800aa74 <_dtoa_r+0x654>)
 800a852:	2200      	movs	r2, #0
 800a854:	f7f5 fd42 	bl	80002dc <__adddf3>
 800a858:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a85c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a864:	2b00      	cmp	r3, #0
 800a866:	d15c      	bne.n	800a922 <_dtoa_r+0x502>
 800a868:	4b83      	ldr	r3, [pc, #524]	; (800aa78 <_dtoa_r+0x658>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f5 fd32 	bl	80002d8 <__aeabi_dsub>
 800a874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	f7f6 f974 	bl	8000b68 <__aeabi_dcmpgt>
 800a880:	2800      	cmp	r0, #0
 800a882:	f040 8296 	bne.w	800adb2 <_dtoa_r+0x992>
 800a886:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a88a:	4630      	mov	r0, r6
 800a88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a890:	4639      	mov	r1, r7
 800a892:	f7f6 f94b 	bl	8000b2c <__aeabi_dcmplt>
 800a896:	2800      	cmp	r0, #0
 800a898:	f040 8288 	bne.w	800adac <_dtoa_r+0x98c>
 800a89c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a8a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f2c0 8158 	blt.w	800ab5c <_dtoa_r+0x73c>
 800a8ac:	f1ba 0f0e 	cmp.w	sl, #14
 800a8b0:	f300 8154 	bgt.w	800ab5c <_dtoa_r+0x73c>
 800a8b4:	4b6b      	ldr	r3, [pc, #428]	; (800aa64 <_dtoa_r+0x644>)
 800a8b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f280 80e3 	bge.w	800aa8c <_dtoa_r+0x66c>
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f300 80df 	bgt.w	800aa8c <_dtoa_r+0x66c>
 800a8ce:	f040 826d 	bne.w	800adac <_dtoa_r+0x98c>
 800a8d2:	4b69      	ldr	r3, [pc, #420]	; (800aa78 <_dtoa_r+0x658>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	4649      	mov	r1, r9
 800a8da:	f7f5 feb5 	bl	8000648 <__aeabi_dmul>
 800a8de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8e2:	f7f6 f937 	bl	8000b54 <__aeabi_dcmpge>
 800a8e6:	9e01      	ldr	r6, [sp, #4]
 800a8e8:	4637      	mov	r7, r6
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f040 8243 	bne.w	800ad76 <_dtoa_r+0x956>
 800a8f0:	9d00      	ldr	r5, [sp, #0]
 800a8f2:	2331      	movs	r3, #49	; 0x31
 800a8f4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8f8:	f10a 0a01 	add.w	sl, sl, #1
 800a8fc:	e23f      	b.n	800ad7e <_dtoa_r+0x95e>
 800a8fe:	07f2      	lsls	r2, r6, #31
 800a900:	d505      	bpl.n	800a90e <_dtoa_r+0x4ee>
 800a902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a906:	f7f5 fe9f 	bl	8000648 <__aeabi_dmul>
 800a90a:	3501      	adds	r5, #1
 800a90c:	2301      	movs	r3, #1
 800a90e:	1076      	asrs	r6, r6, #1
 800a910:	3708      	adds	r7, #8
 800a912:	e76c      	b.n	800a7ee <_dtoa_r+0x3ce>
 800a914:	2502      	movs	r5, #2
 800a916:	e76f      	b.n	800a7f8 <_dtoa_r+0x3d8>
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a91e:	930c      	str	r3, [sp, #48]	; 0x30
 800a920:	e78d      	b.n	800a83e <_dtoa_r+0x41e>
 800a922:	9900      	ldr	r1, [sp, #0]
 800a924:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a928:	4b4e      	ldr	r3, [pc, #312]	; (800aa64 <_dtoa_r+0x644>)
 800a92a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a92e:	4401      	add	r1, r0
 800a930:	9102      	str	r1, [sp, #8]
 800a932:	9908      	ldr	r1, [sp, #32]
 800a934:	eeb0 8a47 	vmov.f32	s16, s14
 800a938:	eef0 8a67 	vmov.f32	s17, s15
 800a93c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a940:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a944:	2900      	cmp	r1, #0
 800a946:	d045      	beq.n	800a9d4 <_dtoa_r+0x5b4>
 800a948:	494c      	ldr	r1, [pc, #304]	; (800aa7c <_dtoa_r+0x65c>)
 800a94a:	2000      	movs	r0, #0
 800a94c:	f7f5 ffa6 	bl	800089c <__aeabi_ddiv>
 800a950:	ec53 2b18 	vmov	r2, r3, d8
 800a954:	f7f5 fcc0 	bl	80002d8 <__aeabi_dsub>
 800a958:	9d00      	ldr	r5, [sp, #0]
 800a95a:	ec41 0b18 	vmov	d8, r0, r1
 800a95e:	4639      	mov	r1, r7
 800a960:	4630      	mov	r0, r6
 800a962:	f7f6 f921 	bl	8000ba8 <__aeabi_d2iz>
 800a966:	900c      	str	r0, [sp, #48]	; 0x30
 800a968:	f7f5 fe04 	bl	8000574 <__aeabi_i2d>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f5 fcb0 	bl	80002d8 <__aeabi_dsub>
 800a978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a97a:	3330      	adds	r3, #48	; 0x30
 800a97c:	f805 3b01 	strb.w	r3, [r5], #1
 800a980:	ec53 2b18 	vmov	r2, r3, d8
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	f7f6 f8d0 	bl	8000b2c <__aeabi_dcmplt>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d165      	bne.n	800aa5c <_dtoa_r+0x63c>
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	4935      	ldr	r1, [pc, #212]	; (800aa6c <_dtoa_r+0x64c>)
 800a996:	2000      	movs	r0, #0
 800a998:	f7f5 fc9e 	bl	80002d8 <__aeabi_dsub>
 800a99c:	ec53 2b18 	vmov	r2, r3, d8
 800a9a0:	f7f6 f8c4 	bl	8000b2c <__aeabi_dcmplt>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	f040 80b9 	bne.w	800ab1c <_dtoa_r+0x6fc>
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	429d      	cmp	r5, r3
 800a9ae:	f43f af75 	beq.w	800a89c <_dtoa_r+0x47c>
 800a9b2:	4b2f      	ldr	r3, [pc, #188]	; (800aa70 <_dtoa_r+0x650>)
 800a9b4:	ec51 0b18 	vmov	r0, r1, d8
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f7f5 fe45 	bl	8000648 <__aeabi_dmul>
 800a9be:	4b2c      	ldr	r3, [pc, #176]	; (800aa70 <_dtoa_r+0x650>)
 800a9c0:	ec41 0b18 	vmov	d8, r0, r1
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 fe3d 	bl	8000648 <__aeabi_dmul>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	460f      	mov	r7, r1
 800a9d2:	e7c4      	b.n	800a95e <_dtoa_r+0x53e>
 800a9d4:	ec51 0b17 	vmov	r0, r1, d7
 800a9d8:	f7f5 fe36 	bl	8000648 <__aeabi_dmul>
 800a9dc:	9b02      	ldr	r3, [sp, #8]
 800a9de:	9d00      	ldr	r5, [sp, #0]
 800a9e0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e2:	ec41 0b18 	vmov	d8, r0, r1
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7f6 f8dd 	bl	8000ba8 <__aeabi_d2iz>
 800a9ee:	9011      	str	r0, [sp, #68]	; 0x44
 800a9f0:	f7f5 fdc0 	bl	8000574 <__aeabi_i2d>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f5 fc6c 	bl	80002d8 <__aeabi_dsub>
 800aa00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa02:	3330      	adds	r3, #48	; 0x30
 800aa04:	f805 3b01 	strb.w	r3, [r5], #1
 800aa08:	9b02      	ldr	r3, [sp, #8]
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	d134      	bne.n	800aa80 <_dtoa_r+0x660>
 800aa16:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <_dtoa_r+0x65c>)
 800aa18:	ec51 0b18 	vmov	r0, r1, d8
 800aa1c:	f7f5 fc5e 	bl	80002dc <__adddf3>
 800aa20:	4602      	mov	r2, r0
 800aa22:	460b      	mov	r3, r1
 800aa24:	4630      	mov	r0, r6
 800aa26:	4639      	mov	r1, r7
 800aa28:	f7f6 f89e 	bl	8000b68 <__aeabi_dcmpgt>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d175      	bne.n	800ab1c <_dtoa_r+0x6fc>
 800aa30:	ec53 2b18 	vmov	r2, r3, d8
 800aa34:	4911      	ldr	r1, [pc, #68]	; (800aa7c <_dtoa_r+0x65c>)
 800aa36:	2000      	movs	r0, #0
 800aa38:	f7f5 fc4e 	bl	80002d8 <__aeabi_dsub>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4630      	mov	r0, r6
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f6 f872 	bl	8000b2c <__aeabi_dcmplt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f43f af27 	beq.w	800a89c <_dtoa_r+0x47c>
 800aa4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa50:	1e6b      	subs	r3, r5, #1
 800aa52:	930c      	str	r3, [sp, #48]	; 0x30
 800aa54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa58:	2b30      	cmp	r3, #48	; 0x30
 800aa5a:	d0f8      	beq.n	800aa4e <_dtoa_r+0x62e>
 800aa5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa60:	e04a      	b.n	800aaf8 <_dtoa_r+0x6d8>
 800aa62:	bf00      	nop
 800aa64:	0800da70 	.word	0x0800da70
 800aa68:	0800da48 	.word	0x0800da48
 800aa6c:	3ff00000 	.word	0x3ff00000
 800aa70:	40240000 	.word	0x40240000
 800aa74:	401c0000 	.word	0x401c0000
 800aa78:	40140000 	.word	0x40140000
 800aa7c:	3fe00000 	.word	0x3fe00000
 800aa80:	4baf      	ldr	r3, [pc, #700]	; (800ad40 <_dtoa_r+0x920>)
 800aa82:	f7f5 fde1 	bl	8000648 <__aeabi_dmul>
 800aa86:	4606      	mov	r6, r0
 800aa88:	460f      	mov	r7, r1
 800aa8a:	e7ac      	b.n	800a9e6 <_dtoa_r+0x5c6>
 800aa8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa90:	9d00      	ldr	r5, [sp, #0]
 800aa92:	4642      	mov	r2, r8
 800aa94:	464b      	mov	r3, r9
 800aa96:	4630      	mov	r0, r6
 800aa98:	4639      	mov	r1, r7
 800aa9a:	f7f5 feff 	bl	800089c <__aeabi_ddiv>
 800aa9e:	f7f6 f883 	bl	8000ba8 <__aeabi_d2iz>
 800aaa2:	9002      	str	r0, [sp, #8]
 800aaa4:	f7f5 fd66 	bl	8000574 <__aeabi_i2d>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	f7f5 fdcc 	bl	8000648 <__aeabi_dmul>
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	4630      	mov	r0, r6
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f5 fc0e 	bl	80002d8 <__aeabi_dsub>
 800aabc:	9e02      	ldr	r6, [sp, #8]
 800aabe:	9f01      	ldr	r7, [sp, #4]
 800aac0:	3630      	adds	r6, #48	; 0x30
 800aac2:	f805 6b01 	strb.w	r6, [r5], #1
 800aac6:	9e00      	ldr	r6, [sp, #0]
 800aac8:	1bae      	subs	r6, r5, r6
 800aaca:	42b7      	cmp	r7, r6
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	d137      	bne.n	800ab42 <_dtoa_r+0x722>
 800aad2:	f7f5 fc03 	bl	80002dc <__adddf3>
 800aad6:	4642      	mov	r2, r8
 800aad8:	464b      	mov	r3, r9
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	f7f6 f843 	bl	8000b68 <__aeabi_dcmpgt>
 800aae2:	b9c8      	cbnz	r0, 800ab18 <_dtoa_r+0x6f8>
 800aae4:	4642      	mov	r2, r8
 800aae6:	464b      	mov	r3, r9
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	f7f6 f814 	bl	8000b18 <__aeabi_dcmpeq>
 800aaf0:	b110      	cbz	r0, 800aaf8 <_dtoa_r+0x6d8>
 800aaf2:	9b02      	ldr	r3, [sp, #8]
 800aaf4:	07d9      	lsls	r1, r3, #31
 800aaf6:	d40f      	bmi.n	800ab18 <_dtoa_r+0x6f8>
 800aaf8:	4620      	mov	r0, r4
 800aafa:	4659      	mov	r1, fp
 800aafc:	f001 f894 	bl	800bc28 <_Bfree>
 800ab00:	2300      	movs	r3, #0
 800ab02:	702b      	strb	r3, [r5, #0]
 800ab04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab06:	f10a 0001 	add.w	r0, sl, #1
 800ab0a:	6018      	str	r0, [r3, #0]
 800ab0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f43f acd8 	beq.w	800a4c4 <_dtoa_r+0xa4>
 800ab14:	601d      	str	r5, [r3, #0]
 800ab16:	e4d5      	b.n	800a4c4 <_dtoa_r+0xa4>
 800ab18:	f8cd a01c 	str.w	sl, [sp, #28]
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	461d      	mov	r5, r3
 800ab20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab24:	2a39      	cmp	r2, #57	; 0x39
 800ab26:	d108      	bne.n	800ab3a <_dtoa_r+0x71a>
 800ab28:	9a00      	ldr	r2, [sp, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d1f7      	bne.n	800ab1e <_dtoa_r+0x6fe>
 800ab2e:	9a07      	ldr	r2, [sp, #28]
 800ab30:	9900      	ldr	r1, [sp, #0]
 800ab32:	3201      	adds	r2, #1
 800ab34:	9207      	str	r2, [sp, #28]
 800ab36:	2230      	movs	r2, #48	; 0x30
 800ab38:	700a      	strb	r2, [r1, #0]
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e78c      	b.n	800aa5c <_dtoa_r+0x63c>
 800ab42:	4b7f      	ldr	r3, [pc, #508]	; (800ad40 <_dtoa_r+0x920>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	f7f5 fd7f 	bl	8000648 <__aeabi_dmul>
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4606      	mov	r6, r0
 800ab50:	460f      	mov	r7, r1
 800ab52:	f7f5 ffe1 	bl	8000b18 <__aeabi_dcmpeq>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d09b      	beq.n	800aa92 <_dtoa_r+0x672>
 800ab5a:	e7cd      	b.n	800aaf8 <_dtoa_r+0x6d8>
 800ab5c:	9a08      	ldr	r2, [sp, #32]
 800ab5e:	2a00      	cmp	r2, #0
 800ab60:	f000 80c4 	beq.w	800acec <_dtoa_r+0x8cc>
 800ab64:	9a05      	ldr	r2, [sp, #20]
 800ab66:	2a01      	cmp	r2, #1
 800ab68:	f300 80a8 	bgt.w	800acbc <_dtoa_r+0x89c>
 800ab6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab6e:	2a00      	cmp	r2, #0
 800ab70:	f000 80a0 	beq.w	800acb4 <_dtoa_r+0x894>
 800ab74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab78:	9e06      	ldr	r6, [sp, #24]
 800ab7a:	4645      	mov	r5, r8
 800ab7c:	9a04      	ldr	r2, [sp, #16]
 800ab7e:	2101      	movs	r1, #1
 800ab80:	441a      	add	r2, r3
 800ab82:	4620      	mov	r0, r4
 800ab84:	4498      	add	r8, r3
 800ab86:	9204      	str	r2, [sp, #16]
 800ab88:	f001 f954 	bl	800be34 <__i2b>
 800ab8c:	4607      	mov	r7, r0
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	dd0b      	ble.n	800abaa <_dtoa_r+0x78a>
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dd08      	ble.n	800abaa <_dtoa_r+0x78a>
 800ab98:	42ab      	cmp	r3, r5
 800ab9a:	9a04      	ldr	r2, [sp, #16]
 800ab9c:	bfa8      	it	ge
 800ab9e:	462b      	movge	r3, r5
 800aba0:	eba8 0803 	sub.w	r8, r8, r3
 800aba4:	1aed      	subs	r5, r5, r3
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	9304      	str	r3, [sp, #16]
 800abaa:	9b06      	ldr	r3, [sp, #24]
 800abac:	b1fb      	cbz	r3, 800abee <_dtoa_r+0x7ce>
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 809f 	beq.w	800acf4 <_dtoa_r+0x8d4>
 800abb6:	2e00      	cmp	r6, #0
 800abb8:	dd11      	ble.n	800abde <_dtoa_r+0x7be>
 800abba:	4639      	mov	r1, r7
 800abbc:	4632      	mov	r2, r6
 800abbe:	4620      	mov	r0, r4
 800abc0:	f001 f9f4 	bl	800bfac <__pow5mult>
 800abc4:	465a      	mov	r2, fp
 800abc6:	4601      	mov	r1, r0
 800abc8:	4607      	mov	r7, r0
 800abca:	4620      	mov	r0, r4
 800abcc:	f001 f948 	bl	800be60 <__multiply>
 800abd0:	4659      	mov	r1, fp
 800abd2:	9007      	str	r0, [sp, #28]
 800abd4:	4620      	mov	r0, r4
 800abd6:	f001 f827 	bl	800bc28 <_Bfree>
 800abda:	9b07      	ldr	r3, [sp, #28]
 800abdc:	469b      	mov	fp, r3
 800abde:	9b06      	ldr	r3, [sp, #24]
 800abe0:	1b9a      	subs	r2, r3, r6
 800abe2:	d004      	beq.n	800abee <_dtoa_r+0x7ce>
 800abe4:	4659      	mov	r1, fp
 800abe6:	4620      	mov	r0, r4
 800abe8:	f001 f9e0 	bl	800bfac <__pow5mult>
 800abec:	4683      	mov	fp, r0
 800abee:	2101      	movs	r1, #1
 800abf0:	4620      	mov	r0, r4
 800abf2:	f001 f91f 	bl	800be34 <__i2b>
 800abf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	4606      	mov	r6, r0
 800abfc:	dd7c      	ble.n	800acf8 <_dtoa_r+0x8d8>
 800abfe:	461a      	mov	r2, r3
 800ac00:	4601      	mov	r1, r0
 800ac02:	4620      	mov	r0, r4
 800ac04:	f001 f9d2 	bl	800bfac <__pow5mult>
 800ac08:	9b05      	ldr	r3, [sp, #20]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	dd76      	ble.n	800acfe <_dtoa_r+0x8de>
 800ac10:	2300      	movs	r3, #0
 800ac12:	9306      	str	r3, [sp, #24]
 800ac14:	6933      	ldr	r3, [r6, #16]
 800ac16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ac1a:	6918      	ldr	r0, [r3, #16]
 800ac1c:	f001 f8ba 	bl	800bd94 <__hi0bits>
 800ac20:	f1c0 0020 	rsb	r0, r0, #32
 800ac24:	9b04      	ldr	r3, [sp, #16]
 800ac26:	4418      	add	r0, r3
 800ac28:	f010 001f 	ands.w	r0, r0, #31
 800ac2c:	f000 8086 	beq.w	800ad3c <_dtoa_r+0x91c>
 800ac30:	f1c0 0320 	rsb	r3, r0, #32
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	dd7f      	ble.n	800ad38 <_dtoa_r+0x918>
 800ac38:	f1c0 001c 	rsb	r0, r0, #28
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	4403      	add	r3, r0
 800ac40:	4480      	add	r8, r0
 800ac42:	4405      	add	r5, r0
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	dd05      	ble.n	800ac58 <_dtoa_r+0x838>
 800ac4c:	4659      	mov	r1, fp
 800ac4e:	4642      	mov	r2, r8
 800ac50:	4620      	mov	r0, r4
 800ac52:	f001 fa05 	bl	800c060 <__lshift>
 800ac56:	4683      	mov	fp, r0
 800ac58:	9b04      	ldr	r3, [sp, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	dd05      	ble.n	800ac6a <_dtoa_r+0x84a>
 800ac5e:	4631      	mov	r1, r6
 800ac60:	461a      	mov	r2, r3
 800ac62:	4620      	mov	r0, r4
 800ac64:	f001 f9fc 	bl	800c060 <__lshift>
 800ac68:	4606      	mov	r6, r0
 800ac6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d069      	beq.n	800ad44 <_dtoa_r+0x924>
 800ac70:	4631      	mov	r1, r6
 800ac72:	4658      	mov	r0, fp
 800ac74:	f001 fa60 	bl	800c138 <__mcmp>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	da63      	bge.n	800ad44 <_dtoa_r+0x924>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4659      	mov	r1, fp
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fff2 	bl	800bc6c <__multadd>
 800ac88:	9b08      	ldr	r3, [sp, #32]
 800ac8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ac8e:	4683      	mov	fp, r0
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 818f 	beq.w	800afb4 <_dtoa_r+0xb94>
 800ac96:	4639      	mov	r1, r7
 800ac98:	2300      	movs	r3, #0
 800ac9a:	220a      	movs	r2, #10
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 ffe5 	bl	800bc6c <__multadd>
 800aca2:	f1b9 0f00 	cmp.w	r9, #0
 800aca6:	4607      	mov	r7, r0
 800aca8:	f300 808e 	bgt.w	800adc8 <_dtoa_r+0x9a8>
 800acac:	9b05      	ldr	r3, [sp, #20]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	dc50      	bgt.n	800ad54 <_dtoa_r+0x934>
 800acb2:	e089      	b.n	800adc8 <_dtoa_r+0x9a8>
 800acb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800acba:	e75d      	b.n	800ab78 <_dtoa_r+0x758>
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	1e5e      	subs	r6, r3, #1
 800acc0:	9b06      	ldr	r3, [sp, #24]
 800acc2:	42b3      	cmp	r3, r6
 800acc4:	bfbf      	itttt	lt
 800acc6:	9b06      	ldrlt	r3, [sp, #24]
 800acc8:	9606      	strlt	r6, [sp, #24]
 800acca:	1af2      	sublt	r2, r6, r3
 800accc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800acce:	bfb6      	itet	lt
 800acd0:	189b      	addlt	r3, r3, r2
 800acd2:	1b9e      	subge	r6, r3, r6
 800acd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800acd6:	9b01      	ldr	r3, [sp, #4]
 800acd8:	bfb8      	it	lt
 800acda:	2600      	movlt	r6, #0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	bfb5      	itete	lt
 800ace0:	eba8 0503 	sublt.w	r5, r8, r3
 800ace4:	9b01      	ldrge	r3, [sp, #4]
 800ace6:	2300      	movlt	r3, #0
 800ace8:	4645      	movge	r5, r8
 800acea:	e747      	b.n	800ab7c <_dtoa_r+0x75c>
 800acec:	9e06      	ldr	r6, [sp, #24]
 800acee:	9f08      	ldr	r7, [sp, #32]
 800acf0:	4645      	mov	r5, r8
 800acf2:	e74c      	b.n	800ab8e <_dtoa_r+0x76e>
 800acf4:	9a06      	ldr	r2, [sp, #24]
 800acf6:	e775      	b.n	800abe4 <_dtoa_r+0x7c4>
 800acf8:	9b05      	ldr	r3, [sp, #20]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	dc18      	bgt.n	800ad30 <_dtoa_r+0x910>
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	b9b3      	cbnz	r3, 800ad30 <_dtoa_r+0x910>
 800ad02:	9b03      	ldr	r3, [sp, #12]
 800ad04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad08:	b9a3      	cbnz	r3, 800ad34 <_dtoa_r+0x914>
 800ad0a:	9b03      	ldr	r3, [sp, #12]
 800ad0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad10:	0d1b      	lsrs	r3, r3, #20
 800ad12:	051b      	lsls	r3, r3, #20
 800ad14:	b12b      	cbz	r3, 800ad22 <_dtoa_r+0x902>
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	9304      	str	r3, [sp, #16]
 800ad1c:	f108 0801 	add.w	r8, r8, #1
 800ad20:	2301      	movs	r3, #1
 800ad22:	9306      	str	r3, [sp, #24]
 800ad24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f47f af74 	bne.w	800ac14 <_dtoa_r+0x7f4>
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	e779      	b.n	800ac24 <_dtoa_r+0x804>
 800ad30:	2300      	movs	r3, #0
 800ad32:	e7f6      	b.n	800ad22 <_dtoa_r+0x902>
 800ad34:	9b02      	ldr	r3, [sp, #8]
 800ad36:	e7f4      	b.n	800ad22 <_dtoa_r+0x902>
 800ad38:	d085      	beq.n	800ac46 <_dtoa_r+0x826>
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	301c      	adds	r0, #28
 800ad3e:	e77d      	b.n	800ac3c <_dtoa_r+0x81c>
 800ad40:	40240000 	.word	0x40240000
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dc38      	bgt.n	800adbc <_dtoa_r+0x99c>
 800ad4a:	9b05      	ldr	r3, [sp, #20]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	dd35      	ble.n	800adbc <_dtoa_r+0x99c>
 800ad50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad54:	f1b9 0f00 	cmp.w	r9, #0
 800ad58:	d10d      	bne.n	800ad76 <_dtoa_r+0x956>
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	2205      	movs	r2, #5
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 ff83 	bl	800bc6c <__multadd>
 800ad66:	4601      	mov	r1, r0
 800ad68:	4606      	mov	r6, r0
 800ad6a:	4658      	mov	r0, fp
 800ad6c:	f001 f9e4 	bl	800c138 <__mcmp>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f73f adbd 	bgt.w	800a8f0 <_dtoa_r+0x4d0>
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	9d00      	ldr	r5, [sp, #0]
 800ad7a:	ea6f 0a03 	mvn.w	sl, r3
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	4631      	mov	r1, r6
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 ff4f 	bl	800bc28 <_Bfree>
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	f43f aeb4 	beq.w	800aaf8 <_dtoa_r+0x6d8>
 800ad90:	f1b8 0f00 	cmp.w	r8, #0
 800ad94:	d005      	beq.n	800ada2 <_dtoa_r+0x982>
 800ad96:	45b8      	cmp	r8, r7
 800ad98:	d003      	beq.n	800ada2 <_dtoa_r+0x982>
 800ad9a:	4641      	mov	r1, r8
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f000 ff43 	bl	800bc28 <_Bfree>
 800ada2:	4639      	mov	r1, r7
 800ada4:	4620      	mov	r0, r4
 800ada6:	f000 ff3f 	bl	800bc28 <_Bfree>
 800adaa:	e6a5      	b.n	800aaf8 <_dtoa_r+0x6d8>
 800adac:	2600      	movs	r6, #0
 800adae:	4637      	mov	r7, r6
 800adb0:	e7e1      	b.n	800ad76 <_dtoa_r+0x956>
 800adb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800adb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800adb8:	4637      	mov	r7, r6
 800adba:	e599      	b.n	800a8f0 <_dtoa_r+0x4d0>
 800adbc:	9b08      	ldr	r3, [sp, #32]
 800adbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f000 80fd 	beq.w	800afc2 <_dtoa_r+0xba2>
 800adc8:	2d00      	cmp	r5, #0
 800adca:	dd05      	ble.n	800add8 <_dtoa_r+0x9b8>
 800adcc:	4639      	mov	r1, r7
 800adce:	462a      	mov	r2, r5
 800add0:	4620      	mov	r0, r4
 800add2:	f001 f945 	bl	800c060 <__lshift>
 800add6:	4607      	mov	r7, r0
 800add8:	9b06      	ldr	r3, [sp, #24]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d05c      	beq.n	800ae98 <_dtoa_r+0xa78>
 800adde:	6879      	ldr	r1, [r7, #4]
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fee1 	bl	800bba8 <_Balloc>
 800ade6:	4605      	mov	r5, r0
 800ade8:	b928      	cbnz	r0, 800adf6 <_dtoa_r+0x9d6>
 800adea:	4b80      	ldr	r3, [pc, #512]	; (800afec <_dtoa_r+0xbcc>)
 800adec:	4602      	mov	r2, r0
 800adee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adf2:	f7ff bb2e 	b.w	800a452 <_dtoa_r+0x32>
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	3202      	adds	r2, #2
 800adfa:	0092      	lsls	r2, r2, #2
 800adfc:	f107 010c 	add.w	r1, r7, #12
 800ae00:	300c      	adds	r0, #12
 800ae02:	f000 fe9d 	bl	800bb40 <memcpy>
 800ae06:	2201      	movs	r2, #1
 800ae08:	4629      	mov	r1, r5
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f001 f928 	bl	800c060 <__lshift>
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	3301      	adds	r3, #1
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	9b00      	ldr	r3, [sp, #0]
 800ae18:	444b      	add	r3, r9
 800ae1a:	9307      	str	r3, [sp, #28]
 800ae1c:	9b02      	ldr	r3, [sp, #8]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	46b8      	mov	r8, r7
 800ae24:	9306      	str	r3, [sp, #24]
 800ae26:	4607      	mov	r7, r0
 800ae28:	9b01      	ldr	r3, [sp, #4]
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	4658      	mov	r0, fp
 800ae30:	9302      	str	r3, [sp, #8]
 800ae32:	f7ff fa6a 	bl	800a30a <quorem>
 800ae36:	4603      	mov	r3, r0
 800ae38:	3330      	adds	r3, #48	; 0x30
 800ae3a:	9004      	str	r0, [sp, #16]
 800ae3c:	4641      	mov	r1, r8
 800ae3e:	4658      	mov	r0, fp
 800ae40:	9308      	str	r3, [sp, #32]
 800ae42:	f001 f979 	bl	800c138 <__mcmp>
 800ae46:	463a      	mov	r2, r7
 800ae48:	4681      	mov	r9, r0
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f001 f98f 	bl	800c170 <__mdiff>
 800ae52:	68c2      	ldr	r2, [r0, #12]
 800ae54:	9b08      	ldr	r3, [sp, #32]
 800ae56:	4605      	mov	r5, r0
 800ae58:	bb02      	cbnz	r2, 800ae9c <_dtoa_r+0xa7c>
 800ae5a:	4601      	mov	r1, r0
 800ae5c:	4658      	mov	r0, fp
 800ae5e:	f001 f96b 	bl	800c138 <__mcmp>
 800ae62:	9b08      	ldr	r3, [sp, #32]
 800ae64:	4602      	mov	r2, r0
 800ae66:	4629      	mov	r1, r5
 800ae68:	4620      	mov	r0, r4
 800ae6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ae6e:	f000 fedb 	bl	800bc28 <_Bfree>
 800ae72:	9b05      	ldr	r3, [sp, #20]
 800ae74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae76:	9d01      	ldr	r5, [sp, #4]
 800ae78:	ea43 0102 	orr.w	r1, r3, r2
 800ae7c:	9b06      	ldr	r3, [sp, #24]
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	9b08      	ldr	r3, [sp, #32]
 800ae82:	d10d      	bne.n	800aea0 <_dtoa_r+0xa80>
 800ae84:	2b39      	cmp	r3, #57	; 0x39
 800ae86:	d029      	beq.n	800aedc <_dtoa_r+0xabc>
 800ae88:	f1b9 0f00 	cmp.w	r9, #0
 800ae8c:	dd01      	ble.n	800ae92 <_dtoa_r+0xa72>
 800ae8e:	9b04      	ldr	r3, [sp, #16]
 800ae90:	3331      	adds	r3, #49	; 0x31
 800ae92:	9a02      	ldr	r2, [sp, #8]
 800ae94:	7013      	strb	r3, [r2, #0]
 800ae96:	e774      	b.n	800ad82 <_dtoa_r+0x962>
 800ae98:	4638      	mov	r0, r7
 800ae9a:	e7b9      	b.n	800ae10 <_dtoa_r+0x9f0>
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	e7e2      	b.n	800ae66 <_dtoa_r+0xa46>
 800aea0:	f1b9 0f00 	cmp.w	r9, #0
 800aea4:	db06      	blt.n	800aeb4 <_dtoa_r+0xa94>
 800aea6:	9905      	ldr	r1, [sp, #20]
 800aea8:	ea41 0909 	orr.w	r9, r1, r9
 800aeac:	9906      	ldr	r1, [sp, #24]
 800aeae:	ea59 0101 	orrs.w	r1, r9, r1
 800aeb2:	d120      	bne.n	800aef6 <_dtoa_r+0xad6>
 800aeb4:	2a00      	cmp	r2, #0
 800aeb6:	ddec      	ble.n	800ae92 <_dtoa_r+0xa72>
 800aeb8:	4659      	mov	r1, fp
 800aeba:	2201      	movs	r2, #1
 800aebc:	4620      	mov	r0, r4
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	f001 f8ce 	bl	800c060 <__lshift>
 800aec4:	4631      	mov	r1, r6
 800aec6:	4683      	mov	fp, r0
 800aec8:	f001 f936 	bl	800c138 <__mcmp>
 800aecc:	2800      	cmp	r0, #0
 800aece:	9b01      	ldr	r3, [sp, #4]
 800aed0:	dc02      	bgt.n	800aed8 <_dtoa_r+0xab8>
 800aed2:	d1de      	bne.n	800ae92 <_dtoa_r+0xa72>
 800aed4:	07da      	lsls	r2, r3, #31
 800aed6:	d5dc      	bpl.n	800ae92 <_dtoa_r+0xa72>
 800aed8:	2b39      	cmp	r3, #57	; 0x39
 800aeda:	d1d8      	bne.n	800ae8e <_dtoa_r+0xa6e>
 800aedc:	9a02      	ldr	r2, [sp, #8]
 800aede:	2339      	movs	r3, #57	; 0x39
 800aee0:	7013      	strb	r3, [r2, #0]
 800aee2:	462b      	mov	r3, r5
 800aee4:	461d      	mov	r5, r3
 800aee6:	3b01      	subs	r3, #1
 800aee8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aeec:	2a39      	cmp	r2, #57	; 0x39
 800aeee:	d050      	beq.n	800af92 <_dtoa_r+0xb72>
 800aef0:	3201      	adds	r2, #1
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	e745      	b.n	800ad82 <_dtoa_r+0x962>
 800aef6:	2a00      	cmp	r2, #0
 800aef8:	dd03      	ble.n	800af02 <_dtoa_r+0xae2>
 800aefa:	2b39      	cmp	r3, #57	; 0x39
 800aefc:	d0ee      	beq.n	800aedc <_dtoa_r+0xabc>
 800aefe:	3301      	adds	r3, #1
 800af00:	e7c7      	b.n	800ae92 <_dtoa_r+0xa72>
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	9907      	ldr	r1, [sp, #28]
 800af06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af0a:	428a      	cmp	r2, r1
 800af0c:	d02a      	beq.n	800af64 <_dtoa_r+0xb44>
 800af0e:	4659      	mov	r1, fp
 800af10:	2300      	movs	r3, #0
 800af12:	220a      	movs	r2, #10
 800af14:	4620      	mov	r0, r4
 800af16:	f000 fea9 	bl	800bc6c <__multadd>
 800af1a:	45b8      	cmp	r8, r7
 800af1c:	4683      	mov	fp, r0
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	f04f 020a 	mov.w	r2, #10
 800af26:	4641      	mov	r1, r8
 800af28:	4620      	mov	r0, r4
 800af2a:	d107      	bne.n	800af3c <_dtoa_r+0xb1c>
 800af2c:	f000 fe9e 	bl	800bc6c <__multadd>
 800af30:	4680      	mov	r8, r0
 800af32:	4607      	mov	r7, r0
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	e775      	b.n	800ae28 <_dtoa_r+0xa08>
 800af3c:	f000 fe96 	bl	800bc6c <__multadd>
 800af40:	4639      	mov	r1, r7
 800af42:	4680      	mov	r8, r0
 800af44:	2300      	movs	r3, #0
 800af46:	220a      	movs	r2, #10
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fe8f 	bl	800bc6c <__multadd>
 800af4e:	4607      	mov	r7, r0
 800af50:	e7f0      	b.n	800af34 <_dtoa_r+0xb14>
 800af52:	f1b9 0f00 	cmp.w	r9, #0
 800af56:	9a00      	ldr	r2, [sp, #0]
 800af58:	bfcc      	ite	gt
 800af5a:	464d      	movgt	r5, r9
 800af5c:	2501      	movle	r5, #1
 800af5e:	4415      	add	r5, r2
 800af60:	f04f 0800 	mov.w	r8, #0
 800af64:	4659      	mov	r1, fp
 800af66:	2201      	movs	r2, #1
 800af68:	4620      	mov	r0, r4
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	f001 f878 	bl	800c060 <__lshift>
 800af70:	4631      	mov	r1, r6
 800af72:	4683      	mov	fp, r0
 800af74:	f001 f8e0 	bl	800c138 <__mcmp>
 800af78:	2800      	cmp	r0, #0
 800af7a:	dcb2      	bgt.n	800aee2 <_dtoa_r+0xac2>
 800af7c:	d102      	bne.n	800af84 <_dtoa_r+0xb64>
 800af7e:	9b01      	ldr	r3, [sp, #4]
 800af80:	07db      	lsls	r3, r3, #31
 800af82:	d4ae      	bmi.n	800aee2 <_dtoa_r+0xac2>
 800af84:	462b      	mov	r3, r5
 800af86:	461d      	mov	r5, r3
 800af88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af8c:	2a30      	cmp	r2, #48	; 0x30
 800af8e:	d0fa      	beq.n	800af86 <_dtoa_r+0xb66>
 800af90:	e6f7      	b.n	800ad82 <_dtoa_r+0x962>
 800af92:	9a00      	ldr	r2, [sp, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d1a5      	bne.n	800aee4 <_dtoa_r+0xac4>
 800af98:	f10a 0a01 	add.w	sl, sl, #1
 800af9c:	2331      	movs	r3, #49	; 0x31
 800af9e:	e779      	b.n	800ae94 <_dtoa_r+0xa74>
 800afa0:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <_dtoa_r+0xbd0>)
 800afa2:	f7ff baaf 	b.w	800a504 <_dtoa_r+0xe4>
 800afa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f47f aa86 	bne.w	800a4ba <_dtoa_r+0x9a>
 800afae:	4b11      	ldr	r3, [pc, #68]	; (800aff4 <_dtoa_r+0xbd4>)
 800afb0:	f7ff baa8 	b.w	800a504 <_dtoa_r+0xe4>
 800afb4:	f1b9 0f00 	cmp.w	r9, #0
 800afb8:	dc03      	bgt.n	800afc2 <_dtoa_r+0xba2>
 800afba:	9b05      	ldr	r3, [sp, #20]
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	f73f aec9 	bgt.w	800ad54 <_dtoa_r+0x934>
 800afc2:	9d00      	ldr	r5, [sp, #0]
 800afc4:	4631      	mov	r1, r6
 800afc6:	4658      	mov	r0, fp
 800afc8:	f7ff f99f 	bl	800a30a <quorem>
 800afcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afd0:	f805 3b01 	strb.w	r3, [r5], #1
 800afd4:	9a00      	ldr	r2, [sp, #0]
 800afd6:	1aaa      	subs	r2, r5, r2
 800afd8:	4591      	cmp	r9, r2
 800afda:	ddba      	ble.n	800af52 <_dtoa_r+0xb32>
 800afdc:	4659      	mov	r1, fp
 800afde:	2300      	movs	r3, #0
 800afe0:	220a      	movs	r2, #10
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 fe42 	bl	800bc6c <__multadd>
 800afe8:	4683      	mov	fp, r0
 800afea:	e7eb      	b.n	800afc4 <_dtoa_r+0xba4>
 800afec:	0800d8f3 	.word	0x0800d8f3
 800aff0:	0800d7f5 	.word	0x0800d7f5
 800aff4:	0800d870 	.word	0x0800d870

0800aff8 <__sflush_r>:
 800aff8:	898a      	ldrh	r2, [r1, #12]
 800affa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800affe:	4605      	mov	r5, r0
 800b000:	0710      	lsls	r0, r2, #28
 800b002:	460c      	mov	r4, r1
 800b004:	d458      	bmi.n	800b0b8 <__sflush_r+0xc0>
 800b006:	684b      	ldr	r3, [r1, #4]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dc05      	bgt.n	800b018 <__sflush_r+0x20>
 800b00c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b00e:	2b00      	cmp	r3, #0
 800b010:	dc02      	bgt.n	800b018 <__sflush_r+0x20>
 800b012:	2000      	movs	r0, #0
 800b014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	d0f9      	beq.n	800b012 <__sflush_r+0x1a>
 800b01e:	2300      	movs	r3, #0
 800b020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b024:	682f      	ldr	r7, [r5, #0]
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	d032      	beq.n	800b090 <__sflush_r+0x98>
 800b02a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	075a      	lsls	r2, r3, #29
 800b030:	d505      	bpl.n	800b03e <__sflush_r+0x46>
 800b032:	6863      	ldr	r3, [r4, #4]
 800b034:	1ac0      	subs	r0, r0, r3
 800b036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b038:	b10b      	cbz	r3, 800b03e <__sflush_r+0x46>
 800b03a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b03c:	1ac0      	subs	r0, r0, r3
 800b03e:	2300      	movs	r3, #0
 800b040:	4602      	mov	r2, r0
 800b042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b044:	6a21      	ldr	r1, [r4, #32]
 800b046:	4628      	mov	r0, r5
 800b048:	47b0      	blx	r6
 800b04a:	1c43      	adds	r3, r0, #1
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	d106      	bne.n	800b05e <__sflush_r+0x66>
 800b050:	6829      	ldr	r1, [r5, #0]
 800b052:	291d      	cmp	r1, #29
 800b054:	d82c      	bhi.n	800b0b0 <__sflush_r+0xb8>
 800b056:	4a2a      	ldr	r2, [pc, #168]	; (800b100 <__sflush_r+0x108>)
 800b058:	40ca      	lsrs	r2, r1
 800b05a:	07d6      	lsls	r6, r2, #31
 800b05c:	d528      	bpl.n	800b0b0 <__sflush_r+0xb8>
 800b05e:	2200      	movs	r2, #0
 800b060:	6062      	str	r2, [r4, #4]
 800b062:	04d9      	lsls	r1, r3, #19
 800b064:	6922      	ldr	r2, [r4, #16]
 800b066:	6022      	str	r2, [r4, #0]
 800b068:	d504      	bpl.n	800b074 <__sflush_r+0x7c>
 800b06a:	1c42      	adds	r2, r0, #1
 800b06c:	d101      	bne.n	800b072 <__sflush_r+0x7a>
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	b903      	cbnz	r3, 800b074 <__sflush_r+0x7c>
 800b072:	6560      	str	r0, [r4, #84]	; 0x54
 800b074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b076:	602f      	str	r7, [r5, #0]
 800b078:	2900      	cmp	r1, #0
 800b07a:	d0ca      	beq.n	800b012 <__sflush_r+0x1a>
 800b07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b080:	4299      	cmp	r1, r3
 800b082:	d002      	beq.n	800b08a <__sflush_r+0x92>
 800b084:	4628      	mov	r0, r5
 800b086:	f7fd faef 	bl	8008668 <_free_r>
 800b08a:	2000      	movs	r0, #0
 800b08c:	6360      	str	r0, [r4, #52]	; 0x34
 800b08e:	e7c1      	b.n	800b014 <__sflush_r+0x1c>
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	2301      	movs	r3, #1
 800b094:	4628      	mov	r0, r5
 800b096:	47b0      	blx	r6
 800b098:	1c41      	adds	r1, r0, #1
 800b09a:	d1c7      	bne.n	800b02c <__sflush_r+0x34>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0c4      	beq.n	800b02c <__sflush_r+0x34>
 800b0a2:	2b1d      	cmp	r3, #29
 800b0a4:	d001      	beq.n	800b0aa <__sflush_r+0xb2>
 800b0a6:	2b16      	cmp	r3, #22
 800b0a8:	d101      	bne.n	800b0ae <__sflush_r+0xb6>
 800b0aa:	602f      	str	r7, [r5, #0]
 800b0ac:	e7b1      	b.n	800b012 <__sflush_r+0x1a>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b4:	81a3      	strh	r3, [r4, #12]
 800b0b6:	e7ad      	b.n	800b014 <__sflush_r+0x1c>
 800b0b8:	690f      	ldr	r7, [r1, #16]
 800b0ba:	2f00      	cmp	r7, #0
 800b0bc:	d0a9      	beq.n	800b012 <__sflush_r+0x1a>
 800b0be:	0793      	lsls	r3, r2, #30
 800b0c0:	680e      	ldr	r6, [r1, #0]
 800b0c2:	bf08      	it	eq
 800b0c4:	694b      	ldreq	r3, [r1, #20]
 800b0c6:	600f      	str	r7, [r1, #0]
 800b0c8:	bf18      	it	ne
 800b0ca:	2300      	movne	r3, #0
 800b0cc:	eba6 0807 	sub.w	r8, r6, r7
 800b0d0:	608b      	str	r3, [r1, #8]
 800b0d2:	f1b8 0f00 	cmp.w	r8, #0
 800b0d6:	dd9c      	ble.n	800b012 <__sflush_r+0x1a>
 800b0d8:	6a21      	ldr	r1, [r4, #32]
 800b0da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0dc:	4643      	mov	r3, r8
 800b0de:	463a      	mov	r2, r7
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b0      	blx	r6
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	dc06      	bgt.n	800b0f6 <__sflush_r+0xfe>
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ee:	81a3      	strh	r3, [r4, #12]
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0f4:	e78e      	b.n	800b014 <__sflush_r+0x1c>
 800b0f6:	4407      	add	r7, r0
 800b0f8:	eba8 0800 	sub.w	r8, r8, r0
 800b0fc:	e7e9      	b.n	800b0d2 <__sflush_r+0xda>
 800b0fe:	bf00      	nop
 800b100:	20400001 	.word	0x20400001

0800b104 <_fflush_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	690b      	ldr	r3, [r1, #16]
 800b108:	4605      	mov	r5, r0
 800b10a:	460c      	mov	r4, r1
 800b10c:	b913      	cbnz	r3, 800b114 <_fflush_r+0x10>
 800b10e:	2500      	movs	r5, #0
 800b110:	4628      	mov	r0, r5
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	b118      	cbz	r0, 800b11e <_fflush_r+0x1a>
 800b116:	6983      	ldr	r3, [r0, #24]
 800b118:	b90b      	cbnz	r3, 800b11e <_fflush_r+0x1a>
 800b11a:	f000 f887 	bl	800b22c <__sinit>
 800b11e:	4b14      	ldr	r3, [pc, #80]	; (800b170 <_fflush_r+0x6c>)
 800b120:	429c      	cmp	r4, r3
 800b122:	d11b      	bne.n	800b15c <_fflush_r+0x58>
 800b124:	686c      	ldr	r4, [r5, #4]
 800b126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0ef      	beq.n	800b10e <_fflush_r+0xa>
 800b12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b130:	07d0      	lsls	r0, r2, #31
 800b132:	d404      	bmi.n	800b13e <_fflush_r+0x3a>
 800b134:	0599      	lsls	r1, r3, #22
 800b136:	d402      	bmi.n	800b13e <_fflush_r+0x3a>
 800b138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b13a:	f000 fc88 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800b13e:	4628      	mov	r0, r5
 800b140:	4621      	mov	r1, r4
 800b142:	f7ff ff59 	bl	800aff8 <__sflush_r>
 800b146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b148:	07da      	lsls	r2, r3, #31
 800b14a:	4605      	mov	r5, r0
 800b14c:	d4e0      	bmi.n	800b110 <_fflush_r+0xc>
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	059b      	lsls	r3, r3, #22
 800b152:	d4dd      	bmi.n	800b110 <_fflush_r+0xc>
 800b154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b156:	f000 fc7b 	bl	800ba50 <__retarget_lock_release_recursive>
 800b15a:	e7d9      	b.n	800b110 <_fflush_r+0xc>
 800b15c:	4b05      	ldr	r3, [pc, #20]	; (800b174 <_fflush_r+0x70>)
 800b15e:	429c      	cmp	r4, r3
 800b160:	d101      	bne.n	800b166 <_fflush_r+0x62>
 800b162:	68ac      	ldr	r4, [r5, #8]
 800b164:	e7df      	b.n	800b126 <_fflush_r+0x22>
 800b166:	4b04      	ldr	r3, [pc, #16]	; (800b178 <_fflush_r+0x74>)
 800b168:	429c      	cmp	r4, r3
 800b16a:	bf08      	it	eq
 800b16c:	68ec      	ldreq	r4, [r5, #12]
 800b16e:	e7da      	b.n	800b126 <_fflush_r+0x22>
 800b170:	0800d924 	.word	0x0800d924
 800b174:	0800d944 	.word	0x0800d944
 800b178:	0800d904 	.word	0x0800d904

0800b17c <std>:
 800b17c:	2300      	movs	r3, #0
 800b17e:	b510      	push	{r4, lr}
 800b180:	4604      	mov	r4, r0
 800b182:	e9c0 3300 	strd	r3, r3, [r0]
 800b186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b18a:	6083      	str	r3, [r0, #8]
 800b18c:	8181      	strh	r1, [r0, #12]
 800b18e:	6643      	str	r3, [r0, #100]	; 0x64
 800b190:	81c2      	strh	r2, [r0, #14]
 800b192:	6183      	str	r3, [r0, #24]
 800b194:	4619      	mov	r1, r3
 800b196:	2208      	movs	r2, #8
 800b198:	305c      	adds	r0, #92	; 0x5c
 800b19a:	f7fd fa5d 	bl	8008658 <memset>
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <std+0x38>)
 800b1a0:	6263      	str	r3, [r4, #36]	; 0x24
 800b1a2:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <std+0x3c>)
 800b1a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <std+0x40>)
 800b1a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1aa:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <std+0x44>)
 800b1ac:	6224      	str	r4, [r4, #32]
 800b1ae:	6323      	str	r3, [r4, #48]	; 0x30
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	bf00      	nop
 800b1b4:	0800c8d9 	.word	0x0800c8d9
 800b1b8:	0800c8fb 	.word	0x0800c8fb
 800b1bc:	0800c933 	.word	0x0800c933
 800b1c0:	0800c957 	.word	0x0800c957

0800b1c4 <_cleanup_r>:
 800b1c4:	4901      	ldr	r1, [pc, #4]	; (800b1cc <_cleanup_r+0x8>)
 800b1c6:	f000 b8af 	b.w	800b328 <_fwalk_reent>
 800b1ca:	bf00      	nop
 800b1cc:	0800b105 	.word	0x0800b105

0800b1d0 <__sfmoreglue>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	1e4a      	subs	r2, r1, #1
 800b1d4:	2568      	movs	r5, #104	; 0x68
 800b1d6:	4355      	muls	r5, r2
 800b1d8:	460e      	mov	r6, r1
 800b1da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1de:	f7fd fa93 	bl	8008708 <_malloc_r>
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	b140      	cbz	r0, 800b1f8 <__sfmoreglue+0x28>
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	e9c0 1600 	strd	r1, r6, [r0]
 800b1ec:	300c      	adds	r0, #12
 800b1ee:	60a0      	str	r0, [r4, #8]
 800b1f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1f4:	f7fd fa30 	bl	8008658 <memset>
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}

0800b1fc <__sfp_lock_acquire>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sfp_lock_acquire+0x8>)
 800b1fe:	f000 bc26 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800b202:	bf00      	nop
 800b204:	20000c2c 	.word	0x20000c2c

0800b208 <__sfp_lock_release>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__sfp_lock_release+0x8>)
 800b20a:	f000 bc21 	b.w	800ba50 <__retarget_lock_release_recursive>
 800b20e:	bf00      	nop
 800b210:	20000c2c 	.word	0x20000c2c

0800b214 <__sinit_lock_acquire>:
 800b214:	4801      	ldr	r0, [pc, #4]	; (800b21c <__sinit_lock_acquire+0x8>)
 800b216:	f000 bc1a 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800b21a:	bf00      	nop
 800b21c:	20000c27 	.word	0x20000c27

0800b220 <__sinit_lock_release>:
 800b220:	4801      	ldr	r0, [pc, #4]	; (800b228 <__sinit_lock_release+0x8>)
 800b222:	f000 bc15 	b.w	800ba50 <__retarget_lock_release_recursive>
 800b226:	bf00      	nop
 800b228:	20000c27 	.word	0x20000c27

0800b22c <__sinit>:
 800b22c:	b510      	push	{r4, lr}
 800b22e:	4604      	mov	r4, r0
 800b230:	f7ff fff0 	bl	800b214 <__sinit_lock_acquire>
 800b234:	69a3      	ldr	r3, [r4, #24]
 800b236:	b11b      	cbz	r3, 800b240 <__sinit+0x14>
 800b238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b23c:	f7ff bff0 	b.w	800b220 <__sinit_lock_release>
 800b240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b244:	6523      	str	r3, [r4, #80]	; 0x50
 800b246:	4b13      	ldr	r3, [pc, #76]	; (800b294 <__sinit+0x68>)
 800b248:	4a13      	ldr	r2, [pc, #76]	; (800b298 <__sinit+0x6c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b24e:	42a3      	cmp	r3, r4
 800b250:	bf04      	itt	eq
 800b252:	2301      	moveq	r3, #1
 800b254:	61a3      	streq	r3, [r4, #24]
 800b256:	4620      	mov	r0, r4
 800b258:	f000 f820 	bl	800b29c <__sfp>
 800b25c:	6060      	str	r0, [r4, #4]
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 f81c 	bl	800b29c <__sfp>
 800b264:	60a0      	str	r0, [r4, #8]
 800b266:	4620      	mov	r0, r4
 800b268:	f000 f818 	bl	800b29c <__sfp>
 800b26c:	2200      	movs	r2, #0
 800b26e:	60e0      	str	r0, [r4, #12]
 800b270:	2104      	movs	r1, #4
 800b272:	6860      	ldr	r0, [r4, #4]
 800b274:	f7ff ff82 	bl	800b17c <std>
 800b278:	68a0      	ldr	r0, [r4, #8]
 800b27a:	2201      	movs	r2, #1
 800b27c:	2109      	movs	r1, #9
 800b27e:	f7ff ff7d 	bl	800b17c <std>
 800b282:	68e0      	ldr	r0, [r4, #12]
 800b284:	2202      	movs	r2, #2
 800b286:	2112      	movs	r1, #18
 800b288:	f7ff ff78 	bl	800b17c <std>
 800b28c:	2301      	movs	r3, #1
 800b28e:	61a3      	str	r3, [r4, #24]
 800b290:	e7d2      	b.n	800b238 <__sinit+0xc>
 800b292:	bf00      	nop
 800b294:	0800d7d0 	.word	0x0800d7d0
 800b298:	0800b1c5 	.word	0x0800b1c5

0800b29c <__sfp>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	4607      	mov	r7, r0
 800b2a0:	f7ff ffac 	bl	800b1fc <__sfp_lock_acquire>
 800b2a4:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <__sfp+0x84>)
 800b2a6:	681e      	ldr	r6, [r3, #0]
 800b2a8:	69b3      	ldr	r3, [r6, #24]
 800b2aa:	b913      	cbnz	r3, 800b2b2 <__sfp+0x16>
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff ffbd 	bl	800b22c <__sinit>
 800b2b2:	3648      	adds	r6, #72	; 0x48
 800b2b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	d503      	bpl.n	800b2c4 <__sfp+0x28>
 800b2bc:	6833      	ldr	r3, [r6, #0]
 800b2be:	b30b      	cbz	r3, 800b304 <__sfp+0x68>
 800b2c0:	6836      	ldr	r6, [r6, #0]
 800b2c2:	e7f7      	b.n	800b2b4 <__sfp+0x18>
 800b2c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2c8:	b9d5      	cbnz	r5, 800b300 <__sfp+0x64>
 800b2ca:	4b16      	ldr	r3, [pc, #88]	; (800b324 <__sfp+0x88>)
 800b2cc:	60e3      	str	r3, [r4, #12]
 800b2ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2d2:	6665      	str	r5, [r4, #100]	; 0x64
 800b2d4:	f000 fbba 	bl	800ba4c <__retarget_lock_init_recursive>
 800b2d8:	f7ff ff96 	bl	800b208 <__sfp_lock_release>
 800b2dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2e4:	6025      	str	r5, [r4, #0]
 800b2e6:	61a5      	str	r5, [r4, #24]
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2f0:	f7fd f9b2 	bl	8008658 <memset>
 800b2f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b300:	3468      	adds	r4, #104	; 0x68
 800b302:	e7d9      	b.n	800b2b8 <__sfp+0x1c>
 800b304:	2104      	movs	r1, #4
 800b306:	4638      	mov	r0, r7
 800b308:	f7ff ff62 	bl	800b1d0 <__sfmoreglue>
 800b30c:	4604      	mov	r4, r0
 800b30e:	6030      	str	r0, [r6, #0]
 800b310:	2800      	cmp	r0, #0
 800b312:	d1d5      	bne.n	800b2c0 <__sfp+0x24>
 800b314:	f7ff ff78 	bl	800b208 <__sfp_lock_release>
 800b318:	230c      	movs	r3, #12
 800b31a:	603b      	str	r3, [r7, #0]
 800b31c:	e7ee      	b.n	800b2fc <__sfp+0x60>
 800b31e:	bf00      	nop
 800b320:	0800d7d0 	.word	0x0800d7d0
 800b324:	ffff0001 	.word	0xffff0001

0800b328 <_fwalk_reent>:
 800b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	4606      	mov	r6, r0
 800b32e:	4688      	mov	r8, r1
 800b330:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b334:	2700      	movs	r7, #0
 800b336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b33a:	f1b9 0901 	subs.w	r9, r9, #1
 800b33e:	d505      	bpl.n	800b34c <_fwalk_reent+0x24>
 800b340:	6824      	ldr	r4, [r4, #0]
 800b342:	2c00      	cmp	r4, #0
 800b344:	d1f7      	bne.n	800b336 <_fwalk_reent+0xe>
 800b346:	4638      	mov	r0, r7
 800b348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34c:	89ab      	ldrh	r3, [r5, #12]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d907      	bls.n	800b362 <_fwalk_reent+0x3a>
 800b352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b356:	3301      	adds	r3, #1
 800b358:	d003      	beq.n	800b362 <_fwalk_reent+0x3a>
 800b35a:	4629      	mov	r1, r5
 800b35c:	4630      	mov	r0, r6
 800b35e:	47c0      	blx	r8
 800b360:	4307      	orrs	r7, r0
 800b362:	3568      	adds	r5, #104	; 0x68
 800b364:	e7e9      	b.n	800b33a <_fwalk_reent+0x12>

0800b366 <rshift>:
 800b366:	6903      	ldr	r3, [r0, #16]
 800b368:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b370:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b374:	f100 0414 	add.w	r4, r0, #20
 800b378:	dd45      	ble.n	800b406 <rshift+0xa0>
 800b37a:	f011 011f 	ands.w	r1, r1, #31
 800b37e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b382:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b386:	d10c      	bne.n	800b3a2 <rshift+0x3c>
 800b388:	f100 0710 	add.w	r7, r0, #16
 800b38c:	4629      	mov	r1, r5
 800b38e:	42b1      	cmp	r1, r6
 800b390:	d334      	bcc.n	800b3fc <rshift+0x96>
 800b392:	1a9b      	subs	r3, r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	1eea      	subs	r2, r5, #3
 800b398:	4296      	cmp	r6, r2
 800b39a:	bf38      	it	cc
 800b39c:	2300      	movcc	r3, #0
 800b39e:	4423      	add	r3, r4
 800b3a0:	e015      	b.n	800b3ce <rshift+0x68>
 800b3a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3a6:	f1c1 0820 	rsb	r8, r1, #32
 800b3aa:	40cf      	lsrs	r7, r1
 800b3ac:	f105 0e04 	add.w	lr, r5, #4
 800b3b0:	46a1      	mov	r9, r4
 800b3b2:	4576      	cmp	r6, lr
 800b3b4:	46f4      	mov	ip, lr
 800b3b6:	d815      	bhi.n	800b3e4 <rshift+0x7e>
 800b3b8:	1a9b      	subs	r3, r3, r2
 800b3ba:	009a      	lsls	r2, r3, #2
 800b3bc:	3a04      	subs	r2, #4
 800b3be:	3501      	adds	r5, #1
 800b3c0:	42ae      	cmp	r6, r5
 800b3c2:	bf38      	it	cc
 800b3c4:	2200      	movcc	r2, #0
 800b3c6:	18a3      	adds	r3, r4, r2
 800b3c8:	50a7      	str	r7, [r4, r2]
 800b3ca:	b107      	cbz	r7, 800b3ce <rshift+0x68>
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	1b1a      	subs	r2, r3, r4
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3d6:	bf08      	it	eq
 800b3d8:	2300      	moveq	r3, #0
 800b3da:	6102      	str	r2, [r0, #16]
 800b3dc:	bf08      	it	eq
 800b3de:	6143      	streq	r3, [r0, #20]
 800b3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3e4:	f8dc c000 	ldr.w	ip, [ip]
 800b3e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3ec:	ea4c 0707 	orr.w	r7, ip, r7
 800b3f0:	f849 7b04 	str.w	r7, [r9], #4
 800b3f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3f8:	40cf      	lsrs	r7, r1
 800b3fa:	e7da      	b.n	800b3b2 <rshift+0x4c>
 800b3fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b400:	f847 cf04 	str.w	ip, [r7, #4]!
 800b404:	e7c3      	b.n	800b38e <rshift+0x28>
 800b406:	4623      	mov	r3, r4
 800b408:	e7e1      	b.n	800b3ce <rshift+0x68>

0800b40a <__hexdig_fun>:
 800b40a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b40e:	2b09      	cmp	r3, #9
 800b410:	d802      	bhi.n	800b418 <__hexdig_fun+0xe>
 800b412:	3820      	subs	r0, #32
 800b414:	b2c0      	uxtb	r0, r0
 800b416:	4770      	bx	lr
 800b418:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b41c:	2b05      	cmp	r3, #5
 800b41e:	d801      	bhi.n	800b424 <__hexdig_fun+0x1a>
 800b420:	3847      	subs	r0, #71	; 0x47
 800b422:	e7f7      	b.n	800b414 <__hexdig_fun+0xa>
 800b424:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b428:	2b05      	cmp	r3, #5
 800b42a:	d801      	bhi.n	800b430 <__hexdig_fun+0x26>
 800b42c:	3827      	subs	r0, #39	; 0x27
 800b42e:	e7f1      	b.n	800b414 <__hexdig_fun+0xa>
 800b430:	2000      	movs	r0, #0
 800b432:	4770      	bx	lr

0800b434 <__gethex>:
 800b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	ed2d 8b02 	vpush	{d8}
 800b43c:	b089      	sub	sp, #36	; 0x24
 800b43e:	ee08 0a10 	vmov	s16, r0
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	4bbc      	ldr	r3, [pc, #752]	; (800b738 <__gethex+0x304>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	4618      	mov	r0, r3
 800b44c:	468b      	mov	fp, r1
 800b44e:	4690      	mov	r8, r2
 800b450:	f7f4 fee0 	bl	8000214 <strlen>
 800b454:	9b01      	ldr	r3, [sp, #4]
 800b456:	f8db 2000 	ldr.w	r2, [fp]
 800b45a:	4403      	add	r3, r0
 800b45c:	4682      	mov	sl, r0
 800b45e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b462:	9305      	str	r3, [sp, #20]
 800b464:	1c93      	adds	r3, r2, #2
 800b466:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b46a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b46e:	32fe      	adds	r2, #254	; 0xfe
 800b470:	18d1      	adds	r1, r2, r3
 800b472:	461f      	mov	r7, r3
 800b474:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b478:	9100      	str	r1, [sp, #0]
 800b47a:	2830      	cmp	r0, #48	; 0x30
 800b47c:	d0f8      	beq.n	800b470 <__gethex+0x3c>
 800b47e:	f7ff ffc4 	bl	800b40a <__hexdig_fun>
 800b482:	4604      	mov	r4, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d13a      	bne.n	800b4fe <__gethex+0xca>
 800b488:	9901      	ldr	r1, [sp, #4]
 800b48a:	4652      	mov	r2, sl
 800b48c:	4638      	mov	r0, r7
 800b48e:	f001 fa66 	bl	800c95e <strncmp>
 800b492:	4605      	mov	r5, r0
 800b494:	2800      	cmp	r0, #0
 800b496:	d168      	bne.n	800b56a <__gethex+0x136>
 800b498:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b49c:	eb07 060a 	add.w	r6, r7, sl
 800b4a0:	f7ff ffb3 	bl	800b40a <__hexdig_fun>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d062      	beq.n	800b56e <__gethex+0x13a>
 800b4a8:	4633      	mov	r3, r6
 800b4aa:	7818      	ldrb	r0, [r3, #0]
 800b4ac:	2830      	cmp	r0, #48	; 0x30
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	f103 0301 	add.w	r3, r3, #1
 800b4b4:	d0f9      	beq.n	800b4aa <__gethex+0x76>
 800b4b6:	f7ff ffa8 	bl	800b40a <__hexdig_fun>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	fab0 f480 	clz	r4, r0
 800b4c0:	0964      	lsrs	r4, r4, #5
 800b4c2:	4635      	mov	r5, r6
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	3201      	adds	r2, #1
 800b4cc:	7830      	ldrb	r0, [r6, #0]
 800b4ce:	f7ff ff9c 	bl	800b40a <__hexdig_fun>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d1f8      	bne.n	800b4c8 <__gethex+0x94>
 800b4d6:	9901      	ldr	r1, [sp, #4]
 800b4d8:	4652      	mov	r2, sl
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f001 fa3f 	bl	800c95e <strncmp>
 800b4e0:	b980      	cbnz	r0, 800b504 <__gethex+0xd0>
 800b4e2:	b94d      	cbnz	r5, 800b4f8 <__gethex+0xc4>
 800b4e4:	eb06 050a 	add.w	r5, r6, sl
 800b4e8:	462a      	mov	r2, r5
 800b4ea:	4616      	mov	r6, r2
 800b4ec:	3201      	adds	r2, #1
 800b4ee:	7830      	ldrb	r0, [r6, #0]
 800b4f0:	f7ff ff8b 	bl	800b40a <__hexdig_fun>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d1f8      	bne.n	800b4ea <__gethex+0xb6>
 800b4f8:	1bad      	subs	r5, r5, r6
 800b4fa:	00ad      	lsls	r5, r5, #2
 800b4fc:	e004      	b.n	800b508 <__gethex+0xd4>
 800b4fe:	2400      	movs	r4, #0
 800b500:	4625      	mov	r5, r4
 800b502:	e7e0      	b.n	800b4c6 <__gethex+0x92>
 800b504:	2d00      	cmp	r5, #0
 800b506:	d1f7      	bne.n	800b4f8 <__gethex+0xc4>
 800b508:	7833      	ldrb	r3, [r6, #0]
 800b50a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b50e:	2b50      	cmp	r3, #80	; 0x50
 800b510:	d13b      	bne.n	800b58a <__gethex+0x156>
 800b512:	7873      	ldrb	r3, [r6, #1]
 800b514:	2b2b      	cmp	r3, #43	; 0x2b
 800b516:	d02c      	beq.n	800b572 <__gethex+0x13e>
 800b518:	2b2d      	cmp	r3, #45	; 0x2d
 800b51a:	d02e      	beq.n	800b57a <__gethex+0x146>
 800b51c:	1c71      	adds	r1, r6, #1
 800b51e:	f04f 0900 	mov.w	r9, #0
 800b522:	7808      	ldrb	r0, [r1, #0]
 800b524:	f7ff ff71 	bl	800b40a <__hexdig_fun>
 800b528:	1e43      	subs	r3, r0, #1
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b18      	cmp	r3, #24
 800b52e:	d82c      	bhi.n	800b58a <__gethex+0x156>
 800b530:	f1a0 0210 	sub.w	r2, r0, #16
 800b534:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b538:	f7ff ff67 	bl	800b40a <__hexdig_fun>
 800b53c:	1e43      	subs	r3, r0, #1
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b18      	cmp	r3, #24
 800b542:	d91d      	bls.n	800b580 <__gethex+0x14c>
 800b544:	f1b9 0f00 	cmp.w	r9, #0
 800b548:	d000      	beq.n	800b54c <__gethex+0x118>
 800b54a:	4252      	negs	r2, r2
 800b54c:	4415      	add	r5, r2
 800b54e:	f8cb 1000 	str.w	r1, [fp]
 800b552:	b1e4      	cbz	r4, 800b58e <__gethex+0x15a>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	bf14      	ite	ne
 800b55a:	2700      	movne	r7, #0
 800b55c:	2706      	moveq	r7, #6
 800b55e:	4638      	mov	r0, r7
 800b560:	b009      	add	sp, #36	; 0x24
 800b562:	ecbd 8b02 	vpop	{d8}
 800b566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56a:	463e      	mov	r6, r7
 800b56c:	4625      	mov	r5, r4
 800b56e:	2401      	movs	r4, #1
 800b570:	e7ca      	b.n	800b508 <__gethex+0xd4>
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	1cb1      	adds	r1, r6, #2
 800b578:	e7d3      	b.n	800b522 <__gethex+0xee>
 800b57a:	f04f 0901 	mov.w	r9, #1
 800b57e:	e7fa      	b.n	800b576 <__gethex+0x142>
 800b580:	230a      	movs	r3, #10
 800b582:	fb03 0202 	mla	r2, r3, r2, r0
 800b586:	3a10      	subs	r2, #16
 800b588:	e7d4      	b.n	800b534 <__gethex+0x100>
 800b58a:	4631      	mov	r1, r6
 800b58c:	e7df      	b.n	800b54e <__gethex+0x11a>
 800b58e:	1bf3      	subs	r3, r6, r7
 800b590:	3b01      	subs	r3, #1
 800b592:	4621      	mov	r1, r4
 800b594:	2b07      	cmp	r3, #7
 800b596:	dc0b      	bgt.n	800b5b0 <__gethex+0x17c>
 800b598:	ee18 0a10 	vmov	r0, s16
 800b59c:	f000 fb04 	bl	800bba8 <_Balloc>
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	b940      	cbnz	r0, 800b5b6 <__gethex+0x182>
 800b5a4:	4b65      	ldr	r3, [pc, #404]	; (800b73c <__gethex+0x308>)
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	21de      	movs	r1, #222	; 0xde
 800b5aa:	4865      	ldr	r0, [pc, #404]	; (800b740 <__gethex+0x30c>)
 800b5ac:	f7fc ffee 	bl	800858c <__assert_func>
 800b5b0:	3101      	adds	r1, #1
 800b5b2:	105b      	asrs	r3, r3, #1
 800b5b4:	e7ee      	b.n	800b594 <__gethex+0x160>
 800b5b6:	f100 0914 	add.w	r9, r0, #20
 800b5ba:	f04f 0b00 	mov.w	fp, #0
 800b5be:	f1ca 0301 	rsb	r3, sl, #1
 800b5c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b5c6:	f8cd b000 	str.w	fp, [sp]
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	42b7      	cmp	r7, r6
 800b5ce:	d340      	bcc.n	800b652 <__gethex+0x21e>
 800b5d0:	9802      	ldr	r0, [sp, #8]
 800b5d2:	9b00      	ldr	r3, [sp, #0]
 800b5d4:	f840 3b04 	str.w	r3, [r0], #4
 800b5d8:	eba0 0009 	sub.w	r0, r0, r9
 800b5dc:	1080      	asrs	r0, r0, #2
 800b5de:	0146      	lsls	r6, r0, #5
 800b5e0:	6120      	str	r0, [r4, #16]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fbd6 	bl	800bd94 <__hi0bits>
 800b5e8:	1a30      	subs	r0, r6, r0
 800b5ea:	f8d8 6000 	ldr.w	r6, [r8]
 800b5ee:	42b0      	cmp	r0, r6
 800b5f0:	dd63      	ble.n	800b6ba <__gethex+0x286>
 800b5f2:	1b87      	subs	r7, r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f000 ff70 	bl	800c4dc <__any_on>
 800b5fc:	4682      	mov	sl, r0
 800b5fe:	b1a8      	cbz	r0, 800b62c <__gethex+0x1f8>
 800b600:	1e7b      	subs	r3, r7, #1
 800b602:	1159      	asrs	r1, r3, #5
 800b604:	f003 021f 	and.w	r2, r3, #31
 800b608:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b60c:	f04f 0a01 	mov.w	sl, #1
 800b610:	fa0a f202 	lsl.w	r2, sl, r2
 800b614:	420a      	tst	r2, r1
 800b616:	d009      	beq.n	800b62c <__gethex+0x1f8>
 800b618:	4553      	cmp	r3, sl
 800b61a:	dd05      	ble.n	800b628 <__gethex+0x1f4>
 800b61c:	1eb9      	subs	r1, r7, #2
 800b61e:	4620      	mov	r0, r4
 800b620:	f000 ff5c 	bl	800c4dc <__any_on>
 800b624:	2800      	cmp	r0, #0
 800b626:	d145      	bne.n	800b6b4 <__gethex+0x280>
 800b628:	f04f 0a02 	mov.w	sl, #2
 800b62c:	4639      	mov	r1, r7
 800b62e:	4620      	mov	r0, r4
 800b630:	f7ff fe99 	bl	800b366 <rshift>
 800b634:	443d      	add	r5, r7
 800b636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b63a:	42ab      	cmp	r3, r5
 800b63c:	da4c      	bge.n	800b6d8 <__gethex+0x2a4>
 800b63e:	ee18 0a10 	vmov	r0, s16
 800b642:	4621      	mov	r1, r4
 800b644:	f000 faf0 	bl	800bc28 <_Bfree>
 800b648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b64a:	2300      	movs	r3, #0
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	27a3      	movs	r7, #163	; 0xa3
 800b650:	e785      	b.n	800b55e <__gethex+0x12a>
 800b652:	1e73      	subs	r3, r6, #1
 800b654:	9a05      	ldr	r2, [sp, #20]
 800b656:	9303      	str	r3, [sp, #12]
 800b658:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d019      	beq.n	800b694 <__gethex+0x260>
 800b660:	f1bb 0f20 	cmp.w	fp, #32
 800b664:	d107      	bne.n	800b676 <__gethex+0x242>
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	9a00      	ldr	r2, [sp, #0]
 800b66a:	f843 2b04 	str.w	r2, [r3], #4
 800b66e:	9302      	str	r3, [sp, #8]
 800b670:	2300      	movs	r3, #0
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	469b      	mov	fp, r3
 800b676:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b67a:	f7ff fec6 	bl	800b40a <__hexdig_fun>
 800b67e:	9b00      	ldr	r3, [sp, #0]
 800b680:	f000 000f 	and.w	r0, r0, #15
 800b684:	fa00 f00b 	lsl.w	r0, r0, fp
 800b688:	4303      	orrs	r3, r0
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	f10b 0b04 	add.w	fp, fp, #4
 800b690:	9b03      	ldr	r3, [sp, #12]
 800b692:	e00d      	b.n	800b6b0 <__gethex+0x27c>
 800b694:	9b03      	ldr	r3, [sp, #12]
 800b696:	9a06      	ldr	r2, [sp, #24]
 800b698:	4413      	add	r3, r2
 800b69a:	42bb      	cmp	r3, r7
 800b69c:	d3e0      	bcc.n	800b660 <__gethex+0x22c>
 800b69e:	4618      	mov	r0, r3
 800b6a0:	9901      	ldr	r1, [sp, #4]
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	4652      	mov	r2, sl
 800b6a6:	f001 f95a 	bl	800c95e <strncmp>
 800b6aa:	9b07      	ldr	r3, [sp, #28]
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d1d7      	bne.n	800b660 <__gethex+0x22c>
 800b6b0:	461e      	mov	r6, r3
 800b6b2:	e78b      	b.n	800b5cc <__gethex+0x198>
 800b6b4:	f04f 0a03 	mov.w	sl, #3
 800b6b8:	e7b8      	b.n	800b62c <__gethex+0x1f8>
 800b6ba:	da0a      	bge.n	800b6d2 <__gethex+0x29e>
 800b6bc:	1a37      	subs	r7, r6, r0
 800b6be:	4621      	mov	r1, r4
 800b6c0:	ee18 0a10 	vmov	r0, s16
 800b6c4:	463a      	mov	r2, r7
 800b6c6:	f000 fccb 	bl	800c060 <__lshift>
 800b6ca:	1bed      	subs	r5, r5, r7
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	f100 0914 	add.w	r9, r0, #20
 800b6d2:	f04f 0a00 	mov.w	sl, #0
 800b6d6:	e7ae      	b.n	800b636 <__gethex+0x202>
 800b6d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b6dc:	42a8      	cmp	r0, r5
 800b6de:	dd72      	ble.n	800b7c6 <__gethex+0x392>
 800b6e0:	1b45      	subs	r5, r0, r5
 800b6e2:	42ae      	cmp	r6, r5
 800b6e4:	dc36      	bgt.n	800b754 <__gethex+0x320>
 800b6e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d02a      	beq.n	800b744 <__gethex+0x310>
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d02c      	beq.n	800b74c <__gethex+0x318>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d115      	bne.n	800b722 <__gethex+0x2ee>
 800b6f6:	42ae      	cmp	r6, r5
 800b6f8:	d113      	bne.n	800b722 <__gethex+0x2ee>
 800b6fa:	2e01      	cmp	r6, #1
 800b6fc:	d10b      	bne.n	800b716 <__gethex+0x2e2>
 800b6fe:	9a04      	ldr	r2, [sp, #16]
 800b700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b704:	6013      	str	r3, [r2, #0]
 800b706:	2301      	movs	r3, #1
 800b708:	6123      	str	r3, [r4, #16]
 800b70a:	f8c9 3000 	str.w	r3, [r9]
 800b70e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b710:	2762      	movs	r7, #98	; 0x62
 800b712:	601c      	str	r4, [r3, #0]
 800b714:	e723      	b.n	800b55e <__gethex+0x12a>
 800b716:	1e71      	subs	r1, r6, #1
 800b718:	4620      	mov	r0, r4
 800b71a:	f000 fedf 	bl	800c4dc <__any_on>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d1ed      	bne.n	800b6fe <__gethex+0x2ca>
 800b722:	ee18 0a10 	vmov	r0, s16
 800b726:	4621      	mov	r1, r4
 800b728:	f000 fa7e 	bl	800bc28 <_Bfree>
 800b72c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b72e:	2300      	movs	r3, #0
 800b730:	6013      	str	r3, [r2, #0]
 800b732:	2750      	movs	r7, #80	; 0x50
 800b734:	e713      	b.n	800b55e <__gethex+0x12a>
 800b736:	bf00      	nop
 800b738:	0800d9d0 	.word	0x0800d9d0
 800b73c:	0800d8f3 	.word	0x0800d8f3
 800b740:	0800d964 	.word	0x0800d964
 800b744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1eb      	bne.n	800b722 <__gethex+0x2ee>
 800b74a:	e7d8      	b.n	800b6fe <__gethex+0x2ca>
 800b74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1d5      	bne.n	800b6fe <__gethex+0x2ca>
 800b752:	e7e6      	b.n	800b722 <__gethex+0x2ee>
 800b754:	1e6f      	subs	r7, r5, #1
 800b756:	f1ba 0f00 	cmp.w	sl, #0
 800b75a:	d131      	bne.n	800b7c0 <__gethex+0x38c>
 800b75c:	b127      	cbz	r7, 800b768 <__gethex+0x334>
 800b75e:	4639      	mov	r1, r7
 800b760:	4620      	mov	r0, r4
 800b762:	f000 febb 	bl	800c4dc <__any_on>
 800b766:	4682      	mov	sl, r0
 800b768:	117b      	asrs	r3, r7, #5
 800b76a:	2101      	movs	r1, #1
 800b76c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b770:	f007 071f 	and.w	r7, r7, #31
 800b774:	fa01 f707 	lsl.w	r7, r1, r7
 800b778:	421f      	tst	r7, r3
 800b77a:	4629      	mov	r1, r5
 800b77c:	4620      	mov	r0, r4
 800b77e:	bf18      	it	ne
 800b780:	f04a 0a02 	orrne.w	sl, sl, #2
 800b784:	1b76      	subs	r6, r6, r5
 800b786:	f7ff fdee 	bl	800b366 <rshift>
 800b78a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b78e:	2702      	movs	r7, #2
 800b790:	f1ba 0f00 	cmp.w	sl, #0
 800b794:	d048      	beq.n	800b828 <__gethex+0x3f4>
 800b796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d015      	beq.n	800b7ca <__gethex+0x396>
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d017      	beq.n	800b7d2 <__gethex+0x39e>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d109      	bne.n	800b7ba <__gethex+0x386>
 800b7a6:	f01a 0f02 	tst.w	sl, #2
 800b7aa:	d006      	beq.n	800b7ba <__gethex+0x386>
 800b7ac:	f8d9 0000 	ldr.w	r0, [r9]
 800b7b0:	ea4a 0a00 	orr.w	sl, sl, r0
 800b7b4:	f01a 0f01 	tst.w	sl, #1
 800b7b8:	d10e      	bne.n	800b7d8 <__gethex+0x3a4>
 800b7ba:	f047 0710 	orr.w	r7, r7, #16
 800b7be:	e033      	b.n	800b828 <__gethex+0x3f4>
 800b7c0:	f04f 0a01 	mov.w	sl, #1
 800b7c4:	e7d0      	b.n	800b768 <__gethex+0x334>
 800b7c6:	2701      	movs	r7, #1
 800b7c8:	e7e2      	b.n	800b790 <__gethex+0x35c>
 800b7ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7cc:	f1c3 0301 	rsb	r3, r3, #1
 800b7d0:	9315      	str	r3, [sp, #84]	; 0x54
 800b7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d0f0      	beq.n	800b7ba <__gethex+0x386>
 800b7d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7dc:	f104 0314 	add.w	r3, r4, #20
 800b7e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b7e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b7e8:	f04f 0c00 	mov.w	ip, #0
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b7f6:	d01c      	beq.n	800b832 <__gethex+0x3fe>
 800b7f8:	3201      	adds	r2, #1
 800b7fa:	6002      	str	r2, [r0, #0]
 800b7fc:	2f02      	cmp	r7, #2
 800b7fe:	f104 0314 	add.w	r3, r4, #20
 800b802:	d13f      	bne.n	800b884 <__gethex+0x450>
 800b804:	f8d8 2000 	ldr.w	r2, [r8]
 800b808:	3a01      	subs	r2, #1
 800b80a:	42b2      	cmp	r2, r6
 800b80c:	d10a      	bne.n	800b824 <__gethex+0x3f0>
 800b80e:	1171      	asrs	r1, r6, #5
 800b810:	2201      	movs	r2, #1
 800b812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b816:	f006 061f 	and.w	r6, r6, #31
 800b81a:	fa02 f606 	lsl.w	r6, r2, r6
 800b81e:	421e      	tst	r6, r3
 800b820:	bf18      	it	ne
 800b822:	4617      	movne	r7, r2
 800b824:	f047 0720 	orr.w	r7, r7, #32
 800b828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b82a:	601c      	str	r4, [r3, #0]
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	601d      	str	r5, [r3, #0]
 800b830:	e695      	b.n	800b55e <__gethex+0x12a>
 800b832:	4299      	cmp	r1, r3
 800b834:	f843 cc04 	str.w	ip, [r3, #-4]
 800b838:	d8d8      	bhi.n	800b7ec <__gethex+0x3b8>
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	459b      	cmp	fp, r3
 800b83e:	db19      	blt.n	800b874 <__gethex+0x440>
 800b840:	6861      	ldr	r1, [r4, #4]
 800b842:	ee18 0a10 	vmov	r0, s16
 800b846:	3101      	adds	r1, #1
 800b848:	f000 f9ae 	bl	800bba8 <_Balloc>
 800b84c:	4681      	mov	r9, r0
 800b84e:	b918      	cbnz	r0, 800b858 <__gethex+0x424>
 800b850:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <__gethex+0x488>)
 800b852:	4602      	mov	r2, r0
 800b854:	2184      	movs	r1, #132	; 0x84
 800b856:	e6a8      	b.n	800b5aa <__gethex+0x176>
 800b858:	6922      	ldr	r2, [r4, #16]
 800b85a:	3202      	adds	r2, #2
 800b85c:	f104 010c 	add.w	r1, r4, #12
 800b860:	0092      	lsls	r2, r2, #2
 800b862:	300c      	adds	r0, #12
 800b864:	f000 f96c 	bl	800bb40 <memcpy>
 800b868:	4621      	mov	r1, r4
 800b86a:	ee18 0a10 	vmov	r0, s16
 800b86e:	f000 f9db 	bl	800bc28 <_Bfree>
 800b872:	464c      	mov	r4, r9
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b87c:	6122      	str	r2, [r4, #16]
 800b87e:	2201      	movs	r2, #1
 800b880:	615a      	str	r2, [r3, #20]
 800b882:	e7bb      	b.n	800b7fc <__gethex+0x3c8>
 800b884:	6922      	ldr	r2, [r4, #16]
 800b886:	455a      	cmp	r2, fp
 800b888:	dd0b      	ble.n	800b8a2 <__gethex+0x46e>
 800b88a:	2101      	movs	r1, #1
 800b88c:	4620      	mov	r0, r4
 800b88e:	f7ff fd6a 	bl	800b366 <rshift>
 800b892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b896:	3501      	adds	r5, #1
 800b898:	42ab      	cmp	r3, r5
 800b89a:	f6ff aed0 	blt.w	800b63e <__gethex+0x20a>
 800b89e:	2701      	movs	r7, #1
 800b8a0:	e7c0      	b.n	800b824 <__gethex+0x3f0>
 800b8a2:	f016 061f 	ands.w	r6, r6, #31
 800b8a6:	d0fa      	beq.n	800b89e <__gethex+0x46a>
 800b8a8:	449a      	add	sl, r3
 800b8aa:	f1c6 0620 	rsb	r6, r6, #32
 800b8ae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b8b2:	f000 fa6f 	bl	800bd94 <__hi0bits>
 800b8b6:	42b0      	cmp	r0, r6
 800b8b8:	dbe7      	blt.n	800b88a <__gethex+0x456>
 800b8ba:	e7f0      	b.n	800b89e <__gethex+0x46a>
 800b8bc:	0800d8f3 	.word	0x0800d8f3

0800b8c0 <L_shift>:
 800b8c0:	f1c2 0208 	rsb	r2, r2, #8
 800b8c4:	0092      	lsls	r2, r2, #2
 800b8c6:	b570      	push	{r4, r5, r6, lr}
 800b8c8:	f1c2 0620 	rsb	r6, r2, #32
 800b8cc:	6843      	ldr	r3, [r0, #4]
 800b8ce:	6804      	ldr	r4, [r0, #0]
 800b8d0:	fa03 f506 	lsl.w	r5, r3, r6
 800b8d4:	432c      	orrs	r4, r5
 800b8d6:	40d3      	lsrs	r3, r2
 800b8d8:	6004      	str	r4, [r0, #0]
 800b8da:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8de:	4288      	cmp	r0, r1
 800b8e0:	d3f4      	bcc.n	800b8cc <L_shift+0xc>
 800b8e2:	bd70      	pop	{r4, r5, r6, pc}

0800b8e4 <__match>:
 800b8e4:	b530      	push	{r4, r5, lr}
 800b8e6:	6803      	ldr	r3, [r0, #0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ee:	b914      	cbnz	r4, 800b8f6 <__match+0x12>
 800b8f0:	6003      	str	r3, [r0, #0]
 800b8f2:	2001      	movs	r0, #1
 800b8f4:	bd30      	pop	{r4, r5, pc}
 800b8f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b8fe:	2d19      	cmp	r5, #25
 800b900:	bf98      	it	ls
 800b902:	3220      	addls	r2, #32
 800b904:	42a2      	cmp	r2, r4
 800b906:	d0f0      	beq.n	800b8ea <__match+0x6>
 800b908:	2000      	movs	r0, #0
 800b90a:	e7f3      	b.n	800b8f4 <__match+0x10>

0800b90c <__hexnan>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	680b      	ldr	r3, [r1, #0]
 800b912:	6801      	ldr	r1, [r0, #0]
 800b914:	115e      	asrs	r6, r3, #5
 800b916:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b91a:	f013 031f 	ands.w	r3, r3, #31
 800b91e:	b087      	sub	sp, #28
 800b920:	bf18      	it	ne
 800b922:	3604      	addne	r6, #4
 800b924:	2500      	movs	r5, #0
 800b926:	1f37      	subs	r7, r6, #4
 800b928:	4682      	mov	sl, r0
 800b92a:	4690      	mov	r8, r2
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b932:	46b9      	mov	r9, r7
 800b934:	463c      	mov	r4, r7
 800b936:	9502      	str	r5, [sp, #8]
 800b938:	46ab      	mov	fp, r5
 800b93a:	784a      	ldrb	r2, [r1, #1]
 800b93c:	1c4b      	adds	r3, r1, #1
 800b93e:	9303      	str	r3, [sp, #12]
 800b940:	b342      	cbz	r2, 800b994 <__hexnan+0x88>
 800b942:	4610      	mov	r0, r2
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	9204      	str	r2, [sp, #16]
 800b948:	f7ff fd5f 	bl	800b40a <__hexdig_fun>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d14f      	bne.n	800b9f0 <__hexnan+0xe4>
 800b950:	9a04      	ldr	r2, [sp, #16]
 800b952:	9905      	ldr	r1, [sp, #20]
 800b954:	2a20      	cmp	r2, #32
 800b956:	d818      	bhi.n	800b98a <__hexnan+0x7e>
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	459b      	cmp	fp, r3
 800b95c:	dd13      	ble.n	800b986 <__hexnan+0x7a>
 800b95e:	454c      	cmp	r4, r9
 800b960:	d206      	bcs.n	800b970 <__hexnan+0x64>
 800b962:	2d07      	cmp	r5, #7
 800b964:	dc04      	bgt.n	800b970 <__hexnan+0x64>
 800b966:	462a      	mov	r2, r5
 800b968:	4649      	mov	r1, r9
 800b96a:	4620      	mov	r0, r4
 800b96c:	f7ff ffa8 	bl	800b8c0 <L_shift>
 800b970:	4544      	cmp	r4, r8
 800b972:	d950      	bls.n	800ba16 <__hexnan+0x10a>
 800b974:	2300      	movs	r3, #0
 800b976:	f1a4 0904 	sub.w	r9, r4, #4
 800b97a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b97e:	f8cd b008 	str.w	fp, [sp, #8]
 800b982:	464c      	mov	r4, r9
 800b984:	461d      	mov	r5, r3
 800b986:	9903      	ldr	r1, [sp, #12]
 800b988:	e7d7      	b.n	800b93a <__hexnan+0x2e>
 800b98a:	2a29      	cmp	r2, #41	; 0x29
 800b98c:	d156      	bne.n	800ba3c <__hexnan+0x130>
 800b98e:	3102      	adds	r1, #2
 800b990:	f8ca 1000 	str.w	r1, [sl]
 800b994:	f1bb 0f00 	cmp.w	fp, #0
 800b998:	d050      	beq.n	800ba3c <__hexnan+0x130>
 800b99a:	454c      	cmp	r4, r9
 800b99c:	d206      	bcs.n	800b9ac <__hexnan+0xa0>
 800b99e:	2d07      	cmp	r5, #7
 800b9a0:	dc04      	bgt.n	800b9ac <__hexnan+0xa0>
 800b9a2:	462a      	mov	r2, r5
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f7ff ff8a 	bl	800b8c0 <L_shift>
 800b9ac:	4544      	cmp	r4, r8
 800b9ae:	d934      	bls.n	800ba1a <__hexnan+0x10e>
 800b9b0:	f1a8 0204 	sub.w	r2, r8, #4
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9be:	429f      	cmp	r7, r3
 800b9c0:	d2f9      	bcs.n	800b9b6 <__hexnan+0xaa>
 800b9c2:	1b3b      	subs	r3, r7, r4
 800b9c4:	f023 0303 	bic.w	r3, r3, #3
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	3401      	adds	r4, #1
 800b9cc:	3e03      	subs	r6, #3
 800b9ce:	42b4      	cmp	r4, r6
 800b9d0:	bf88      	it	hi
 800b9d2:	2304      	movhi	r3, #4
 800b9d4:	4443      	add	r3, r8
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f843 2b04 	str.w	r2, [r3], #4
 800b9dc:	429f      	cmp	r7, r3
 800b9de:	d2fb      	bcs.n	800b9d8 <__hexnan+0xcc>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	b91b      	cbnz	r3, 800b9ec <__hexnan+0xe0>
 800b9e4:	4547      	cmp	r7, r8
 800b9e6:	d127      	bne.n	800ba38 <__hexnan+0x12c>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	603b      	str	r3, [r7, #0]
 800b9ec:	2005      	movs	r0, #5
 800b9ee:	e026      	b.n	800ba3e <__hexnan+0x132>
 800b9f0:	3501      	adds	r5, #1
 800b9f2:	2d08      	cmp	r5, #8
 800b9f4:	f10b 0b01 	add.w	fp, fp, #1
 800b9f8:	dd06      	ble.n	800ba08 <__hexnan+0xfc>
 800b9fa:	4544      	cmp	r4, r8
 800b9fc:	d9c3      	bls.n	800b986 <__hexnan+0x7a>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba04:	2501      	movs	r5, #1
 800ba06:	3c04      	subs	r4, #4
 800ba08:	6822      	ldr	r2, [r4, #0]
 800ba0a:	f000 000f 	and.w	r0, r0, #15
 800ba0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ba12:	6022      	str	r2, [r4, #0]
 800ba14:	e7b7      	b.n	800b986 <__hexnan+0x7a>
 800ba16:	2508      	movs	r5, #8
 800ba18:	e7b5      	b.n	800b986 <__hexnan+0x7a>
 800ba1a:	9b01      	ldr	r3, [sp, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0df      	beq.n	800b9e0 <__hexnan+0xd4>
 800ba20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba24:	f1c3 0320 	rsb	r3, r3, #32
 800ba28:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba30:	401a      	ands	r2, r3
 800ba32:	f846 2c04 	str.w	r2, [r6, #-4]
 800ba36:	e7d3      	b.n	800b9e0 <__hexnan+0xd4>
 800ba38:	3f04      	subs	r7, #4
 800ba3a:	e7d1      	b.n	800b9e0 <__hexnan+0xd4>
 800ba3c:	2004      	movs	r0, #4
 800ba3e:	b007      	add	sp, #28
 800ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba44 <_localeconv_r>:
 800ba44:	4800      	ldr	r0, [pc, #0]	; (800ba48 <_localeconv_r+0x4>)
 800ba46:	4770      	bx	lr
 800ba48:	20000164 	.word	0x20000164

0800ba4c <__retarget_lock_init_recursive>:
 800ba4c:	4770      	bx	lr

0800ba4e <__retarget_lock_acquire_recursive>:
 800ba4e:	4770      	bx	lr

0800ba50 <__retarget_lock_release_recursive>:
 800ba50:	4770      	bx	lr

0800ba52 <__swhatbuf_r>:
 800ba52:	b570      	push	{r4, r5, r6, lr}
 800ba54:	460e      	mov	r6, r1
 800ba56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5a:	2900      	cmp	r1, #0
 800ba5c:	b096      	sub	sp, #88	; 0x58
 800ba5e:	4614      	mov	r4, r2
 800ba60:	461d      	mov	r5, r3
 800ba62:	da07      	bge.n	800ba74 <__swhatbuf_r+0x22>
 800ba64:	2300      	movs	r3, #0
 800ba66:	602b      	str	r3, [r5, #0]
 800ba68:	89b3      	ldrh	r3, [r6, #12]
 800ba6a:	061a      	lsls	r2, r3, #24
 800ba6c:	d410      	bmi.n	800ba90 <__swhatbuf_r+0x3e>
 800ba6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba72:	e00e      	b.n	800ba92 <__swhatbuf_r+0x40>
 800ba74:	466a      	mov	r2, sp
 800ba76:	f000 ffb3 	bl	800c9e0 <_fstat_r>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	dbf2      	blt.n	800ba64 <__swhatbuf_r+0x12>
 800ba7e:	9a01      	ldr	r2, [sp, #4]
 800ba80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba88:	425a      	negs	r2, r3
 800ba8a:	415a      	adcs	r2, r3
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	e7ee      	b.n	800ba6e <__swhatbuf_r+0x1c>
 800ba90:	2340      	movs	r3, #64	; 0x40
 800ba92:	2000      	movs	r0, #0
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	b016      	add	sp, #88	; 0x58
 800ba98:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba9c <__smakebuf_r>:
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baa0:	079d      	lsls	r5, r3, #30
 800baa2:	4606      	mov	r6, r0
 800baa4:	460c      	mov	r4, r1
 800baa6:	d507      	bpl.n	800bab8 <__smakebuf_r+0x1c>
 800baa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	6123      	str	r3, [r4, #16]
 800bab0:	2301      	movs	r3, #1
 800bab2:	6163      	str	r3, [r4, #20]
 800bab4:	b002      	add	sp, #8
 800bab6:	bd70      	pop	{r4, r5, r6, pc}
 800bab8:	ab01      	add	r3, sp, #4
 800baba:	466a      	mov	r2, sp
 800babc:	f7ff ffc9 	bl	800ba52 <__swhatbuf_r>
 800bac0:	9900      	ldr	r1, [sp, #0]
 800bac2:	4605      	mov	r5, r0
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7fc fe1f 	bl	8008708 <_malloc_r>
 800baca:	b948      	cbnz	r0, 800bae0 <__smakebuf_r+0x44>
 800bacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bad0:	059a      	lsls	r2, r3, #22
 800bad2:	d4ef      	bmi.n	800bab4 <__smakebuf_r+0x18>
 800bad4:	f023 0303 	bic.w	r3, r3, #3
 800bad8:	f043 0302 	orr.w	r3, r3, #2
 800badc:	81a3      	strh	r3, [r4, #12]
 800bade:	e7e3      	b.n	800baa8 <__smakebuf_r+0xc>
 800bae0:	4b0d      	ldr	r3, [pc, #52]	; (800bb18 <__smakebuf_r+0x7c>)
 800bae2:	62b3      	str	r3, [r6, #40]	; 0x28
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	6020      	str	r0, [r4, #0]
 800bae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baec:	81a3      	strh	r3, [r4, #12]
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	6163      	str	r3, [r4, #20]
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	6120      	str	r0, [r4, #16]
 800baf6:	b15b      	cbz	r3, 800bb10 <__smakebuf_r+0x74>
 800baf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bafc:	4630      	mov	r0, r6
 800bafe:	f000 ff81 	bl	800ca04 <_isatty_r>
 800bb02:	b128      	cbz	r0, 800bb10 <__smakebuf_r+0x74>
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f023 0303 	bic.w	r3, r3, #3
 800bb0a:	f043 0301 	orr.w	r3, r3, #1
 800bb0e:	81a3      	strh	r3, [r4, #12]
 800bb10:	89a0      	ldrh	r0, [r4, #12]
 800bb12:	4305      	orrs	r5, r0
 800bb14:	81a5      	strh	r5, [r4, #12]
 800bb16:	e7cd      	b.n	800bab4 <__smakebuf_r+0x18>
 800bb18:	0800b1c5 	.word	0x0800b1c5

0800bb1c <__ascii_mbtowc>:
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	b901      	cbnz	r1, 800bb22 <__ascii_mbtowc+0x6>
 800bb20:	a901      	add	r1, sp, #4
 800bb22:	b142      	cbz	r2, 800bb36 <__ascii_mbtowc+0x1a>
 800bb24:	b14b      	cbz	r3, 800bb3a <__ascii_mbtowc+0x1e>
 800bb26:	7813      	ldrb	r3, [r2, #0]
 800bb28:	600b      	str	r3, [r1, #0]
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	1e10      	subs	r0, r2, #0
 800bb2e:	bf18      	it	ne
 800bb30:	2001      	movne	r0, #1
 800bb32:	b002      	add	sp, #8
 800bb34:	4770      	bx	lr
 800bb36:	4610      	mov	r0, r2
 800bb38:	e7fb      	b.n	800bb32 <__ascii_mbtowc+0x16>
 800bb3a:	f06f 0001 	mvn.w	r0, #1
 800bb3e:	e7f8      	b.n	800bb32 <__ascii_mbtowc+0x16>

0800bb40 <memcpy>:
 800bb40:	440a      	add	r2, r1
 800bb42:	4291      	cmp	r1, r2
 800bb44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bb48:	d100      	bne.n	800bb4c <memcpy+0xc>
 800bb4a:	4770      	bx	lr
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb56:	4291      	cmp	r1, r2
 800bb58:	d1f9      	bne.n	800bb4e <memcpy+0xe>
 800bb5a:	bd10      	pop	{r4, pc}

0800bb5c <memmove>:
 800bb5c:	4288      	cmp	r0, r1
 800bb5e:	b510      	push	{r4, lr}
 800bb60:	eb01 0402 	add.w	r4, r1, r2
 800bb64:	d902      	bls.n	800bb6c <memmove+0x10>
 800bb66:	4284      	cmp	r4, r0
 800bb68:	4623      	mov	r3, r4
 800bb6a:	d807      	bhi.n	800bb7c <memmove+0x20>
 800bb6c:	1e43      	subs	r3, r0, #1
 800bb6e:	42a1      	cmp	r1, r4
 800bb70:	d008      	beq.n	800bb84 <memmove+0x28>
 800bb72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb7a:	e7f8      	b.n	800bb6e <memmove+0x12>
 800bb7c:	4402      	add	r2, r0
 800bb7e:	4601      	mov	r1, r0
 800bb80:	428a      	cmp	r2, r1
 800bb82:	d100      	bne.n	800bb86 <memmove+0x2a>
 800bb84:	bd10      	pop	{r4, pc}
 800bb86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb8e:	e7f7      	b.n	800bb80 <memmove+0x24>

0800bb90 <__malloc_lock>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__malloc_lock+0x8>)
 800bb92:	f7ff bf5c 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800bb96:	bf00      	nop
 800bb98:	20000c28 	.word	0x20000c28

0800bb9c <__malloc_unlock>:
 800bb9c:	4801      	ldr	r0, [pc, #4]	; (800bba4 <__malloc_unlock+0x8>)
 800bb9e:	f7ff bf57 	b.w	800ba50 <__retarget_lock_release_recursive>
 800bba2:	bf00      	nop
 800bba4:	20000c28 	.word	0x20000c28

0800bba8 <_Balloc>:
 800bba8:	b570      	push	{r4, r5, r6, lr}
 800bbaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbac:	4604      	mov	r4, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	b976      	cbnz	r6, 800bbd0 <_Balloc+0x28>
 800bbb2:	2010      	movs	r0, #16
 800bbb4:	f7fc fd48 	bl	8008648 <malloc>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	6260      	str	r0, [r4, #36]	; 0x24
 800bbbc:	b920      	cbnz	r0, 800bbc8 <_Balloc+0x20>
 800bbbe:	4b18      	ldr	r3, [pc, #96]	; (800bc20 <_Balloc+0x78>)
 800bbc0:	4818      	ldr	r0, [pc, #96]	; (800bc24 <_Balloc+0x7c>)
 800bbc2:	2166      	movs	r1, #102	; 0x66
 800bbc4:	f7fc fce2 	bl	800858c <__assert_func>
 800bbc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbcc:	6006      	str	r6, [r0, #0]
 800bbce:	60c6      	str	r6, [r0, #12]
 800bbd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bbd2:	68f3      	ldr	r3, [r6, #12]
 800bbd4:	b183      	cbz	r3, 800bbf8 <_Balloc+0x50>
 800bbd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bbde:	b9b8      	cbnz	r0, 800bc10 <_Balloc+0x68>
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	fa01 f605 	lsl.w	r6, r1, r5
 800bbe6:	1d72      	adds	r2, r6, #5
 800bbe8:	0092      	lsls	r2, r2, #2
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fc97 	bl	800c51e <_calloc_r>
 800bbf0:	b160      	cbz	r0, 800bc0c <_Balloc+0x64>
 800bbf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbf6:	e00e      	b.n	800bc16 <_Balloc+0x6e>
 800bbf8:	2221      	movs	r2, #33	; 0x21
 800bbfa:	2104      	movs	r1, #4
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f000 fc8e 	bl	800c51e <_calloc_r>
 800bc02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc04:	60f0      	str	r0, [r6, #12]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1e4      	bne.n	800bbd6 <_Balloc+0x2e>
 800bc0c:	2000      	movs	r0, #0
 800bc0e:	bd70      	pop	{r4, r5, r6, pc}
 800bc10:	6802      	ldr	r2, [r0, #0]
 800bc12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc16:	2300      	movs	r3, #0
 800bc18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc1c:	e7f7      	b.n	800bc0e <_Balloc+0x66>
 800bc1e:	bf00      	nop
 800bc20:	0800d87d 	.word	0x0800d87d
 800bc24:	0800d9e4 	.word	0x0800d9e4

0800bc28 <_Bfree>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	460c      	mov	r4, r1
 800bc30:	b976      	cbnz	r6, 800bc50 <_Bfree+0x28>
 800bc32:	2010      	movs	r0, #16
 800bc34:	f7fc fd08 	bl	8008648 <malloc>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	6268      	str	r0, [r5, #36]	; 0x24
 800bc3c:	b920      	cbnz	r0, 800bc48 <_Bfree+0x20>
 800bc3e:	4b09      	ldr	r3, [pc, #36]	; (800bc64 <_Bfree+0x3c>)
 800bc40:	4809      	ldr	r0, [pc, #36]	; (800bc68 <_Bfree+0x40>)
 800bc42:	218a      	movs	r1, #138	; 0x8a
 800bc44:	f7fc fca2 	bl	800858c <__assert_func>
 800bc48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc4c:	6006      	str	r6, [r0, #0]
 800bc4e:	60c6      	str	r6, [r0, #12]
 800bc50:	b13c      	cbz	r4, 800bc62 <_Bfree+0x3a>
 800bc52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bc54:	6862      	ldr	r2, [r4, #4]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc5c:	6021      	str	r1, [r4, #0]
 800bc5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	0800d87d 	.word	0x0800d87d
 800bc68:	0800d9e4 	.word	0x0800d9e4

0800bc6c <__multadd>:
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	690e      	ldr	r6, [r1, #16]
 800bc72:	4607      	mov	r7, r0
 800bc74:	4698      	mov	r8, r3
 800bc76:	460c      	mov	r4, r1
 800bc78:	f101 0014 	add.w	r0, r1, #20
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	6805      	ldr	r5, [r0, #0]
 800bc80:	b2a9      	uxth	r1, r5
 800bc82:	fb02 8101 	mla	r1, r2, r1, r8
 800bc86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc8a:	0c2d      	lsrs	r5, r5, #16
 800bc8c:	fb02 c505 	mla	r5, r2, r5, ip
 800bc90:	b289      	uxth	r1, r1
 800bc92:	3301      	adds	r3, #1
 800bc94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc98:	429e      	cmp	r6, r3
 800bc9a:	f840 1b04 	str.w	r1, [r0], #4
 800bc9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bca2:	dcec      	bgt.n	800bc7e <__multadd+0x12>
 800bca4:	f1b8 0f00 	cmp.w	r8, #0
 800bca8:	d022      	beq.n	800bcf0 <__multadd+0x84>
 800bcaa:	68a3      	ldr	r3, [r4, #8]
 800bcac:	42b3      	cmp	r3, r6
 800bcae:	dc19      	bgt.n	800bce4 <__multadd+0x78>
 800bcb0:	6861      	ldr	r1, [r4, #4]
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	3101      	adds	r1, #1
 800bcb6:	f7ff ff77 	bl	800bba8 <_Balloc>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b928      	cbnz	r0, 800bcca <__multadd+0x5e>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	4b0d      	ldr	r3, [pc, #52]	; (800bcf8 <__multadd+0x8c>)
 800bcc2:	480e      	ldr	r0, [pc, #56]	; (800bcfc <__multadd+0x90>)
 800bcc4:	21b5      	movs	r1, #181	; 0xb5
 800bcc6:	f7fc fc61 	bl	800858c <__assert_func>
 800bcca:	6922      	ldr	r2, [r4, #16]
 800bccc:	3202      	adds	r2, #2
 800bcce:	f104 010c 	add.w	r1, r4, #12
 800bcd2:	0092      	lsls	r2, r2, #2
 800bcd4:	300c      	adds	r0, #12
 800bcd6:	f7ff ff33 	bl	800bb40 <memcpy>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff ffa3 	bl	800bc28 <_Bfree>
 800bce2:	462c      	mov	r4, r5
 800bce4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bce8:	3601      	adds	r6, #1
 800bcea:	f8c3 8014 	str.w	r8, [r3, #20]
 800bcee:	6126      	str	r6, [r4, #16]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf6:	bf00      	nop
 800bcf8:	0800d8f3 	.word	0x0800d8f3
 800bcfc:	0800d9e4 	.word	0x0800d9e4

0800bd00 <__s2b>:
 800bd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd04:	460c      	mov	r4, r1
 800bd06:	4615      	mov	r5, r2
 800bd08:	461f      	mov	r7, r3
 800bd0a:	2209      	movs	r2, #9
 800bd0c:	3308      	adds	r3, #8
 800bd0e:	4606      	mov	r6, r0
 800bd10:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd14:	2100      	movs	r1, #0
 800bd16:	2201      	movs	r2, #1
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	db09      	blt.n	800bd30 <__s2b+0x30>
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff ff43 	bl	800bba8 <_Balloc>
 800bd22:	b940      	cbnz	r0, 800bd36 <__s2b+0x36>
 800bd24:	4602      	mov	r2, r0
 800bd26:	4b19      	ldr	r3, [pc, #100]	; (800bd8c <__s2b+0x8c>)
 800bd28:	4819      	ldr	r0, [pc, #100]	; (800bd90 <__s2b+0x90>)
 800bd2a:	21ce      	movs	r1, #206	; 0xce
 800bd2c:	f7fc fc2e 	bl	800858c <__assert_func>
 800bd30:	0052      	lsls	r2, r2, #1
 800bd32:	3101      	adds	r1, #1
 800bd34:	e7f0      	b.n	800bd18 <__s2b+0x18>
 800bd36:	9b08      	ldr	r3, [sp, #32]
 800bd38:	6143      	str	r3, [r0, #20]
 800bd3a:	2d09      	cmp	r5, #9
 800bd3c:	f04f 0301 	mov.w	r3, #1
 800bd40:	6103      	str	r3, [r0, #16]
 800bd42:	dd16      	ble.n	800bd72 <__s2b+0x72>
 800bd44:	f104 0909 	add.w	r9, r4, #9
 800bd48:	46c8      	mov	r8, r9
 800bd4a:	442c      	add	r4, r5
 800bd4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bd50:	4601      	mov	r1, r0
 800bd52:	3b30      	subs	r3, #48	; 0x30
 800bd54:	220a      	movs	r2, #10
 800bd56:	4630      	mov	r0, r6
 800bd58:	f7ff ff88 	bl	800bc6c <__multadd>
 800bd5c:	45a0      	cmp	r8, r4
 800bd5e:	d1f5      	bne.n	800bd4c <__s2b+0x4c>
 800bd60:	f1a5 0408 	sub.w	r4, r5, #8
 800bd64:	444c      	add	r4, r9
 800bd66:	1b2d      	subs	r5, r5, r4
 800bd68:	1963      	adds	r3, r4, r5
 800bd6a:	42bb      	cmp	r3, r7
 800bd6c:	db04      	blt.n	800bd78 <__s2b+0x78>
 800bd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd72:	340a      	adds	r4, #10
 800bd74:	2509      	movs	r5, #9
 800bd76:	e7f6      	b.n	800bd66 <__s2b+0x66>
 800bd78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd7c:	4601      	mov	r1, r0
 800bd7e:	3b30      	subs	r3, #48	; 0x30
 800bd80:	220a      	movs	r2, #10
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7ff ff72 	bl	800bc6c <__multadd>
 800bd88:	e7ee      	b.n	800bd68 <__s2b+0x68>
 800bd8a:	bf00      	nop
 800bd8c:	0800d8f3 	.word	0x0800d8f3
 800bd90:	0800d9e4 	.word	0x0800d9e4

0800bd94 <__hi0bits>:
 800bd94:	0c03      	lsrs	r3, r0, #16
 800bd96:	041b      	lsls	r3, r3, #16
 800bd98:	b9d3      	cbnz	r3, 800bdd0 <__hi0bits+0x3c>
 800bd9a:	0400      	lsls	r0, r0, #16
 800bd9c:	2310      	movs	r3, #16
 800bd9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bda2:	bf04      	itt	eq
 800bda4:	0200      	lsleq	r0, r0, #8
 800bda6:	3308      	addeq	r3, #8
 800bda8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdac:	bf04      	itt	eq
 800bdae:	0100      	lsleq	r0, r0, #4
 800bdb0:	3304      	addeq	r3, #4
 800bdb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdb6:	bf04      	itt	eq
 800bdb8:	0080      	lsleq	r0, r0, #2
 800bdba:	3302      	addeq	r3, #2
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	db05      	blt.n	800bdcc <__hi0bits+0x38>
 800bdc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdc4:	f103 0301 	add.w	r3, r3, #1
 800bdc8:	bf08      	it	eq
 800bdca:	2320      	moveq	r3, #32
 800bdcc:	4618      	mov	r0, r3
 800bdce:	4770      	bx	lr
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	e7e4      	b.n	800bd9e <__hi0bits+0xa>

0800bdd4 <__lo0bits>:
 800bdd4:	6803      	ldr	r3, [r0, #0]
 800bdd6:	f013 0207 	ands.w	r2, r3, #7
 800bdda:	4601      	mov	r1, r0
 800bddc:	d00b      	beq.n	800bdf6 <__lo0bits+0x22>
 800bdde:	07da      	lsls	r2, r3, #31
 800bde0:	d424      	bmi.n	800be2c <__lo0bits+0x58>
 800bde2:	0798      	lsls	r0, r3, #30
 800bde4:	bf49      	itett	mi
 800bde6:	085b      	lsrmi	r3, r3, #1
 800bde8:	089b      	lsrpl	r3, r3, #2
 800bdea:	2001      	movmi	r0, #1
 800bdec:	600b      	strmi	r3, [r1, #0]
 800bdee:	bf5c      	itt	pl
 800bdf0:	600b      	strpl	r3, [r1, #0]
 800bdf2:	2002      	movpl	r0, #2
 800bdf4:	4770      	bx	lr
 800bdf6:	b298      	uxth	r0, r3
 800bdf8:	b9b0      	cbnz	r0, 800be28 <__lo0bits+0x54>
 800bdfa:	0c1b      	lsrs	r3, r3, #16
 800bdfc:	2010      	movs	r0, #16
 800bdfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800be02:	bf04      	itt	eq
 800be04:	0a1b      	lsreq	r3, r3, #8
 800be06:	3008      	addeq	r0, #8
 800be08:	071a      	lsls	r2, r3, #28
 800be0a:	bf04      	itt	eq
 800be0c:	091b      	lsreq	r3, r3, #4
 800be0e:	3004      	addeq	r0, #4
 800be10:	079a      	lsls	r2, r3, #30
 800be12:	bf04      	itt	eq
 800be14:	089b      	lsreq	r3, r3, #2
 800be16:	3002      	addeq	r0, #2
 800be18:	07da      	lsls	r2, r3, #31
 800be1a:	d403      	bmi.n	800be24 <__lo0bits+0x50>
 800be1c:	085b      	lsrs	r3, r3, #1
 800be1e:	f100 0001 	add.w	r0, r0, #1
 800be22:	d005      	beq.n	800be30 <__lo0bits+0x5c>
 800be24:	600b      	str	r3, [r1, #0]
 800be26:	4770      	bx	lr
 800be28:	4610      	mov	r0, r2
 800be2a:	e7e8      	b.n	800bdfe <__lo0bits+0x2a>
 800be2c:	2000      	movs	r0, #0
 800be2e:	4770      	bx	lr
 800be30:	2020      	movs	r0, #32
 800be32:	4770      	bx	lr

0800be34 <__i2b>:
 800be34:	b510      	push	{r4, lr}
 800be36:	460c      	mov	r4, r1
 800be38:	2101      	movs	r1, #1
 800be3a:	f7ff feb5 	bl	800bba8 <_Balloc>
 800be3e:	4602      	mov	r2, r0
 800be40:	b928      	cbnz	r0, 800be4e <__i2b+0x1a>
 800be42:	4b05      	ldr	r3, [pc, #20]	; (800be58 <__i2b+0x24>)
 800be44:	4805      	ldr	r0, [pc, #20]	; (800be5c <__i2b+0x28>)
 800be46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be4a:	f7fc fb9f 	bl	800858c <__assert_func>
 800be4e:	2301      	movs	r3, #1
 800be50:	6144      	str	r4, [r0, #20]
 800be52:	6103      	str	r3, [r0, #16]
 800be54:	bd10      	pop	{r4, pc}
 800be56:	bf00      	nop
 800be58:	0800d8f3 	.word	0x0800d8f3
 800be5c:	0800d9e4 	.word	0x0800d9e4

0800be60 <__multiply>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	4614      	mov	r4, r2
 800be66:	690a      	ldr	r2, [r1, #16]
 800be68:	6923      	ldr	r3, [r4, #16]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	bfb8      	it	lt
 800be6e:	460b      	movlt	r3, r1
 800be70:	460d      	mov	r5, r1
 800be72:	bfbc      	itt	lt
 800be74:	4625      	movlt	r5, r4
 800be76:	461c      	movlt	r4, r3
 800be78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800be7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800be80:	68ab      	ldr	r3, [r5, #8]
 800be82:	6869      	ldr	r1, [r5, #4]
 800be84:	eb0a 0709 	add.w	r7, sl, r9
 800be88:	42bb      	cmp	r3, r7
 800be8a:	b085      	sub	sp, #20
 800be8c:	bfb8      	it	lt
 800be8e:	3101      	addlt	r1, #1
 800be90:	f7ff fe8a 	bl	800bba8 <_Balloc>
 800be94:	b930      	cbnz	r0, 800bea4 <__multiply+0x44>
 800be96:	4602      	mov	r2, r0
 800be98:	4b42      	ldr	r3, [pc, #264]	; (800bfa4 <__multiply+0x144>)
 800be9a:	4843      	ldr	r0, [pc, #268]	; (800bfa8 <__multiply+0x148>)
 800be9c:	f240 115d 	movw	r1, #349	; 0x15d
 800bea0:	f7fc fb74 	bl	800858c <__assert_func>
 800bea4:	f100 0614 	add.w	r6, r0, #20
 800bea8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800beac:	4633      	mov	r3, r6
 800beae:	2200      	movs	r2, #0
 800beb0:	4543      	cmp	r3, r8
 800beb2:	d31e      	bcc.n	800bef2 <__multiply+0x92>
 800beb4:	f105 0c14 	add.w	ip, r5, #20
 800beb8:	f104 0314 	add.w	r3, r4, #20
 800bebc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bec0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bec4:	9202      	str	r2, [sp, #8]
 800bec6:	ebac 0205 	sub.w	r2, ip, r5
 800beca:	3a15      	subs	r2, #21
 800becc:	f022 0203 	bic.w	r2, r2, #3
 800bed0:	3204      	adds	r2, #4
 800bed2:	f105 0115 	add.w	r1, r5, #21
 800bed6:	458c      	cmp	ip, r1
 800bed8:	bf38      	it	cc
 800beda:	2204      	movcc	r2, #4
 800bedc:	9201      	str	r2, [sp, #4]
 800bede:	9a02      	ldr	r2, [sp, #8]
 800bee0:	9303      	str	r3, [sp, #12]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d808      	bhi.n	800bef8 <__multiply+0x98>
 800bee6:	2f00      	cmp	r7, #0
 800bee8:	dc55      	bgt.n	800bf96 <__multiply+0x136>
 800beea:	6107      	str	r7, [r0, #16]
 800beec:	b005      	add	sp, #20
 800beee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef2:	f843 2b04 	str.w	r2, [r3], #4
 800bef6:	e7db      	b.n	800beb0 <__multiply+0x50>
 800bef8:	f8b3 a000 	ldrh.w	sl, [r3]
 800befc:	f1ba 0f00 	cmp.w	sl, #0
 800bf00:	d020      	beq.n	800bf44 <__multiply+0xe4>
 800bf02:	f105 0e14 	add.w	lr, r5, #20
 800bf06:	46b1      	mov	r9, r6
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bf0e:	f8d9 b000 	ldr.w	fp, [r9]
 800bf12:	b2a1      	uxth	r1, r4
 800bf14:	fa1f fb8b 	uxth.w	fp, fp
 800bf18:	fb0a b101 	mla	r1, sl, r1, fp
 800bf1c:	4411      	add	r1, r2
 800bf1e:	f8d9 2000 	ldr.w	r2, [r9]
 800bf22:	0c24      	lsrs	r4, r4, #16
 800bf24:	0c12      	lsrs	r2, r2, #16
 800bf26:	fb0a 2404 	mla	r4, sl, r4, r2
 800bf2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bf2e:	b289      	uxth	r1, r1
 800bf30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bf34:	45f4      	cmp	ip, lr
 800bf36:	f849 1b04 	str.w	r1, [r9], #4
 800bf3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bf3e:	d8e4      	bhi.n	800bf0a <__multiply+0xaa>
 800bf40:	9901      	ldr	r1, [sp, #4]
 800bf42:	5072      	str	r2, [r6, r1]
 800bf44:	9a03      	ldr	r2, [sp, #12]
 800bf46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	f1b9 0f00 	cmp.w	r9, #0
 800bf50:	d01f      	beq.n	800bf92 <__multiply+0x132>
 800bf52:	6834      	ldr	r4, [r6, #0]
 800bf54:	f105 0114 	add.w	r1, r5, #20
 800bf58:	46b6      	mov	lr, r6
 800bf5a:	f04f 0a00 	mov.w	sl, #0
 800bf5e:	880a      	ldrh	r2, [r1, #0]
 800bf60:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bf64:	fb09 b202 	mla	r2, r9, r2, fp
 800bf68:	4492      	add	sl, r2
 800bf6a:	b2a4      	uxth	r4, r4
 800bf6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bf70:	f84e 4b04 	str.w	r4, [lr], #4
 800bf74:	f851 4b04 	ldr.w	r4, [r1], #4
 800bf78:	f8be 2000 	ldrh.w	r2, [lr]
 800bf7c:	0c24      	lsrs	r4, r4, #16
 800bf7e:	fb09 2404 	mla	r4, r9, r4, r2
 800bf82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bf86:	458c      	cmp	ip, r1
 800bf88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bf8c:	d8e7      	bhi.n	800bf5e <__multiply+0xfe>
 800bf8e:	9a01      	ldr	r2, [sp, #4]
 800bf90:	50b4      	str	r4, [r6, r2]
 800bf92:	3604      	adds	r6, #4
 800bf94:	e7a3      	b.n	800bede <__multiply+0x7e>
 800bf96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1a5      	bne.n	800beea <__multiply+0x8a>
 800bf9e:	3f01      	subs	r7, #1
 800bfa0:	e7a1      	b.n	800bee6 <__multiply+0x86>
 800bfa2:	bf00      	nop
 800bfa4:	0800d8f3 	.word	0x0800d8f3
 800bfa8:	0800d9e4 	.word	0x0800d9e4

0800bfac <__pow5mult>:
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	4615      	mov	r5, r2
 800bfb2:	f012 0203 	ands.w	r2, r2, #3
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	460f      	mov	r7, r1
 800bfba:	d007      	beq.n	800bfcc <__pow5mult+0x20>
 800bfbc:	4c25      	ldr	r4, [pc, #148]	; (800c054 <__pow5mult+0xa8>)
 800bfbe:	3a01      	subs	r2, #1
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfc6:	f7ff fe51 	bl	800bc6c <__multadd>
 800bfca:	4607      	mov	r7, r0
 800bfcc:	10ad      	asrs	r5, r5, #2
 800bfce:	d03d      	beq.n	800c04c <__pow5mult+0xa0>
 800bfd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bfd2:	b97c      	cbnz	r4, 800bff4 <__pow5mult+0x48>
 800bfd4:	2010      	movs	r0, #16
 800bfd6:	f7fc fb37 	bl	8008648 <malloc>
 800bfda:	4602      	mov	r2, r0
 800bfdc:	6270      	str	r0, [r6, #36]	; 0x24
 800bfde:	b928      	cbnz	r0, 800bfec <__pow5mult+0x40>
 800bfe0:	4b1d      	ldr	r3, [pc, #116]	; (800c058 <__pow5mult+0xac>)
 800bfe2:	481e      	ldr	r0, [pc, #120]	; (800c05c <__pow5mult+0xb0>)
 800bfe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfe8:	f7fc fad0 	bl	800858c <__assert_func>
 800bfec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bff0:	6004      	str	r4, [r0, #0]
 800bff2:	60c4      	str	r4, [r0, #12]
 800bff4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bff8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bffc:	b94c      	cbnz	r4, 800c012 <__pow5mult+0x66>
 800bffe:	f240 2171 	movw	r1, #625	; 0x271
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ff16 	bl	800be34 <__i2b>
 800c008:	2300      	movs	r3, #0
 800c00a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c00e:	4604      	mov	r4, r0
 800c010:	6003      	str	r3, [r0, #0]
 800c012:	f04f 0900 	mov.w	r9, #0
 800c016:	07eb      	lsls	r3, r5, #31
 800c018:	d50a      	bpl.n	800c030 <__pow5mult+0x84>
 800c01a:	4639      	mov	r1, r7
 800c01c:	4622      	mov	r2, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	f7ff ff1e 	bl	800be60 <__multiply>
 800c024:	4639      	mov	r1, r7
 800c026:	4680      	mov	r8, r0
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff fdfd 	bl	800bc28 <_Bfree>
 800c02e:	4647      	mov	r7, r8
 800c030:	106d      	asrs	r5, r5, #1
 800c032:	d00b      	beq.n	800c04c <__pow5mult+0xa0>
 800c034:	6820      	ldr	r0, [r4, #0]
 800c036:	b938      	cbnz	r0, 800c048 <__pow5mult+0x9c>
 800c038:	4622      	mov	r2, r4
 800c03a:	4621      	mov	r1, r4
 800c03c:	4630      	mov	r0, r6
 800c03e:	f7ff ff0f 	bl	800be60 <__multiply>
 800c042:	6020      	str	r0, [r4, #0]
 800c044:	f8c0 9000 	str.w	r9, [r0]
 800c048:	4604      	mov	r4, r0
 800c04a:	e7e4      	b.n	800c016 <__pow5mult+0x6a>
 800c04c:	4638      	mov	r0, r7
 800c04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c052:	bf00      	nop
 800c054:	0800db38 	.word	0x0800db38
 800c058:	0800d87d 	.word	0x0800d87d
 800c05c:	0800d9e4 	.word	0x0800d9e4

0800c060 <__lshift>:
 800c060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c064:	460c      	mov	r4, r1
 800c066:	6849      	ldr	r1, [r1, #4]
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c06e:	68a3      	ldr	r3, [r4, #8]
 800c070:	4607      	mov	r7, r0
 800c072:	4691      	mov	r9, r2
 800c074:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c078:	f108 0601 	add.w	r6, r8, #1
 800c07c:	42b3      	cmp	r3, r6
 800c07e:	db0b      	blt.n	800c098 <__lshift+0x38>
 800c080:	4638      	mov	r0, r7
 800c082:	f7ff fd91 	bl	800bba8 <_Balloc>
 800c086:	4605      	mov	r5, r0
 800c088:	b948      	cbnz	r0, 800c09e <__lshift+0x3e>
 800c08a:	4602      	mov	r2, r0
 800c08c:	4b28      	ldr	r3, [pc, #160]	; (800c130 <__lshift+0xd0>)
 800c08e:	4829      	ldr	r0, [pc, #164]	; (800c134 <__lshift+0xd4>)
 800c090:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c094:	f7fc fa7a 	bl	800858c <__assert_func>
 800c098:	3101      	adds	r1, #1
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	e7ee      	b.n	800c07c <__lshift+0x1c>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f100 0114 	add.w	r1, r0, #20
 800c0a4:	f100 0210 	add.w	r2, r0, #16
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	4553      	cmp	r3, sl
 800c0ac:	db33      	blt.n	800c116 <__lshift+0xb6>
 800c0ae:	6920      	ldr	r0, [r4, #16]
 800c0b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0b4:	f104 0314 	add.w	r3, r4, #20
 800c0b8:	f019 091f 	ands.w	r9, r9, #31
 800c0bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0c4:	d02b      	beq.n	800c11e <__lshift+0xbe>
 800c0c6:	f1c9 0e20 	rsb	lr, r9, #32
 800c0ca:	468a      	mov	sl, r1
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	6818      	ldr	r0, [r3, #0]
 800c0d0:	fa00 f009 	lsl.w	r0, r0, r9
 800c0d4:	4302      	orrs	r2, r0
 800c0d6:	f84a 2b04 	str.w	r2, [sl], #4
 800c0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0de:	459c      	cmp	ip, r3
 800c0e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0e4:	d8f3      	bhi.n	800c0ce <__lshift+0x6e>
 800c0e6:	ebac 0304 	sub.w	r3, ip, r4
 800c0ea:	3b15      	subs	r3, #21
 800c0ec:	f023 0303 	bic.w	r3, r3, #3
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	f104 0015 	add.w	r0, r4, #21
 800c0f6:	4584      	cmp	ip, r0
 800c0f8:	bf38      	it	cc
 800c0fa:	2304      	movcc	r3, #4
 800c0fc:	50ca      	str	r2, [r1, r3]
 800c0fe:	b10a      	cbz	r2, 800c104 <__lshift+0xa4>
 800c100:	f108 0602 	add.w	r6, r8, #2
 800c104:	3e01      	subs	r6, #1
 800c106:	4638      	mov	r0, r7
 800c108:	612e      	str	r6, [r5, #16]
 800c10a:	4621      	mov	r1, r4
 800c10c:	f7ff fd8c 	bl	800bc28 <_Bfree>
 800c110:	4628      	mov	r0, r5
 800c112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c116:	f842 0f04 	str.w	r0, [r2, #4]!
 800c11a:	3301      	adds	r3, #1
 800c11c:	e7c5      	b.n	800c0aa <__lshift+0x4a>
 800c11e:	3904      	subs	r1, #4
 800c120:	f853 2b04 	ldr.w	r2, [r3], #4
 800c124:	f841 2f04 	str.w	r2, [r1, #4]!
 800c128:	459c      	cmp	ip, r3
 800c12a:	d8f9      	bhi.n	800c120 <__lshift+0xc0>
 800c12c:	e7ea      	b.n	800c104 <__lshift+0xa4>
 800c12e:	bf00      	nop
 800c130:	0800d8f3 	.word	0x0800d8f3
 800c134:	0800d9e4 	.word	0x0800d9e4

0800c138 <__mcmp>:
 800c138:	b530      	push	{r4, r5, lr}
 800c13a:	6902      	ldr	r2, [r0, #16]
 800c13c:	690c      	ldr	r4, [r1, #16]
 800c13e:	1b12      	subs	r2, r2, r4
 800c140:	d10e      	bne.n	800c160 <__mcmp+0x28>
 800c142:	f100 0314 	add.w	r3, r0, #20
 800c146:	3114      	adds	r1, #20
 800c148:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c14c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c150:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c154:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c158:	42a5      	cmp	r5, r4
 800c15a:	d003      	beq.n	800c164 <__mcmp+0x2c>
 800c15c:	d305      	bcc.n	800c16a <__mcmp+0x32>
 800c15e:	2201      	movs	r2, #1
 800c160:	4610      	mov	r0, r2
 800c162:	bd30      	pop	{r4, r5, pc}
 800c164:	4283      	cmp	r3, r0
 800c166:	d3f3      	bcc.n	800c150 <__mcmp+0x18>
 800c168:	e7fa      	b.n	800c160 <__mcmp+0x28>
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c16e:	e7f7      	b.n	800c160 <__mcmp+0x28>

0800c170 <__mdiff>:
 800c170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	460c      	mov	r4, r1
 800c176:	4606      	mov	r6, r0
 800c178:	4611      	mov	r1, r2
 800c17a:	4620      	mov	r0, r4
 800c17c:	4617      	mov	r7, r2
 800c17e:	f7ff ffdb 	bl	800c138 <__mcmp>
 800c182:	1e05      	subs	r5, r0, #0
 800c184:	d110      	bne.n	800c1a8 <__mdiff+0x38>
 800c186:	4629      	mov	r1, r5
 800c188:	4630      	mov	r0, r6
 800c18a:	f7ff fd0d 	bl	800bba8 <_Balloc>
 800c18e:	b930      	cbnz	r0, 800c19e <__mdiff+0x2e>
 800c190:	4b39      	ldr	r3, [pc, #228]	; (800c278 <__mdiff+0x108>)
 800c192:	4602      	mov	r2, r0
 800c194:	f240 2132 	movw	r1, #562	; 0x232
 800c198:	4838      	ldr	r0, [pc, #224]	; (800c27c <__mdiff+0x10c>)
 800c19a:	f7fc f9f7 	bl	800858c <__assert_func>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a8:	bfa4      	itt	ge
 800c1aa:	463b      	movge	r3, r7
 800c1ac:	4627      	movge	r7, r4
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	6879      	ldr	r1, [r7, #4]
 800c1b2:	bfa6      	itte	ge
 800c1b4:	461c      	movge	r4, r3
 800c1b6:	2500      	movge	r5, #0
 800c1b8:	2501      	movlt	r5, #1
 800c1ba:	f7ff fcf5 	bl	800bba8 <_Balloc>
 800c1be:	b920      	cbnz	r0, 800c1ca <__mdiff+0x5a>
 800c1c0:	4b2d      	ldr	r3, [pc, #180]	; (800c278 <__mdiff+0x108>)
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1c8:	e7e6      	b.n	800c198 <__mdiff+0x28>
 800c1ca:	693e      	ldr	r6, [r7, #16]
 800c1cc:	60c5      	str	r5, [r0, #12]
 800c1ce:	6925      	ldr	r5, [r4, #16]
 800c1d0:	f107 0114 	add.w	r1, r7, #20
 800c1d4:	f104 0914 	add.w	r9, r4, #20
 800c1d8:	f100 0e14 	add.w	lr, r0, #20
 800c1dc:	f107 0210 	add.w	r2, r7, #16
 800c1e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c1e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c1e8:	46f2      	mov	sl, lr
 800c1ea:	2700      	movs	r7, #0
 800c1ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1f4:	fa1f f883 	uxth.w	r8, r3
 800c1f8:	fa17 f78b 	uxtah	r7, r7, fp
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	eba7 0808 	sub.w	r8, r7, r8
 800c202:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c206:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c20a:	fa1f f888 	uxth.w	r8, r8
 800c20e:	141f      	asrs	r7, r3, #16
 800c210:	454d      	cmp	r5, r9
 800c212:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c216:	f84a 3b04 	str.w	r3, [sl], #4
 800c21a:	d8e7      	bhi.n	800c1ec <__mdiff+0x7c>
 800c21c:	1b2b      	subs	r3, r5, r4
 800c21e:	3b15      	subs	r3, #21
 800c220:	f023 0303 	bic.w	r3, r3, #3
 800c224:	3304      	adds	r3, #4
 800c226:	3415      	adds	r4, #21
 800c228:	42a5      	cmp	r5, r4
 800c22a:	bf38      	it	cc
 800c22c:	2304      	movcc	r3, #4
 800c22e:	4419      	add	r1, r3
 800c230:	4473      	add	r3, lr
 800c232:	469e      	mov	lr, r3
 800c234:	460d      	mov	r5, r1
 800c236:	4565      	cmp	r5, ip
 800c238:	d30e      	bcc.n	800c258 <__mdiff+0xe8>
 800c23a:	f10c 0203 	add.w	r2, ip, #3
 800c23e:	1a52      	subs	r2, r2, r1
 800c240:	f022 0203 	bic.w	r2, r2, #3
 800c244:	3903      	subs	r1, #3
 800c246:	458c      	cmp	ip, r1
 800c248:	bf38      	it	cc
 800c24a:	2200      	movcc	r2, #0
 800c24c:	441a      	add	r2, r3
 800c24e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c252:	b17b      	cbz	r3, 800c274 <__mdiff+0x104>
 800c254:	6106      	str	r6, [r0, #16]
 800c256:	e7a5      	b.n	800c1a4 <__mdiff+0x34>
 800c258:	f855 8b04 	ldr.w	r8, [r5], #4
 800c25c:	fa17 f488 	uxtah	r4, r7, r8
 800c260:	1422      	asrs	r2, r4, #16
 800c262:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c266:	b2a4      	uxth	r4, r4
 800c268:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c26c:	f84e 4b04 	str.w	r4, [lr], #4
 800c270:	1417      	asrs	r7, r2, #16
 800c272:	e7e0      	b.n	800c236 <__mdiff+0xc6>
 800c274:	3e01      	subs	r6, #1
 800c276:	e7ea      	b.n	800c24e <__mdiff+0xde>
 800c278:	0800d8f3 	.word	0x0800d8f3
 800c27c:	0800d9e4 	.word	0x0800d9e4

0800c280 <__ulp>:
 800c280:	b082      	sub	sp, #8
 800c282:	ed8d 0b00 	vstr	d0, [sp]
 800c286:	9b01      	ldr	r3, [sp, #4]
 800c288:	4912      	ldr	r1, [pc, #72]	; (800c2d4 <__ulp+0x54>)
 800c28a:	4019      	ands	r1, r3
 800c28c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c290:	2900      	cmp	r1, #0
 800c292:	dd05      	ble.n	800c2a0 <__ulp+0x20>
 800c294:	2200      	movs	r2, #0
 800c296:	460b      	mov	r3, r1
 800c298:	ec43 2b10 	vmov	d0, r2, r3
 800c29c:	b002      	add	sp, #8
 800c29e:	4770      	bx	lr
 800c2a0:	4249      	negs	r1, r1
 800c2a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c2a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	da04      	bge.n	800c2be <__ulp+0x3e>
 800c2b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c2b8:	fa41 f300 	asr.w	r3, r1, r0
 800c2bc:	e7ec      	b.n	800c298 <__ulp+0x18>
 800c2be:	f1a0 0114 	sub.w	r1, r0, #20
 800c2c2:	291e      	cmp	r1, #30
 800c2c4:	bfda      	itte	le
 800c2c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c2ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800c2ce:	2101      	movgt	r1, #1
 800c2d0:	460a      	mov	r2, r1
 800c2d2:	e7e1      	b.n	800c298 <__ulp+0x18>
 800c2d4:	7ff00000 	.word	0x7ff00000

0800c2d8 <__b2d>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	6905      	ldr	r5, [r0, #16]
 800c2dc:	f100 0714 	add.w	r7, r0, #20
 800c2e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c2e4:	1f2e      	subs	r6, r5, #4
 800c2e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f7ff fd52 	bl	800bd94 <__hi0bits>
 800c2f0:	f1c0 0320 	rsb	r3, r0, #32
 800c2f4:	280a      	cmp	r0, #10
 800c2f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c374 <__b2d+0x9c>
 800c2fa:	600b      	str	r3, [r1, #0]
 800c2fc:	dc14      	bgt.n	800c328 <__b2d+0x50>
 800c2fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800c302:	fa24 f10e 	lsr.w	r1, r4, lr
 800c306:	42b7      	cmp	r7, r6
 800c308:	ea41 030c 	orr.w	r3, r1, ip
 800c30c:	bf34      	ite	cc
 800c30e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c312:	2100      	movcs	r1, #0
 800c314:	3015      	adds	r0, #21
 800c316:	fa04 f000 	lsl.w	r0, r4, r0
 800c31a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c31e:	ea40 0201 	orr.w	r2, r0, r1
 800c322:	ec43 2b10 	vmov	d0, r2, r3
 800c326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c328:	42b7      	cmp	r7, r6
 800c32a:	bf3a      	itte	cc
 800c32c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c330:	f1a5 0608 	subcc.w	r6, r5, #8
 800c334:	2100      	movcs	r1, #0
 800c336:	380b      	subs	r0, #11
 800c338:	d017      	beq.n	800c36a <__b2d+0x92>
 800c33a:	f1c0 0c20 	rsb	ip, r0, #32
 800c33e:	fa04 f500 	lsl.w	r5, r4, r0
 800c342:	42be      	cmp	r6, r7
 800c344:	fa21 f40c 	lsr.w	r4, r1, ip
 800c348:	ea45 0504 	orr.w	r5, r5, r4
 800c34c:	bf8c      	ite	hi
 800c34e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c352:	2400      	movls	r4, #0
 800c354:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c358:	fa01 f000 	lsl.w	r0, r1, r0
 800c35c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c360:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c364:	ea40 0204 	orr.w	r2, r0, r4
 800c368:	e7db      	b.n	800c322 <__b2d+0x4a>
 800c36a:	ea44 030c 	orr.w	r3, r4, ip
 800c36e:	460a      	mov	r2, r1
 800c370:	e7d7      	b.n	800c322 <__b2d+0x4a>
 800c372:	bf00      	nop
 800c374:	3ff00000 	.word	0x3ff00000

0800c378 <__d2b>:
 800c378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c37c:	4689      	mov	r9, r1
 800c37e:	2101      	movs	r1, #1
 800c380:	ec57 6b10 	vmov	r6, r7, d0
 800c384:	4690      	mov	r8, r2
 800c386:	f7ff fc0f 	bl	800bba8 <_Balloc>
 800c38a:	4604      	mov	r4, r0
 800c38c:	b930      	cbnz	r0, 800c39c <__d2b+0x24>
 800c38e:	4602      	mov	r2, r0
 800c390:	4b25      	ldr	r3, [pc, #148]	; (800c428 <__d2b+0xb0>)
 800c392:	4826      	ldr	r0, [pc, #152]	; (800c42c <__d2b+0xb4>)
 800c394:	f240 310a 	movw	r1, #778	; 0x30a
 800c398:	f7fc f8f8 	bl	800858c <__assert_func>
 800c39c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c3a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3a4:	bb35      	cbnz	r5, 800c3f4 <__d2b+0x7c>
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	9301      	str	r3, [sp, #4]
 800c3aa:	d028      	beq.n	800c3fe <__d2b+0x86>
 800c3ac:	4668      	mov	r0, sp
 800c3ae:	9600      	str	r6, [sp, #0]
 800c3b0:	f7ff fd10 	bl	800bdd4 <__lo0bits>
 800c3b4:	9900      	ldr	r1, [sp, #0]
 800c3b6:	b300      	cbz	r0, 800c3fa <__d2b+0x82>
 800c3b8:	9a01      	ldr	r2, [sp, #4]
 800c3ba:	f1c0 0320 	rsb	r3, r0, #32
 800c3be:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c2:	430b      	orrs	r3, r1
 800c3c4:	40c2      	lsrs	r2, r0
 800c3c6:	6163      	str	r3, [r4, #20]
 800c3c8:	9201      	str	r2, [sp, #4]
 800c3ca:	9b01      	ldr	r3, [sp, #4]
 800c3cc:	61a3      	str	r3, [r4, #24]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bf14      	ite	ne
 800c3d2:	2202      	movne	r2, #2
 800c3d4:	2201      	moveq	r2, #1
 800c3d6:	6122      	str	r2, [r4, #16]
 800c3d8:	b1d5      	cbz	r5, 800c410 <__d2b+0x98>
 800c3da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c3de:	4405      	add	r5, r0
 800c3e0:	f8c9 5000 	str.w	r5, [r9]
 800c3e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3e8:	f8c8 0000 	str.w	r0, [r8]
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	b003      	add	sp, #12
 800c3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3f8:	e7d5      	b.n	800c3a6 <__d2b+0x2e>
 800c3fa:	6161      	str	r1, [r4, #20]
 800c3fc:	e7e5      	b.n	800c3ca <__d2b+0x52>
 800c3fe:	a801      	add	r0, sp, #4
 800c400:	f7ff fce8 	bl	800bdd4 <__lo0bits>
 800c404:	9b01      	ldr	r3, [sp, #4]
 800c406:	6163      	str	r3, [r4, #20]
 800c408:	2201      	movs	r2, #1
 800c40a:	6122      	str	r2, [r4, #16]
 800c40c:	3020      	adds	r0, #32
 800c40e:	e7e3      	b.n	800c3d8 <__d2b+0x60>
 800c410:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c418:	f8c9 0000 	str.w	r0, [r9]
 800c41c:	6918      	ldr	r0, [r3, #16]
 800c41e:	f7ff fcb9 	bl	800bd94 <__hi0bits>
 800c422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c426:	e7df      	b.n	800c3e8 <__d2b+0x70>
 800c428:	0800d8f3 	.word	0x0800d8f3
 800c42c:	0800d9e4 	.word	0x0800d9e4

0800c430 <__ratio>:
 800c430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c434:	4688      	mov	r8, r1
 800c436:	4669      	mov	r1, sp
 800c438:	4681      	mov	r9, r0
 800c43a:	f7ff ff4d 	bl	800c2d8 <__b2d>
 800c43e:	a901      	add	r1, sp, #4
 800c440:	4640      	mov	r0, r8
 800c442:	ec55 4b10 	vmov	r4, r5, d0
 800c446:	f7ff ff47 	bl	800c2d8 <__b2d>
 800c44a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c44e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c452:	eba3 0c02 	sub.w	ip, r3, r2
 800c456:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c45a:	1a9b      	subs	r3, r3, r2
 800c45c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c460:	ec51 0b10 	vmov	r0, r1, d0
 800c464:	2b00      	cmp	r3, #0
 800c466:	bfd6      	itet	le
 800c468:	460a      	movle	r2, r1
 800c46a:	462a      	movgt	r2, r5
 800c46c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c470:	468b      	mov	fp, r1
 800c472:	462f      	mov	r7, r5
 800c474:	bfd4      	ite	le
 800c476:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c47a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c47e:	4620      	mov	r0, r4
 800c480:	ee10 2a10 	vmov	r2, s0
 800c484:	465b      	mov	r3, fp
 800c486:	4639      	mov	r1, r7
 800c488:	f7f4 fa08 	bl	800089c <__aeabi_ddiv>
 800c48c:	ec41 0b10 	vmov	d0, r0, r1
 800c490:	b003      	add	sp, #12
 800c492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c496 <__copybits>:
 800c496:	3901      	subs	r1, #1
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	1149      	asrs	r1, r1, #5
 800c49c:	6914      	ldr	r4, [r2, #16]
 800c49e:	3101      	adds	r1, #1
 800c4a0:	f102 0314 	add.w	r3, r2, #20
 800c4a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c4a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c4ac:	1f05      	subs	r5, r0, #4
 800c4ae:	42a3      	cmp	r3, r4
 800c4b0:	d30c      	bcc.n	800c4cc <__copybits+0x36>
 800c4b2:	1aa3      	subs	r3, r4, r2
 800c4b4:	3b11      	subs	r3, #17
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	3211      	adds	r2, #17
 800c4bc:	42a2      	cmp	r2, r4
 800c4be:	bf88      	it	hi
 800c4c0:	2300      	movhi	r3, #0
 800c4c2:	4418      	add	r0, r3
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4288      	cmp	r0, r1
 800c4c8:	d305      	bcc.n	800c4d6 <__copybits+0x40>
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
 800c4cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800c4d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800c4d4:	e7eb      	b.n	800c4ae <__copybits+0x18>
 800c4d6:	f840 3b04 	str.w	r3, [r0], #4
 800c4da:	e7f4      	b.n	800c4c6 <__copybits+0x30>

0800c4dc <__any_on>:
 800c4dc:	f100 0214 	add.w	r2, r0, #20
 800c4e0:	6900      	ldr	r0, [r0, #16]
 800c4e2:	114b      	asrs	r3, r1, #5
 800c4e4:	4298      	cmp	r0, r3
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	db11      	blt.n	800c50e <__any_on+0x32>
 800c4ea:	dd0a      	ble.n	800c502 <__any_on+0x26>
 800c4ec:	f011 011f 	ands.w	r1, r1, #31
 800c4f0:	d007      	beq.n	800c502 <__any_on+0x26>
 800c4f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c4f6:	fa24 f001 	lsr.w	r0, r4, r1
 800c4fa:	fa00 f101 	lsl.w	r1, r0, r1
 800c4fe:	428c      	cmp	r4, r1
 800c500:	d10b      	bne.n	800c51a <__any_on+0x3e>
 800c502:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c506:	4293      	cmp	r3, r2
 800c508:	d803      	bhi.n	800c512 <__any_on+0x36>
 800c50a:	2000      	movs	r0, #0
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	4603      	mov	r3, r0
 800c510:	e7f7      	b.n	800c502 <__any_on+0x26>
 800c512:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c516:	2900      	cmp	r1, #0
 800c518:	d0f5      	beq.n	800c506 <__any_on+0x2a>
 800c51a:	2001      	movs	r0, #1
 800c51c:	e7f6      	b.n	800c50c <__any_on+0x30>

0800c51e <_calloc_r>:
 800c51e:	b513      	push	{r0, r1, r4, lr}
 800c520:	434a      	muls	r2, r1
 800c522:	4611      	mov	r1, r2
 800c524:	9201      	str	r2, [sp, #4]
 800c526:	f7fc f8ef 	bl	8008708 <_malloc_r>
 800c52a:	4604      	mov	r4, r0
 800c52c:	b118      	cbz	r0, 800c536 <_calloc_r+0x18>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	2100      	movs	r1, #0
 800c532:	f7fc f891 	bl	8008658 <memset>
 800c536:	4620      	mov	r0, r4
 800c538:	b002      	add	sp, #8
 800c53a:	bd10      	pop	{r4, pc}

0800c53c <_realloc_r>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	4607      	mov	r7, r0
 800c540:	4614      	mov	r4, r2
 800c542:	460e      	mov	r6, r1
 800c544:	b921      	cbnz	r1, 800c550 <_realloc_r+0x14>
 800c546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c54a:	4611      	mov	r1, r2
 800c54c:	f7fc b8dc 	b.w	8008708 <_malloc_r>
 800c550:	b922      	cbnz	r2, 800c55c <_realloc_r+0x20>
 800c552:	f7fc f889 	bl	8008668 <_free_r>
 800c556:	4625      	mov	r5, r4
 800c558:	4628      	mov	r0, r5
 800c55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c55c:	f000 fa74 	bl	800ca48 <_malloc_usable_size_r>
 800c560:	42a0      	cmp	r0, r4
 800c562:	d20f      	bcs.n	800c584 <_realloc_r+0x48>
 800c564:	4621      	mov	r1, r4
 800c566:	4638      	mov	r0, r7
 800c568:	f7fc f8ce 	bl	8008708 <_malloc_r>
 800c56c:	4605      	mov	r5, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d0f2      	beq.n	800c558 <_realloc_r+0x1c>
 800c572:	4631      	mov	r1, r6
 800c574:	4622      	mov	r2, r4
 800c576:	f7ff fae3 	bl	800bb40 <memcpy>
 800c57a:	4631      	mov	r1, r6
 800c57c:	4638      	mov	r0, r7
 800c57e:	f7fc f873 	bl	8008668 <_free_r>
 800c582:	e7e9      	b.n	800c558 <_realloc_r+0x1c>
 800c584:	4635      	mov	r5, r6
 800c586:	e7e7      	b.n	800c558 <_realloc_r+0x1c>

0800c588 <__ssputs_r>:
 800c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	688e      	ldr	r6, [r1, #8]
 800c58e:	429e      	cmp	r6, r3
 800c590:	4682      	mov	sl, r0
 800c592:	460c      	mov	r4, r1
 800c594:	4690      	mov	r8, r2
 800c596:	461f      	mov	r7, r3
 800c598:	d838      	bhi.n	800c60c <__ssputs_r+0x84>
 800c59a:	898a      	ldrh	r2, [r1, #12]
 800c59c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5a0:	d032      	beq.n	800c608 <__ssputs_r+0x80>
 800c5a2:	6825      	ldr	r5, [r4, #0]
 800c5a4:	6909      	ldr	r1, [r1, #16]
 800c5a6:	eba5 0901 	sub.w	r9, r5, r1
 800c5aa:	6965      	ldr	r5, [r4, #20]
 800c5ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	444b      	add	r3, r9
 800c5b8:	106d      	asrs	r5, r5, #1
 800c5ba:	429d      	cmp	r5, r3
 800c5bc:	bf38      	it	cc
 800c5be:	461d      	movcc	r5, r3
 800c5c0:	0553      	lsls	r3, r2, #21
 800c5c2:	d531      	bpl.n	800c628 <__ssputs_r+0xa0>
 800c5c4:	4629      	mov	r1, r5
 800c5c6:	f7fc f89f 	bl	8008708 <_malloc_r>
 800c5ca:	4606      	mov	r6, r0
 800c5cc:	b950      	cbnz	r0, 800c5e4 <__ssputs_r+0x5c>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	f8ca 3000 	str.w	r3, [sl]
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e4:	6921      	ldr	r1, [r4, #16]
 800c5e6:	464a      	mov	r2, r9
 800c5e8:	f7ff faaa 	bl	800bb40 <memcpy>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f6:	81a3      	strh	r3, [r4, #12]
 800c5f8:	6126      	str	r6, [r4, #16]
 800c5fa:	6165      	str	r5, [r4, #20]
 800c5fc:	444e      	add	r6, r9
 800c5fe:	eba5 0509 	sub.w	r5, r5, r9
 800c602:	6026      	str	r6, [r4, #0]
 800c604:	60a5      	str	r5, [r4, #8]
 800c606:	463e      	mov	r6, r7
 800c608:	42be      	cmp	r6, r7
 800c60a:	d900      	bls.n	800c60e <__ssputs_r+0x86>
 800c60c:	463e      	mov	r6, r7
 800c60e:	4632      	mov	r2, r6
 800c610:	6820      	ldr	r0, [r4, #0]
 800c612:	4641      	mov	r1, r8
 800c614:	f7ff faa2 	bl	800bb5c <memmove>
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	6822      	ldr	r2, [r4, #0]
 800c61c:	1b9b      	subs	r3, r3, r6
 800c61e:	4432      	add	r2, r6
 800c620:	60a3      	str	r3, [r4, #8]
 800c622:	6022      	str	r2, [r4, #0]
 800c624:	2000      	movs	r0, #0
 800c626:	e7db      	b.n	800c5e0 <__ssputs_r+0x58>
 800c628:	462a      	mov	r2, r5
 800c62a:	f7ff ff87 	bl	800c53c <_realloc_r>
 800c62e:	4606      	mov	r6, r0
 800c630:	2800      	cmp	r0, #0
 800c632:	d1e1      	bne.n	800c5f8 <__ssputs_r+0x70>
 800c634:	6921      	ldr	r1, [r4, #16]
 800c636:	4650      	mov	r0, sl
 800c638:	f7fc f816 	bl	8008668 <_free_r>
 800c63c:	e7c7      	b.n	800c5ce <__ssputs_r+0x46>
	...

0800c640 <_svfiprintf_r>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	4698      	mov	r8, r3
 800c646:	898b      	ldrh	r3, [r1, #12]
 800c648:	061b      	lsls	r3, r3, #24
 800c64a:	b09d      	sub	sp, #116	; 0x74
 800c64c:	4607      	mov	r7, r0
 800c64e:	460d      	mov	r5, r1
 800c650:	4614      	mov	r4, r2
 800c652:	d50e      	bpl.n	800c672 <_svfiprintf_r+0x32>
 800c654:	690b      	ldr	r3, [r1, #16]
 800c656:	b963      	cbnz	r3, 800c672 <_svfiprintf_r+0x32>
 800c658:	2140      	movs	r1, #64	; 0x40
 800c65a:	f7fc f855 	bl	8008708 <_malloc_r>
 800c65e:	6028      	str	r0, [r5, #0]
 800c660:	6128      	str	r0, [r5, #16]
 800c662:	b920      	cbnz	r0, 800c66e <_svfiprintf_r+0x2e>
 800c664:	230c      	movs	r3, #12
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66c:	e0d1      	b.n	800c812 <_svfiprintf_r+0x1d2>
 800c66e:	2340      	movs	r3, #64	; 0x40
 800c670:	616b      	str	r3, [r5, #20]
 800c672:	2300      	movs	r3, #0
 800c674:	9309      	str	r3, [sp, #36]	; 0x24
 800c676:	2320      	movs	r3, #32
 800c678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c67c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c680:	2330      	movs	r3, #48	; 0x30
 800c682:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c82c <_svfiprintf_r+0x1ec>
 800c686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c68a:	f04f 0901 	mov.w	r9, #1
 800c68e:	4623      	mov	r3, r4
 800c690:	469a      	mov	sl, r3
 800c692:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c696:	b10a      	cbz	r2, 800c69c <_svfiprintf_r+0x5c>
 800c698:	2a25      	cmp	r2, #37	; 0x25
 800c69a:	d1f9      	bne.n	800c690 <_svfiprintf_r+0x50>
 800c69c:	ebba 0b04 	subs.w	fp, sl, r4
 800c6a0:	d00b      	beq.n	800c6ba <_svfiprintf_r+0x7a>
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff ff6d 	bl	800c588 <__ssputs_r>
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	f000 80aa 	beq.w	800c808 <_svfiprintf_r+0x1c8>
 800c6b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b6:	445a      	add	r2, fp
 800c6b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f000 80a2 	beq.w	800c808 <_svfiprintf_r+0x1c8>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ce:	f10a 0a01 	add.w	sl, sl, #1
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	9307      	str	r3, [sp, #28]
 800c6d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6da:	931a      	str	r3, [sp, #104]	; 0x68
 800c6dc:	4654      	mov	r4, sl
 800c6de:	2205      	movs	r2, #5
 800c6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e4:	4851      	ldr	r0, [pc, #324]	; (800c82c <_svfiprintf_r+0x1ec>)
 800c6e6:	f7f3 fda3 	bl	8000230 <memchr>
 800c6ea:	9a04      	ldr	r2, [sp, #16]
 800c6ec:	b9d8      	cbnz	r0, 800c726 <_svfiprintf_r+0xe6>
 800c6ee:	06d0      	lsls	r0, r2, #27
 800c6f0:	bf44      	itt	mi
 800c6f2:	2320      	movmi	r3, #32
 800c6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f8:	0711      	lsls	r1, r2, #28
 800c6fa:	bf44      	itt	mi
 800c6fc:	232b      	movmi	r3, #43	; 0x2b
 800c6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b2a      	cmp	r3, #42	; 0x2a
 800c708:	d015      	beq.n	800c736 <_svfiprintf_r+0xf6>
 800c70a:	9a07      	ldr	r2, [sp, #28]
 800c70c:	4654      	mov	r4, sl
 800c70e:	2000      	movs	r0, #0
 800c710:	f04f 0c0a 	mov.w	ip, #10
 800c714:	4621      	mov	r1, r4
 800c716:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c71a:	3b30      	subs	r3, #48	; 0x30
 800c71c:	2b09      	cmp	r3, #9
 800c71e:	d94e      	bls.n	800c7be <_svfiprintf_r+0x17e>
 800c720:	b1b0      	cbz	r0, 800c750 <_svfiprintf_r+0x110>
 800c722:	9207      	str	r2, [sp, #28]
 800c724:	e014      	b.n	800c750 <_svfiprintf_r+0x110>
 800c726:	eba0 0308 	sub.w	r3, r0, r8
 800c72a:	fa09 f303 	lsl.w	r3, r9, r3
 800c72e:	4313      	orrs	r3, r2
 800c730:	9304      	str	r3, [sp, #16]
 800c732:	46a2      	mov	sl, r4
 800c734:	e7d2      	b.n	800c6dc <_svfiprintf_r+0x9c>
 800c736:	9b03      	ldr	r3, [sp, #12]
 800c738:	1d19      	adds	r1, r3, #4
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	9103      	str	r1, [sp, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	bfbb      	ittet	lt
 800c742:	425b      	neglt	r3, r3
 800c744:	f042 0202 	orrlt.w	r2, r2, #2
 800c748:	9307      	strge	r3, [sp, #28]
 800c74a:	9307      	strlt	r3, [sp, #28]
 800c74c:	bfb8      	it	lt
 800c74e:	9204      	strlt	r2, [sp, #16]
 800c750:	7823      	ldrb	r3, [r4, #0]
 800c752:	2b2e      	cmp	r3, #46	; 0x2e
 800c754:	d10c      	bne.n	800c770 <_svfiprintf_r+0x130>
 800c756:	7863      	ldrb	r3, [r4, #1]
 800c758:	2b2a      	cmp	r3, #42	; 0x2a
 800c75a:	d135      	bne.n	800c7c8 <_svfiprintf_r+0x188>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	1d1a      	adds	r2, r3, #4
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	9203      	str	r2, [sp, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	bfb8      	it	lt
 800c768:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c76c:	3402      	adds	r4, #2
 800c76e:	9305      	str	r3, [sp, #20]
 800c770:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c83c <_svfiprintf_r+0x1fc>
 800c774:	7821      	ldrb	r1, [r4, #0]
 800c776:	2203      	movs	r2, #3
 800c778:	4650      	mov	r0, sl
 800c77a:	f7f3 fd59 	bl	8000230 <memchr>
 800c77e:	b140      	cbz	r0, 800c792 <_svfiprintf_r+0x152>
 800c780:	2340      	movs	r3, #64	; 0x40
 800c782:	eba0 000a 	sub.w	r0, r0, sl
 800c786:	fa03 f000 	lsl.w	r0, r3, r0
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	4303      	orrs	r3, r0
 800c78e:	3401      	adds	r4, #1
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c796:	4826      	ldr	r0, [pc, #152]	; (800c830 <_svfiprintf_r+0x1f0>)
 800c798:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c79c:	2206      	movs	r2, #6
 800c79e:	f7f3 fd47 	bl	8000230 <memchr>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	d038      	beq.n	800c818 <_svfiprintf_r+0x1d8>
 800c7a6:	4b23      	ldr	r3, [pc, #140]	; (800c834 <_svfiprintf_r+0x1f4>)
 800c7a8:	bb1b      	cbnz	r3, 800c7f2 <_svfiprintf_r+0x1b2>
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	3307      	adds	r3, #7
 800c7ae:	f023 0307 	bic.w	r3, r3, #7
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	9303      	str	r3, [sp, #12]
 800c7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b8:	4433      	add	r3, r6
 800c7ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c7bc:	e767      	b.n	800c68e <_svfiprintf_r+0x4e>
 800c7be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	2001      	movs	r0, #1
 800c7c6:	e7a5      	b.n	800c714 <_svfiprintf_r+0xd4>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	9305      	str	r3, [sp, #20]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f04f 0c0a 	mov.w	ip, #10
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7da:	3a30      	subs	r2, #48	; 0x30
 800c7dc:	2a09      	cmp	r2, #9
 800c7de:	d903      	bls.n	800c7e8 <_svfiprintf_r+0x1a8>
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0c5      	beq.n	800c770 <_svfiprintf_r+0x130>
 800c7e4:	9105      	str	r1, [sp, #20]
 800c7e6:	e7c3      	b.n	800c770 <_svfiprintf_r+0x130>
 800c7e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e7f0      	b.n	800c7d4 <_svfiprintf_r+0x194>
 800c7f2:	ab03      	add	r3, sp, #12
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	462a      	mov	r2, r5
 800c7f8:	4b0f      	ldr	r3, [pc, #60]	; (800c838 <_svfiprintf_r+0x1f8>)
 800c7fa:	a904      	add	r1, sp, #16
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7fc f9d7 	bl	8008bb0 <_printf_float>
 800c802:	1c42      	adds	r2, r0, #1
 800c804:	4606      	mov	r6, r0
 800c806:	d1d6      	bne.n	800c7b6 <_svfiprintf_r+0x176>
 800c808:	89ab      	ldrh	r3, [r5, #12]
 800c80a:	065b      	lsls	r3, r3, #25
 800c80c:	f53f af2c 	bmi.w	800c668 <_svfiprintf_r+0x28>
 800c810:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c812:	b01d      	add	sp, #116	; 0x74
 800c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c818:	ab03      	add	r3, sp, #12
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	462a      	mov	r2, r5
 800c81e:	4b06      	ldr	r3, [pc, #24]	; (800c838 <_svfiprintf_r+0x1f8>)
 800c820:	a904      	add	r1, sp, #16
 800c822:	4638      	mov	r0, r7
 800c824:	f7fc fc68 	bl	80090f8 <_printf_i>
 800c828:	e7eb      	b.n	800c802 <_svfiprintf_r+0x1c2>
 800c82a:	bf00      	nop
 800c82c:	0800d7d4 	.word	0x0800d7d4
 800c830:	0800d7de 	.word	0x0800d7de
 800c834:	08008bb1 	.word	0x08008bb1
 800c838:	0800c589 	.word	0x0800c589
 800c83c:	0800d7da 	.word	0x0800d7da

0800c840 <nan>:
 800c840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c848 <nan+0x8>
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	00000000 	.word	0x00000000
 800c84c:	7ff80000 	.word	0x7ff80000

0800c850 <_raise_r>:
 800c850:	291f      	cmp	r1, #31
 800c852:	b538      	push	{r3, r4, r5, lr}
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	d904      	bls.n	800c864 <_raise_r+0x14>
 800c85a:	2316      	movs	r3, #22
 800c85c:	6003      	str	r3, [r0, #0]
 800c85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c866:	b112      	cbz	r2, 800c86e <_raise_r+0x1e>
 800c868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c86c:	b94b      	cbnz	r3, 800c882 <_raise_r+0x32>
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 f830 	bl	800c8d4 <_getpid_r>
 800c874:	462a      	mov	r2, r5
 800c876:	4601      	mov	r1, r0
 800c878:	4620      	mov	r0, r4
 800c87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c87e:	f000 b817 	b.w	800c8b0 <_kill_r>
 800c882:	2b01      	cmp	r3, #1
 800c884:	d00a      	beq.n	800c89c <_raise_r+0x4c>
 800c886:	1c59      	adds	r1, r3, #1
 800c888:	d103      	bne.n	800c892 <_raise_r+0x42>
 800c88a:	2316      	movs	r3, #22
 800c88c:	6003      	str	r3, [r0, #0]
 800c88e:	2001      	movs	r0, #1
 800c890:	e7e7      	b.n	800c862 <_raise_r+0x12>
 800c892:	2400      	movs	r4, #0
 800c894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c898:	4628      	mov	r0, r5
 800c89a:	4798      	blx	r3
 800c89c:	2000      	movs	r0, #0
 800c89e:	e7e0      	b.n	800c862 <_raise_r+0x12>

0800c8a0 <raise>:
 800c8a0:	4b02      	ldr	r3, [pc, #8]	; (800c8ac <raise+0xc>)
 800c8a2:	4601      	mov	r1, r0
 800c8a4:	6818      	ldr	r0, [r3, #0]
 800c8a6:	f7ff bfd3 	b.w	800c850 <_raise_r>
 800c8aa:	bf00      	nop
 800c8ac:	2000000c 	.word	0x2000000c

0800c8b0 <_kill_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	; (800c8d0 <_kill_r+0x20>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	602b      	str	r3, [r5, #0]
 800c8be:	f7f7 f818 	bl	80038f2 <_kill>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <_kill_r+0x1c>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	b103      	cbz	r3, 800c8cc <_kill_r+0x1c>
 800c8ca:	6023      	str	r3, [r4, #0]
 800c8cc:	bd38      	pop	{r3, r4, r5, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20000c30 	.word	0x20000c30

0800c8d4 <_getpid_r>:
 800c8d4:	f7f7 b805 	b.w	80038e2 <_getpid>

0800c8d8 <__sread>:
 800c8d8:	b510      	push	{r4, lr}
 800c8da:	460c      	mov	r4, r1
 800c8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e0:	f000 f8ba 	bl	800ca58 <_read_r>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	bfab      	itete	ge
 800c8e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c8ea:	89a3      	ldrhlt	r3, [r4, #12]
 800c8ec:	181b      	addge	r3, r3, r0
 800c8ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c8f2:	bfac      	ite	ge
 800c8f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8f6:	81a3      	strhlt	r3, [r4, #12]
 800c8f8:	bd10      	pop	{r4, pc}

0800c8fa <__swrite>:
 800c8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fe:	461f      	mov	r7, r3
 800c900:	898b      	ldrh	r3, [r1, #12]
 800c902:	05db      	lsls	r3, r3, #23
 800c904:	4605      	mov	r5, r0
 800c906:	460c      	mov	r4, r1
 800c908:	4616      	mov	r6, r2
 800c90a:	d505      	bpl.n	800c918 <__swrite+0x1e>
 800c90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c910:	2302      	movs	r3, #2
 800c912:	2200      	movs	r2, #0
 800c914:	f000 f886 	bl	800ca24 <_lseek_r>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c91e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	4632      	mov	r2, r6
 800c926:	463b      	mov	r3, r7
 800c928:	4628      	mov	r0, r5
 800c92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c92e:	f000 b835 	b.w	800c99c <_write_r>

0800c932 <__sseek>:
 800c932:	b510      	push	{r4, lr}
 800c934:	460c      	mov	r4, r1
 800c936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93a:	f000 f873 	bl	800ca24 <_lseek_r>
 800c93e:	1c43      	adds	r3, r0, #1
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	bf15      	itete	ne
 800c944:	6560      	strne	r0, [r4, #84]	; 0x54
 800c946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c94a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c94e:	81a3      	strheq	r3, [r4, #12]
 800c950:	bf18      	it	ne
 800c952:	81a3      	strhne	r3, [r4, #12]
 800c954:	bd10      	pop	{r4, pc}

0800c956 <__sclose>:
 800c956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95a:	f000 b831 	b.w	800c9c0 <_close_r>

0800c95e <strncmp>:
 800c95e:	b510      	push	{r4, lr}
 800c960:	b16a      	cbz	r2, 800c97e <strncmp+0x20>
 800c962:	3901      	subs	r1, #1
 800c964:	1884      	adds	r4, r0, r2
 800c966:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c96a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c96e:	4293      	cmp	r3, r2
 800c970:	d103      	bne.n	800c97a <strncmp+0x1c>
 800c972:	42a0      	cmp	r0, r4
 800c974:	d001      	beq.n	800c97a <strncmp+0x1c>
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1f5      	bne.n	800c966 <strncmp+0x8>
 800c97a:	1a98      	subs	r0, r3, r2
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	4610      	mov	r0, r2
 800c980:	e7fc      	b.n	800c97c <strncmp+0x1e>

0800c982 <__ascii_wctomb>:
 800c982:	b149      	cbz	r1, 800c998 <__ascii_wctomb+0x16>
 800c984:	2aff      	cmp	r2, #255	; 0xff
 800c986:	bf85      	ittet	hi
 800c988:	238a      	movhi	r3, #138	; 0x8a
 800c98a:	6003      	strhi	r3, [r0, #0]
 800c98c:	700a      	strbls	r2, [r1, #0]
 800c98e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c992:	bf98      	it	ls
 800c994:	2001      	movls	r0, #1
 800c996:	4770      	bx	lr
 800c998:	4608      	mov	r0, r1
 800c99a:	4770      	bx	lr

0800c99c <_write_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4d07      	ldr	r5, [pc, #28]	; (800c9bc <_write_r+0x20>)
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	4608      	mov	r0, r1
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	602a      	str	r2, [r5, #0]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	f7f6 ffd8 	bl	8003960 <_write>
 800c9b0:	1c43      	adds	r3, r0, #1
 800c9b2:	d102      	bne.n	800c9ba <_write_r+0x1e>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	b103      	cbz	r3, 800c9ba <_write_r+0x1e>
 800c9b8:	6023      	str	r3, [r4, #0]
 800c9ba:	bd38      	pop	{r3, r4, r5, pc}
 800c9bc:	20000c30 	.word	0x20000c30

0800c9c0 <_close_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d06      	ldr	r5, [pc, #24]	; (800c9dc <_close_r+0x1c>)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	4608      	mov	r0, r1
 800c9ca:	602b      	str	r3, [r5, #0]
 800c9cc:	f7f6 ffe4 	bl	8003998 <_close>
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	d102      	bne.n	800c9da <_close_r+0x1a>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	b103      	cbz	r3, 800c9da <_close_r+0x1a>
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	20000c30 	.word	0x20000c30

0800c9e0 <_fstat_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4d07      	ldr	r5, [pc, #28]	; (800ca00 <_fstat_r+0x20>)
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	602b      	str	r3, [r5, #0]
 800c9ee:	f7f6 ffdf 	bl	80039b0 <_fstat>
 800c9f2:	1c43      	adds	r3, r0, #1
 800c9f4:	d102      	bne.n	800c9fc <_fstat_r+0x1c>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	b103      	cbz	r3, 800c9fc <_fstat_r+0x1c>
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	bd38      	pop	{r3, r4, r5, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000c30 	.word	0x20000c30

0800ca04 <_isatty_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4d06      	ldr	r5, [pc, #24]	; (800ca20 <_isatty_r+0x1c>)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	602b      	str	r3, [r5, #0]
 800ca10:	f7f6 ffde 	bl	80039d0 <_isatty>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d102      	bne.n	800ca1e <_isatty_r+0x1a>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	b103      	cbz	r3, 800ca1e <_isatty_r+0x1a>
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	bd38      	pop	{r3, r4, r5, pc}
 800ca20:	20000c30 	.word	0x20000c30

0800ca24 <_lseek_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d07      	ldr	r5, [pc, #28]	; (800ca44 <_lseek_r+0x20>)
 800ca28:	4604      	mov	r4, r0
 800ca2a:	4608      	mov	r0, r1
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	2200      	movs	r2, #0
 800ca30:	602a      	str	r2, [r5, #0]
 800ca32:	461a      	mov	r2, r3
 800ca34:	f7f6 ffd7 	bl	80039e6 <_lseek>
 800ca38:	1c43      	adds	r3, r0, #1
 800ca3a:	d102      	bne.n	800ca42 <_lseek_r+0x1e>
 800ca3c:	682b      	ldr	r3, [r5, #0]
 800ca3e:	b103      	cbz	r3, 800ca42 <_lseek_r+0x1e>
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	bd38      	pop	{r3, r4, r5, pc}
 800ca44:	20000c30 	.word	0x20000c30

0800ca48 <_malloc_usable_size_r>:
 800ca48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca4c:	1f18      	subs	r0, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bfbc      	itt	lt
 800ca52:	580b      	ldrlt	r3, [r1, r0]
 800ca54:	18c0      	addlt	r0, r0, r3
 800ca56:	4770      	bx	lr

0800ca58 <_read_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4d07      	ldr	r5, [pc, #28]	; (800ca78 <_read_r+0x20>)
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	4608      	mov	r0, r1
 800ca60:	4611      	mov	r1, r2
 800ca62:	2200      	movs	r2, #0
 800ca64:	602a      	str	r2, [r5, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	f7f6 ff5d 	bl	8003926 <_read>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d102      	bne.n	800ca76 <_read_r+0x1e>
 800ca70:	682b      	ldr	r3, [r5, #0]
 800ca72:	b103      	cbz	r3, 800ca76 <_read_r+0x1e>
 800ca74:	6023      	str	r3, [r4, #0]
 800ca76:	bd38      	pop	{r3, r4, r5, pc}
 800ca78:	20000c30 	.word	0x20000c30

0800ca7c <_init>:
 800ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7e:	bf00      	nop
 800ca80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca82:	bc08      	pop	{r3}
 800ca84:	469e      	mov	lr, r3
 800ca86:	4770      	bx	lr

0800ca88 <_fini>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	bf00      	nop
 800ca8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8e:	bc08      	pop	{r3}
 800ca90:	469e      	mov	lr, r3
 800ca92:	4770      	bx	lr
