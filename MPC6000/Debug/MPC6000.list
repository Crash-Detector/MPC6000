
MPC6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab54  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010d8  0800ad18  0800ad18  0001ad18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdf0  0800bdf0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdf8  0800bdf8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdf8  0800bdf8  0001bdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800be00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a48  200001dc  0800bfdc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800bfdc  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c788  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c2e  00000000  00000000  0003c994  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  0003f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c0  00000000  00000000  00040aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c405  00000000  00000000  00041e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e35  00000000  00000000  0006e265  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010cc1b  00000000  00000000  0008009a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018ccb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  0018cd30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800acfc 	.word	0x0800acfc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800acfc 	.word	0x0800acfc

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <print_char>:
const HAL_GPIO_t pwr_pin = { GPIOE, GPIO_PIN_9 };
const HAL_GPIO_t rst_pin = { GPIOF, GPIO_PIN_13 };

// Prints characters \r and \n in a way that doesn't case issues.
void print_char( const char ch )
    {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	char buff[5];
	if ( ch == '\n' )
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b0a      	cmp	r3, #10
 8000fa6:	d108      	bne.n	8000fba <print_char+0x22>
		sprintf( buff, "<LR>" );
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <print_char+0x60>)
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb2:	6018      	str	r0, [r3, #0]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	7019      	strb	r1, [r3, #0]
 8000fb8:	e012      	b.n	8000fe0 <print_char+0x48>
	else if ( ch == '\r' )
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b0d      	cmp	r3, #13
 8000fbe:	d108      	bne.n	8000fd2 <print_char+0x3a>
		sprintf( buff, "<CR>" );
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <print_char+0x64>)
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fca:	6018      	str	r0, [r3, #0]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	7019      	strb	r1, [r3, #0]
 8000fd0:	e006      	b.n	8000fe0 <print_char+0x48>
	else
		sprintf( buff, "%c", ch );
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4909      	ldr	r1, [pc, #36]	; (8001000 <print_char+0x68>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f007 ffbe 	bl	8008f5c <siprintf>
	printf( "%s 0x%x D:%d\n\r", buff, ch, ch );
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	f107 0108 	add.w	r1, r7, #8
 8000fe8:	4806      	ldr	r0, [pc, #24]	; (8001004 <print_char+0x6c>)
 8000fea:	f007 ff2b 	bl	8008e44 <iprintf>
    } // end print_char
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	0800ad1c 	.word	0x0800ad1c
 8000ffc:	0800ad24 	.word	0x0800ad24
 8001000:	0800ad2c 	.word	0x0800ad2c
 8001004:	0800ad30 	.word	0x0800ad30

08001008 <GPIO_Write>:

void GPIO_Write( HAL_GPIO_t const * const gpio_ptr, const GPIO_PinState pin_state )
    {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin( gpio_ptr->GPIOx, gpio_ptr->GPIO_Pin, pin_state );
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	4619      	mov	r1, r3
 8001020:	f002 fe50 	bl	8003cc4 <HAL_GPIO_WritePin>
    } // GPIO_Write( )
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <power_on_cell>:

void power_on_cell( )
    {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    printf( "Powering On Cell\n\r" );
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <power_on_cell+0x28>)
 8001032:	f007 ff07 	bl	8008e44 <iprintf>
    GPIO_Write( &pwr_pin, GPIO_PIN_RESET );
 8001036:	2100      	movs	r1, #0
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <power_on_cell+0x2c>)
 800103a:	f7ff ffe5 	bl	8001008 <GPIO_Write>
	  HAL_Delay( 1100 ); // At least 1s
 800103e:	f240 404c 	movw	r0, #1100	; 0x44c
 8001042:	f002 fb79 	bl	8003738 <HAL_Delay>
    GPIO_Write( &pwr_pin, GPIO_PIN_SET );
 8001046:	2101      	movs	r1, #1
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <power_on_cell+0x2c>)
 800104a:	f7ff ffdd 	bl	8001008 <GPIO_Write>
    } // end power_on( )
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	0800ad40 	.word	0x0800ad40
 8001058:	0800ba58 	.word	0x0800ba58

0800105c <reset_cell>:

void reset_cell( )
    {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    printf( "Resetting Cell\n\r" );
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <reset_cell+0x24>)
 8001062:	f007 feef 	bl	8008e44 <iprintf>
    GPIO_Write( &rst_pin, GPIO_PIN_RESET );
 8001066:	2100      	movs	r1, #0
 8001068:	4806      	ldr	r0, [pc, #24]	; (8001084 <reset_cell+0x28>)
 800106a:	f7ff ffcd 	bl	8001008 <GPIO_Write>
    HAL_Delay( 100 ); // At least 1s
 800106e:	2064      	movs	r0, #100	; 0x64
 8001070:	f002 fb62 	bl	8003738 <HAL_Delay>
    GPIO_Write( &rst_pin, GPIO_PIN_SET );
 8001074:	2101      	movs	r1, #1
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <reset_cell+0x28>)
 8001078:	f7ff ffc6 	bl	8001008 <GPIO_Write>
    } // reset_cell( )
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	0800ad54 	.word	0x0800ad54
 8001084:	0800ba60 	.word	0x0800ba60

08001088 <begin>:
 * 
 * Responses:
 *  <CR><LF><response><CR><LF>
*/
bool begin( Cellular_module_t * const cell_ptr )
    {
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	; 0x38
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
	power_on_cell( );
 8001090:	f7ff ffcc 	bl	800102c <power_on_cell>
    reset_cell( );
 8001094:	f7ff ffe2 	bl	800105c <reset_cell>
    if ( cell_ptr->uart_ptr )
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 808e 	beq.w	80011be <begin+0x136>
        {
        printf( "Attempting to open comm with ATs\n\r" );
 80010a2:	4849      	ldr	r0, [pc, #292]	; (80011c8 <begin+0x140>)
 80010a4:	f007 fece 	bl	8008e44 <iprintf>

        int16_t timeout = 14000;
 80010a8:	f243 63b0 	movw	r3, #14000	; 0x36b0
 80010ac:	85fb      	strh	r3, [r7, #46]	; 0x2e

        while( timeout > 0 )
 80010ae:	e028      	b.n	8001102 <begin+0x7a>
            {
            flushInput( cell_ptr->uart_ptr );
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 f9c7 	bl	8001448 <flushInput>
            if ( send_check_reply( cell_ptr, "AT", ok_reply_c, fona_def_timeout_ms_c ) )
 80010ba:	4a44      	ldr	r2, [pc, #272]	; (80011cc <begin+0x144>)
 80010bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4943      	ldr	r1, [pc, #268]	; (80011d0 <begin+0x148>)
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f897 	bl	80011f8 <send_check_reply>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d11d      	bne.n	800110c <begin+0x84>
                break;
            //printf( "Failed \n\r\n\r" );
            flushInput( cell_ptr->uart_ptr );
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f9b7 	bl	8001448 <flushInput>

            if ( send_check_reply( cell_ptr, "AT", "AT", fona_def_timeout_ms_c ) )
 80010da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4a3b      	ldr	r2, [pc, #236]	; (80011d0 <begin+0x148>)
 80010e2:	493b      	ldr	r1, [pc, #236]	; (80011d0 <begin+0x148>)
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f887 	bl	80011f8 <send_check_reply>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <begin+0x88>
                break;
            // printf( "Failed \n\r\n\r" );
            HAL_Delay( 500 );
 80010f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f4:	f002 fb20 	bl	8003738 <HAL_Delay>
            timeout -= 500;
 80010f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010fa:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80010fe:	b29b      	uxth	r3, r3
 8001100:	85fb      	strh	r3, [r7, #46]	; 0x2e
        while( timeout > 0 )
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	dcd2      	bgt.n	80010b0 <begin+0x28>
 800110a:	e002      	b.n	8001112 <begin+0x8a>
                break;
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <begin+0x8a>
                break;
 8001110:	bf00      	nop
            } // end while
        
        if( timeout <= 0 )
 8001112:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001116:	2b00      	cmp	r3, #0
 8001118:	dc04      	bgt.n	8001124 <begin+0x9c>
            {
            printf( "Timed out!\n\r" );
 800111a:	482e      	ldr	r0, [pc, #184]	; (80011d4 <begin+0x14c>)
 800111c:	f007 fe92 	bl	8008e44 <iprintf>
            return false;
 8001120:	2300      	movs	r3, #0
 8001122:	e04d      	b.n	80011c0 <begin+0x138>
            } // end if


        // Turn off Echo
        send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c );
 8001124:	4a29      	ldr	r2, [pc, #164]	; (80011cc <begin+0x144>)
 8001126:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112a:	b29b      	uxth	r3, r3
 800112c:	492a      	ldr	r1, [pc, #168]	; (80011d8 <begin+0x150>)
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f862 	bl	80011f8 <send_check_reply>
        HAL_Delay( 100 );
 8001134:	2064      	movs	r0, #100	; 0x64
 8001136:	f002 faff 	bl	8003738 <HAL_Delay>

        if ( send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c ) )
 800113a:	4a24      	ldr	r2, [pc, #144]	; (80011cc <begin+0x144>)
 800113c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001140:	b29b      	uxth	r3, r3
 8001142:	4925      	ldr	r1, [pc, #148]	; (80011d8 <begin+0x150>)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f857 	bl	80011f8 <send_check_reply>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d036      	beq.n	80011be <begin+0x136>
            {
            HAL_Delay( 100 );
 8001150:	2064      	movs	r0, #100	; 0x64
 8001152:	f002 faf1 	bl	8003738 <HAL_Delay>
            flushInput( cell_ptr->uart_ptr );
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f974 	bl	8001448 <flushInput>
            
            printf( "\t---> AT+GMR\n" );
 8001160:	481e      	ldr	r0, [pc, #120]	; (80011dc <begin+0x154>)
 8001162:	f007 fee3 	bl	8008f2c <puts>

            transmit( cell_ptr,  "AT+GMR" , timeout );
 8001166:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001168:	461a      	mov	r2, r3
 800116a:	491d      	ldr	r1, [pc, #116]	; (80011e0 <begin+0x158>)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f869 	bl	8001244 <transmit>

            printf( "\t<--- %s\n", cell_ptr->reply_buffer );
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3304      	adds	r3, #4
 8001176:	4619      	mov	r1, r3
 8001178:	481a      	ldr	r0, [pc, #104]	; (80011e4 <begin+0x15c>)
 800117a:	f007 fe63 	bl	8008e44 <iprintf>
            
            // Nucleo confirms operating with right Cell Module.
            if ( strstr( cell_ptr->reply_buffer, "SIM7000A" ) != NULL )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3304      	adds	r3, #4
 8001182:	4919      	ldr	r1, [pc, #100]	; (80011e8 <begin+0x160>)
 8001184:	4618      	mov	r0, r3
 8001186:	f007 ff09 	bl	8008f9c <strstr>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <begin+0x130>
                {
                char buffer[ 32 ];
                sprintf( buffer,  "AT+CPMS=%s,%s,%s", "\"SM\"", "\"SM\"", "\"SM\"" );
 8001190:	f107 000c 	add.w	r0, r7, #12
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <begin+0x164>)
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <begin+0x164>)
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <begin+0x164>)
 800119c:	4914      	ldr	r1, [pc, #80]	; (80011f0 <begin+0x168>)
 800119e:	f007 fedd 	bl	8008f5c <siprintf>
                send_check_reply( cell_ptr, buffer, ok_reply_c, fona_def_timeout_ms_c );
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <begin+0x144>)
 80011a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f107 010c 	add.w	r1, r7, #12
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f822 	bl	80011f8 <send_check_reply>
                return true;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e003      	b.n	80011c0 <begin+0x138>
                } // end if
            else 
                printf( "Couldn't find right revision!\n");
 80011b8:	480e      	ldr	r0, [pc, #56]	; (80011f4 <begin+0x16c>)
 80011ba:	f007 feb7 	bl	8008f2c <puts>
            } // end if
        } // end if
    	return false;
 80011be:	2300      	movs	r3, #0
    } // end begin( )
 80011c0:	4618      	mov	r0, r3
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	0800ad68 	.word	0x0800ad68
 80011cc:	0800ad18 	.word	0x0800ad18
 80011d0:	0800ad8c 	.word	0x0800ad8c
 80011d4:	0800ad90 	.word	0x0800ad90
 80011d8:	0800ada0 	.word	0x0800ada0
 80011dc:	0800ada8 	.word	0x0800ada8
 80011e0:	0800adb8 	.word	0x0800adb8
 80011e4:	0800adc0 	.word	0x0800adc0
 80011e8:	0800adcc 	.word	0x0800adcc
 80011ec:	0800add8 	.word	0x0800add8
 80011f0:	0800ade0 	.word	0x0800ade0
 80011f4:	0800adf4 	.word	0x0800adf4

080011f8 <send_check_reply>:


bool send_check_reply( Cellular_module_t * const cell_ptr, char const * const send, 
                        char const * const reply, const uint16_t timeout )
    {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	807b      	strh	r3, [r7, #2]

    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	461a      	mov	r2, r3
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 f819 	bl	8001244 <transmit>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800121a:	429a      	cmp	r2, r3
 800121c:	d00a      	beq.n	8001234 <send_check_reply+0x3c>
           !strcmp( cell_ptr->reply_buffer, reply );
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4618      	mov	r0, r3
 8001226:	f7fe ffeb 	bl	8000200 <strcmp>
 800122a:	4603      	mov	r3, r0
    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <send_check_reply+0x3c>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <send_check_reply+0x3e>
 8001234:	2300      	movs	r3, #0
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
    } // end send_check_reply( )
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <transmit>:

uint8_t transmit( Cellular_module_t * const cell_ptr, char const * const send, uint16_t timeout )
    {
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800124a:	af00      	add	r7, sp, #0
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	6018      	str	r0, [r3, #0]
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	6019      	str	r1, [r3, #0]
 8001258:	1dbb      	adds	r3, r7, #6
 800125a:	801a      	strh	r2, [r3, #0]
	*cell_ptr->reply_buffer = '\0';
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	711a      	strb	r2, [r3, #4]
    char send_buff[1024];
    uint8_t idx;
    if ( sprintf( send_buff, "%s\r", send ) < 0 ) // At in <CR><LR>
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	f107 0014 	add.w	r0, r7, #20
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4928      	ldr	r1, [pc, #160]	; (8001314 <transmit+0xd0>)
 8001272:	f007 fe73 	bl	8008f5c <siprintf>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	da06      	bge.n	800128a <transmit+0x46>
        {
        printf( "Failed to put into sprintf\n\r" );
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <transmit+0xd4>)
 800127e:	f007 fde1 	bl	8008e44 <iprintf>
        return reply_buff_size_c;
 8001282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001286:	b2db      	uxtb	r3, r3
 8001288:	e03e      	b.n	8001308 <transmit+0xc4>
        } // end if
    
    flushInput( cell_ptr->uart_ptr );
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f8d8 	bl	8001448 <flushInput>

#ifdef DEBUG_CELL
    printf( "\t---> %s\n\r", send );
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	481f      	ldr	r0, [pc, #124]	; (800131c <transmit+0xd8>)
 80012a0:	f007 fdd0 	bl	8008e44 <iprintf>
#endif


    if ( HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t *) send_buff, strlen( send_buff ), timeout ) == HAL_OK )
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ffaf 	bl	8000214 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	1dbb      	adds	r3, r7, #6
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	f107 0114 	add.w	r1, r7, #20
 80012c2:	4620      	mov	r0, r4
 80012c4:	f006 f80c 	bl	80072e0 <HAL_UART_Transmit>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d113      	bne.n	80012f6 <transmit+0xb2>
        {
        idx = readline( cell_ptr, timeout, false );
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	8819      	ldrh	r1, [r3, #0]
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	f000 f825 	bl	8001328 <readline>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
#ifdef DEBUG_CELL
        printf( "Got: %s\n\r", cell_ptr->reply_buffer );
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3304      	adds	r3, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <transmit+0xdc>)
 80012f0:	f007 fda8 	bl	8008e44 <iprintf>
 80012f4:	e006      	b.n	8001304 <transmit+0xc0>
#endif
        } // end if
    else
        {
#ifdef DEBUG_CELL
        printf( "Failed Transmit\n\r" );
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <transmit+0xe0>)
 80012f8:	f007 fda4 	bl	8008e44 <iprintf>
#endif
        idx = reply_buff_size_c;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        } // end else

    return idx;
 8001304:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
    } // transmit( )
 8001308:	4618      	mov	r0, r3
 800130a:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	0800ae14 	.word	0x0800ae14
 8001318:	0800ae18 	.word	0x0800ae18
 800131c:	0800ae38 	.word	0x0800ae38
 8001320:	0800ae44 	.word	0x0800ae44
 8001324:	0800ae50 	.word	0x0800ae50

08001328 <readline>:
 * MODIFIES: Cellular_module_t::replay_buffer (where reply exists)
 *  EFFECTS: Receives characters from UARTS Rx pin (from the Nucleo board's perspective)
 *           up to the first (if multiline == false, else second) \r\n and places it into the reply_buffer.
*/
uint8_t readline( Cellular_module_t * const cell_ptr, const uint16_t timeout, const bool multiline )
    {
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
    static char receive_buff[ 1024 ];
    static char const * const buff_end_c = receive_buff + sizeof( receive_buff );

    char *buff_ptr = receive_buff;  //! buff_ptr will eventually point to the end of the bytes received.
 8001338:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <readline+0x110>)
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *reply_ptr = cell_ptr->reply_buffer; // Points to the reply_buffer
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t newlines_seen;
    newlines_seen = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Multiline ensures that we check newline twice
    const uint8_t iter_c = multiline ? 2 : 1;
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <readline+0x2a>
 800134e:	2302      	movs	r3, #2
 8001350:	e000      	b.n	8001354 <readline+0x2c>
 8001352:	2301      	movs	r3, #1
 8001354:	76fb      	strb	r3, [r7, #27]

    // Receive everything until we time out OR run out of space
    while( buff_ptr != buff_end_c && HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr ), 1, timeout ) == HAL_OK )
 8001356:	e002      	b.n	800135e <readline+0x36>
        {
        ++buff_ptr;    // Increment pointer
 8001358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135a:	3301      	adds	r3, #1
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while( buff_ptr != buff_end_c && HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr ), 1, timeout ) == HAL_OK )
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <readline+0x114>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001364:	429a      	cmp	r2, r3
 8001366:	d009      	beq.n	800137c <readline+0x54>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	887b      	ldrh	r3, [r7, #2]
 800136e:	2201      	movs	r2, #1
 8001370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001372:	f006 f84c 	bl	800740e <HAL_UART_Receive>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0ed      	beq.n	8001358 <readline+0x30>
        } // end while
#ifdef DEBUG_CELL
    for ( char const *ptr = receive_buff, * const end_ptr = buff_ptr; ptr != end_ptr; ++ptr )
 800137c:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <readline+0x110>)
 800137e:	623b      	str	r3, [r7, #32]
 8001380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e007      	b.n	8001396 <readline+0x6e>
    	print_char( *ptr );
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fe04 	bl	8000f98 <print_char>
    for ( char const *ptr = receive_buff, * const end_ptr = buff_ptr; ptr != end_ptr; ++ptr )
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	3301      	adds	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	6a3a      	ldr	r2, [r7, #32]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	429a      	cmp	r2, r3
 800139c:	d1f3      	bne.n	8001386 <readline+0x5e>
    if ( buff_ptr == buff_end_c )
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <readline+0x114>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d102      	bne.n	80013ae <readline+0x86>
        printf( "Ran out of space in receive_buff\n\r" );
 80013a8:	4825      	ldr	r0, [pc, #148]	; (8001440 <readline+0x118>)
 80013aa:	f007 fd4b 	bl	8008e44 <iprintf>
#endif

    for ( char const *ptr = receive_buff, *const end_ptr = buff_ptr;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <readline+0x110>)
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	e01b      	b.n	80013f0 <readline+0xc8>
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
        {
        const char c_in = *ptr;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	73fb      	strb	r3, [r7, #15]
        // Used to skip the first <CR><LR> in a response.
        if ( c_in != '\r' ) // Skip the carrage return character (This is present in responses).
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	2b0d      	cmp	r3, #13
 80013c2:	d012      	beq.n	80013ea <readline+0xc2>
            {
            if ( c_in == '\n' )  // Don't insert the <LR> into the return buffer.
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b0a      	cmp	r3, #10
 80013c8:	d10a      	bne.n	80013e0 <readline+0xb8>
                {
                if ( reply_ptr != cell_ptr->reply_buffer )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3304      	adds	r3, #4
 80013ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d00a      	beq.n	80013ea <readline+0xc2>
                    ++newlines_seen;
 80013d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013d8:	3301      	adds	r3, #1
 80013da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013de:	e004      	b.n	80013ea <readline+0xc2>
                //Else Don't count first <LR> seen (before anything's been inserted)
                } // end if
            else
                {
                *reply_ptr++ = c_in; // Dereferences, assigns, and then post_increment.
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	701a      	strb	r2, [r3, #0]
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
    for ( char const *ptr = receive_buff, *const end_ptr = buff_ptr;
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d004      	beq.n	8001402 <readline+0xda>
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
 80013f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013fc:	7efb      	ldrb	r3, [r7, #27]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3da      	bcc.n	80013b8 <readline+0x90>
                } // end else
            } // end if
        } // end for
    if ( reply_ptr == cell_ptr->reply_buffer + sizeof( cell_ptr->reply_buffer ) )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800140a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140c:	429a      	cmp	r2, r3
 800140e:	d106      	bne.n	800141e <readline+0xf6>
        {
        printf( "Reply exceeded buffer size!\n\r" );
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <readline+0x11c>)
 8001412:	f007 fd17 	bl	8008e44 <iprintf>
        reply_ptr = cell_ptr->reply_buffer + sizeof( cell_ptr->reply_buffer ) - 1; // To prevent out of bounds indexing.
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3304      	adds	r3, #4
 800141a:	33ff      	adds	r3, #255	; 0xff
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
        } // end if
    *reply_ptr = '\0'; // Null-terminate
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
    return ( uint8_t)( reply_ptr - cell_ptr->reply_buffer );
 8001424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	3204      	adds	r2, #4
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	b2db      	uxtb	r3, r3
    } // end readline( )
 800142e:	4618      	mov	r0, r3
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200001f8 	.word	0x200001f8
 800143c:	0800ba68 	.word	0x0800ba68
 8001440:	0800ae64 	.word	0x0800ae64
 8001444:	0800ae88 	.word	0x0800ae88

08001448 <flushInput>:
//
//------------------------------------------------------------------------------------------------

// Clear everything W/O reading it in.
void flushInput( UART_HandleTypeDef * const uart_ptr )
    {
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    char c_in;
#ifdef DEBUG_CELL
    printf( "Flushing Input\n\r" );
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <flushInput+0x34>)
 8001452:	f007 fcf7 	bl	8008e44 <iprintf>
#endif
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8001456:	e003      	b.n	8001460 <flushInput+0x18>
        {
#ifdef DEBUG_CELL
        print_char( c_in );
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fd9c 	bl	8000f98 <print_char>
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8001460:	f107 010f 	add.w	r1, r7, #15
 8001464:	2364      	movs	r3, #100	; 0x64
 8001466:	2201      	movs	r2, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f005 ffd0 	bl	800740e <HAL_UART_Receive>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f1      	beq.n	8001458 <flushInput+0x10>
#endif
        } // end while
    } // end flush_Input
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800aea8 	.word	0x0800aea8

08001480 <setNetworkSettings>:
//
//                                  Network Settings
//
//------------------------------------------------------------------------------------------------

bool setNetworkSettings(Cellular_module_t * const cell_ptr) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

	//if ( send_check_reply( cell_ptr, "AT+CGDCONT=1,\"IP\",\"hologram"", ok_reply_c, 10000 ) )
	flushInput( cell_ptr->uart_ptr );
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffdb 	bl	8001448 <flushInput>
	if ( send_check_reply( cell_ptr, "AT+CGDCONT=1,\"IP\",\"hologram\"", ok_reply_c, 10000 ) ){
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <setNetworkSettings+0x34>)
 8001494:	f242 7310 	movw	r3, #10000	; 0x2710
 8001498:	4907      	ldr	r1, [pc, #28]	; (80014b8 <setNetworkSettings+0x38>)
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff feac 	bl	80011f8 <send_check_reply>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <setNetworkSettings+0x2a>
		return true;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <setNetworkSettings+0x2c>
	}
	return false;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	0800ad18 	.word	0x0800ad18
 80014b8:	0800aebc 	.word	0x0800aebc

080014bc <config_gpio>:
//enum IO { IN, OUT };

// direction 1 (input), direction 0, output
// Configure the gpio to be either In or out (as well as enabling the clock if not already enabled).
void config_gpio( const char port, const int pin_num, const enum IO direction )
    {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	4613      	mov	r3, r2
 80014ca:	71bb      	strb	r3, [r7, #6]
    // Invariants
    assert( port >= 'A' && port <= 'F' ); 
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b40      	cmp	r3, #64	; 0x40
 80014d0:	d902      	bls.n	80014d8 <config_gpio+0x1c>
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b46      	cmp	r3, #70	; 0x46
 80014d6:	d905      	bls.n	80014e4 <config_gpio+0x28>
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <config_gpio+0xd0>)
 80014da:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <config_gpio+0xd4>)
 80014dc:	211c      	movs	r1, #28
 80014de:	482d      	ldr	r0, [pc, #180]	; (8001594 <config_gpio+0xd8>)
 80014e0:	f006 fdee 	bl	80080c0 <__assert_func>
    assert( pin_num >= 0 && pin_num <= 15 );
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db02      	blt.n	80014f0 <config_gpio+0x34>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	dd05      	ble.n	80014fc <config_gpio+0x40>
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <config_gpio+0xdc>)
 80014f2:	4a27      	ldr	r2, [pc, #156]	; (8001590 <config_gpio+0xd4>)
 80014f4:	211d      	movs	r1, #29
 80014f6:	4827      	ldr	r0, [pc, #156]	; (8001594 <config_gpio+0xd8>)
 80014f8:	f006 fde2 	bl	80080c0 <__assert_func>
    assert( direction == IN || direction == OUT );
 80014fc:	79bb      	ldrb	r3, [r7, #6]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <config_gpio+0x58>
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d005      	beq.n	8001514 <config_gpio+0x58>
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <config_gpio+0xe0>)
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <config_gpio+0xd4>)
 800150c:	211e      	movs	r1, #30
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <config_gpio+0xd8>)
 8001510:	f006 fdd6 	bl	80080c0 <__assert_func>

    // Port index: A == 0, B == 1, etc.
    const uint32_t port_idx = port - 'A';
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	3b41      	subs	r3, #65	; 0x41
 8001518:	61fb      	str	r3, [r7, #28]

    // Ensure that rcc_ahb2 for the port is enabled
    uint32_t * const rcc_ahb2enr = ( uint32_t * )( RCC_ADDR + RCC_AHB2ENR_OFFSET );
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <config_gpio+0xe4>)
 800151c:	61bb      	str	r3, [r7, #24]
    *rcc_ahb2enr |= ( uint32_t ) ( 1 << port_idx ); // Shift one into the index of the port (turning on the clock if not already on).
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	431a      	orrs	r2, r3
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

    // Port address differ by 0x400 bytes
    const uint32_t port_offset = ( uint32_t )port_idx * 0x400;
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	617b      	str	r3, [r7, #20]

    uint32_t io_mode = direction == IN ? 0b00 : 0b01;
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf14      	ite	ne
 800153c:	2301      	movne	r3, #1
 800153e:	2300      	moveq	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	613b      	str	r3, [r7, #16]
    uint32_t mask = 0b11;
 8001544:	2303      	movs	r3, #3
 8001546:	60fb      	str	r3, [r7, #12]

    // Shift to the pin_num's relevant bits9 (in moder register).
    io_mode <<= ( pin_num << 1 ); // Shift by 2*pin_num
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	613b      	str	r3, [r7, #16]
    mask    <<= ( pin_num << 1 );
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	60fb      	str	r3, [r7, #12]

    uint32_t * const gpio_moder = (uint32_t * )( GPIO_ADDR_BASE + port_offset + GPIO_MODER_OFFSET );
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8001566:	60bb      	str	r3, [r7, #8]

    *gpio_moder &= ~mask; // Clear the mode bits
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	401a      	ands	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
    *gpio_moder |=  io_mode; // Write to it
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	431a      	orrs	r2, r3
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	601a      	str	r2, [r3, #0]
    } // end config_gpio( )
 8001582:	bf00      	nop
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	0800afbc 	.word	0x0800afbc
 8001590:	0800ba6c 	.word	0x0800ba6c
 8001594:	0800afd8 	.word	0x0800afd8
 8001598:	0800aff0 	.word	0x0800aff0
 800159c:	0800b010 	.word	0x0800b010
 80015a0:	4002104c 	.word	0x4002104c

080015a4 <set_pin_mode>:
    {
    return read_gpio_state( gpio->port, gpio->pin_num );
    } // end read_gpio_t_state( )

void set_pin_mode( struct GPIO * const gpio, const enum IO direction )
    {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
    gpio->pin_mode = direction == IN ? GPIO_INPUT : GPIO_OUTPUT;
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	bf14      	ite	ne
 80015b6:	2301      	movne	r3, #1
 80015b8:	2300      	moveq	r3, #0
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	701a      	strb	r2, [r3, #0]
    config_gpio( gpio->port, gpio->pin_num, direction );
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7858      	ldrb	r0, [r3, #1]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	4619      	mov	r1, r3
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f7ff ff74 	bl	80014bc <config_gpio>
    } // end set_pin_mode( )
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <bio_sensor_init>:
//                                 SparkFun_Bio_Sensor Member Function Definitions
//
//------------------------------------------------------------------------------------------------

void bio_sensor_init( struct SparkFun_Bio_Sensor * const bio_ssor, I2C_HandleTypeDef * const i2c_h, const uint8_t addr, const GPIO_t rst_pin, const GPIO_t mfio_pin, const uint8_t sample_rate, const uint8_t user_sel_mode )
    {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	71fb      	strb	r3, [r7, #7]
    bio_ssor->_reset_pin = rst_pin;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3304      	adds	r3, #4
 80015f0:	463a      	mov	r2, r7
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4611      	mov	r1, r2
 80015f6:	8019      	strh	r1, [r3, #0]
 80015f8:	3302      	adds	r3, #2
 80015fa:	0c12      	lsrs	r2, r2, #16
 80015fc:	701a      	strb	r2, [r3, #0]
    bio_ssor->_mfio_pin = mfio_pin;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3307      	adds	r3, #7
 8001602:	f107 0218 	add.w	r2, r7, #24
 8001606:	8811      	ldrh	r1, [r2, #0]
 8001608:	7892      	ldrb	r2, [r2, #2]
 800160a:	8019      	strh	r1, [r3, #0]
 800160c:	709a      	strb	r2, [r3, #2]
    bio_ssor->_addr = addr;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	729a      	strb	r2, [r3, #10]
    bio_ssor->_sampleRate = sample_rate;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	7f3a      	ldrb	r2, [r7, #28]
 8001618:	731a      	strb	r2, [r3, #12]
    bio_ssor->_userSelectedMode = user_sel_mode;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001620:	72da      	strb	r2, [r3, #11]
    bio_ssor->_i2c_h = i2c_h;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	601a      	str	r2, [r3, #0]
    switch( user_sel_mode )
 8001628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <bio_sensor_init+0x60>
 8001630:	2b08      	cmp	r3, #8
 8001632:	d005      	beq.n	8001640 <bio_sensor_init+0x64>
        break;
    case( APP_MODE ):
        // Call function...
        break;
    default:
        bio_ssor->_userSelectedMode = DISABLE; // Disable the sensor (erronous to use any functions)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	72da      	strb	r2, [r3, #11]
        break;
 800163a:	e002      	b.n	8001642 <bio_sensor_init+0x66>
        break;
 800163c:	bf00      	nop
 800163e:	e000      	b.n	8001642 <bio_sensor_init+0x66>
        break;
 8001640:	bf00      	nop
    } // end switch

    // Begin with mfio_pin and rst_pin in output mode.
    set_pin_mode( &( bio_ssor->_reset_pin ), OUT );
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3304      	adds	r3, #4
 8001646:	2101      	movs	r1, #1
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffab 	bl	80015a4 <set_pin_mode>
    set_pin_mode( &( bio_ssor->_mfio_pin ),  OUT );
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	3307      	adds	r3, #7
 8001652:	2101      	movs	r1, #1
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ffa5 	bl	80015a4 <set_pin_mode>
    return;
 800165a:	bf00      	nop
    } // end bio_sensor_init( )
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db10      	blt.n	80016d4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4909      	ldr	r1, [pc, #36]	; (80016e0 <__NVIC_DisableIRQ+0x40>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	3320      	adds	r3, #32
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016d0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <readMPU>:
#define MPU_SAD_R 0b11010001 // The last bit corresponds to R
#define MPU_SAD_W 0b11010000

#define MPU_SAD 0b1101000
uint8_t MPUbuf[10] = {0};
void readMPU(uint8_t* val, uint8_t reg_addr, size_t len){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	460b      	mov	r3, r1
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef ret;
      MPUbuf[0] = reg_addr;
 80016f2:	4a21      	ldr	r2, [pc, #132]	; (8001778 <readMPU+0x94>)
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	7013      	strb	r3, [r2, #0]
      ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 1, 1000);
 80016f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2301      	movs	r3, #1
 8001700:	4a1d      	ldr	r2, [pc, #116]	; (8001778 <readMPU+0x94>)
 8001702:	21d0      	movs	r1, #208	; 0xd0
 8001704:	481d      	ldr	r0, [pc, #116]	; (800177c <readMPU+0x98>)
 8001706:	f002 fba7 	bl	8003e58 <HAL_I2C_Master_Transmit>
 800170a:	4603      	mov	r3, r0
 800170c:	74fb      	strb	r3, [r7, #19]
      if (ret != HAL_OK) {
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <readMPU+0x3c>
          printf("Error reading Data from MPU reg: %d \n", reg_addr);
 8001714:	7afb      	ldrb	r3, [r7, #11]
 8001716:	4619      	mov	r1, r3
 8001718:	4819      	ldr	r0, [pc, #100]	; (8001780 <readMPU+0x9c>)
 800171a:	f007 fb93 	bl	8008e44 <iprintf>
          return;
 800171e:	e027      	b.n	8001770 <readMPU+0x8c>
      }
      ret = HAL_I2C_Master_Receive(&hi2c3, MPU_SAD_R, &MPUbuf[0], len, 1000);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	b29a      	uxth	r2, r3
 8001724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <readMPU+0x94>)
 800172e:	21d1      	movs	r1, #209	; 0xd1
 8001730:	4812      	ldr	r0, [pc, #72]	; (800177c <readMPU+0x98>)
 8001732:	f002 fc85 	bl	8004040 <HAL_I2C_Master_Receive>
 8001736:	4603      	mov	r3, r0
 8001738:	74fb      	strb	r3, [r7, #19]
      if (ret != HAL_OK) printf("Error reading Data from MPU reg: %d size: %d\n", reg_addr, len);
 800173a:	7cfb      	ldrb	r3, [r7, #19]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <readMPU+0x68>
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4619      	mov	r1, r3
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <readMPU+0xa0>)
 8001748:	f007 fb7c 	bl	8008e44 <iprintf>
      for(size_t i=0; i<len; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <readMPU+0x84>
          val[i] = MPUbuf[i];
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	4907      	ldr	r1, [pc, #28]	; (8001778 <readMPU+0x94>)
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	440a      	add	r2, r1
 800175e:	7812      	ldrb	r2, [r2, #0]
 8001760:	701a      	strb	r2, [r3, #0]
      for(size_t i=0; i<len; i++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3f0      	bcc.n	8001752 <readMPU+0x6e>
}
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200005fc 	.word	0x200005fc
 800177c:	20000618 	.word	0x20000618
 8001780:	0800b484 	.word	0x0800b484
 8001784:	0800b4ac 	.word	0x0800b4ac

08001788 <writeMPU>:

void writeMPU(uint8_t val, uint8_t reg_addr){
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af02      	add	r7, sp, #8
 800178e:	4603      	mov	r3, r0
 8001790:	460a      	mov	r2, r1
 8001792:	71fb      	strb	r3, [r7, #7]
 8001794:	4613      	mov	r3, r2
 8001796:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;
    MPUbuf[0] = reg_addr;
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <writeMPU+0x4c>)
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	7013      	strb	r3, [r2, #0]
    MPUbuf[1] = val;
 800179e:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <writeMPU+0x4c>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	7053      	strb	r3, [r2, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 2, 1000);
 80017a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2302      	movs	r3, #2
 80017ac:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <writeMPU+0x4c>)
 80017ae:	21d0      	movs	r1, #208	; 0xd0
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <writeMPU+0x50>)
 80017b2:	f002 fb51 	bl	8003e58 <HAL_I2C_Master_Transmit>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) printf("Error writing to MPU reg: %d = %d\n", reg_addr, val);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <writeMPU+0x44>
 80017c0:	79bb      	ldrb	r3, [r7, #6]
 80017c2:	79fa      	ldrb	r2, [r7, #7]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <writeMPU+0x54>)
 80017c8:	f007 fb3c 	bl	8008e44 <iprintf>
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	200005fc 	.word	0x200005fc
 80017d8:	20000618 	.word	0x20000618
 80017dc:	0800b4dc 	.word	0x0800b4dc

080017e0 <SetupMPU>:
#define MPU_ACC_X_OUT           0x3b
#define MPU_GYRO_X_OUT          0x43

#define MPU_OUTPUT_RATE         8000 // default output rate in Hz

void SetupMPU(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
      uint8_t mpu_id;
      readMPU(&mpu_id, MPU_WHO_AM_I, 1);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2201      	movs	r2, #1
 80017ea:	2175      	movs	r1, #117	; 0x75
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff79 	bl	80016e4 <readMPU>
      printf("Setting up MPU Device on I2C3...\n");
 80017f2:	483a      	ldr	r0, [pc, #232]	; (80018dc <SetupMPU+0xfc>)
 80017f4:	f007 fb9a 	bl	8008f2c <puts>
      if (mpu_id != 104) {
 80017f8:	793b      	ldrb	r3, [r7, #4]
 80017fa:	2b68      	cmp	r3, #104	; 0x68
 80017fc:	d005      	beq.n	800180a <SetupMPU+0x2a>
          printf("[ERROR] MPU Device Setup Failed!!!\n");
 80017fe:	4838      	ldr	r0, [pc, #224]	; (80018e0 <SetupMPU+0x100>)
 8001800:	f007 fb94 	bl	8008f2c <puts>
          exit(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f006 fc7f 	bl	8008108 <exit>
      }
      // reset and wait up from sleep
      uint8_t mpu_pwr_1= 0b10000000;
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	216b      	movs	r1, #107	; 0x6b
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffb8 	bl	8001788 <writeMPU>
      HAL_Delay(100);
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	f001 ff8d 	bl	8003738 <HAL_Delay>
      mpu_pwr_1 = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	216b      	movs	r1, #107	; 0x6b
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ffae 	bl	8001788 <writeMPU>

      // config sampling rate
      uint8_t mpu_sample_div = MPU_OUTPUT_RATE / MPU_SampleRate;
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	71bb      	strb	r3, [r7, #6]
      writeMPU(mpu_sample_div, MPU_SMPRT_DIV);
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	2119      	movs	r1, #25
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ffa7 	bl	8001788 <writeMPU>

      // config reg
      uint8_t mpu_config_reg;
      mpu_config_reg = 0b001 << 3;
 800183a:	2308      	movs	r3, #8
 800183c:	717b      	strb	r3, [r7, #5]
      writeMPU(mpu_config_reg, MPU_CONFIG_REG);
 800183e:	797b      	ldrb	r3, [r7, #5]
 8001840:	211a      	movs	r1, #26
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffa0 	bl	8001788 <writeMPU>


      // gyro config
      uint8_t mpu_gyro_config = 0b11 << 3;
 8001848:	2318      	movs	r3, #24
 800184a:	70fb      	strb	r3, [r7, #3]
      writeMPU(mpu_gyro_config, MPU_GYRO_CONFIG);
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	211b      	movs	r1, #27
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff99 	bl	8001788 <writeMPU>
      readMPU(&mpu_gyro_config, MPU_GYRO_CONFIG, 1);
 8001856:	1cfb      	adds	r3, r7, #3
 8001858:	2201      	movs	r2, #1
 800185a:	211b      	movs	r1, #27
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff41 	bl	80016e4 <readMPU>
      if (mpu_gyro_config != 0b11 << 3) {
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	2b18      	cmp	r3, #24
 8001866:	d005      	beq.n	8001874 <SetupMPU+0x94>
          printf("[ERROR] MPU GyroMeter Setup Failed!!!");
 8001868:	481e      	ldr	r0, [pc, #120]	; (80018e4 <SetupMPU+0x104>)
 800186a:	f007 faeb 	bl	8008e44 <iprintf>
          exit(1);
 800186e:	2001      	movs	r0, #1
 8001870:	f006 fc4a 	bl	8008108 <exit>
      }

      // Acc config
      uint8_t mpu_acc_config;
      mpu_acc_config = 0b11 << 3;
 8001874:	2318      	movs	r3, #24
 8001876:	70bb      	strb	r3, [r7, #2]
      writeMPU(mpu_acc_config, MPU_ACC_CONFIG);
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	211c      	movs	r1, #28
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff83 	bl	8001788 <writeMPU>
      readMPU(&mpu_acc_config, MPU_ACC_CONFIG, 1);
 8001882:	1cbb      	adds	r3, r7, #2
 8001884:	2201      	movs	r2, #1
 8001886:	211c      	movs	r1, #28
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff2b 	bl	80016e4 <readMPU>
      if (mpu_acc_config != 0b11 << 3) {
 800188e:	78bb      	ldrb	r3, [r7, #2]
 8001890:	2b18      	cmp	r3, #24
 8001892:	d005      	beq.n	80018a0 <SetupMPU+0xc0>
          printf("[ERROR] MPU Acc Setup Failed!!!\n");
 8001894:	4814      	ldr	r0, [pc, #80]	; (80018e8 <SetupMPU+0x108>)
 8001896:	f007 fb49 	bl	8008f2c <puts>
          exit(1);
 800189a:	2001      	movs	r0, #1
 800189c:	f006 fc34 	bl	8008108 <exit>
      }

      // Generate interrupt at each data ready
      // set DATA_RDY_EN = 1
      uint8_t mpu_int_enable;
      mpu_int_enable = 0b1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	707b      	strb	r3, [r7, #1]
      writeMPU(mpu_int_enable, MPU_INT_ENABLE);
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2138      	movs	r1, #56	; 0x38
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff6d 	bl	8001788 <writeMPU>
      readMPU(&mpu_int_enable, MPU_INT_ENABLE, 1);
 80018ae:	1c7b      	adds	r3, r7, #1
 80018b0:	2201      	movs	r2, #1
 80018b2:	2138      	movs	r1, #56	; 0x38
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff15 	bl	80016e4 <readMPU>
      if (mpu_int_enable != 1) {
 80018ba:	787b      	ldrb	r3, [r7, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <SetupMPU+0xec>
          printf("[ERROR] MPU interrupt Setup Failed!!!\n");
 80018c0:	480a      	ldr	r0, [pc, #40]	; (80018ec <SetupMPU+0x10c>)
 80018c2:	f007 fb33 	bl	8008f2c <puts>
          exit(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f006 fc1e 	bl	8008108 <exit>
      }

      printf("...MPU Setup Success\n");
 80018cc:	4808      	ldr	r0, [pc, #32]	; (80018f0 <SetupMPU+0x110>)
 80018ce:	f007 fb2d 	bl	8008f2c <puts>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800b500 	.word	0x0800b500
 80018e0:	0800b524 	.word	0x0800b524
 80018e4:	0800b548 	.word	0x0800b548
 80018e8:	0800b570 	.word	0x0800b570
 80018ec:	0800b590 	.word	0x0800b590
 80018f0:	0800b5b8 	.word	0x0800b5b8

080018f4 <MPUSleep>:

void MPUSleep(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
    uint8_t mpu_pwr_1 = 1 << 6;
 80018fa:	2340      	movs	r3, #64	; 0x40
 80018fc:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	216b      	movs	r1, #107	; 0x6b
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff40 	bl	8001788 <writeMPU>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <getMPU>:
    float Gyrx;
    float Gyry;
    float Gyrz;
}MPU_measure;

MPU_measure getMPU(){
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b090      	sub	sp, #64	; 0x40
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    MPU_measure rt;
    // Read from x-axis:
      uint8_t raw_acc[6];
      readMPU(raw_acc, MPU_ACC_X_OUT, 6);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2206      	movs	r2, #6
 800191e:	213b      	movs	r1, #59	; 0x3b
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fedf 	bl	80016e4 <readMPU>
      int16_t raw_x, raw_y, raw_z;
      raw_x = raw_acc[0] << 8 | raw_acc[1];
 8001926:	7d3b      	ldrb	r3, [r7, #20]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	b21a      	sxth	r2, r3
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	87fb      	strh	r3, [r7, #62]	; 0x3e
      raw_y = raw_acc[2] << 8 | raw_acc[3];
 8001934:	7dbb      	ldrb	r3, [r7, #22]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	87bb      	strh	r3, [r7, #60]	; 0x3c
      raw_z = raw_acc[4] << 8 | raw_acc[5];
 8001942:	7e3b      	ldrb	r3, [r7, #24]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7e7b      	ldrb	r3, [r7, #25]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	877b      	strh	r3, [r7, #58]	; 0x3a
      rt.Accx = (float)(raw_x)/2048.0;
 8001950:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195c:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001a80 <getMPU+0x170>
 8001960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001964:	edc7 7a07 	vstr	s15, [r7, #28]
      rt.Accy = (float)(raw_y)/2048.0;
 8001968:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001974:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001a80 <getMPU+0x170>
 8001978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197c:	edc7 7a08 	vstr	s15, [r7, #32]
      rt.Accz = (float)(raw_z)/2048.0;
 8001980:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001a80 <getMPU+0x170>
 8001990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001994:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//    printf("Acc X: %f Gs Y: %f Gs Z: %f Gs \n", Accx, Accy, Accz);
      uint8_t raw_gyro[6];
      readMPU(raw_gyro, MPU_GYRO_X_OUT, 6);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2206      	movs	r2, #6
 800199e:	2143      	movs	r1, #67	; 0x43
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe9f 	bl	80016e4 <readMPU>
      int16_t raw_x_g, raw_y_g, raw_z_g;
      raw_x_g = raw_gyro[0] << 8 | raw_gyro[1];
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	7b7b      	ldrb	r3, [r7, #13]
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	873b      	strh	r3, [r7, #56]	; 0x38
      raw_y_g = raw_gyro[2] << 8 | raw_gyro[3];
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	86fb      	strh	r3, [r7, #54]	; 0x36
      raw_z_g = raw_gyro[4] << 8 | raw_gyro[5];
 80019c2:	7c3b      	ldrb	r3, [r7, #16]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	7c7b      	ldrb	r3, [r7, #17]
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	86bb      	strh	r3, [r7, #52]	; 0x34
      rt.Gyrx = (float)(raw_x_g)/65.532;
 80019d0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019dc:	ee17 0a90 	vmov	r0, s15
 80019e0:	f7fe fdda 	bl	8000598 <__aeabi_f2d>
 80019e4:	a324      	add	r3, pc, #144	; (adr r3, 8001a78 <getMPU+0x168>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe ff57 	bl	800089c <__aeabi_ddiv>
 80019ee:	4603      	mov	r3, r0
 80019f0:	460c      	mov	r4, r1
 80019f2:	4618      	mov	r0, r3
 80019f4:	4621      	mov	r1, r4
 80019f6:	f7ff f8ff 	bl	8000bf8 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
      rt.Gyry = (float)(raw_y_g)/65.532;
 80019fe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f7fe fdc3 	bl	8000598 <__aeabi_f2d>
 8001a12:	a319      	add	r3, pc, #100	; (adr r3, 8001a78 <getMPU+0x168>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	f7fe ff40 	bl	800089c <__aeabi_ddiv>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	4618      	mov	r0, r3
 8001a22:	4621      	mov	r1, r4
 8001a24:	f7ff f8e8 	bl	8000bf8 <__aeabi_d2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      rt.Gyrz = (float)(raw_z_g)/65.532;
 8001a2c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a38:	ee17 0a90 	vmov	r0, s15
 8001a3c:	f7fe fdac 	bl	8000598 <__aeabi_f2d>
 8001a40:	a30d      	add	r3, pc, #52	; (adr r3, 8001a78 <getMPU+0x168>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f7fe ff29 	bl	800089c <__aeabi_ddiv>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4621      	mov	r1, r4
 8001a52:	f7ff f8d1 	bl	8000bf8 <__aeabi_d2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
//    printf("Gyro X: %f deg/s Y: %f deg/s Z: %f deg/s\n", Gx, Gy, Gz);
      return rt;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	f107 041c 	add.w	r4, r7, #28
 8001a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a6a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	3740      	adds	r7, #64	; 0x40
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdb0      	pop	{r4, r5, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	49ba5e35 	.word	0x49ba5e35
 8001a7c:	4050620c 	.word	0x4050620c
 8001a80:	45000000 	.word	0x45000000
 8001a84:	00000000 	.word	0x00000000

08001a88 <detect_fall>:
unsigned int fall_window=0;


/* pushes MPU data to usb */

void detect_fall(MPU_measure m){
 8001a88:	b084      	sub	sp, #16
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	f107 0c10 	add.w	ip, r7, #16
 8001a94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    float accsq;
    accsq = m.Accx * m.Accx + m.Accy * m.Accy + m.Accz * m.Accz;
 8001a98:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	edd7 6a05 	vldr	s13, [r7, #20]
 8001aa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ab8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	edc7 7a01 	vstr	s15, [r7, #4]
    if (accsq <= ACC_LFT_SQ && !fall_window)
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fd65 	bl	8000598 <__aeabi_f2d>
 8001ace:	a32c      	add	r3, pc, #176	; (adr r3, 8001b80 <detect_fall+0xf8>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7ff f834 	bl	8000b40 <__aeabi_dcmple>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <detect_fall+0x64>
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <detect_fall+0xf0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <detect_fall+0x64>
        fall_window = FALL_DETECT_SAMPLES;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <detect_fall+0xf0>)
 8001ae8:	2228      	movs	r2, #40	; 0x28
 8001aea:	601a      	str	r2, [r3, #0]
    if (!fall_window) return;
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <detect_fall+0xf0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d032      	beq.n	8001b5a <detect_fall+0xd2>
    fall_window--;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <detect_fall+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <detect_fall+0xf0>)
 8001afc:	6013      	str	r3, [r2, #0]
    if (accsq < ACC_UFT_SQ) return;
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe fd4a 	bl	8000598 <__aeabi_f2d>
 8001b04:	a31a      	add	r3, pc, #104	; (adr r3, 8001b70 <detect_fall+0xe8>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7ff f80f 	bl	8000b2c <__aeabi_dcmplt>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d124      	bne.n	8001b5e <detect_fall+0xd6>
    float gyrsq;
    gyrsq = m.Gyrx * m.Gyrx + m.Gyry * m.Gyry + m.Gyrz * m.Gyrz;
 8001b14:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b20:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b24:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b30:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b40:	edc7 7a00 	vstr	s15, [r7]
    if (gyrsq < GYR_UFT_SQ) return;
 8001b44:	edd7 7a00 	vldr	s15, [r7]
 8001b48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	d407      	bmi.n	8001b62 <detect_fall+0xda>
    fall_detected = 1;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <detect_fall+0xf4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e004      	b.n	8001b64 <detect_fall+0xdc>
    if (!fall_window) return;
 8001b5a:	bf00      	nop
 8001b5c:	e002      	b.n	8001b64 <detect_fall+0xdc>
    if (accsq < ACC_UFT_SQ) return;
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <detect_fall+0xdc>
    if (gyrsq < GYR_UFT_SQ) return;
 8001b62:	bf00      	nop
}
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b6c:	b004      	add	sp, #16
 8001b6e:	4770      	bx	lr
 8001b70:	7ae147ae 	.word	0x7ae147ae
 8001b74:	401eae14 	.word	0x401eae14
 8001b78:	20000608 	.word	0x20000608
 8001b7c:	200005f8 	.word	0x200005f8
 8001b80:	70a3d70a 	.word	0x70a3d70a
 8001b84:	3ff70a3d 	.word	0x3ff70a3d

08001b88 <push_MPU_data>:
void push_MPU_data(MPU_measure m){
 8001b88:	b084      	sub	sp, #16
 8001b8a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b8e:	b090      	sub	sp, #64	; 0x40
 8001b90:	af0c      	add	r7, sp, #48	; 0x30
 8001b92:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("%f,%f,%f,%f,%f,%f,%d,%d\n", m.Accx, m.Accy, m.Accz, m.Gyrx, m.Gyry, m.Gyrz, fall_window, fall_detected);
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fcfb 	bl	8000598 <__aeabi_f2d>
 8001ba2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcf5 	bl	8000598 <__aeabi_f2d>
 8001bae:	4604      	mov	r4, r0
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcef 	bl	8000598 <__aeabi_f2d>
 8001bba:	4680      	mov	r8, r0
 8001bbc:	4689      	mov	r9, r1
 8001bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fce9 	bl	8000598 <__aeabi_f2d>
 8001bc6:	4682      	mov	sl, r0
 8001bc8:	468b      	mov	fp, r1
 8001bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fce3 	bl	8000598 <__aeabi_f2d>
 8001bd2:	e9c7 0100 	strd	r0, r1, [r7]
 8001bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcdd 	bl	8000598 <__aeabi_f2d>
 8001bde:	460a      	mov	r2, r1
 8001be0:	4601      	mov	r1, r0
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <push_MPU_data+0x98>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <push_MPU_data+0x9c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bec:	900a      	str	r0, [sp, #40]	; 0x28
 8001bee:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8001bf2:	ed97 7b00 	vldr	d7, [r7]
 8001bf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bfa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001bfe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c02:	e9cd 4500 	strd	r4, r5, [sp]
 8001c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c0a:	4807      	ldr	r0, [pc, #28]	; (8001c28 <push_MPU_data+0xa0>)
 8001c0c:	f007 f91a 	bl	8008e44 <iprintf>
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c1a:	b004      	add	sp, #16
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000608 	.word	0x20000608
 8001c24:	200005f8 	.word	0x200005f8
 8001c28:	0800b5d0 	.word	0x0800b5d0

08001c2c <MPU_Interrupt>:

void MPU_Interrupt(){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af02      	add	r7, sp, #8
    /* read MPU */
    MPU_measure mpu_data = getMPU();
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fe6a 	bl	8001910 <getMPU>
    push_MPU_data(mpu_data);
 8001c3c:	466a      	mov	r2, sp
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c46:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c50:	f7ff ff9a 	bl	8001b88 <push_MPU_data>
    detect_fall(mpu_data);
 8001c54:	466a      	mov	r2, sp
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c5e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c68:	f7ff ff0e 	bl	8001a88 <detect_fall>

    /* clear interrupt*/
    uint8_t mpu_int_status;
    readMPU(&mpu_int_status, MPU_INT_STATUS, 1);
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	2201      	movs	r2, #1
 8001c70:	213a      	movs	r1, #58	; 0x3a
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fd36 	bl	80016e4 <readMPU>
    if ((mpu_int_status & 0b1) != 1) {
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d105      	bne.n	8001c8e <MPU_Interrupt+0x62>
        printf("[ERROR] MPU interrupt Clear Failed!!!!\n");
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MPU_Interrupt+0x6c>)
 8001c84:	f007 f952 	bl	8008f2c <puts>
        exit(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f006 fa3d 	bl	8008108 <exit>
    }
}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800b5ec 	.word	0x0800b5ec

08001c9c <Beep_sos>:


void Beep_sos(){
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
    TIM4->ARR = 2000;
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <Beep_sos+0xb4>)
 8001ca4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    for(int j=0; j<5; j++){
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e048      	b.n	8001d42 <Beep_sos+0xa6>
    for (int i=0; i<3; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	e00f      	b.n	8001cd6 <Beep_sos+0x3a>
    TIM4->CCR2 = 1000;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <Beep_sos+0xb4>)
 8001cb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(90);
 8001cbe:	205a      	movs	r0, #90	; 0x5a
 8001cc0:	f001 fd3a 	bl	8003738 <HAL_Delay>
    TIM4->CCR2 = 0;
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <Beep_sos+0xb4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(90);
 8001cca:	205a      	movs	r0, #90	; 0x5a
 8001ccc:	f001 fd34 	bl	8003738 <HAL_Delay>
    for (int i=0; i<3; i++){
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	ddec      	ble.n	8001cb6 <Beep_sos+0x1a>
    }
    for (int i=0; i<3; i++){
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	e00f      	b.n	8001d02 <Beep_sos+0x66>
        TIM4->CCR2 = 1000;
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <Beep_sos+0xb4>)
 8001ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(180);
 8001cea:	20b4      	movs	r0, #180	; 0xb4
 8001cec:	f001 fd24 	bl	8003738 <HAL_Delay>
        TIM4->CCR2 = 0;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <Beep_sos+0xb4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8001cf6:	205a      	movs	r0, #90	; 0x5a
 8001cf8:	f001 fd1e 	bl	8003738 <HAL_Delay>
    for (int i=0; i<3; i++){
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	ddec      	ble.n	8001ce2 <Beep_sos+0x46>
        }
    for (int i=0; i<3; i++){
 8001d08:	2300      	movs	r3, #0
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	e00f      	b.n	8001d2e <Beep_sos+0x92>
        TIM4->CCR2 = 1000;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <Beep_sos+0xb4>)
 8001d10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8001d16:	205a      	movs	r0, #90	; 0x5a
 8001d18:	f001 fd0e 	bl	8003738 <HAL_Delay>
        TIM4->CCR2 = 0;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <Beep_sos+0xb4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8001d22:	205a      	movs	r0, #90	; 0x5a
 8001d24:	f001 fd08 	bl	8003738 <HAL_Delay>
    for (int i=0; i<3; i++){
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	ddec      	ble.n	8001d0e <Beep_sos+0x72>
    }
    HAL_Delay(300);
 8001d34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d38:	f001 fcfe 	bl	8003738 <HAL_Delay>
    for(int j=0; j<5; j++){
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	ddb3      	ble.n	8001cb0 <Beep_sos+0x14>
    }

}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40000800 	.word	0x40000800

08001d54 <Beep_sendmsg_warning>:

void Beep_sendmsg_warning(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
    for (int i=0; i<6; i++){
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	e018      	b.n	8001d92 <Beep_sendmsg_warning+0x3e>
        TIM4->ARR = 3000;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <Beep_sendmsg_warning+0x54>)
 8001d62:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM4->CCR2 = 1500;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <Beep_sendmsg_warning+0x54>)
 8001d6a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(150);
 8001d70:	2096      	movs	r0, #150	; 0x96
 8001d72:	f001 fce1 	bl	8003738 <HAL_Delay>
        TIM4->ARR = 2000;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <Beep_sendmsg_warning+0x54>)
 8001d78:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM4->CCR2 = 1000;
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <Beep_sendmsg_warning+0x54>)
 8001d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(150);
 8001d86:	2096      	movs	r0, #150	; 0x96
 8001d88:	f001 fcd6 	bl	8003738 <HAL_Delay>
    for (int i=0; i<6; i++){
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	dde3      	ble.n	8001d60 <Beep_sendmsg_warning+0xc>
    }
    TIM4->CCR2 =0;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <Beep_sendmsg_warning+0x54>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40000800 	.word	0x40000800

08001dac <Beep_reset>:

void Beep_reset(){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
    TIM4->ARR = 2000;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <Beep_reset+0x40>)
 8001db2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCR2 = 1000;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <Beep_reset+0x40>)
 8001dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);
 8001dc0:	2014      	movs	r0, #20
 8001dc2:	f001 fcb9 	bl	8003738 <HAL_Delay>
    TIM4->ARR = 4000;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <Beep_reset+0x40>)
 8001dc8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCR2 = 2000;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <Beep_reset+0x40>)
 8001dd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);
 8001dd6:	2014      	movs	r0, #20
 8001dd8:	f001 fcae 	bl	8003738 <HAL_Delay>
    TIM4->CCR2 =0;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <Beep_reset+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
    printf( "Reset beeper!\n\r" );
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <Beep_reset+0x44>)
 8001de4:	f007 f82e 	bl	8008e44 <iprintf>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40000800 	.word	0x40000800
 8001df0:	0800b614 	.word	0x0800b614

08001df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df8:	b0de      	sub	sp, #376	; 0x178
 8001dfa:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  Cellular_module_t cell;
  SparkFun_Bio_Sensor_t sensor;

  NVIC_DisableIRQ(EXTI4_IRQn);
 8001dfc:	200a      	movs	r0, #10
 8001dfe:	f7ff fc4f 	bl	80016a0 <__NVIC_DisableIRQ>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e02:	f001 fc24 	bl	800364e <HAL_Init>

  /* USER CODE BEGIN Init */
  cell.uart_ptr = &huart3;
 8001e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <main+0x8c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0e:	f000 fcbb 	bl	8002788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e12:	f000 fe8b 	bl	8002b2c <MX_GPIO_Init>
  MX_I2C3_Init();
 8001e16:	f000 fd3b 	bl	8002890 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001e1a:	f000 fd77 	bl	800290c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8001e1e:	f000 fe0d 	bl	8002a3c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001e22:	f000 fdbf 	bl	80029a4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001e26:	f000 fcf5 	bl	8002814 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n");
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <main+0x90>)
 8001e2c:	f007 f87e 	bl	8008f2c <puts>

  printf( "Initializing!\n\r" );
 8001e30:	4815      	ldr	r0, [pc, #84]	; (8001e88 <main+0x94>)
 8001e32:	f007 f807 	bl	8008e44 <iprintf>
  if ( !begin( &cell ) )
 8001e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff f924 	bl	8001088 <begin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <main+0x64>
    {
    printf( "Failed initialization\n\r" );
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <main+0x98>)
 8001e4e:	f006 fff9 	bl	8008e44 <iprintf>
    return 1;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f000 bc7c 	b.w	8002750 <main+0x95c>
    }
  else
    {
    printf( "Found SIM7000 using hardware serial\n\r" );
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <main+0x9c>)
 8001e5a:	f006 fff3 	bl	8008e44 <iprintf>
    }

  if ( !setNetworkSettings( &cell ) )
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fb0c 	bl	8001480 <setNetworkSettings>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d011      	beq.n	8001e98 <main+0xa4>
    {
    printf( "Network settings NOT set\n\r" );
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <main+0xa0>)
 8001e76:	f006 ffe5 	bl	8008e44 <iprintf>
    return 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f000 bc68 	b.w	8002750 <main+0x95c>
 8001e80:	200006b0 	.word	0x200006b0
 8001e84:	0800b624 	.word	0x0800b624
 8001e88:	0800b628 	.word	0x0800b628
 8001e8c:	0800b638 	.word	0x0800b638
 8001e90:	0800b650 	.word	0x0800b650
 8001e94:	0800b678 	.word	0x0800b678
    }
  else
    {
    printf( "Network settings set\n\r" );
 8001e98:	48d9      	ldr	r0, [pc, #868]	; (8002200 <main+0x40c>)
 8001e9a:	f006 ffd3 	bl	8008e44 <iprintf>

  /*biometric sensor setup*/
  /*--------------begin------------------*/
	  HAL_StatusTypeDef ret;
	  uint8_t buf[20];
	  int HM_samples = 0x1;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  	  bio_sensor_init( &sensor, &hi2c1, HM_ADDR, rst_pin_c, mfio_pin_c, def_sample_rate, DISABLE );
 8001ea4:	2364      	movs	r3, #100	; 0x64
 8001ea6:	49d7      	ldr	r1, [pc, #860]	; (8002204 <main+0x410>)
 8001ea8:	f107 0018 	add.w	r0, r7, #24
 8001eac:	2200      	movs	r2, #0
 8001eae:	9202      	str	r2, [sp, #8]
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	4ad5      	ldr	r2, [pc, #852]	; (8002208 <main+0x414>)
 8001eb4:	466b      	mov	r3, sp
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	4614      	mov	r4, r2
 8001eba:	801c      	strh	r4, [r3, #0]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	0c12      	lsrs	r2, r2, #16
 8001ec0:	701a      	strb	r2, [r3, #0]
 8001ec2:	680b      	ldr	r3, [r1, #0]
 8001ec4:	2255      	movs	r2, #85	; 0x55
 8001ec6:	49d1      	ldr	r1, [pc, #836]	; (800220c <main+0x418>)
 8001ec8:	f7ff fb88 	bl	80015dc <bio_sensor_init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0); // Reset pin
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2101      	movs	r1, #1
 8001ed0:	48cf      	ldr	r0, [pc, #828]	; (8002210 <main+0x41c>)
 8001ed2:	f001 fef7 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  1); // MFIO pin
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2102      	movs	r1, #2
 8001eda:	48cd      	ldr	r0, [pc, #820]	; (8002210 <main+0x41c>)
 8001edc:	f001 fef2 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001ee0:	200a      	movs	r0, #10
 8001ee2:	f001 fc29 	bl	8003738 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1); // Reset is pulled
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2101      	movs	r1, #1
 8001eea:	48c9      	ldr	r0, [pc, #804]	; (8002210 <main+0x41c>)
 8001eec:	f001 feea 	bl	8003cc4 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f001 fc21 	bl	8003738 <HAL_Delay>
	  HAL_Delay(1000);
 8001ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efa:	f001 fc1d 	bl	8003738 <HAL_Delay>

	  buf[0] = 0x02;
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2202      	movs	r2, #2
 8001f02:	701a      	strb	r2, [r3, #0]
	  buf[1] = 0x00;
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	705a      	strb	r2, [r3, #1]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001f0a:	1d3a      	adds	r2, r7, #4
 8001f0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2302      	movs	r3, #2
 8001f14:	21aa      	movs	r1, #170	; 0xaa
 8001f16:	48bd      	ldr	r0, [pc, #756]	; (800220c <main+0x418>)
 8001f18:	f001 ff9e 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	  HAL_Delay(6);
 8001f22:	2006      	movs	r0, #6
 8001f24:	f001 fc08 	bl	8003738 <HAL_Delay>
	  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001f28:	1d3a      	adds	r2, r7, #4
 8001f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2302      	movs	r3, #2
 8001f32:	21ab      	movs	r1, #171	; 0xab
 8001f34:	48b5      	ldr	r0, [pc, #724]	; (800220c <main+0x418>)
 8001f36:	f002 f883 	bl	8004040 <HAL_I2C_Master_Receive>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	  printf("error code: %x application mode: %x\n\r", buf[0],buf[1]);
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	48b1      	ldr	r0, [pc, #708]	; (8002214 <main+0x420>)
 8001f4e:	f006 ff79 	bl	8008e44 <iprintf>
	  set_pin_mode( &sensor._mfio_pin, IN );
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	3307      	adds	r3, #7
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fb22 	bl	80015a4 <set_pin_mode>

	  buf[0] = 0x50;
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2250      	movs	r2, #80	; 0x50
 8001f64:	701a      	strb	r2, [r3, #0]
	  buf[1] = 0x02; //says 02 in another place
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	2202      	movs	r2, #2
 8001f6a:	705a      	strb	r2, [r3, #1]
	  buf[2] = 0x0B;
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	220b      	movs	r2, #11
 8001f70:	709a      	strb	r2, [r3, #2]

	  //A
	  buf[3] = 0x00;
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2200      	movs	r2, #0
 8001f76:	70da      	strb	r2, [r3, #3]
	  buf[4] = 0x02;
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	711a      	strb	r2, [r3, #4]
	  buf[5] = 0x6F;
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	226f      	movs	r2, #111	; 0x6f
 8001f82:	715a      	strb	r2, [r3, #5]
	  buf[6] = 0x60;
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2260      	movs	r2, #96	; 0x60
 8001f88:	719a      	strb	r2, [r3, #6]

	  //B
	  buf[7] = 0xFF;
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	22ff      	movs	r2, #255	; 0xff
 8001f8e:	71da      	strb	r2, [r3, #7]
	  buf[8] = 0xCB;
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	22cb      	movs	r2, #203	; 0xcb
 8001f94:	721a      	strb	r2, [r3, #8]
	  buf[9] = 0x1D;
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	221d      	movs	r2, #29
 8001f9a:	725a      	strb	r2, [r3, #9]
	  buf[10] = 0x12;
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2212      	movs	r2, #18
 8001fa0:	729a      	strb	r2, [r3, #10]

	    	//C
	  buf[11] = 0x00;
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	72da      	strb	r2, [r3, #11]
	  buf[12] = 0xAB;
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	22ab      	movs	r2, #171	; 0xab
 8001fac:	731a      	strb	r2, [r3, #12]
	  buf[13] = 0xF3;
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	22f3      	movs	r2, #243	; 0xf3
 8001fb2:	735a      	strb	r2, [r3, #13]
	  buf[14] = 0x7B;
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	227b      	movs	r2, #123	; 0x7b
 8001fb8:	739a      	strb	r2, [r3, #14]

	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 15, 5000);
 8001fba:	1d3a      	adds	r2, r7, #4
 8001fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	21aa      	movs	r1, #170	; 0xaa
 8001fc6:	4891      	ldr	r0, [pc, #580]	; (800220c <main+0x418>)
 8001fc8:	f001 ff46 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	  HAL_Delay(20);
 8001fd2:	2014      	movs	r0, #20
 8001fd4:	f001 fbb0 	bl	8003738 <HAL_Delay>
	  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001fd8:	1d3a      	adds	r2, r7, #4
 8001fda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	21ab      	movs	r1, #171	; 0xab
 8001fe4:	4889      	ldr	r0, [pc, #548]	; (800220c <main+0x418>)
 8001fe6:	f002 f82b 	bl	8004040 <HAL_I2C_Master_Receive>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	  if(buf[0] != 0x00 || ret != HAL_OK ){
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <main+0x20c>
 8001ff8:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <main+0x218>
		  printf("Error setting mode: code %x\n\r", buf[0]);
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	4884      	ldr	r0, [pc, #528]	; (8002218 <main+0x424>)
 8002008:	f006 ff1c 	bl	8008e44 <iprintf>
	  }
	printf("Callibrated SpO2!\n");
 800200c:	4883      	ldr	r0, [pc, #524]	; (800221c <main+0x428>)
 800200e:	f006 ff8d 	bl	8008f2c <puts>




	  /*set our mode to MODE 1*/
	    buf[0] = 0x10;
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2210      	movs	r2, #16
 8002016:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x00;
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x02;
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2202      	movs	r2, #2
 8002022:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8002024:	1d3a      	adds	r2, r7, #4
 8002026:	f241 3388 	movw	r3, #5000	; 0x1388
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2303      	movs	r3, #3
 800202e:	21aa      	movs	r1, #170	; 0xaa
 8002030:	4876      	ldr	r0, [pc, #472]	; (800220c <main+0x418>)
 8002032:	f001 ff11 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	    HAL_Delay(6);
 800203c:	2006      	movs	r0, #6
 800203e:	f001 fb7b 	bl	8003738 <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002042:	1d3a      	adds	r2, r7, #4
 8002044:	f241 3388 	movw	r3, #5000	; 0x1388
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	21ab      	movs	r1, #171	; 0xab
 800204e:	486f      	ldr	r0, [pc, #444]	; (800220c <main+0x418>)
 8002050:	f001 fff6 	bl	8004040 <HAL_I2C_Master_Receive>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	    if(buf[0] != 0x00 || ret != HAL_OK ){
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <main+0x276>
 8002062:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <main+0x282>
	        printf("Error setting mode: code %x\n\r", buf[0]);
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	4869      	ldr	r0, [pc, #420]	; (8002218 <main+0x424>)
 8002072:	f006 fee7 	bl	8008e44 <iprintf>
	    }
	    printf("mode set to raw and algo\n");
 8002076:	486a      	ldr	r0, [pc, #424]	; (8002220 <main+0x42c>)
 8002078:	f006 ff58 	bl	8008f2c <puts>

	    /*Set FIFO threshold as almost full at 0x0F*/
	    buf[0] = 0x10;
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2210      	movs	r2, #16
 8002080:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x01;
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2201      	movs	r2, #1
 8002086:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x1;
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2201      	movs	r2, #1
 800208c:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800208e:	1d3a      	adds	r2, r7, #4
 8002090:	f241 3388 	movw	r3, #5000	; 0x1388
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2303      	movs	r3, #3
 8002098:	21aa      	movs	r1, #170	; 0xaa
 800209a:	485c      	ldr	r0, [pc, #368]	; (800220c <main+0x418>)
 800209c:	f001 fedc 	bl	8003e58 <HAL_I2C_Master_Transmit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	    HAL_Delay(6);
 80020a6:	2006      	movs	r0, #6
 80020a8:	f001 fb46 	bl	8003738 <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80020ac:	1d3a      	adds	r2, r7, #4
 80020ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	21ab      	movs	r1, #171	; 0xab
 80020b8:	4854      	ldr	r0, [pc, #336]	; (800220c <main+0x418>)
 80020ba:	f001 ffc1 	bl	8004040 <HAL_I2C_Master_Receive>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	      if(buf[0] != 0x00 || ret != HAL_OK ){
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <main+0x2e0>
 80020cc:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <main+0x2ec>
	        printf("Error setting FIFO threshold code: %x\n\r", buf[0]);
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4852      	ldr	r0, [pc, #328]	; (8002224 <main+0x430>)
 80020dc:	f006 feb2 	bl	8008e44 <iprintf>
	      }
	    printf("fifo set\n");
 80020e0:	4851      	ldr	r0, [pc, #324]	; (8002228 <main+0x434>)
 80020e2:	f006 ff23 	bl	8008f2c <puts>
	    /*enable AGC*/
	    buf[0] = 0x52;
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2252      	movs	r2, #82	; 0x52
 80020ea:	701a      	strb	r2, [r3, #0]
	      buf[1] = 0x00;
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2200      	movs	r2, #0
 80020f0:	705a      	strb	r2, [r3, #1]
	      buf[2] = 0x1;
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2201      	movs	r2, #1
 80020f6:	709a      	strb	r2, [r3, #2]
	      ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80020f8:	1d3a      	adds	r2, r7, #4
 80020fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2303      	movs	r3, #3
 8002102:	21aa      	movs	r1, #170	; 0xaa
 8002104:	4841      	ldr	r0, [pc, #260]	; (800220c <main+0x418>)
 8002106:	f001 fea7 	bl	8003e58 <HAL_I2C_Master_Transmit>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	      HAL_Delay(25);
 8002110:	2019      	movs	r0, #25
 8002112:	f001 fb11 	bl	8003738 <HAL_Delay>
	      ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002116:	1d3a      	adds	r2, r7, #4
 8002118:	f241 3388 	movw	r3, #5000	; 0x1388
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	21ab      	movs	r1, #171	; 0xab
 8002122:	483a      	ldr	r0, [pc, #232]	; (800220c <main+0x418>)
 8002124:	f001 ff8c 	bl	8004040 <HAL_I2C_Master_Receive>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	        if(buf[0] != 0x00 || ret != HAL_OK ){
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <main+0x34a>
 8002136:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800213a:	2b00      	cmp	r3, #0
 800213c:	d005      	beq.n	800214a <main+0x356>
	          printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4839      	ldr	r0, [pc, #228]	; (800222c <main+0x438>)
 8002146:	f006 fe7d 	bl	8008e44 <iprintf>
	        }
	       printf("enable AGC \n");
 800214a:	4839      	ldr	r0, [pc, #228]	; (8002230 <main+0x43c>)
 800214c:	f006 feee 	bl	8008f2c <puts>



	    /*enable the sensor*/
	    buf[0] = 0x44;
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2244      	movs	r2, #68	; 0x44
 8002154:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x03;
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2203      	movs	r2, #3
 800215a:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x1;
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2201      	movs	r2, #1
 8002160:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8002162:	1d3a      	adds	r2, r7, #4
 8002164:	f241 3388 	movw	r3, #5000	; 0x1388
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2303      	movs	r3, #3
 800216c:	21aa      	movs	r1, #170	; 0xaa
 800216e:	4827      	ldr	r0, [pc, #156]	; (800220c <main+0x418>)
 8002170:	f001 fe72 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002174:	4603      	mov	r3, r0
 8002176:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	    HAL_Delay(45);
 800217a:	202d      	movs	r0, #45	; 0x2d
 800217c:	f001 fadc 	bl	8003738 <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002180:	1d3a      	adds	r2, r7, #4
 8002182:	f241 3388 	movw	r3, #5000	; 0x1388
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2301      	movs	r3, #1
 800218a:	21ab      	movs	r1, #171	; 0xab
 800218c:	481f      	ldr	r0, [pc, #124]	; (800220c <main+0x418>)
 800218e:	f001 ff57 	bl	8004040 <HAL_I2C_Master_Receive>
 8002192:	4603      	mov	r3, r0
 8002194:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	      if(buf[0] != 0x00 || ret != HAL_OK ){
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d103      	bne.n	80021a8 <main+0x3b4>
 80021a0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <main+0x3c0>
	        printf("Error enabling sensor code: %x\n\r", buf[0]);
 80021a8:	1d3b      	adds	r3, r7, #4
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	4821      	ldr	r0, [pc, #132]	; (8002234 <main+0x440>)
 80021b0:	f006 fe48 	bl	8008e44 <iprintf>
	      }
	      printf("sensor set\n");
 80021b4:	4820      	ldr	r0, [pc, #128]	; (8002238 <main+0x444>)
 80021b6:	f006 feb9 	bl	8008f2c <puts>


	    /*enable the algorithm*/

	      HAL_Delay(500);
 80021ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021be:	f001 fabb 	bl	8003738 <HAL_Delay>
	    buf[0] = 0x52;
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2252      	movs	r2, #82	; 0x52
 80021c6:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x02;
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2202      	movs	r2, #2
 80021cc:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x1;
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2201      	movs	r2, #1
 80021d2:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80021d4:	1d3a      	adds	r2, r7, #4
 80021d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2303      	movs	r3, #3
 80021de:	21aa      	movs	r1, #170	; 0xaa
 80021e0:	480a      	ldr	r0, [pc, #40]	; (800220c <main+0x418>)
 80021e2:	f001 fe39 	bl	8003e58 <HAL_I2C_Master_Transmit>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	    HAL_Delay(45);
 80021ec:	202d      	movs	r0, #45	; 0x2d
 80021ee:	f001 faa3 	bl	8003738 <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80021f2:	1d3a      	adds	r2, r7, #4
 80021f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	21ab      	movs	r1, #171	; 0xab
 80021fe:	e01d      	b.n	800223c <main+0x448>
 8002200:	0800b694 	.word	0x0800b694
 8002204:	0800ba78 	.word	0x0800ba78
 8002208:	0800ba7c 	.word	0x0800ba7c
 800220c:	20000740 	.word	0x20000740
 8002210:	48000c00 	.word	0x48000c00
 8002214:	0800b6ac 	.word	0x0800b6ac
 8002218:	0800b6d4 	.word	0x0800b6d4
 800221c:	0800b6f4 	.word	0x0800b6f4
 8002220:	0800b708 	.word	0x0800b708
 8002224:	0800b724 	.word	0x0800b724
 8002228:	0800b74c 	.word	0x0800b74c
 800222c:	0800b758 	.word	0x0800b758
 8002230:	0800b77c 	.word	0x0800b77c
 8002234:	0800b788 	.word	0x0800b788
 8002238:	0800b7ac 	.word	0x0800b7ac
 800223c:	48af      	ldr	r0, [pc, #700]	; (80024fc <main+0x708>)
 800223e:	f001 feff 	bl	8004040 <HAL_I2C_Master_Receive>
 8002242:	4603      	mov	r3, r0
 8002244:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

	      if(buf[0] != 0x00 || ret != HAL_OK ){
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <main+0x464>
 8002250:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <main+0x470>
	        printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	4619      	mov	r1, r3
 800225e:	48a8      	ldr	r0, [pc, #672]	; (8002500 <main+0x70c>)
 8002260:	f006 fdf0 	bl	8008e44 <iprintf>
	      }
	      printf("enable algorithm \n");
 8002264:	48a7      	ldr	r0, [pc, #668]	; (8002504 <main+0x710>)
 8002266:	f006 fe61 	bl	8008f2c <puts>


	    //setting LED 2 amplitude
	    buf[0] = 0x40;
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	701a      	strb	r2, [r3, #0]
		buf[1] = 0x03;
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2203      	movs	r2, #3
 8002274:	705a      	strb	r2, [r3, #1]
		buf[2] = 0x0D;
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	220d      	movs	r2, #13
 800227a:	709a      	strb	r2, [r3, #2]
		buf[3] = 0x32;
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	2232      	movs	r2, #50	; 0x32
 8002280:	70da      	strb	r2, [r3, #3]
		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 8002282:	1d3a      	adds	r2, r7, #4
 8002284:	f241 3388 	movw	r3, #5000	; 0x1388
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2304      	movs	r3, #4
 800228c:	21aa      	movs	r1, #170	; 0xaa
 800228e:	489b      	ldr	r0, [pc, #620]	; (80024fc <main+0x708>)
 8002290:	f001 fde2 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002294:	4603      	mov	r3, r0
 8002296:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		HAL_Delay(45);
 800229a:	202d      	movs	r0, #45	; 0x2d
 800229c:	f001 fa4c 	bl	8003738 <HAL_Delay>
		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80022a0:	1d3a      	adds	r2, r7, #4
 80022a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2301      	movs	r3, #1
 80022aa:	21ab      	movs	r1, #171	; 0xab
 80022ac:	4893      	ldr	r0, [pc, #588]	; (80024fc <main+0x708>)
 80022ae:	f001 fec7 	bl	8004040 <HAL_I2C_Master_Receive>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

		  if(buf[0] != 0x00 || ret != HAL_OK ){
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <main+0x4d4>
 80022c0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <main+0x4e0>
			printf("Error Changing LED2: %x\n\r", buf[0]);
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	488e      	ldr	r0, [pc, #568]	; (8002508 <main+0x714>)
 80022d0:	f006 fdb8 	bl	8008e44 <iprintf>
		  }
		  printf("modified LED2 amplitude \n");
 80022d4:	488d      	ldr	r0, [pc, #564]	; (800250c <main+0x718>)
 80022d6:	f006 fe29 	bl	8008f2c <puts>


		  //setting LED 1 amplitude
		buf[0] = 0x40;
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	2240      	movs	r2, #64	; 0x40
 80022de:	701a      	strb	r2, [r3, #0]
		buf[1] = 0x03;
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2203      	movs	r2, #3
 80022e4:	705a      	strb	r2, [r3, #1]
		buf[2] = 0x0C;
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	220c      	movs	r2, #12
 80022ea:	709a      	strb	r2, [r3, #2]
		buf[3] = 0x32;
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2232      	movs	r2, #50	; 0x32
 80022f0:	70da      	strb	r2, [r3, #3]
		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 80022f2:	1d3a      	adds	r2, r7, #4
 80022f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2304      	movs	r3, #4
 80022fc:	21aa      	movs	r1, #170	; 0xaa
 80022fe:	487f      	ldr	r0, [pc, #508]	; (80024fc <main+0x708>)
 8002300:	f001 fdaa 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		HAL_Delay(45);
 800230a:	202d      	movs	r0, #45	; 0x2d
 800230c:	f001 fa14 	bl	8003738 <HAL_Delay>
		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002310:	1d3a      	adds	r2, r7, #4
 8002312:	f241 3388 	movw	r3, #5000	; 0x1388
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	21ab      	movs	r1, #171	; 0xab
 800231c:	4877      	ldr	r0, [pc, #476]	; (80024fc <main+0x708>)
 800231e:	f001 fe8f 	bl	8004040 <HAL_I2C_Master_Receive>
 8002322:	4603      	mov	r3, r0
 8002324:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

		  if(buf[0] != 0x00 || ret != HAL_OK ){
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <main+0x544>
 8002330:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <main+0x550>
			printf("Error Changing LED1: %x\n\r", buf[0]);
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	4874      	ldr	r0, [pc, #464]	; (8002510 <main+0x71c>)
 8002340:	f006 fd80 	bl	8008e44 <iprintf>
		  }
		  printf("modified LED1 amplitude \n");
 8002344:	4873      	ldr	r0, [pc, #460]	; (8002514 <main+0x720>)
 8002346:	f006 fdf1 	bl	8008f2c <puts>



		  //setting ADC pulse width
		buf[0] = 0x40;
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	701a      	strb	r2, [r3, #0]
		buf[1] = 0x03;
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2203      	movs	r2, #3
 8002354:	705a      	strb	r2, [r3, #1]
		buf[2] = 0x0A;
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	220a      	movs	r2, #10
 800235a:	709a      	strb	r2, [r3, #2]
		buf[3] = 0x23;
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2223      	movs	r2, #35	; 0x23
 8002360:	70da      	strb	r2, [r3, #3]
		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 8002362:	1d3a      	adds	r2, r7, #4
 8002364:	f241 3388 	movw	r3, #5000	; 0x1388
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2304      	movs	r3, #4
 800236c:	21aa      	movs	r1, #170	; 0xaa
 800236e:	4863      	ldr	r0, [pc, #396]	; (80024fc <main+0x708>)
 8002370:	f001 fd72 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002374:	4603      	mov	r3, r0
 8002376:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		HAL_Delay(45);
 800237a:	202d      	movs	r0, #45	; 0x2d
 800237c:	f001 f9dc 	bl	8003738 <HAL_Delay>
		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002380:	1d3a      	adds	r2, r7, #4
 8002382:	f241 3388 	movw	r3, #5000	; 0x1388
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2301      	movs	r3, #1
 800238a:	21ab      	movs	r1, #171	; 0xab
 800238c:	485b      	ldr	r0, [pc, #364]	; (80024fc <main+0x708>)
 800238e:	f001 fe57 	bl	8004040 <HAL_I2C_Master_Receive>
 8002392:	4603      	mov	r3, r0
 8002394:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

		  if(buf[0] != 0x00 || ret != HAL_OK ){
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <main+0x5b4>
 80023a0:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <main+0x5c0>
			printf("Error Changing ADC: %x\n\r", buf[0]);
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	485a      	ldr	r0, [pc, #360]	; (8002518 <main+0x724>)
 80023b0:	f006 fd48 	bl	8008e44 <iprintf>
		  }
		  printf("modified ADC pulse width \n");
 80023b4:	4859      	ldr	r0, [pc, #356]	; (800251c <main+0x728>)
 80023b6:	f006 fdb9 	bl	8008f2c <puts>


		  //setting sample average
		buf[0] = 0x40;
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	701a      	strb	r2, [r3, #0]
		buf[1] = 0x03;
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2203      	movs	r2, #3
 80023c4:	705a      	strb	r2, [r3, #1]
		buf[2] = 0x08;
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2208      	movs	r2, #8
 80023ca:	709a      	strb	r2, [r3, #2]
		buf[3] = 0x2F;
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	222f      	movs	r2, #47	; 0x2f
 80023d0:	70da      	strb	r2, [r3, #3]
		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 80023d2:	1d3a      	adds	r2, r7, #4
 80023d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2304      	movs	r3, #4
 80023dc:	21aa      	movs	r1, #170	; 0xaa
 80023de:	4847      	ldr	r0, [pc, #284]	; (80024fc <main+0x708>)
 80023e0:	f001 fd3a 	bl	8003e58 <HAL_I2C_Master_Transmit>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
		HAL_Delay(45);
 80023ea:	202d      	movs	r0, #45	; 0x2d
 80023ec:	f001 f9a4 	bl	8003738 <HAL_Delay>
		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80023f0:	1d3a      	adds	r2, r7, #4
 80023f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	21ab      	movs	r1, #171	; 0xab
 80023fc:	483f      	ldr	r0, [pc, #252]	; (80024fc <main+0x708>)
 80023fe:	f001 fe1f 	bl	8004040 <HAL_I2C_Master_Receive>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b

		  if(buf[0] != 0x00 || ret != HAL_OK ){
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <main+0x624>
 8002410:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <main+0x630>
			printf("Error Changing Sample Avg: %x\n\r", buf[0]);
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4840      	ldr	r0, [pc, #256]	; (8002520 <main+0x72c>)
 8002420:	f006 fd10 	bl	8008e44 <iprintf>
		  }
		  printf("modified Sample Avg \n");
 8002424:	483f      	ldr	r0, [pc, #252]	; (8002524 <main+0x730>)
 8002426:	f006 fd81 	bl	8008f2c <puts>





	    HAL_Delay(1000);
 800242a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800242e:	f001 f983 	bl	8003738 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fall_detected = 0;
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <main+0x734>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  Beep_reset(); // Ok to enable interrupts now
 8002438:	f7ff fcb8 	bl	8001dac <Beep_reset>
  SetupMPU();
 800243c:	f7ff f9d0 	bl	80017e0 <SetupMPU>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002440:	2104      	movs	r1, #4
 8002442:	483a      	ldr	r0, [pc, #232]	; (800252c <main+0x738>)
 8002444:	f003 ff6c 	bl	8006320 <HAL_TIM_PWM_Start>
  TIM4->CCR2 = 0;
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <main+0x73c>)
 800244a:	2200      	movs	r2, #0
 800244c:	639a      	str	r2, [r3, #56]	; 0x38

  NVIC_EnableIRQ(EXTI4_IRQn);
 800244e:	200a      	movs	r0, #10
 8002450:	f7ff f908 	bl	8001664 <__NVIC_EnableIRQ>
    while(1)
        {
        if (fall_detected)
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <main+0x734>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0fb      	beq.n	8002454 <main+0x660>
            {
            MPUSleep(); /* turn off MPU */
 800245c:	f7ff fa4a 	bl	80018f4 <MPUSleep>
            Beep_sos(); /* 30 sec */
 8002460:	f7ff fc1c 	bl	8001c9c <Beep_sos>
            Beep_sendmsg_warning(); /* 3 sec */
 8002464:	f7ff fc76 	bl	8001d54 <Beep_sendmsg_warning>
            // read biometric sensor
            buf[0] = 0x12;
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2212      	movs	r2, #18
 800246c:	701a      	strb	r2, [r3, #0]
            buf[1] = 0x01;
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2201      	movs	r2, #1
 8002472:	705a      	strb	r2, [r3, #1]
            int heart_rate = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
            int heart_rate_count = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
            float blood_oxygen = 0;
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            int blood_oxygen_count = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
            int status = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            for(int i = 0; i < 40; ++i){
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800249a:	e0f9      	b.n	8002690 <main+0x89c>
            	buf[0] = 0x00;
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
            	buf[1] = 0x00;
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2200      	movs	r2, #0
 80024a6:	705a      	strb	r2, [r3, #1]
            	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 80024a8:	1d3a      	adds	r2, r7, #4
 80024aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2302      	movs	r3, #2
 80024b2:	21aa      	movs	r1, #170	; 0xaa
 80024b4:	4811      	ldr	r0, [pc, #68]	; (80024fc <main+0x708>)
 80024b6:	f001 fccf 	bl	8003e58 <HAL_I2C_Master_Transmit>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
					  HAL_Delay(6);
 80024c0:	2006      	movs	r0, #6
 80024c2:	f001 f939 	bl	8003738 <HAL_Delay>
					  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 80024c6:	1d3a      	adds	r2, r7, #4
 80024c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	2302      	movs	r3, #2
 80024d0:	21ab      	movs	r1, #171	; 0xab
 80024d2:	480a      	ldr	r0, [pc, #40]	; (80024fc <main+0x708>)
 80024d4:	f001 fdb4 	bl	8004040 <HAL_I2C_Master_Receive>
 80024d8:	4603      	mov	r3, r0
 80024da:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
				if(buf[1] != 0 || buf[0] != 0){
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <main+0x6fa>
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d022      	beq.n	8002534 <main+0x740>
					i = i - 1;
 80024ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
					continue;
 80024f8:	e0c5      	b.n	8002686 <main+0x892>
 80024fa:	bf00      	nop
 80024fc:	20000740 	.word	0x20000740
 8002500:	0800b758 	.word	0x0800b758
 8002504:	0800b7b8 	.word	0x0800b7b8
 8002508:	0800b7cc 	.word	0x0800b7cc
 800250c:	0800b7e8 	.word	0x0800b7e8
 8002510:	0800b804 	.word	0x0800b804
 8002514:	0800b820 	.word	0x0800b820
 8002518:	0800b83c 	.word	0x0800b83c
 800251c:	0800b858 	.word	0x0800b858
 8002520:	0800b874 	.word	0x0800b874
 8002524:	0800b894 	.word	0x0800b894
 8002528:	200005f8 	.word	0x200005f8
 800252c:	20000664 	.word	0x20000664
 8002530:	40000800 	.word	0x40000800
				}
				buf[0] = 0x12;
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2212      	movs	r2, #18
 8002538:	701a      	strb	r2, [r3, #0]
				buf[1] = 0x00;
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2200      	movs	r2, #0
 800253e:	705a      	strb	r2, [r3, #1]
				ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8002540:	1d3a      	adds	r2, r7, #4
 8002542:	f241 3388 	movw	r3, #5000	; 0x1388
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2302      	movs	r3, #2
 800254a:	21aa      	movs	r1, #170	; 0xaa
 800254c:	4883      	ldr	r0, [pc, #524]	; (800275c <main+0x968>)
 800254e:	f001 fc83 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002552:	4603      	mov	r3, r0
 8002554:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
				HAL_Delay(6);
 8002558:	2006      	movs	r0, #6
 800255a:	f001 f8ed 	bl	8003738 <HAL_Delay>
				ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 800255e:	1d3a      	adds	r2, r7, #4
 8002560:	f241 3388 	movw	r3, #5000	; 0x1388
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2302      	movs	r3, #2
 8002568:	21ab      	movs	r1, #171	; 0xab
 800256a:	487c      	ldr	r0, [pc, #496]	; (800275c <main+0x968>)
 800256c:	f001 fd68 	bl	8004040 <HAL_I2C_Master_Receive>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
				buf[0] = 0x12;
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2212      	movs	r2, #18
 800257a:	701a      	strb	r2, [r3, #0]
				buf[1] = 0x01;
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2201      	movs	r2, #1
 8002580:	705a      	strb	r2, [r3, #1]
            	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8002582:	1d3a      	adds	r2, r7, #4
 8002584:	f241 3388 	movw	r3, #5000	; 0x1388
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2302      	movs	r3, #2
 800258c:	21aa      	movs	r1, #170	; 0xaa
 800258e:	4873      	ldr	r0, [pc, #460]	; (800275c <main+0x968>)
 8002590:	f001 fc62 	bl	8003e58 <HAL_I2C_Master_Transmit>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
				      HAL_Delay(6);
 800259a:	2006      	movs	r0, #6
 800259c:	f001 f8cc 	bl	8003738 <HAL_Delay>
				      ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 10, 5000);
 80025a0:	1d3a      	adds	r2, r7, #4
 80025a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	230a      	movs	r3, #10
 80025aa:	21ab      	movs	r1, #171	; 0xab
 80025ac:	486b      	ldr	r0, [pc, #428]	; (800275c <main+0x968>)
 80025ae:	f001 fd47 	bl	8004040 <HAL_I2C_Master_Receive>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
				      printf("error code: %d ", buf[0]);
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4868      	ldr	r0, [pc, #416]	; (8002760 <main+0x96c>)
 80025c0:	f006 fc40 	bl	8008e44 <iprintf>
				      int heartRate = ((buf[1]) << 8);
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				      printf("data: %d %d %d %d\n", buf[1], buf[2], buf[3], buf[6]);
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	785b      	ldrb	r3, [r3, #1]
 80025d2:	4619      	mov	r1, r3
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	789b      	ldrb	r3, [r3, #2]
 80025d8:	461a      	mov	r2, r3
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	78db      	ldrb	r3, [r3, #3]
 80025de:	4618      	mov	r0, r3
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	799b      	ldrb	r3, [r3, #6]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4603      	mov	r3, r0
 80025e8:	485e      	ldr	r0, [pc, #376]	; (8002764 <main+0x970>)
 80025ea:	f006 fc2b 	bl	8008e44 <iprintf>
				      heartRate |= (buf[2]);
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	789b      	ldrb	r3, [r3, #2]
 80025f2:	461a      	mov	r2, r3
 80025f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				      heartRate = heartRate/10;
 80025fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002602:	4a59      	ldr	r2, [pc, #356]	; (8002768 <main+0x974>)
 8002604:	fb82 1203 	smull	r1, r2, r2, r3
 8002608:	1092      	asrs	r2, r2, #2
 800260a:	17db      	asrs	r3, r3, #31
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				      heart_rate = heartRate;
 8002612:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002616:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
				      // Confidence formatting
				      int confidence = buf[3];
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	78db      	ldrb	r3, [r3, #3]
 800261e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

				      //Blood oxygen level formatting
				      int oxygen = (buf[4]) << 8;
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				      oxygen += buf[5];
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	795b      	ldrb	r3, [r3, #5]
 8002630:	461a      	mov	r2, r3
 8002632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002636:	4413      	add	r3, r2
 8002638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				      blood_oxygen = oxygen/10.0;
 800263c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002640:	f7fd ff98 	bl	8000574 <__aeabi_i2d>
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b48      	ldr	r3, [pc, #288]	; (800276c <main+0x978>)
 800264a:	f7fe f927 	bl	800089c <__aeabi_ddiv>
 800264e:	4603      	mov	r3, r0
 8002650:	460c      	mov	r4, r1
 8002652:	4618      	mov	r0, r3
 8002654:	4621      	mov	r1, r4
 8002656:	f7fe facf 	bl	8000bf8 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				      // blood_oxygen = oxygen;

				      //"Machine State" - has a finger been detected?

				      status = buf[6];
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	799b      	ldrb	r3, [r3, #6]
 8002664:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				      printf( "heartrate: %d, status: %d, blood_oxygen %f, confidence: %d\n\r", heartRate, status, oxygen, confidence );
 8002668:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002672:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002676:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 800267a:	483d      	ldr	r0, [pc, #244]	; (8002770 <main+0x97c>)
 800267c:	f006 fbe2 	bl	8008e44 <iprintf>

					      }

				      }
				      */
				      HAL_Delay(100);
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	f001 f859 	bl	8003738 <HAL_Delay>
            for(int i = 0; i < 40; ++i){
 8002686:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800268a:	3301      	adds	r3, #1
 800268c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002690:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002694:	2b27      	cmp	r3, #39	; 0x27
 8002696:	f77f af01 	ble.w	800249c <main+0x6a8>
            } // end for

            //get GPS
            float latitude = 0;
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            float longitude= 0;
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138



            if(status != 3){
 80026aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d01f      	beq.n	80026f2 <main+0x8fe>
            	sprintf(message_buffer, "SOS! An athlete has fallen and been injured at %d latitude %d longitude. There finger is off the vitals sensor but we measured: heart rate: %d blood oxygen: %d", latitude, longitude, heart_rate, blood_oxygen);
 80026b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80026b6:	f7fd ff6f 	bl	8000598 <__aeabi_f2d>
 80026ba:	4680      	mov	r8, r0
 80026bc:	4689      	mov	r9, r1
 80026be:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80026c2:	f7fd ff69 	bl	8000598 <__aeabi_f2d>
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80026ce:	f7fd ff63 	bl	8000598 <__aeabi_f2d>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80026de:	9302      	str	r3, [sp, #8]
 80026e0:	e9cd 4500 	strd	r4, r5, [sp]
 80026e4:	4642      	mov	r2, r8
 80026e6:	464b      	mov	r3, r9
 80026e8:	4922      	ldr	r1, [pc, #136]	; (8002774 <main+0x980>)
 80026ea:	4823      	ldr	r0, [pc, #140]	; (8002778 <main+0x984>)
 80026ec:	f006 fc36 	bl	8008f5c <siprintf>
 80026f0:	e01e      	b.n	8002730 <main+0x93c>
            }
            else{
            	sprintf(message_buffer, "SOS! An athlete has fallen and been injured at %d latitude %d longitude. The vitals sensor measured: heart rate: %d blood oxygen: %d", latitude, longitude, heart_rate, blood_oxygen);
 80026f2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80026f6:	f7fd ff4f 	bl	8000598 <__aeabi_f2d>
 80026fa:	4680      	mov	r8, r0
 80026fc:	4689      	mov	r9, r1
 80026fe:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002702:	f7fd ff49 	bl	8000598 <__aeabi_f2d>
 8002706:	4604      	mov	r4, r0
 8002708:	460d      	mov	r5, r1
 800270a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800270e:	f7fd ff43 	bl	8000598 <__aeabi_f2d>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800271a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	e9cd 4500 	strd	r4, r5, [sp]
 8002724:	4642      	mov	r2, r8
 8002726:	464b      	mov	r3, r9
 8002728:	4914      	ldr	r1, [pc, #80]	; (800277c <main+0x988>)
 800272a:	4813      	ldr	r0, [pc, #76]	; (8002778 <main+0x984>)
 800272c:	f006 fc16 	bl	8008f5c <siprintf>
            }


            // send out message
            printf( "Here's the sos message: %s\n\r", message_buffer );
 8002730:	4911      	ldr	r1, [pc, #68]	; (8002778 <main+0x984>)
 8002732:	4813      	ldr	r0, [pc, #76]	; (8002780 <main+0x98c>)
 8002734:	f006 fb86 	bl	8008e44 <iprintf>
            HAL_Delay( 1000 );
 8002738:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800273c:	f000 fffc 	bl	8003738 <HAL_Delay>
            //sendSMS( &cell, message_buffer );
            fall_detected = 0;
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <main+0x990>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
            SetupMPU(); /* reset MPU */
 8002746:	f7ff f84b 	bl	80017e0 <SetupMPU>
            Beep_reset();
 800274a:	f7ff fb2f 	bl	8001dac <Beep_reset>
        if (fall_detected)
 800274e:	e681      	b.n	8002454 <main+0x660>
        } // end while
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002750:	4618      	mov	r0, r3
 8002752:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8002756:	46bd      	mov	sp, r7
 8002758:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800275c:	20000740 	.word	0x20000740
 8002760:	0800b8ac 	.word	0x0800b8ac
 8002764:	0800b8bc 	.word	0x0800b8bc
 8002768:	66666667 	.word	0x66666667
 800276c:	40240000 	.word	0x40240000
 8002770:	0800b8d0 	.word	0x0800b8d0
 8002774:	0800b910 	.word	0x0800b910
 8002778:	2000081c 	.word	0x2000081c
 800277c:	0800b9b0 	.word	0x0800b9b0
 8002780:	0800ba38 	.word	0x0800ba38
 8002784:	200005f8 	.word	0x200005f8

08002788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b096      	sub	sp, #88	; 0x58
 800278c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	2244      	movs	r2, #68	; 0x44
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f005 fd08 	bl	80081ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800279c:	463b      	mov	r3, r7
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80027aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027ae:	f002 f86d 	bl	800488c <HAL_PWREx_ControlVoltageScaling>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80027b8:	f000 fc0a 	bl	8002fd0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027bc:	2310      	movs	r3, #16
 80027be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027c0:	2301      	movs	r3, #1
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027c8:	2360      	movs	r3, #96	; 0x60
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 f90d 	bl	80049f4 <HAL_RCC_OscConfig>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80027e0:	f000 fbf6 	bl	8002fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e4:	230f      	movs	r3, #15
 80027e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80027e8:	2300      	movs	r3, #0
 80027ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f8:	463b      	mov	r3, r7
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f002 fd1f 	bl	8005240 <HAL_RCC_ClockConfig>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002808:	f000 fbe2 	bl	8002fd0 <Error_Handler>
  }
}
 800280c:	bf00      	nop
 800280e:	3758      	adds	r7, #88	; 0x58
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <MX_I2C1_Init+0x74>)
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <MX_I2C1_Init+0x78>)
 800281c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <MX_I2C1_Init+0x74>)
 8002820:	f640 6214 	movw	r2, #3604	; 0xe14
 8002824:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <MX_I2C1_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <MX_I2C1_Init+0x74>)
 800282e:	2201      	movs	r2, #1
 8002830:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <MX_I2C1_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_I2C1_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <MX_I2C1_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002844:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_I2C1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_I2C1_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002850:	480d      	ldr	r0, [pc, #52]	; (8002888 <MX_I2C1_Init+0x74>)
 8002852:	f001 fa72 	bl	8003d3a <HAL_I2C_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800285c:	f000 fbb8 	bl	8002fd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002860:	2100      	movs	r1, #0
 8002862:	4809      	ldr	r0, [pc, #36]	; (8002888 <MX_I2C1_Init+0x74>)
 8002864:	f001 ff5a 	bl	800471c <HAL_I2CEx_ConfigAnalogFilter>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800286e:	f000 fbaf 	bl	8002fd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002872:	2100      	movs	r1, #0
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <MX_I2C1_Init+0x74>)
 8002876:	f001 ff9c 	bl	80047b2 <HAL_I2CEx_ConfigDigitalFilter>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002880:	f000 fba6 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000740 	.word	0x20000740
 800288c:	40005400 	.word	0x40005400

08002890 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <MX_I2C3_Init+0x74>)
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <MX_I2C3_Init+0x78>)
 8002898:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <MX_I2C3_Init+0x74>)
 800289c:	f640 6214 	movw	r2, #3604	; 0xe14
 80028a0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80028a2:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_I2C3_Init+0x74>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <MX_I2C3_Init+0x74>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_I2C3_Init+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <MX_I2C3_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_I2C3_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <MX_I2C3_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_I2C3_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028cc:	480d      	ldr	r0, [pc, #52]	; (8002904 <MX_I2C3_Init+0x74>)
 80028ce:	f001 fa34 	bl	8003d3a <HAL_I2C_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80028d8:	f000 fb7a 	bl	8002fd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028dc:	2100      	movs	r1, #0
 80028de:	4809      	ldr	r0, [pc, #36]	; (8002904 <MX_I2C3_Init+0x74>)
 80028e0:	f001 ff1c 	bl	800471c <HAL_I2CEx_ConfigAnalogFilter>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80028ea:	f000 fb71 	bl	8002fd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028ee:	2100      	movs	r1, #0
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_I2C3_Init+0x74>)
 80028f2:	f001 ff5e 	bl	80047b2 <HAL_I2CEx_ConfigDigitalFilter>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80028fc:	f000 fb68 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20000618 	.word	0x20000618
 8002908:	40005c00 	.word	0x40005c00

0800290c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002912:	4a23      	ldr	r2, [pc, #140]	; (80029a0 <MX_LPUART1_UART_Init+0x94>)
 8002914:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002916:	4b21      	ldr	r3, [pc, #132]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800291c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800291e:	4b1f      	ldr	r3, [pc, #124]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002924:	4b1d      	ldr	r3, [pc, #116]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800292a:	4b1c      	ldr	r3, [pc, #112]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002932:	220c      	movs	r2, #12
 8002934:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293c:	4b17      	ldr	r3, [pc, #92]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002944:	2200      	movs	r2, #0
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 800294a:	2200      	movs	r2, #0
 800294c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002950:	2200      	movs	r2, #0
 8002952:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002954:	4811      	ldr	r0, [pc, #68]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002956:	f004 fc73 	bl	8007240 <HAL_UART_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002960:	f000 fb36 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002964:	2100      	movs	r1, #0
 8002966:	480d      	ldr	r0, [pc, #52]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 8002968:	f005 fae0 	bl	8007f2c <HAL_UARTEx_SetTxFifoThreshold>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002972:	f000 fb2d 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002976:	2100      	movs	r1, #0
 8002978:	4808      	ldr	r0, [pc, #32]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 800297a:	f005 fb15 	bl	8007fa8 <HAL_UARTEx_SetRxFifoThreshold>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002984:	f000 fb24 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002988:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_LPUART1_UART_Init+0x90>)
 800298a:	f005 fa96 	bl	8007eba <HAL_UARTEx_DisableFifoMode>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002994:	f000 fb1c 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	2000078c 	.word	0x2000078c
 80029a0:	40008000 	.word	0x40008000

080029a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029aa:	4a23      	ldr	r2, [pc, #140]	; (8002a38 <MX_USART3_UART_Init+0x94>)
 80029ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029be:	2200      	movs	r2, #0
 80029c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029ca:	220c      	movs	r2, #12
 80029cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ec:	4811      	ldr	r0, [pc, #68]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 80029ee:	f004 fc27 	bl	8007240 <HAL_UART_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029f8:	f000 faea 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029fc:	2100      	movs	r1, #0
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 8002a00:	f005 fa94 	bl	8007f2c <HAL_UARTEx_SetTxFifoThreshold>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002a0a:	f000 fae1 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4808      	ldr	r0, [pc, #32]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 8002a12:	f005 fac9 	bl	8007fa8 <HAL_UARTEx_SetRxFifoThreshold>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002a1c:	f000 fad8 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <MX_USART3_UART_Init+0x90>)
 8002a22:	f005 fa4a 	bl	8007eba <HAL_UARTEx_DisableFifoMode>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002a2c:	f000 fad0 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200006b0 	.word	0x200006b0
 8002a38:	40004800 	.word	0x40004800

08002a3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08e      	sub	sp, #56	; 0x38
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	609a      	str	r2, [r3, #8]
 8002a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a50:	f107 031c 	add.w	r3, r7, #28
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a70:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <MX_TIM4_Init+0xec>)
 8002a72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8002a80:	4b28      	ldr	r3, [pc, #160]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a88:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a8e:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a94:	4823      	ldr	r0, [pc, #140]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002a96:	f003 fb8b 	bl	80061b0 <HAL_TIM_Base_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002aa0:	f000 fa96 	bl	8002fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002aae:	4619      	mov	r1, r3
 8002ab0:	481c      	ldr	r0, [pc, #112]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002ab2:	f003 fe4f 	bl	8006754 <HAL_TIM_ConfigClockSource>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002abc:	f000 fa88 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ac0:	4818      	ldr	r0, [pc, #96]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002ac2:	f003 fbcc 	bl	800625e <HAL_TIM_PWM_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002acc:	f000 fa80 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4619      	mov	r1, r3
 8002ade:	4811      	ldr	r0, [pc, #68]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002ae0:	f004 fb26 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002aea:	f000 fa71 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aee:	2360      	movs	r3, #96	; 0x60
 8002af0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002af8:	2302      	movs	r3, #2
 8002afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b00:	463b      	mov	r3, r7
 8002b02:	2204      	movs	r2, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4807      	ldr	r0, [pc, #28]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002b08:	f003 fd10 	bl	800652c <HAL_TIM_PWM_ConfigChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002b12:	f000 fa5d 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b16:	4803      	ldr	r0, [pc, #12]	; (8002b24 <MX_TIM4_Init+0xe8>)
 8002b18:	f000 fc2e 	bl	8003378 <HAL_TIM_MspPostInit>

}
 8002b1c:	bf00      	nop
 8002b1e:	3738      	adds	r7, #56	; 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000664 	.word	0x20000664
 8002b28:	40000800 	.word	0x40000800

08002b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08e      	sub	sp, #56	; 0x38
 8002b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b42:	4bb3      	ldr	r3, [pc, #716]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4ab2      	ldr	r2, [pc, #712]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b48:	f043 0310 	orr.w	r3, r3, #16
 8002b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4e:	4bb0      	ldr	r3, [pc, #704]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5a:	4bad      	ldr	r3, [pc, #692]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	4aac      	ldr	r2, [pc, #688]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b66:	4baa      	ldr	r3, [pc, #680]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b72:	4ba7      	ldr	r3, [pc, #668]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	4aa6      	ldr	r2, [pc, #664]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b78:	f043 0320 	orr.w	r3, r3, #32
 8002b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7e:	4ba4      	ldr	r3, [pc, #656]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b8a:	4ba1      	ldr	r3, [pc, #644]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	4aa0      	ldr	r2, [pc, #640]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b96:	4b9e      	ldr	r3, [pc, #632]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	4b9b      	ldr	r3, [pc, #620]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba6:	4a9a      	ldr	r2, [pc, #616]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bae:	4b98      	ldr	r3, [pc, #608]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4b95      	ldr	r3, [pc, #596]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a94      	ldr	r2, [pc, #592]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd2:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	4a8e      	ldr	r2, [pc, #568]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bde:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a88      	ldr	r2, [pc, #544]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf6:	4b86      	ldr	r3, [pc, #536]	; (8002e10 <MX_GPIO_Init+0x2e4>)
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002c02:	f001 fee7 	bl	80049d4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c0c:	4881      	ldr	r0, [pc, #516]	; (8002e14 <MX_GPIO_Init+0x2e8>)
 8002c0e:	f001 f859 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c18:	487f      	ldr	r0, [pc, #508]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002c1a:	f001 f853 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2103      	movs	r1, #3
 8002c22:	487e      	ldr	r0, [pc, #504]	; (8002e1c <MX_GPIO_Init+0x2f0>)
 8002c24:	f001 f84e 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c28:	230c      	movs	r3, #12
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002c38:	230d      	movs	r3, #13
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	4875      	ldr	r0, [pc, #468]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002c44:	f000 feac 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c48:	2307      	movs	r3, #7
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c4c:	2312      	movs	r3, #18
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c58:	2304      	movs	r3, #4
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c60:	4619      	mov	r1, r3
 8002c62:	486c      	ldr	r0, [pc, #432]	; (8002e14 <MX_GPIO_Init+0x2e8>)
 8002c64:	f000 fe9c 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c74:	2300      	movs	r3, #0
 8002c76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002c78:	230d      	movs	r3, #13
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	4864      	ldr	r0, [pc, #400]	; (8002e14 <MX_GPIO_Init+0x2e8>)
 8002c84:	f000 fe8c 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c88:	233c      	movs	r3, #60	; 0x3c
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c8c:	230b      	movs	r3, #11
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4861      	ldr	r0, [pc, #388]	; (8002e20 <MX_GPIO_Init+0x2f4>)
 8002c9c:	f000 fe80 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbe:	f000 fe6f 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cc6:	230b      	movs	r3, #11
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd8:	f000 fe62 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cdc:	23f0      	movs	r3, #240	; 0xf0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cec:	2305      	movs	r3, #5
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfa:	f000 fe51 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d16:	4619      	mov	r1, r3
 8002d18:	4842      	ldr	r0, [pc, #264]	; (8002e24 <MX_GPIO_Init+0x2f8>)
 8002d1a:	f000 fe41 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d22:	230b      	movs	r3, #11
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	483c      	ldr	r0, [pc, #240]	; (8002e24 <MX_GPIO_Init+0x2f8>)
 8002d32:	f000 fe35 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002d36:	2344      	movs	r3, #68	; 0x44
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d46:	4619      	mov	r1, r3
 8002d48:	4836      	ldr	r0, [pc, #216]	; (8002e24 <MX_GPIO_Init+0x2f8>)
 8002d4a:	f000 fe29 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d54:	2301      	movs	r3, #1
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d64:	4619      	mov	r1, r3
 8002d66:	482b      	ldr	r0, [pc, #172]	; (8002e14 <MX_GPIO_Init+0x2e8>)
 8002d68:	f000 fe1a 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8002d6c:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d86:	4619      	mov	r1, r3
 8002d88:	4823      	ldr	r0, [pc, #140]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002d8a:	f000 fe09 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d94:	2301      	movs	r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da4:	4619      	mov	r1, r3
 8002da6:	481c      	ldr	r0, [pc, #112]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002da8:	f000 fdfa 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002dac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4813      	ldr	r0, [pc, #76]	; (8002e18 <MX_GPIO_Init+0x2ec>)
 8002dca:	f000 fde9 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002de0:	2301      	movs	r3, #1
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de8:	4619      	mov	r1, r3
 8002dea:	480e      	ldr	r0, [pc, #56]	; (8002e24 <MX_GPIO_Init+0x2f8>)
 8002dec:	f000 fdd8 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002df0:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002e02:	230d      	movs	r3, #13
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	e00c      	b.n	8002e28 <MX_GPIO_Init+0x2fc>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	48001400 	.word	0x48001400
 8002e18:	48001000 	.word	0x48001000
 8002e1c:	48000c00 	.word	0x48000c00
 8002e20:	48000800 	.word	0x48000800
 8002e24:	48000400 	.word	0x48000400
 8002e28:	485d      	ldr	r0, [pc, #372]	; (8002fa0 <MX_GPIO_Init+0x474>)
 8002e2a:	f000 fdb9 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002e40:	230e      	movs	r3, #14
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4855      	ldr	r0, [pc, #340]	; (8002fa0 <MX_GPIO_Init+0x474>)
 8002e4c:	f000 fda8 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e50:	2340      	movs	r3, #64	; 0x40
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002e60:	230d      	movs	r3, #13
 8002e62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	484e      	ldr	r0, [pc, #312]	; (8002fa4 <MX_GPIO_Init+0x478>)
 8002e6c:	f000 fd98 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e80:	2302      	movs	r3, #2
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4846      	ldr	r0, [pc, #280]	; (8002fa4 <MX_GPIO_Init+0x478>)
 8002e8c:	f000 fd88 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e90:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eaa:	4619      	mov	r1, r3
 8002eac:	483d      	ldr	r0, [pc, #244]	; (8002fa4 <MX_GPIO_Init+0x478>)
 8002eae:	f000 fd77 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002eb2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed2:	f000 fd65 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eee:	f000 fd57 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f06:	4619      	mov	r1, r3
 8002f08:	4827      	ldr	r0, [pc, #156]	; (8002fa8 <MX_GPIO_Init+0x47c>)
 8002f0a:	f000 fd49 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f1e:	230c      	movs	r3, #12
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4619      	mov	r1, r3
 8002f28:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <MX_GPIO_Init+0x47c>)
 8002f2a:	f000 fd39 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8002f2e:	2368      	movs	r3, #104	; 0x68
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f46:	4619      	mov	r1, r3
 8002f48:	4817      	ldr	r0, [pc, #92]	; (8002fa8 <MX_GPIO_Init+0x47c>)
 8002f4a:	f000 fd29 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f4e:	2310      	movs	r3, #16
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <MX_GPIO_Init+0x47c>)
 8002f64:	f000 fd1c 	bl	80039a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002f68:	2338      	movs	r3, #56	; 0x38
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f78:	2306      	movs	r3, #6
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f80:	4619      	mov	r1, r3
 8002f82:	4807      	ldr	r0, [pc, #28]	; (8002fa0 <MX_GPIO_Init+0x474>)
 8002f84:	f000 fd0c 	bl	80039a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	200a      	movs	r0, #10
 8002f8e:	f000 fcd0 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002f92:	200a      	movs	r0, #10
 8002f94:	f000 fce9 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 8002f98:	bf00      	nop
 8002f9a:	3738      	adds	r7, #56	; 0x38
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	48000400 	.word	0x48000400
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	48000c00 	.word	0x48000c00

08002fac <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002fb4:	1d39      	adds	r1, r7, #4
 8002fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4803      	ldr	r0, [pc, #12]	; (8002fcc <__io_putchar+0x20>)
 8002fbe:	f004 f98f 	bl	80072e0 <HAL_UART_Transmit>
  return ch;
 8002fc2:	687b      	ldr	r3, [r7, #4]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	2000078c 	.word	0x2000078c

08002fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd6:	e7fe      	b.n	8002fd6 <Error_Handler+0x6>

08002fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_MspInit+0x44>)
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	4a0e      	ldr	r2, [pc, #56]	; (800301c <HAL_MspInit+0x44>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_MspInit+0x44>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_MspInit+0x44>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <HAL_MspInit+0x44>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003000:	6593      	str	r3, [r2, #88]	; 0x58
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_MspInit+0x44>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000

08003020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b0b0      	sub	sp, #192	; 0xc0
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003038:	f107 0318 	add.w	r3, r7, #24
 800303c:	2294      	movs	r2, #148	; 0x94
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f005 f8b3 	bl	80081ac <memset>
  if(hi2c->Instance==I2C1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <HAL_I2C_MspInit+0x134>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d13c      	bne.n	80030ca <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003050:	2340      	movs	r3, #64	; 0x40
 8003052:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003054:	2300      	movs	r3, #0
 8003056:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fb9f 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003068:	f7ff ffb2 	bl	8002fd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800306c:	4b3a      	ldr	r3, [pc, #232]	; (8003158 <HAL_I2C_MspInit+0x138>)
 800306e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003070:	4a39      	ldr	r2, [pc, #228]	; (8003158 <HAL_I2C_MspInit+0x138>)
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003078:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_I2C_MspInit+0x138>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003084:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308c:	2312      	movs	r3, #18
 800308e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003098:	2303      	movs	r3, #3
 800309a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800309e:	2304      	movs	r3, #4
 80030a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030a8:	4619      	mov	r1, r3
 80030aa:	482c      	ldr	r0, [pc, #176]	; (800315c <HAL_I2C_MspInit+0x13c>)
 80030ac:	f000 fc78 	bl	80039a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030b0:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_I2C_MspInit+0x138>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a28      	ldr	r2, [pc, #160]	; (8003158 <HAL_I2C_MspInit+0x138>)
 80030b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_I2C_MspInit+0x138>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80030c8:	e040      	b.n	800314c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_I2C_MspInit+0x140>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d13b      	bne.n	800314c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80030d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80030da:	2300      	movs	r3, #0
 80030dc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fb5c 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 80030ee:	f7ff ff6f 	bl	8002fd0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030f2:	4b19      	ldr	r3, [pc, #100]	; (8003158 <HAL_I2C_MspInit+0x138>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_I2C_MspInit+0x138>)
 80030f8:	f043 0304 	orr.w	r3, r3, #4
 80030fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_I2C_MspInit+0x138>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800310a:	2303      	movs	r3, #3
 800310c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003110:	2312      	movs	r3, #18
 8003112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003122:	2304      	movs	r3, #4
 8003124:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003128:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800312c:	4619      	mov	r1, r3
 800312e:	480d      	ldr	r0, [pc, #52]	; (8003164 <HAL_I2C_MspInit+0x144>)
 8003130:	f000 fc36 	bl	80039a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_I2C_MspInit+0x138>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a07      	ldr	r2, [pc, #28]	; (8003158 <HAL_I2C_MspInit+0x138>)
 800313a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_I2C_MspInit+0x138>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
}
 800314c:	bf00      	nop
 800314e:	37c0      	adds	r7, #192	; 0xc0
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40005400 	.word	0x40005400
 8003158:	40021000 	.word	0x40021000
 800315c:	48000400 	.word	0x48000400
 8003160:	40005c00 	.word	0x40005c00
 8003164:	48000800 	.word	0x48000800

08003168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b0b0      	sub	sp, #192	; 0xc0
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003180:	f107 0318 	add.w	r3, r7, #24
 8003184:	2294      	movs	r2, #148	; 0x94
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f005 f80f 	bl	80081ac <memset>
  if(huart->Instance==LPUART1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a43      	ldr	r2, [pc, #268]	; (80032a0 <HAL_UART_MspInit+0x138>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d13e      	bne.n	8003216 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003198:	2320      	movs	r3, #32
 800319a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800319c:	2300      	movs	r3, #0
 800319e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	4618      	mov	r0, r3
 80031a6:	f002 fafb 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031b0:	f7ff ff0e 	bl	8002fd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	4a3a      	ldr	r2, [pc, #232]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80031c0:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 80031d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 80031da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80031e4:	f001 fbf6 	bl	80049d4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	2302      	movs	r3, #2
 80031f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003202:	2308      	movs	r3, #8
 8003204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003208:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800320c:	4619      	mov	r1, r3
 800320e:	4826      	ldr	r0, [pc, #152]	; (80032a8 <HAL_UART_MspInit+0x140>)
 8003210:	f000 fbc6 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003214:	e040      	b.n	8003298 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_UART_MspInit+0x144>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d13b      	bne.n	8003298 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003220:	2304      	movs	r3, #4
 8003222:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003224:	2300      	movs	r3, #0
 8003226:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003228:	f107 0318 	add.w	r3, r7, #24
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fab7 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003238:	f7ff feca 	bl	8002fd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 8003242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003246:	6593      	str	r3, [r2, #88]	; 0x58
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 800324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003258:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 800325a:	f043 0308 	orr.w	r3, r3, #8
 800325e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_UART_MspInit+0x13c>)
 8003262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800326c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003286:	2307      	movs	r3, #7
 8003288:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800328c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003290:	4619      	mov	r1, r3
 8003292:	4807      	ldr	r0, [pc, #28]	; (80032b0 <HAL_UART_MspInit+0x148>)
 8003294:	f000 fb84 	bl	80039a0 <HAL_GPIO_Init>
}
 8003298:	bf00      	nop
 800329a:	37c0      	adds	r7, #192	; 0xc0
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40008000 	.word	0x40008000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	48001800 	.word	0x48001800
 80032ac:	40004800 	.word	0x40004800
 80032b0:	48000c00 	.word	0x48000c00

080032b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a25      	ldr	r2, [pc, #148]	; (8003368 <HAL_TIM_Base_MspInit+0xb4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d144      	bne.n	8003360 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032d6:	4b25      	ldr	r3, [pc, #148]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a24      	ldr	r2, [pc, #144]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 800330c:	f043 0310 	orr.w	r3, r3, #16
 8003310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <HAL_TIM_Base_MspInit+0xb8>)
 8003314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800331e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003330:	2302      	movs	r3, #2
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	480d      	ldr	r0, [pc, #52]	; (8003370 <HAL_TIM_Base_MspInit+0xbc>)
 800333c:	f000 fb30 	bl	80039a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003340:	2301      	movs	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003350:	2302      	movs	r3, #2
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4619      	mov	r1, r3
 800335a:	4806      	ldr	r0, [pc, #24]	; (8003374 <HAL_TIM_Base_MspInit+0xc0>)
 800335c:	f000 fb20 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003360:	bf00      	nop
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40000800 	.word	0x40000800
 800336c:	40021000 	.word	0x40021000
 8003370:	48000c00 	.word	0x48000c00
 8003374:	48001000 	.word	0x48001000

08003378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 030c 	add.w	r3, r7, #12
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_TIM_MspPostInit+0x64>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d11b      	bne.n	80033d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_TIM_MspPostInit+0x68>)
 800339c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339e:	4a10      	ldr	r2, [pc, #64]	; (80033e0 <HAL_TIM_MspPostInit+0x68>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_TIM_MspPostInit+0x68>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b6:	2302      	movs	r3, #2
 80033b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033c2:	2302      	movs	r3, #2
 80033c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c6:	f107 030c 	add.w	r3, r7, #12
 80033ca:	4619      	mov	r1, r3
 80033cc:	4805      	ldr	r0, [pc, #20]	; (80033e4 <HAL_TIM_MspPostInit+0x6c>)
 80033ce:	f000 fae7 	bl	80039a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80033d2:	bf00      	nop
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40021000 	.word	0x40021000
 80033e4:	48000400 	.word	0x48000400

080033e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <NMI_Handler+0x4>

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003434:	f000 f960 	bl	80036f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}

0800343c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	MPU_Interrupt();
 8003440:	f7fe fbf4 	bl	8001c2c <MPU_Interrupt>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003444:	2010      	movs	r0, #16
 8003446:	f000 fc55 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}

0800344e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800344e:	b480      	push	{r7}
 8003450:	af00      	add	r7, sp, #0
	return 1;
 8003452:	2301      	movs	r3, #1
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_kill>:

int _kill(int pid, int sig)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003468:	f004 fe48 	bl	80080fc <__errno>
 800346c:	4602      	mov	r2, r0
 800346e:	2316      	movs	r3, #22
 8003470:	6013      	str	r3, [r2, #0]
	return -1;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <_exit>:

void _exit (int status)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003486:	f04f 31ff 	mov.w	r1, #4294967295
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffe7 	bl	800345e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003490:	e7fe      	b.n	8003490 <_exit+0x12>

08003492 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e00a      	b.n	80034ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034a4:	f3af 8000 	nop.w
 80034a8:	4601      	mov	r1, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	60ba      	str	r2, [r7, #8]
 80034b0:	b2ca      	uxtb	r2, r1
 80034b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	3301      	adds	r3, #1
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	dbf0      	blt.n	80034a4 <_read+0x12>
	}

return len;
 80034c2:	687b      	ldr	r3, [r7, #4]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e009      	b.n	80034f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	60ba      	str	r2, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fd60 	bl	8002fac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3301      	adds	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	dbf1      	blt.n	80034de <_write+0x12>
	}
	return len;
 80034fa:	687b      	ldr	r3, [r7, #4]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_close>:

int _close(int file)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	return -1;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800352c:	605a      	str	r2, [r3, #4]
	return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_isatty>:

int _isatty(int file)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
	return 1;
 8003544:	2301      	movs	r3, #1
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
	return 0;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <_sbrk+0x5c>)
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <_sbrk+0x60>)
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <_sbrk+0x64>)
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <_sbrk+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800359c:	f004 fdae 	bl	80080fc <__errno>
 80035a0:	4602      	mov	r2, r0
 80035a2:	230c      	movs	r3, #12
 80035a4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e009      	b.n	80035c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <_sbrk+0x64>)
 80035bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035be:	68fb      	ldr	r3, [r7, #12]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200a0000 	.word	0x200a0000
 80035cc:	00000400 	.word	0x00000400
 80035d0:	2000060c 	.word	0x2000060c
 80035d4:	20000c28 	.word	0x20000c28

080035d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <SystemInit+0x20>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <SystemInit+0x20>)
 80035e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003600:	f7ff ffea 	bl	80035d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003604:	480c      	ldr	r0, [pc, #48]	; (8003638 <LoopForever+0x6>)
  ldr r1, =_edata
 8003606:	490d      	ldr	r1, [pc, #52]	; (800363c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <LoopForever+0xe>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800360c:	e002      	b.n	8003614 <LoopCopyDataInit>

0800360e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003612:	3304      	adds	r3, #4

08003614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003618:	d3f9      	bcc.n	800360e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <LoopForever+0x16>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003620:	e001      	b.n	8003626 <LoopFillZerobss>

08003622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003624:	3204      	adds	r2, #4

08003626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003628:	d3fb      	bcc.n	8003622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800362a:	f004 fd93 	bl	8008154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800362e:	f7fe fbe1 	bl	8001df4 <main>

08003632 <LoopForever>:

LoopForever:
    b LoopForever
 8003632:	e7fe      	b.n	8003632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003634:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800363c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003640:	0800be00 	.word	0x0800be00
  ldr r2, =_sbss
 8003644:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003648:	20000c24 	.word	0x20000c24

0800364c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800364c:	e7fe      	b.n	800364c <ADC1_IRQHandler>

0800364e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003658:	2003      	movs	r0, #3
 800365a:	f000 f95f 	bl	800391c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800365e:	2000      	movs	r0, #0
 8003660:	f000 f80e 	bl	8003680 <HAL_InitTick>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	71fb      	strb	r3, [r7, #7]
 800366e:	e001      	b.n	8003674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003670:	f7ff fcb2 	bl	8002fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003674:	79fb      	ldrb	r3, [r7, #7]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <HAL_InitTick+0x6c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d023      	beq.n	80036dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_InitTick+0x70>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <HAL_InitTick+0x6c>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f96b 	bl	8003986 <HAL_SYSTICK_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d809      	bhi.n	80036d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036bc:	2200      	movs	r2, #0
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	f000 f935 	bl	8003932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036c8:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <HAL_InitTick+0x74>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e007      	b.n	80036e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	e004      	b.n	80036e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e001      	b.n	80036e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000008 	.word	0x20000008
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_IncTick+0x20>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_IncTick+0x24>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4413      	add	r3, r2
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_IncTick+0x24>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000008 	.word	0x20000008
 800371c:	20000c1c 	.word	0x20000c1c

08003720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return uwTick;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_GetTick+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000c1c 	.word	0x20000c1c

08003738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003740:	f7ff ffee 	bl	8003720 <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d005      	beq.n	800375e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_Delay+0x40>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800375e:	bf00      	nop
 8003760:	f7ff ffde 	bl	8003720 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d8f7      	bhi.n	8003760 <HAL_Delay+0x28>
  {
  }
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000008 	.word	0x20000008

0800377c <__NVIC_SetPriorityGrouping>:
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	60d3      	str	r3, [r2, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_GetPriorityGrouping>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <__NVIC_GetPriorityGrouping+0x18>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0307 	and.w	r3, r3, #7
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_EnableIRQ>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db0b      	blt.n	800380a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <__NVIC_EnableIRQ+0x38>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db0a      	blt.n	8003846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	490c      	ldr	r1, [pc, #48]	; (8003868 <__NVIC_SetPriority+0x4c>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	440b      	add	r3, r1
 8003840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003844:	e00a      	b.n	800385c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <__NVIC_SetPriority+0x50>)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3b04      	subs	r3, #4
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	440b      	add	r3, r1
 800385a:	761a      	strb	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f1c3 0307 	rsb	r3, r3, #7
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf28      	it	cs
 800388e:	2304      	movcs	r3, #4
 8003890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3304      	adds	r3, #4
 8003896:	2b06      	cmp	r3, #6
 8003898:	d902      	bls.n	80038a0 <NVIC_EncodePriority+0x30>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3b03      	subs	r3, #3
 800389e:	e000      	b.n	80038a2 <NVIC_EncodePriority+0x32>
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	401a      	ands	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	4313      	orrs	r3, r2
         );
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e8:	d301      	bcc.n	80038ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00f      	b.n	800390e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <SysTick_Config+0x40>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f6:	210f      	movs	r1, #15
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	f7ff ff8e 	bl	800381c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <SysTick_Config+0x40>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SysTick_Config+0x40>)
 8003908:	2207      	movs	r2, #7
 800390a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e010 	.word	0xe000e010

0800391c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff29 	bl	800377c <__NVIC_SetPriorityGrouping>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff ff3e 	bl	80037c4 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff8e 	bl	8003870 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5d 	bl	800381c <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff31 	bl	80037e0 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffa2 	bl	80038d8 <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ae:	e166      	b.n	8003c7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	2101      	movs	r1, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 8158 	beq.w	8003c78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d005      	beq.n	80039e0 <HAL_GPIO_Init+0x40>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d130      	bne.n	8003a42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	2203      	movs	r2, #3
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a16:	2201      	movs	r2, #1
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4013      	ands	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0201 	and.w	r2, r3, #1
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d017      	beq.n	8003a7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d123      	bne.n	8003ad2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	08da      	lsrs	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3208      	adds	r2, #8
 8003a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	6939      	ldr	r1, [r7, #16]
 8003ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0203 	and.w	r2, r3, #3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80b2 	beq.w	8003c78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b14:	4b61      	ldr	r3, [pc, #388]	; (8003c9c <HAL_GPIO_Init+0x2fc>)
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	4a60      	ldr	r2, [pc, #384]	; (8003c9c <HAL_GPIO_Init+0x2fc>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b20:	4b5e      	ldr	r3, [pc, #376]	; (8003c9c <HAL_GPIO_Init+0x2fc>)
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b2c:	4a5c      	ldr	r2, [pc, #368]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220f      	movs	r2, #15
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b56:	d02b      	beq.n	8003bb0 <HAL_GPIO_Init+0x210>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a52      	ldr	r2, [pc, #328]	; (8003ca4 <HAL_GPIO_Init+0x304>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d025      	beq.n	8003bac <HAL_GPIO_Init+0x20c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a51      	ldr	r2, [pc, #324]	; (8003ca8 <HAL_GPIO_Init+0x308>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01f      	beq.n	8003ba8 <HAL_GPIO_Init+0x208>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a50      	ldr	r2, [pc, #320]	; (8003cac <HAL_GPIO_Init+0x30c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d019      	beq.n	8003ba4 <HAL_GPIO_Init+0x204>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a4f      	ldr	r2, [pc, #316]	; (8003cb0 <HAL_GPIO_Init+0x310>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_GPIO_Init+0x200>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <HAL_GPIO_Init+0x314>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00d      	beq.n	8003b9c <HAL_GPIO_Init+0x1fc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a4d      	ldr	r2, [pc, #308]	; (8003cb8 <HAL_GPIO_Init+0x318>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <HAL_GPIO_Init+0x1f8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a4c      	ldr	r2, [pc, #304]	; (8003cbc <HAL_GPIO_Init+0x31c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_GPIO_Init+0x1f4>
 8003b90:	2307      	movs	r3, #7
 8003b92:	e00e      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003b94:	2308      	movs	r3, #8
 8003b96:	e00c      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003b98:	2306      	movs	r3, #6
 8003b9a:	e00a      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003b9c:	2305      	movs	r3, #5
 8003b9e:	e008      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e006      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e004      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e002      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_GPIO_Init+0x212>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	f002 0203 	and.w	r2, r2, #3
 8003bb8:	0092      	lsls	r2, r2, #2
 8003bba:	4093      	lsls	r3, r2
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bc2:	4937      	ldr	r1, [pc, #220]	; (8003ca0 <HAL_GPIO_Init+0x300>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd0:	4b3b      	ldr	r3, [pc, #236]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf4:	4a32      	ldr	r2, [pc, #200]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	43db      	mvns	r3, r3
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c1e:	4a28      	ldr	r2, [pc, #160]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c72:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <HAL_GPIO_Init+0x320>)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f47f ae91 	bne.w	80039b0 <HAL_GPIO_Init+0x10>
  }
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	48000400 	.word	0x48000400
 8003ca8:	48000800 	.word	0x48000800
 8003cac:	48000c00 	.word	0x48000c00
 8003cb0:	48001000 	.word	0x48001000
 8003cb4:	48001400 	.word	0x48001400
 8003cb8:	48001800 	.word	0x48001800
 8003cbc:	48001c00 	.word	0x48001c00
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ce0:	e002      	b.n	8003ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f806 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40010400 	.word	0x40010400

08003d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e081      	b.n	8003e50 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff f95d 	bl	8003020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2224      	movs	r2, #36	; 0x24
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	e006      	b.n	8003dc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003dc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d104      	bne.n	8003dd4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69d9      	ldr	r1, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1a      	ldr	r2, [r3, #32]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	460b      	mov	r3, r1
 8003e66:	817b      	strh	r3, [r7, #10]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	f040 80da 	bne.w	800402e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_I2C_Master_Transmit+0x30>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0d3      	b.n	8004030 <HAL_I2C_Master_Transmit+0x1d8>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e90:	f7ff fc46 	bl	8003720 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2319      	movs	r3, #25
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f9e6 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e0be      	b.n	8004030 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2221      	movs	r2, #33	; 0x21
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	893a      	ldrh	r2, [r7, #8]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2bff      	cmp	r3, #255	; 0xff
 8003ee2:	d90e      	bls.n	8003f02 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	22ff      	movs	r2, #255	; 0xff
 8003ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	8979      	ldrh	r1, [r7, #10]
 8003ef2:	4b51      	ldr	r3, [pc, #324]	; (8004038 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fbdc 	bl	80046b8 <I2C_TransferConfig>
 8003f00:	e06c      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	8979      	ldrh	r1, [r7, #10]
 8003f14:	4b48      	ldr	r3, [pc, #288]	; (8004038 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fbcb 	bl	80046b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f22:	e05b      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	6a39      	ldr	r1, [r7, #32]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f9e3 	bl	80042f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e07b      	b.n	8004030 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d034      	beq.n	8003fdc <HAL_I2C_Master_Transmit+0x184>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d130      	bne.n	8003fdc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	2200      	movs	r2, #0
 8003f82:	2180      	movs	r1, #128	; 0x80
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f975 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e04d      	b.n	8004030 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2bff      	cmp	r3, #255	; 0xff
 8003f9c:	d90e      	bls.n	8003fbc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	22ff      	movs	r2, #255	; 0xff
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fb7f 	bl	80046b8 <I2C_TransferConfig>
 8003fba:	e00f      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	8979      	ldrh	r1, [r7, #10]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 fb6e 	bl	80046b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d19e      	bne.n	8003f24 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	6a39      	ldr	r1, [r7, #32]
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f9c2 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e01a      	b.n	8004030 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2220      	movs	r2, #32
 8004000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_I2C_Master_Transmit+0x1e4>)
 800400e:	400b      	ands	r3, r1
 8004010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	e000      	b.n	8004030 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
  }
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	80002000 	.word	0x80002000
 800403c:	fe00e800 	.word	0xfe00e800

08004040 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	460b      	mov	r3, r1
 800404e:	817b      	strh	r3, [r7, #10]
 8004050:	4613      	mov	r3, r2
 8004052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 80db 	bne.w	8004218 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_I2C_Master_Receive+0x30>
 800406c:	2302      	movs	r3, #2
 800406e:	e0d4      	b.n	800421a <HAL_I2C_Master_Receive+0x1da>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004078:	f7ff fb52 	bl	8003720 <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2319      	movs	r3, #25
 8004084:	2201      	movs	r2, #1
 8004086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f8f2 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e0bf      	b.n	800421a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2222      	movs	r2, #34	; 0x22
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2210      	movs	r2, #16
 80040a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	893a      	ldrh	r2, [r7, #8]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2bff      	cmp	r3, #255	; 0xff
 80040ca:	d90e      	bls.n	80040ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	22ff      	movs	r2, #255	; 0xff
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	4b52      	ldr	r3, [pc, #328]	; (8004224 <HAL_I2C_Master_Receive+0x1e4>)
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fae8 	bl	80046b8 <I2C_TransferConfig>
 80040e8:	e06d      	b.n	80041c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	8979      	ldrh	r1, [r7, #10]
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <HAL_I2C_Master_Receive+0x1e4>)
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fad7 	bl	80046b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800410a:	e05c      	b.n	80041c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	6a39      	ldr	r1, [r7, #32]
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f96b 	bl	80043ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e07c      	b.n	800421a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d034      	beq.n	80041c6 <HAL_I2C_Master_Receive+0x186>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d130      	bne.n	80041c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	2200      	movs	r2, #0
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f880 	bl	8004274 <I2C_WaitOnFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e04d      	b.n	800421a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2bff      	cmp	r3, #255	; 0xff
 8004186:	d90e      	bls.n	80041a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	22ff      	movs	r2, #255	; 0xff
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004192:	b2da      	uxtb	r2, r3
 8004194:	8979      	ldrh	r1, [r7, #10]
 8004196:	2300      	movs	r3, #0
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fa8a 	bl	80046b8 <I2C_TransferConfig>
 80041a4:	e00f      	b.n	80041c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	2300      	movs	r3, #0
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fa79 	bl	80046b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d19d      	bne.n	800410c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	6a39      	ldr	r1, [r7, #32]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f8cd 	bl	8004374 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e01a      	b.n	800421a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2220      	movs	r2, #32
 80041ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_I2C_Master_Receive+0x1e8>)
 80041f8:	400b      	ands	r3, r1
 80041fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	80002400 	.word	0x80002400
 8004228:	fe00e800 	.word	0xfe00e800

0800422c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d103      	bne.n	800424a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d007      	beq.n	8004268 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	619a      	str	r2, [r3, #24]
  }
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	4613      	mov	r3, r2
 8004282:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004284:	e022      	b.n	80042cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d01e      	beq.n	80042cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800428e:	f7ff fa47 	bl	8003720 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d302      	bcc.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d113      	bne.n	80042cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e00f      	b.n	80042ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4013      	ands	r3, r2
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	429a      	cmp	r2, r3
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d0cd      	beq.n	8004286 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004300:	e02c      	b.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f8ea 	bl	80044e0 <I2C_IsErrorOccurred>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e02a      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431c:	d01e      	beq.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7ff f9ff 	bl	8003720 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d113      	bne.n	800435c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e007      	b.n	800436c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d1cb      	bne.n	8004302 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	e028      	b.n	80043d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f8aa 	bl	80044e0 <I2C_IsErrorOccurred>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e026      	b.n	80043e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7ff f9c3 	bl	8003720 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d113      	bne.n	80043d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e007      	b.n	80043e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b20      	cmp	r3, #32
 80043e0:	d1cf      	bne.n	8004382 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f8:	e064      	b.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f86e 	bl	80044e0 <I2C_IsErrorOccurred>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e062      	b.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b20      	cmp	r3, #32
 800441a:	d138      	bne.n	800448e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d105      	bne.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e04e      	b.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	2b10      	cmp	r3, #16
 8004442:	d107      	bne.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2210      	movs	r2, #16
 800444a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2204      	movs	r2, #4
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
 8004452:	e002      	b.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2220      	movs	r2, #32
 8004460:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800446e:	400b      	ands	r3, r1
 8004470:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e022      	b.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7ff f947 	bl	8003720 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10f      	bne.n	80044c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e007      	b.n	80044d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d193      	bne.n	80043fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08a      	sub	sp, #40	; 0x28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d075      	beq.n	80045f8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2210      	movs	r2, #16
 8004512:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004514:	e056      	b.n	80045c4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d052      	beq.n	80045c4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800451e:	f7ff f8ff 	bl	8003720 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d302      	bcc.n	8004534 <I2C_IsErrorOccurred+0x54>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d147      	bne.n	80045c4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004546:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004556:	d12e      	bne.n	80045b6 <I2C_IsErrorOccurred+0xd6>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800455e:	d02a      	beq.n	80045b6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004560:	7cfb      	ldrb	r3, [r7, #19]
 8004562:	2b20      	cmp	r3, #32
 8004564:	d027      	beq.n	80045b6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004574:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004576:	f7ff f8d3 	bl	8003720 <HAL_GetTick>
 800457a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800457c:	e01b      	b.n	80045b6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800457e:	f7ff f8cf 	bl	8003720 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b19      	cmp	r3, #25
 800458a:	d914      	bls.n	80045b6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d1dc      	bne.n	800457e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d003      	beq.n	80045da <I2C_IsErrorOccurred+0xfa>
 80045d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d09d      	beq.n	8004516 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2220      	movs	r2, #32
 80045e8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800461a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f043 0308 	orr.w	r3, r3, #8
 8004632:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800463c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00b      	beq.n	8004666 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f043 0302 	orr.w	r3, r3, #2
 8004654:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01c      	beq.n	80046a8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f7ff fddc 	bl	800422c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <I2C_IsErrorOccurred+0x1d4>)
 8004680:	400b      	ands	r3, r1
 8004682:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3728      	adds	r7, #40	; 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	fe00e800 	.word	0xfe00e800

080046b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	817b      	strh	r3, [r7, #10]
 80046c6:	4613      	mov	r3, r2
 80046c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046d0:	7a7b      	ldrb	r3, [r7, #9]
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046d8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046e6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	0d5b      	lsrs	r3, r3, #21
 80046f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <I2C_TransferConfig+0x60>)
 80046f8:	430b      	orrs	r3, r1
 80046fa:	43db      	mvns	r3, r3
 80046fc:	ea02 0103 	and.w	r1, r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	03ff63ff 	.word	0x03ff63ff

0800471c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b20      	cmp	r3, #32
 8004730:	d138      	bne.n	80047a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800473c:	2302      	movs	r3, #2
 800473e:	e032      	b.n	80047a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2224      	movs	r2, #36	; 0x24
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800476e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d139      	bne.n	800483c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e033      	b.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	; 0x24
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004850:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485c:	d102      	bne.n	8004864 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800485e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004862:	e00b      	b.n	800487c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d102      	bne.n	800487a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004878:	e000      	b.n	800487c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800487a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40007000 	.word	0x40007000

0800488c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d141      	bne.n	800491e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489a:	4b4b      	ldr	r3, [pc, #300]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d131      	bne.n	800490c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048a8:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ae:	4a46      	ldr	r2, [pc, #280]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048b8:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c0:	4a41      	ldr	r2, [pc, #260]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80048c8:	4b40      	ldr	r3, [pc, #256]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2232      	movs	r2, #50	; 0x32
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	4a3f      	ldr	r2, [pc, #252]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	0c9b      	lsrs	r3, r3, #18
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048de:	e002      	b.n	80048e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e6:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d102      	bne.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f2      	bne.n	80048e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fa:	4b33      	ldr	r3, [pc, #204]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d158      	bne.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e057      	b.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800490c:	4b2e      	ldr	r3, [pc, #184]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004912:	4a2d      	ldr	r2, [pc, #180]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800491c:	e04d      	b.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004924:	d141      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004926:	4b28      	ldr	r3, [pc, #160]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d131      	bne.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800493a:	4a23      	ldr	r2, [pc, #140]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004944:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800494c:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004954:	4b1d      	ldr	r3, [pc, #116]	; (80049cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2232      	movs	r2, #50	; 0x32
 800495a:	fb02 f303 	mul.w	r3, r2, r3
 800495e:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	0c9b      	lsrs	r3, r3, #18
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800496a:	e002      	b.n	8004972 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d102      	bne.n	8004986 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f2      	bne.n	800496c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004992:	d112      	bne.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e011      	b.n	80049bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800499e:	4a0a      	ldr	r2, [pc, #40]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049a8:	e007      	b.n	80049ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40007000 	.word	0x40007000
 80049cc:	20000000 	.word	0x20000000
 80049d0:	431bde83 	.word	0x431bde83

080049d4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80049de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e2:	6053      	str	r3, [r2, #4]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40007000 	.word	0x40007000

080049f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d102      	bne.n	8004a08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f000 bc16 	b.w	8005234 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a08:	4ba0      	ldr	r3, [pc, #640]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a12:	4b9e      	ldr	r3, [pc, #632]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80e4 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4c>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	f040 808b 	bne.w	8004b4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	f040 8087 	bne.w	8004b4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_OscConfig+0x64>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e3ed      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1a      	ldr	r2, [r3, #32]
 8004a5c:	4b8b      	ldr	r3, [pc, #556]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_RCC_OscConfig+0x7e>
 8004a68:	4b88      	ldr	r3, [pc, #544]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a70:	e005      	b.n	8004a7e <HAL_RCC_OscConfig+0x8a>
 8004a72:	4b86      	ldr	r3, [pc, #536]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d223      	bcs.n	8004aca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fdc8 	bl	800561c <RCC_SetFlashLatencyFromMSIRange>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e3ce      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a96:	4b7d      	ldr	r3, [pc, #500]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a7c      	ldr	r2, [pc, #496]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004a9c:	f043 0308 	orr.w	r3, r3, #8
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	4b7a      	ldr	r3, [pc, #488]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	4977      	ldr	r1, [pc, #476]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ab4:	4b75      	ldr	r3, [pc, #468]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	4972      	ldr	r1, [pc, #456]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	604b      	str	r3, [r1, #4]
 8004ac8:	e025      	b.n	8004b16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004aca:	4b70      	ldr	r3, [pc, #448]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a6f      	ldr	r2, [pc, #444]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ad0:	f043 0308 	orr.w	r3, r3, #8
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	496a      	ldr	r1, [pc, #424]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae8:	4b68      	ldr	r3, [pc, #416]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	4965      	ldr	r1, [pc, #404]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd88 	bl	800561c <RCC_SetFlashLatencyFromMSIRange>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e38e      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b16:	f000 fcbf 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	4a5a      	ldr	r2, [pc, #360]	; (8004c90 <HAL_RCC_OscConfig+0x29c>)
 8004b28:	5cd3      	ldrb	r3, [r2, r3]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b32:	4a58      	ldr	r2, [pc, #352]	; (8004c94 <HAL_RCC_OscConfig+0x2a0>)
 8004b34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b36:	4b58      	ldr	r3, [pc, #352]	; (8004c98 <HAL_RCC_OscConfig+0x2a4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fda0 	bl	8003680 <HAL_InitTick>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d052      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	e372      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d032      	beq.n	8004bbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b56:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a4c      	ldr	r2, [pc, #304]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b62:	f7fe fddd 	bl	8003720 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b6a:	f7fe fdd9 	bl	8003720 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e35b      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b7c:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b88:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b8e:	f043 0308 	orr.w	r3, r3, #8
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	493a      	ldr	r1, [pc, #232]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4935      	ldr	r1, [pc, #212]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
 8004bba:	e01a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bbc:	4b33      	ldr	r3, [pc, #204]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a32      	ldr	r2, [pc, #200]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bc8:	f7fe fdaa 	bl	8003720 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bd0:	f7fe fda6 	bl	8003720 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e328      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004be2:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1dc>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d073      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_OscConfig+0x21c>
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d10e      	bne.n	8004c28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d10b      	bne.n	8004c28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d063      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x2f0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d15f      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e305      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d106      	bne.n	8004c40 <HAL_RCC_OscConfig+0x24c>
 8004c32:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e01d      	b.n	8004c7c <HAL_RCC_OscConfig+0x288>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x270>
 8004c4a:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a0f      	ldr	r2, [pc, #60]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b0d      	ldr	r3, [pc, #52]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0x288>
 8004c64:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <HAL_RCC_OscConfig+0x298>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe fd4c 	bl	8003720 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8a:	e010      	b.n	8004cae <HAL_RCC_OscConfig+0x2ba>
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	0800ba80 	.word	0x0800ba80
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fe fd40 	bl	8003720 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	; 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e2c2      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cae:	4baf      	ldr	r3, [pc, #700]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x2a8>
 8004cba:	e014      	b.n	8004ce6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fd30 	bl	8003720 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe fd2c 	bl	8003720 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e2ae      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cd6:	4ba5      	ldr	r3, [pc, #660]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x2d0>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d060      	beq.n	8004db4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_OscConfig+0x310>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	d119      	bne.n	8004d32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d116      	bne.n	8004d32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d04:	4b99      	ldr	r3, [pc, #612]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_OscConfig+0x328>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e28b      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1c:	4b93      	ldr	r3, [pc, #588]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	061b      	lsls	r3, r3, #24
 8004d2a:	4990      	ldr	r1, [pc, #576]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d30:	e040      	b.n	8004db4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d023      	beq.n	8004d82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d3a:	4b8c      	ldr	r3, [pc, #560]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a8b      	ldr	r2, [pc, #556]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fe fceb 	bl	8003720 <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4e:	f7fe fce7 	bl	8003720 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e269      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d60:	4b82      	ldr	r3, [pc, #520]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6c:	4b7f      	ldr	r3, [pc, #508]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	061b      	lsls	r3, r3, #24
 8004d7a:	497c      	ldr	r1, [pc, #496]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]
 8004d80:	e018      	b.n	8004db4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d82:	4b7a      	ldr	r3, [pc, #488]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a79      	ldr	r2, [pc, #484]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8e:	f7fe fcc7 	bl	8003720 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d96:	f7fe fcc3 	bl	8003720 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e245      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004da8:	4b70      	ldr	r3, [pc, #448]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d03c      	beq.n	8004e3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01c      	beq.n	8004e02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dc8:	4b68      	ldr	r3, [pc, #416]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dce:	4a67      	ldr	r2, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fe fca2 	bl	8003720 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004de0:	f7fe fc9e 	bl	8003720 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e220      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004df2:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0ef      	beq.n	8004de0 <HAL_RCC_OscConfig+0x3ec>
 8004e00:	e01b      	b.n	8004e3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e02:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e08:	4a58      	ldr	r2, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e12:	f7fe fc85 	bl	8003720 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1a:	f7fe fc81 	bl	8003720 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e203      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e2c:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ef      	bne.n	8004e1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 80a6 	beq.w	8004f94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e4c:	4b47      	ldr	r3, [pc, #284]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10d      	bne.n	8004e74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e58:	4b44      	ldr	r3, [pc, #272]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	4a43      	ldr	r2, [pc, #268]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6593      	str	r3, [r2, #88]	; 0x58
 8004e64:	4b41      	ldr	r3, [pc, #260]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e70:	2301      	movs	r3, #1
 8004e72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e74:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <HAL_RCC_OscConfig+0x57c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d118      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e80:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <HAL_RCC_OscConfig+0x57c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a3a      	ldr	r2, [pc, #232]	; (8004f70 <HAL_RCC_OscConfig+0x57c>)
 8004e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8c:	f7fe fc48 	bl	8003720 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e94:	f7fe fc44 	bl	8003720 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1c6      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea6:	4b32      	ldr	r3, [pc, #200]	; (8004f70 <HAL_RCC_OscConfig+0x57c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d108      	bne.n	8004ecc <HAL_RCC_OscConfig+0x4d8>
 8004eba:	4b2c      	ldr	r3, [pc, #176]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec0:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eca:	e024      	b.n	8004f16 <HAL_RCC_OscConfig+0x522>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d110      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x502>
 8004ed4:	4b25      	ldr	r3, [pc, #148]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ee4:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ef4:	e00f      	b.n	8004f16 <HAL_RCC_OscConfig+0x522>
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f06:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0c:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004f0e:	f023 0304 	bic.w	r3, r3, #4
 8004f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1e:	f7fe fbff 	bl	8003720 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f24:	e00a      	b.n	8004f3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f26:	f7fe fbfb 	bl	8003720 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e17b      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x578>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ed      	beq.n	8004f26 <HAL_RCC_OscConfig+0x532>
 8004f4a:	e01a      	b.n	8004f82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4c:	f7fe fbe8 	bl	8003720 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f52:	e00f      	b.n	8004f74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fe fbe4 	bl	8003720 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d906      	bls.n	8004f74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e164      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
 8004f6a:	bf00      	nop
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f74:	4ba8      	ldr	r3, [pc, #672]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e8      	bne.n	8004f54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f82:	7ffb      	ldrb	r3, [r7, #31]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d105      	bne.n	8004f94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f88:	4ba3      	ldr	r3, [pc, #652]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	4aa2      	ldr	r2, [pc, #648]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03c      	beq.n	800501a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa8:	4b9b      	ldr	r3, [pc, #620]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fae:	4a9a      	ldr	r2, [pc, #616]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fe fbb2 	bl	8003720 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fc0:	f7fe fbae 	bl	8003720 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e130      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fd2:	4b91      	ldr	r3, [pc, #580]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ef      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x5cc>
 8004fe0:	e01b      	b.n	800501a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fe2:	4b8d      	ldr	r3, [pc, #564]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fe8:	4a8b      	ldr	r2, [pc, #556]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fe fb95 	bl	8003720 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffa:	f7fe fb91 	bl	8003720 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e113      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800500c:	4b82      	ldr	r3, [pc, #520]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 800500e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ef      	bne.n	8004ffa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8107 	beq.w	8005232 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	2b02      	cmp	r3, #2
 800502a:	f040 80cb 	bne.w	80051c4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800502e:	4b7a      	ldr	r3, [pc, #488]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f003 0203 	and.w	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503e:	429a      	cmp	r2, r3
 8005040:	d12c      	bne.n	800509c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	3b01      	subs	r3, #1
 800504e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d123      	bne.n	800509c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d11b      	bne.n	800509c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d113      	bne.n	800509c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	3b01      	subs	r3, #1
 8005082:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d109      	bne.n	800509c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	3b01      	subs	r3, #1
 8005096:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d06d      	beq.n	8005178 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d068      	beq.n	8005174 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050a2:	4b5d      	ldr	r3, [pc, #372]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d105      	bne.n	80050ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80050ae:	4b5a      	ldr	r3, [pc, #360]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e0ba      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050be:	4b56      	ldr	r3, [pc, #344]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a55      	ldr	r2, [pc, #340]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80050c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ca:	f7fe fb29 	bl	8003720 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d2:	f7fe fb25 	bl	8003720 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0a7      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e4:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f0:	4b49      	ldr	r3, [pc, #292]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	4b49      	ldr	r3, [pc, #292]	; (800521c <HAL_RCC_OscConfig+0x828>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005100:	3a01      	subs	r2, #1
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	4311      	orrs	r1, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800510a:	0212      	lsls	r2, r2, #8
 800510c:	4311      	orrs	r1, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005112:	0852      	lsrs	r2, r2, #1
 8005114:	3a01      	subs	r2, #1
 8005116:	0552      	lsls	r2, r2, #21
 8005118:	4311      	orrs	r1, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800511e:	0852      	lsrs	r2, r2, #1
 8005120:	3a01      	subs	r2, #1
 8005122:	0652      	lsls	r2, r2, #25
 8005124:	4311      	orrs	r1, r2
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800512a:	06d2      	lsls	r2, r2, #27
 800512c:	430a      	orrs	r2, r1
 800512e:	493a      	ldr	r1, [pc, #232]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005130:	4313      	orrs	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005134:	4b38      	ldr	r3, [pc, #224]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a37      	ldr	r2, [pc, #220]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 800513a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800513e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005140:	4b35      	ldr	r3, [pc, #212]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a34      	ldr	r2, [pc, #208]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800514a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800514c:	f7fe fae8 	bl	8003720 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005154:	f7fe fae4 	bl	8003720 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e066      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0f0      	beq.n	8005154 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005172:	e05e      	b.n	8005232 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e05d      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005178:	4b27      	ldr	r3, [pc, #156]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d156      	bne.n	8005232 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a23      	ldr	r2, [pc, #140]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 800518a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800518e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005190:	4b21      	ldr	r3, [pc, #132]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a20      	ldr	r2, [pc, #128]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 8005196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800519a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800519c:	f7fe fac0 	bl	8003720 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a4:	f7fe fabc 	bl	8003720 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e03e      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b6:	4b18      	ldr	r3, [pc, #96]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x7b0>
 80051c2:	e036      	b.n	8005232 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d031      	beq.n	800522e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ca:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d105      	bne.n	80051ee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051e8:	f023 0303 	bic.w	r3, r3, #3
 80051ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <HAL_RCC_OscConfig+0x824>)
 80051f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fe fa8f 	bl	8003720 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005204:	e00c      	b.n	8005220 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005206:	f7fe fa8b 	bl	8003720 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d905      	bls.n	8005220 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e00d      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
 8005218:	40021000 	.word	0x40021000
 800521c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <HAL_RCC_OscConfig+0x848>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ec      	bne.n	8005206 <HAL_RCC_OscConfig+0x812>
 800522c:	e001      	b.n	8005232 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e10f      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005258:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 030f 	and.w	r3, r3, #15
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	429a      	cmp	r2, r3
 8005264:	d910      	bls.n	8005288 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005266:	4b86      	ldr	r3, [pc, #536]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 020f 	bic.w	r2, r3, #15
 800526e:	4984      	ldr	r1, [pc, #528]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	4313      	orrs	r3, r2
 8005274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b82      	ldr	r3, [pc, #520]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d001      	beq.n	8005288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0f7      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8089 	beq.w	80053a8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d133      	bne.n	8005306 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529e:	4b79      	ldr	r3, [pc, #484]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0e4      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80052ae:	f000 fa0f 	bl	80056d0 <RCC_GetSysClockFreqFromPLLSource>
 80052b2:	4602      	mov	r2, r0
 80052b4:	4b74      	ldr	r3, [pc, #464]	; (8005488 <HAL_RCC_ClockConfig+0x248>)
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d955      	bls.n	8005366 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80052ba:	4b72      	ldr	r3, [pc, #456]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052c6:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ce:	4a6d      	ldr	r2, [pc, #436]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	e044      	b.n	8005366 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03e      	beq.n	8005366 <HAL_RCC_ClockConfig+0x126>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d13a      	bne.n	8005366 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052f0:	4b64      	ldr	r3, [pc, #400]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052f8:	4a62      	ldr	r2, [pc, #392]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e02f      	b.n	8005366 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d107      	bne.n	800531e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530e:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d115      	bne.n	8005346 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e0ac      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005326:	4b57      	ldr	r3, [pc, #348]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0a0      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005336:	4b53      	ldr	r3, [pc, #332]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e098      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005346:	f000 f8a7 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 800534a:	4602      	mov	r2, r0
 800534c:	4b4e      	ldr	r3, [pc, #312]	; (8005488 <HAL_RCC_ClockConfig+0x248>)
 800534e:	429a      	cmp	r2, r3
 8005350:	d909      	bls.n	8005366 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005352:	4b4c      	ldr	r3, [pc, #304]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535a:	4a4a      	ldr	r2, [pc, #296]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005366:	4b47      	ldr	r3, [pc, #284]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 0203 	bic.w	r2, r3, #3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4944      	ldr	r1, [pc, #272]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005378:	f7fe f9d2 	bl	8003720 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537e:	e00a      	b.n	8005396 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005380:	f7fe f9ce 	bl	8003720 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	f241 3288 	movw	r2, #5000	; 0x1388
 800538e:	4293      	cmp	r3, r2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e070      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005396:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 020c 	and.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1eb      	bne.n	8005380 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b33      	ldr	r3, [pc, #204]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4930      	ldr	r1, [pc, #192]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
 80053c6:	e008      	b.n	80053da <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2b80      	cmp	r3, #128	; 0x80
 80053cc:	d105      	bne.n	80053da <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80053ce:	4b2d      	ldr	r3, [pc, #180]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4a2c      	ldr	r2, [pc, #176]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 80053d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053da:	4b29      	ldr	r3, [pc, #164]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d210      	bcs.n	800540a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e8:	4b25      	ldr	r3, [pc, #148]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 020f 	bic.w	r2, r3, #15
 80053f0:	4923      	ldr	r1, [pc, #140]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <HAL_RCC_ClockConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d001      	beq.n	800540a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e036      	b.n	8005478 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4918      	ldr	r1, [pc, #96]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005434:	4b13      	ldr	r3, [pc, #76]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4910      	ldr	r1, [pc, #64]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005448:	f000 f826 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 800544c:	4601      	mov	r1, r0
 800544e:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RCC_ClockConfig+0x244>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	4a0c      	ldr	r2, [pc, #48]	; (800548c <HAL_RCC_ClockConfig+0x24c>)
 800545a:	5cd3      	ldrb	r3, [r2, r3]
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	fa21 f303 	lsr.w	r3, r1, r3
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <HAL_RCC_ClockConfig+0x250>)
 8005466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <HAL_RCC_ClockConfig+0x254>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe f907 	bl	8003680 <HAL_InitTick>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]

  return status;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40022000 	.word	0x40022000
 8005484:	40021000 	.word	0x40021000
 8005488:	04c4b400 	.word	0x04c4b400
 800548c:	0800ba80 	.word	0x0800ba80
 8005490:	20000000 	.word	0x20000000
 8005494:	20000004 	.word	0x20000004

08005498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005498:	b480      	push	{r7}
 800549a:	b089      	sub	sp, #36	; 0x24
 800549c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a6:	4b3d      	ldr	r3, [pc, #244]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b0:	4b3a      	ldr	r3, [pc, #232]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_GetSysClockFreq+0x34>
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d121      	bne.n	800550a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d11e      	bne.n	800550a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054cc:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054d8:	4b30      	ldr	r3, [pc, #192]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 80054da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	e005      	b.n	80054f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054e8:	4b2c      	ldr	r3, [pc, #176]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054f4:	4a2a      	ldr	r2, [pc, #168]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10d      	bne.n	8005520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005508:	e00a      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d102      	bne.n	8005516 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	e004      	b.n	8005520 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b08      	cmp	r3, #8
 800551a:	d101      	bne.n	8005520 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800551c:	4b22      	ldr	r3, [pc, #136]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x110>)
 800551e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b0c      	cmp	r3, #12
 8005524:	d133      	bne.n	800558e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d002      	beq.n	800553c <HAL_RCC_GetSysClockFreq+0xa4>
 8005536:	2b03      	cmp	r3, #3
 8005538:	d003      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0xaa>
 800553a:	e005      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800553e:	617b      	str	r3, [r7, #20]
      break;
 8005540:	e005      	b.n	800554e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005544:	617b      	str	r3, [r7, #20]
      break;
 8005546:	e002      	b.n	800554e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	617b      	str	r3, [r7, #20]
      break;
 800554c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	3301      	adds	r3, #1
 800555a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800555c:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	fb02 f203 	mul.w	r2, r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_GetSysClockFreq+0x104>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	0e5b      	lsrs	r3, r3, #25
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	3301      	adds	r3, #1
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	fbb2 f3f3 	udiv	r3, r2, r3
 800558c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800558e:	69bb      	ldr	r3, [r7, #24]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3724      	adds	r7, #36	; 0x24
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40021000 	.word	0x40021000
 80055a0:	0800ba98 	.word	0x0800ba98
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	007a1200 	.word	0x007a1200

080055ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000000 	.word	0x20000000

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055c8:	f7ff fff0 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4a04      	ldr	r2, [pc, #16]	; (80055ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80055da:	5cd3      	ldrb	r3, [r2, r3]
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	0800ba90 	.word	0x0800ba90

080055f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055f4:	f7ff ffda 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055f8:	4601      	mov	r1, r0
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0adb      	lsrs	r3, r3, #11
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4a04      	ldr	r2, [pc, #16]	; (8005618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005606:	5cd3      	ldrb	r3, [r2, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	0800ba90 	.word	0x0800ba90

0800561c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005628:	4b27      	ldr	r3, [pc, #156]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005634:	f7ff f90a 	bl	800484c <HAL_PWREx_GetVoltageRange>
 8005638:	6178      	str	r0, [r7, #20]
 800563a:	e014      	b.n	8005666 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800563c:	4b22      	ldr	r3, [pc, #136]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	4a21      	ldr	r2, [pc, #132]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005646:	6593      	str	r3, [r2, #88]	; 0x58
 8005648:	4b1f      	ldr	r3, [pc, #124]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005654:	f7ff f8fa 	bl	800484c <HAL_PWREx_GetVoltageRange>
 8005658:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800565a:	4b1b      	ldr	r3, [pc, #108]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	4a1a      	ldr	r2, [pc, #104]	; (80056c8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005664:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566c:	d10b      	bne.n	8005686 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d913      	bls.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2ba0      	cmp	r3, #160	; 0xa0
 8005678:	d902      	bls.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800567a:	2302      	movs	r3, #2
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e00d      	b.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005680:	2301      	movs	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	e00a      	b.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b7f      	cmp	r3, #127	; 0x7f
 800568a:	d902      	bls.n	8005692 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800568c:	2302      	movs	r3, #2
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	e004      	b.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b70      	cmp	r3, #112	; 0x70
 8005696:	d101      	bne.n	800569c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005698:	2301      	movs	r3, #1
 800569a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f023 020f 	bic.w	r2, r3, #15
 80056a4:	4909      	ldr	r1, [pc, #36]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056ac:	4b07      	ldr	r3, [pc, #28]	; (80056cc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d001      	beq.n	80056be <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40022000 	.word	0x40022000

080056d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80056da:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d118      	bne.n	8005718 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056e6:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d107      	bne.n	8005702 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80056f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e005      	b.n	800570e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005702:	4b23      	ldr	r3, [pc, #140]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	091b      	lsrs	r3, r3, #4
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005716:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d002      	beq.n	800572e <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005728:	2b03      	cmp	r3, #3
 800572a:	d003      	beq.n	8005734 <RCC_GetSysClockFreqFromPLLSource+0x64>
 800572c:	e005      	b.n	800573a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005730:	613b      	str	r3, [r7, #16]
    break;
 8005732:	e005      	b.n	8005740 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005736:	613b      	str	r3, [r7, #16]
    break;
 8005738:	e002      	b.n	8005740 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
    break;
 800573e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005740:	4b13      	ldr	r3, [pc, #76]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	3301      	adds	r3, #1
 800574c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	fb02 f203 	mul.w	r2, r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005766:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	0e5b      	lsrs	r3, r3, #25
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	3301      	adds	r3, #1
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005780:	683b      	ldr	r3, [r7, #0]
}
 8005782:	4618      	mov	r0, r3
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	0800ba98 	.word	0x0800ba98
 8005798:	00f42400 	.word	0x00f42400
 800579c:	007a1200 	.word	0x007a1200

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057a8:	2300      	movs	r3, #0
 80057aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057ac:	2300      	movs	r3, #0
 80057ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d03d      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d00b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	d804      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00e      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d015      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057d0:	e01d      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80057d2:	2b60      	cmp	r3, #96	; 0x60
 80057d4:	d01e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d01c      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057da:	e018      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057dc:	4b86      	ldr	r3, [pc, #536]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a85      	ldr	r2, [pc, #532]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057e8:	e015      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fafd 	bl	8005df0 <RCCEx_PLLSAI1_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057fa:	e00c      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3320      	adds	r3, #32
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fbe4 	bl	8005fd0 <RCCEx_PLLSAI2_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	74fb      	strb	r3, [r7, #19]
      break;
 8005812:	e000      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005816:	7cfb      	ldrb	r3, [r7, #19]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800581c:	4b76      	ldr	r3, [pc, #472]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800581e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005822:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800582a:	4973      	ldr	r1, [pc, #460]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005832:	e001      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d042      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800584c:	d00f      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800584e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005852:	d805      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d011      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	d017      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xee>
 800585e:	e01f      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8005860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005864:	d01f      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586a:	d01c      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800586c:	e018      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800586e:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	4a61      	ldr	r2, [pc, #388]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005878:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800587a:	e015      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	2100      	movs	r1, #0
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fab4 	bl	8005df0 <RCCEx_PLLSAI1_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800588c:	e00c      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3320      	adds	r3, #32
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fb9b 	bl	8005fd0 <RCCEx_PLLSAI2_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800589e:	e003      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	74fb      	strb	r3, [r7, #19]
      break;
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80058a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a8:	7cfb      	ldrb	r3, [r7, #19]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058ae:	4b52      	ldr	r3, [pc, #328]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058bc:	494e      	ldr	r1, [pc, #312]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80058c4:	e001      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c6:	7cfb      	ldrb	r3, [r7, #19]
 80058c8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 809f 	beq.w	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d8:	2300      	movs	r3, #0
 80058da:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00d      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f2:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	4a40      	ldr	r2, [pc, #256]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fc:	6593      	str	r3, [r2, #88]	; 0x58
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800590a:	2301      	movs	r3, #1
 800590c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800590e:	4b3b      	ldr	r3, [pc, #236]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a3a      	ldr	r2, [pc, #232]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800591a:	f7fd ff01 	bl	8003720 <HAL_GetTick>
 800591e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005920:	e009      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7fd fefd 	bl	8003720 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d902      	bls.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	74fb      	strb	r3, [r7, #19]
        break;
 8005934:	e005      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005936:	4b31      	ldr	r3, [pc, #196]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0ef      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8005942:	7cfb      	ldrb	r3, [r7, #19]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d15b      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005948:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d01f      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	429a      	cmp	r2, r3
 8005964:	d019      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005966:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005970:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005972:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800597a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005992:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d016      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd febc 	bl	8003720 <HAL_GetTick>
 80059a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059aa:	e00b      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fd feb8 	bl	8003720 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d902      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	74fb      	strb	r3, [r7, #19]
            break;
 80059c2:	e006      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0ec      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80059d2:	7cfb      	ldrb	r3, [r7, #19]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10c      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d8:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e8:	4903      	ldr	r1, [pc, #12]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059f0:	e008      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059f2:	7cfb      	ldrb	r3, [r7, #19]
 80059f4:	74bb      	strb	r3, [r7, #18]
 80059f6:	e005      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a04:	7c7b      	ldrb	r3, [r7, #17]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a0a:	4ba0      	ldr	r3, [pc, #640]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	4a9f      	ldr	r2, [pc, #636]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a22:	4b9a      	ldr	r3, [pc, #616]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a28:	f023 0203 	bic.w	r2, r3, #3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	4996      	ldr	r1, [pc, #600]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a44:	4b91      	ldr	r3, [pc, #580]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f023 020c 	bic.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	498e      	ldr	r1, [pc, #568]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a66:	4b89      	ldr	r3, [pc, #548]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	4985      	ldr	r1, [pc, #532]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a88:	4b80      	ldr	r3, [pc, #512]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	497d      	ldr	r1, [pc, #500]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aaa:	4b78      	ldr	r3, [pc, #480]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab8:	4974      	ldr	r1, [pc, #464]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005acc:	4b6f      	ldr	r3, [pc, #444]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ada:	496c      	ldr	r1, [pc, #432]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005aee:	4b67      	ldr	r3, [pc, #412]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afc:	4963      	ldr	r1, [pc, #396]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b10:	4b5e      	ldr	r3, [pc, #376]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1e:	495b      	ldr	r1, [pc, #364]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b32:	4b56      	ldr	r3, [pc, #344]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	4952      	ldr	r1, [pc, #328]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b54:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	494a      	ldr	r1, [pc, #296]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b76:	4b45      	ldr	r3, [pc, #276]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	4941      	ldr	r1, [pc, #260]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b98:	4b3c      	ldr	r3, [pc, #240]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba6:	4939      	ldr	r1, [pc, #228]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d028      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bba:	4b34      	ldr	r3, [pc, #208]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc8:	4930      	ldr	r1, [pc, #192]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bda:	4b2c      	ldr	r3, [pc, #176]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	4a2b      	ldr	r2, [pc, #172]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be4:	60d3      	str	r3, [r2, #12]
 8005be6:	e011      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 f8f9 	bl	8005df0 <RCCEx_PLLSAI1_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8005c08:	7cfb      	ldrb	r3, [r7, #19]
 8005c0a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d04d      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c20:	d108      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c28:	4a18      	ldr	r2, [pc, #96]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c32:	e012      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005c34:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c3a:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c40:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c52:	490e      	ldr	r1, [pc, #56]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c62:	d106      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c64:	4b09      	ldr	r3, [pc, #36]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6e:	60d3      	str	r3, [r2, #12]
 8005c70:	e020      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c7c:	4b03      	ldr	r3, [pc, #12]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a02      	ldr	r2, [pc, #8]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c86:	60d3      	str	r3, [r2, #12]
 8005c88:	e014      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c98:	d10c      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f8a5 	bl	8005df0 <RCCEx_PLLSAI1_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005caa:	7cfb      	ldrb	r3, [r7, #19]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
 8005cb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d028      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cce:	4947      	ldr	r1, [pc, #284]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cde:	d106      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce0:	4b42      	ldr	r3, [pc, #264]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4a41      	ldr	r2, [pc, #260]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cea:	60d3      	str	r3, [r2, #12]
 8005cec:	e011      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cf2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cf6:	d10c      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 f876 	bl	8005df0 <RCCEx_PLLSAI1_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01e      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d1e:	4b33      	ldr	r3, [pc, #204]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d2e:	492f      	ldr	r1, [pc, #188]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	3304      	adds	r3, #4
 8005d46:	2102      	movs	r1, #2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f851 	bl	8005df0 <RCCEx_PLLSAI1_Config>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d52:	7cfb      	ldrb	r3, [r7, #19]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d6e:	f023 0204 	bic.w	r2, r3, #4
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d78:	491c      	ldr	r1, [pc, #112]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d8c:	4b17      	ldr	r3, [pc, #92]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d92:	f023 0218 	bic.w	r2, r3, #24
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	4913      	ldr	r1, [pc, #76]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d017      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005db0:	4b0e      	ldr	r3, [pc, #56]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc0:	490a      	ldr	r1, [pc, #40]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4a04      	ldr	r2, [pc, #16]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8005dda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dde:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005de0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000

08005df0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dfe:	4b70      	ldr	r3, [pc, #448]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e0a:	4b6d      	ldr	r3, [pc, #436]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f003 0203 	and.w	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d103      	bne.n	8005e22 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d13f      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	e03c      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d00c      	beq.n	8005e4a <RCCEx_PLLSAI1_Config+0x5a>
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d013      	beq.n	8005e5c <RCCEx_PLLSAI1_Config+0x6c>
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d120      	bne.n	8005e7a <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e38:	4b61      	ldr	r3, [pc, #388]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11d      	bne.n	8005e80 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e48:	e01a      	b.n	8005e80 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e4a:	4b5d      	ldr	r3, [pc, #372]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d116      	bne.n	8005e84 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e5a:	e013      	b.n	8005e84 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e5c:	4b58      	ldr	r3, [pc, #352]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10f      	bne.n	8005e88 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e68:	4b55      	ldr	r3, [pc, #340]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e78:	e006      	b.n	8005e88 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e7e:	e004      	b.n	8005e8a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005e80:	bf00      	nop
 8005e82:	e002      	b.n	8005e8a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005e84:	bf00      	nop
 8005e86:	e000      	b.n	8005e8a <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8005e88:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005e90:	4b4b      	ldr	r3, [pc, #300]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f023 0203 	bic.w	r2, r3, #3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4948      	ldr	r1, [pc, #288]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8086 	bne.w	8005fb6 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005eaa:	4b45      	ldr	r3, [pc, #276]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a44      	ldr	r2, [pc, #272]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb6:	f7fd fc33 	bl	8003720 <HAL_GetTick>
 8005eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ebc:	e009      	b.n	8005ed2 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ebe:	f7fd fc2f 	bl	8003720 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d902      	bls.n	8005ed2 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	73fb      	strb	r3, [r7, #15]
        break;
 8005ed0:	e005      	b.n	8005ede <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ed2:	4b3b      	ldr	r3, [pc, #236]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ef      	bne.n	8005ebe <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d168      	bne.n	8005fb6 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d113      	bne.n	8005f12 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005eea:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <RCCEx_PLLSAI1_Config+0x1d4>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6892      	ldr	r2, [r2, #8]
 8005ef6:	0211      	lsls	r1, r2, #8
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68d2      	ldr	r2, [r2, #12]
 8005efc:	06d2      	lsls	r2, r2, #27
 8005efe:	4311      	orrs	r1, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6852      	ldr	r2, [r2, #4]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	0112      	lsls	r2, r2, #4
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	492d      	ldr	r1, [pc, #180]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	610b      	str	r3, [r1, #16]
 8005f10:	e02d      	b.n	8005f6e <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d115      	bne.n	8005f44 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f18:	4b29      	ldr	r3, [pc, #164]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	4b2a      	ldr	r3, [pc, #168]	; (8005fc8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6892      	ldr	r2, [r2, #8]
 8005f24:	0211      	lsls	r1, r2, #8
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6912      	ldr	r2, [r2, #16]
 8005f2a:	0852      	lsrs	r2, r2, #1
 8005f2c:	3a01      	subs	r2, #1
 8005f2e:	0552      	lsls	r2, r2, #21
 8005f30:	4311      	orrs	r1, r2
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6852      	ldr	r2, [r2, #4]
 8005f36:	3a01      	subs	r2, #1
 8005f38:	0112      	lsls	r2, r2, #4
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	4920      	ldr	r1, [pc, #128]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	610b      	str	r3, [r1, #16]
 8005f42:	e014      	b.n	8005f6e <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f44:	4b1e      	ldr	r3, [pc, #120]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6892      	ldr	r2, [r2, #8]
 8005f50:	0211      	lsls	r1, r2, #8
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6952      	ldr	r2, [r2, #20]
 8005f56:	0852      	lsrs	r2, r2, #1
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	0652      	lsls	r2, r2, #25
 8005f5c:	4311      	orrs	r1, r2
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6852      	ldr	r2, [r2, #4]
 8005f62:	3a01      	subs	r2, #1
 8005f64:	0112      	lsls	r2, r2, #4
 8005f66:	430a      	orrs	r2, r1
 8005f68:	4915      	ldr	r1, [pc, #84]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f6e:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a13      	ldr	r2, [pc, #76]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7a:	f7fd fbd1 	bl	8003720 <HAL_GetTick>
 8005f7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f80:	e009      	b.n	8005f96 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f82:	f7fd fbcd 	bl	8003720 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d902      	bls.n	8005f96 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	73fb      	strb	r3, [r7, #15]
          break;
 8005f94:	e005      	b.n	8005fa2 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0ef      	beq.n	8005f82 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d106      	bne.n	8005fb6 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4903      	ldr	r1, [pc, #12]	; (8005fc0 <RCCEx_PLLSAI1_Config+0x1d0>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	07ff800f 	.word	0x07ff800f
 8005fc8:	ff9f800f 	.word	0xff9f800f
 8005fcc:	f9ff800f 	.word	0xf9ff800f

08005fd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005fde:	4b70      	ldr	r3, [pc, #448]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00e      	beq.n	8006008 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005fea:	4b6d      	ldr	r3, [pc, #436]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f003 0203 	and.w	r2, r3, #3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d103      	bne.n	8006002 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d13f      	bne.n	8006082 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
 8006006:	e03c      	b.n	8006082 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d00c      	beq.n	800602a <RCCEx_PLLSAI2_Config+0x5a>
 8006010:	2b03      	cmp	r3, #3
 8006012:	d013      	beq.n	800603c <RCCEx_PLLSAI2_Config+0x6c>
 8006014:	2b01      	cmp	r3, #1
 8006016:	d120      	bne.n	800605a <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006018:	4b61      	ldr	r3, [pc, #388]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d11d      	bne.n	8006060 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006028:	e01a      	b.n	8006060 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800602a:	4b5d      	ldr	r3, [pc, #372]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006032:	2b00      	cmp	r3, #0
 8006034:	d116      	bne.n	8006064 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800603a:	e013      	b.n	8006064 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800603c:	4b58      	ldr	r3, [pc, #352]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10f      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006048:	4b55      	ldr	r3, [pc, #340]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006058:	e006      	b.n	8006068 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	73fb      	strb	r3, [r7, #15]
      break;
 800605e:	e004      	b.n	800606a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006060:	bf00      	nop
 8006062:	e002      	b.n	800606a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006068:	bf00      	nop
    }

    if(status == HAL_OK)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d108      	bne.n	8006082 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006070:	4b4b      	ldr	r3, [pc, #300]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f023 0203 	bic.w	r2, r3, #3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4948      	ldr	r1, [pc, #288]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800607e:	4313      	orrs	r3, r2
 8006080:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f040 8086 	bne.w	8006196 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800608a:	4b45      	ldr	r3, [pc, #276]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a44      	ldr	r2, [pc, #272]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006096:	f7fd fb43 	bl	8003720 <HAL_GetTick>
 800609a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800609c:	e009      	b.n	80060b2 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800609e:	f7fd fb3f 	bl	8003720 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d902      	bls.n	80060b2 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	73fb      	strb	r3, [r7, #15]
        break;
 80060b0:	e005      	b.n	80060be <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060b2:	4b3b      	ldr	r3, [pc, #236]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ef      	bne.n	800609e <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d168      	bne.n	8006196 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d113      	bne.n	80060f2 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060ca:	4b35      	ldr	r3, [pc, #212]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80060cc:	695a      	ldr	r2, [r3, #20]
 80060ce:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <RCCEx_PLLSAI2_Config+0x1d4>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6892      	ldr	r2, [r2, #8]
 80060d6:	0211      	lsls	r1, r2, #8
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	68d2      	ldr	r2, [r2, #12]
 80060dc:	06d2      	lsls	r2, r2, #27
 80060de:	4311      	orrs	r1, r2
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6852      	ldr	r2, [r2, #4]
 80060e4:	3a01      	subs	r2, #1
 80060e6:	0112      	lsls	r2, r2, #4
 80060e8:	430a      	orrs	r2, r1
 80060ea:	492d      	ldr	r1, [pc, #180]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	614b      	str	r3, [r1, #20]
 80060f0:	e02d      	b.n	800614e <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d115      	bne.n	8006124 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80060f8:	4b29      	ldr	r3, [pc, #164]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80060fe:	4013      	ands	r3, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6892      	ldr	r2, [r2, #8]
 8006104:	0211      	lsls	r1, r2, #8
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6912      	ldr	r2, [r2, #16]
 800610a:	0852      	lsrs	r2, r2, #1
 800610c:	3a01      	subs	r2, #1
 800610e:	0552      	lsls	r2, r2, #21
 8006110:	4311      	orrs	r1, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6852      	ldr	r2, [r2, #4]
 8006116:	3a01      	subs	r2, #1
 8006118:	0112      	lsls	r2, r2, #4
 800611a:	430a      	orrs	r2, r1
 800611c:	4920      	ldr	r1, [pc, #128]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800611e:	4313      	orrs	r3, r2
 8006120:	614b      	str	r3, [r1, #20]
 8006122:	e014      	b.n	800614e <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006124:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	4b20      	ldr	r3, [pc, #128]	; (80061ac <RCCEx_PLLSAI2_Config+0x1dc>)
 800612a:	4013      	ands	r3, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6892      	ldr	r2, [r2, #8]
 8006130:	0211      	lsls	r1, r2, #8
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6952      	ldr	r2, [r2, #20]
 8006136:	0852      	lsrs	r2, r2, #1
 8006138:	3a01      	subs	r2, #1
 800613a:	0652      	lsls	r2, r2, #25
 800613c:	4311      	orrs	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6852      	ldr	r2, [r2, #4]
 8006142:	3a01      	subs	r2, #1
 8006144:	0112      	lsls	r2, r2, #4
 8006146:	430a      	orrs	r2, r1
 8006148:	4915      	ldr	r1, [pc, #84]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800614a:	4313      	orrs	r3, r2
 800614c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006158:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615a:	f7fd fae1 	bl	8003720 <HAL_GetTick>
 800615e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006160:	e009      	b.n	8006176 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006162:	f7fd fadd 	bl	8003720 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d902      	bls.n	8006176 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	73fb      	strb	r3, [r7, #15]
          break;
 8006174:	e005      	b.n	8006182 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0ef      	beq.n	8006162 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	4903      	ldr	r1, [pc, #12]	; (80061a0 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006192:	4313      	orrs	r3, r2
 8006194:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	07ff800f 	.word	0x07ff800f
 80061a8:	ff9f800f 	.word	0xff9f800f
 80061ac:	f9ff800f 	.word	0xf9ff800f

080061b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e049      	b.n	8006256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fd f86c 	bl	80032b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f000 fb6e 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e049      	b.n	8006304 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f841 	bl	800630c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f000 fb17 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <HAL_TIM_PWM_Start+0x24>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	bf14      	ite	ne
 800633c:	2301      	movne	r3, #1
 800633e:	2300      	moveq	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	e03c      	b.n	80063be <HAL_TIM_PWM_Start+0x9e>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b04      	cmp	r3, #4
 8006348:	d109      	bne.n	800635e <HAL_TIM_PWM_Start+0x3e>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	bf14      	ite	ne
 8006356:	2301      	movne	r3, #1
 8006358:	2300      	moveq	r3, #0
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e02f      	b.n	80063be <HAL_TIM_PWM_Start+0x9e>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d109      	bne.n	8006378 <HAL_TIM_PWM_Start+0x58>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	bf14      	ite	ne
 8006370:	2301      	movne	r3, #1
 8006372:	2300      	moveq	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e022      	b.n	80063be <HAL_TIM_PWM_Start+0x9e>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b0c      	cmp	r3, #12
 800637c:	d109      	bne.n	8006392 <HAL_TIM_PWM_Start+0x72>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	bf14      	ite	ne
 800638a:	2301      	movne	r3, #1
 800638c:	2300      	moveq	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	e015      	b.n	80063be <HAL_TIM_PWM_Start+0x9e>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b10      	cmp	r3, #16
 8006396:	d109      	bne.n	80063ac <HAL_TIM_PWM_Start+0x8c>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	bf14      	ite	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2300      	moveq	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	e008      	b.n	80063be <HAL_TIM_PWM_Start+0x9e>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	bf14      	ite	ne
 80063b8:	2301      	movne	r3, #1
 80063ba:	2300      	moveq	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e09c      	b.n	8006500 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_PWM_Start+0xb6>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d4:	e023      	b.n	800641e <HAL_TIM_PWM_Start+0xfe>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_PWM_Start+0xc6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e4:	e01b      	b.n	800641e <HAL_TIM_PWM_Start+0xfe>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Start+0xd6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063f4:	e013      	b.n	800641e <HAL_TIM_PWM_Start+0xfe>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Start+0xe6>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006404:	e00b      	b.n	800641e <HAL_TIM_PWM_Start+0xfe>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b10      	cmp	r3, #16
 800640a:	d104      	bne.n	8006416 <HAL_TIM_PWM_Start+0xf6>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	e003      	b.n	800641e <HAL_TIM_PWM_Start+0xfe>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2202      	movs	r2, #2
 800641a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2201      	movs	r2, #1
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fe5c 	bl	80070e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a35      	ldr	r2, [pc, #212]	; (8006508 <HAL_TIM_PWM_Start+0x1e8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_TIM_PWM_Start+0x13e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a34      	ldr	r2, [pc, #208]	; (800650c <HAL_TIM_PWM_Start+0x1ec>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_TIM_PWM_Start+0x13e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a32      	ldr	r2, [pc, #200]	; (8006510 <HAL_TIM_PWM_Start+0x1f0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_TIM_PWM_Start+0x13e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a31      	ldr	r2, [pc, #196]	; (8006514 <HAL_TIM_PWM_Start+0x1f4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_TIM_PWM_Start+0x13e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2f      	ldr	r2, [pc, #188]	; (8006518 <HAL_TIM_PWM_Start+0x1f8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d101      	bne.n	8006462 <HAL_TIM_PWM_Start+0x142>
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <HAL_TIM_PWM_Start+0x144>
 8006462:	2300      	movs	r3, #0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a22      	ldr	r2, [pc, #136]	; (8006508 <HAL_TIM_PWM_Start+0x1e8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_TIM_PWM_Start+0x19e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d018      	beq.n	80064be <HAL_TIM_PWM_Start+0x19e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a22      	ldr	r2, [pc, #136]	; (800651c <HAL_TIM_PWM_Start+0x1fc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_TIM_PWM_Start+0x19e>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <HAL_TIM_PWM_Start+0x200>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_TIM_PWM_Start+0x19e>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_TIM_PWM_Start+0x204>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_TIM_PWM_Start+0x19e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a17      	ldr	r2, [pc, #92]	; (800650c <HAL_TIM_PWM_Start+0x1ec>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_TIM_PWM_Start+0x19e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a15      	ldr	r2, [pc, #84]	; (8006510 <HAL_TIM_PWM_Start+0x1f0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d115      	bne.n	80064ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	4b18      	ldr	r3, [pc, #96]	; (8006528 <HAL_TIM_PWM_Start+0x208>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b06      	cmp	r3, #6
 80064ce:	d015      	beq.n	80064fc <HAL_TIM_PWM_Start+0x1dc>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d6:	d011      	beq.n	80064fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e8:	e008      	b.n	80064fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f042 0201 	orr.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e000      	b.n	80064fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40013400 	.word	0x40013400
 8006510:	40014000 	.word	0x40014000
 8006514:	40014400 	.word	0x40014400
 8006518:	40014800 	.word	0x40014800
 800651c:	40000400 	.word	0x40000400
 8006520:	40000800 	.word	0x40000800
 8006524:	40000c00 	.word	0x40000c00
 8006528:	00010007 	.word	0x00010007

0800652c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006546:	2302      	movs	r3, #2
 8006548:	e0ff      	b.n	800674a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b14      	cmp	r3, #20
 8006556:	f200 80f0 	bhi.w	800673a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	080065b5 	.word	0x080065b5
 8006564:	0800673b 	.word	0x0800673b
 8006568:	0800673b 	.word	0x0800673b
 800656c:	0800673b 	.word	0x0800673b
 8006570:	080065f5 	.word	0x080065f5
 8006574:	0800673b 	.word	0x0800673b
 8006578:	0800673b 	.word	0x0800673b
 800657c:	0800673b 	.word	0x0800673b
 8006580:	08006637 	.word	0x08006637
 8006584:	0800673b 	.word	0x0800673b
 8006588:	0800673b 	.word	0x0800673b
 800658c:	0800673b 	.word	0x0800673b
 8006590:	08006677 	.word	0x08006677
 8006594:	0800673b 	.word	0x0800673b
 8006598:	0800673b 	.word	0x0800673b
 800659c:	0800673b 	.word	0x0800673b
 80065a0:	080066b9 	.word	0x080066b9
 80065a4:	0800673b 	.word	0x0800673b
 80065a8:	0800673b 	.word	0x0800673b
 80065ac:	0800673b 	.word	0x0800673b
 80065b0:	080066f9 	.word	0x080066f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fa22 	bl	8006a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0208 	orr.w	r2, r2, #8
 80065ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0204 	bic.w	r2, r2, #4
 80065de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6999      	ldr	r1, [r3, #24]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	619a      	str	r2, [r3, #24]
      break;
 80065f2:	e0a5      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fa92 	bl	8006b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699a      	ldr	r2, [r3, #24]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800660e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6999      	ldr	r1, [r3, #24]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	021a      	lsls	r2, r3, #8
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	619a      	str	r2, [r3, #24]
      break;
 8006634:	e084      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fafb 	bl	8006c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0208 	orr.w	r2, r2, #8
 8006650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0204 	bic.w	r2, r2, #4
 8006660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69d9      	ldr	r1, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	61da      	str	r2, [r3, #28]
      break;
 8006674:	e064      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fb63 	bl	8006d48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	69da      	ldr	r2, [r3, #28]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69d9      	ldr	r1, [r3, #28]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	021a      	lsls	r2, r3, #8
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	61da      	str	r2, [r3, #28]
      break;
 80066b6:	e043      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fbac 	bl	8006e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0208 	orr.w	r2, r2, #8
 80066d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0204 	bic.w	r2, r2, #4
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066f6:	e023      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fbf0 	bl	8006ee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	021a      	lsls	r2, r3, #8
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006738:	e002      	b.n	8006740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
      break;
 800673e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006748:	7dfb      	ldrb	r3, [r7, #23]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop

08006754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIM_ConfigClockSource+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e0ab      	b.n	80068c8 <HAL_TIM_ConfigClockSource+0x174>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800679a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d067      	beq.n	800687c <HAL_TIM_ConfigClockSource+0x128>
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d80b      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x74>
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d073      	beq.n	800689c <HAL_TIM_ConfigClockSource+0x148>
 80067b4:	2b10      	cmp	r3, #16
 80067b6:	d802      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x6a>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d06f      	beq.n	800689c <HAL_TIM_ConfigClockSource+0x148>
 80067bc:	e077      	b.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067be:	2b20      	cmp	r3, #32
 80067c0:	d06c      	beq.n	800689c <HAL_TIM_ConfigClockSource+0x148>
 80067c2:	2b30      	cmp	r3, #48	; 0x30
 80067c4:	d06a      	beq.n	800689c <HAL_TIM_ConfigClockSource+0x148>
 80067c6:	e072      	b.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067c8:	2b70      	cmp	r3, #112	; 0x70
 80067ca:	d00d      	beq.n	80067e8 <HAL_TIM_ConfigClockSource+0x94>
 80067cc:	2b70      	cmp	r3, #112	; 0x70
 80067ce:	d804      	bhi.n	80067da <HAL_TIM_ConfigClockSource+0x86>
 80067d0:	2b50      	cmp	r3, #80	; 0x50
 80067d2:	d033      	beq.n	800683c <HAL_TIM_ConfigClockSource+0xe8>
 80067d4:	2b60      	cmp	r3, #96	; 0x60
 80067d6:	d041      	beq.n	800685c <HAL_TIM_ConfigClockSource+0x108>
 80067d8:	e069      	b.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067de:	d069      	beq.n	80068b4 <HAL_TIM_ConfigClockSource+0x160>
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e4:	d017      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xc2>
 80067e6:	e062      	b.n	80068ae <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6818      	ldr	r0, [r3, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6899      	ldr	r1, [r3, #8]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f000 fc54 	bl	80070a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800680a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	609a      	str	r2, [r3, #8]
      break;
 8006814:	e04f      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f000 fc3d 	bl	80070a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006838:	609a      	str	r2, [r3, #8]
      break;
 800683a:	e03c      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	461a      	mov	r2, r3
 800684a:	f000 fbb1 	bl	8006fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2150      	movs	r1, #80	; 0x50
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fc0a 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 800685a:	e02c      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	461a      	mov	r2, r3
 800686a:	f000 fbd0 	bl	800700e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2160      	movs	r1, #96	; 0x60
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fbfa 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 800687a:	e01c      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	461a      	mov	r2, r3
 800688a:	f000 fb91 	bl	8006fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2140      	movs	r1, #64	; 0x40
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fbea 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 800689a:	e00c      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f000 fbe1 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 80068ac:	e003      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
      break;
 80068b2:	e000      	b.n	80068b6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80068b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a40      	ldr	r2, [pc, #256]	; (80069e4 <TIM_Base_SetConfig+0x114>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ee:	d00f      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3d      	ldr	r2, [pc, #244]	; (80069e8 <TIM_Base_SetConfig+0x118>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00b      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a3c      	ldr	r2, [pc, #240]	; (80069ec <TIM_Base_SetConfig+0x11c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d007      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3b      	ldr	r2, [pc, #236]	; (80069f0 <TIM_Base_SetConfig+0x120>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d003      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3a      	ldr	r2, [pc, #232]	; (80069f4 <TIM_Base_SetConfig+0x124>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d108      	bne.n	8006922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2f      	ldr	r2, [pc, #188]	; (80069e4 <TIM_Base_SetConfig+0x114>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01f      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006930:	d01b      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <TIM_Base_SetConfig+0x118>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d017      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <TIM_Base_SetConfig+0x11c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <TIM_Base_SetConfig+0x120>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <TIM_Base_SetConfig+0x124>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <TIM_Base_SetConfig+0x128>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a27      	ldr	r2, [pc, #156]	; (80069fc <TIM_Base_SetConfig+0x12c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_Base_SetConfig+0x9a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <TIM_Base_SetConfig+0x130>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <TIM_Base_SetConfig+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_Base_SetConfig+0xf8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <TIM_Base_SetConfig+0x124>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_Base_SetConfig+0xf8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a11      	ldr	r2, [pc, #68]	; (80069f8 <TIM_Base_SetConfig+0x128>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0xf8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a10      	ldr	r2, [pc, #64]	; (80069fc <TIM_Base_SetConfig+0x12c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0xf8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a0f      	ldr	r2, [pc, #60]	; (8006a00 <TIM_Base_SetConfig+0x130>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d103      	bne.n	80069d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	615a      	str	r2, [r3, #20]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40013400 	.word	0x40013400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	40014800 	.word	0x40014800

08006a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 0302 	bic.w	r3, r3, #2
 8006a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a2c      	ldr	r2, [pc, #176]	; (8006b10 <TIM_OC1_SetConfig+0x10c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00f      	beq.n	8006a84 <TIM_OC1_SetConfig+0x80>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a2b      	ldr	r2, [pc, #172]	; (8006b14 <TIM_OC1_SetConfig+0x110>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_OC1_SetConfig+0x80>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <TIM_OC1_SetConfig+0x114>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_OC1_SetConfig+0x80>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a29      	ldr	r2, [pc, #164]	; (8006b1c <TIM_OC1_SetConfig+0x118>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_OC1_SetConfig+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a28      	ldr	r2, [pc, #160]	; (8006b20 <TIM_OC1_SetConfig+0x11c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d10c      	bne.n	8006a9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f023 0308 	bic.w	r3, r3, #8
 8006a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <TIM_OC1_SetConfig+0x10c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d00f      	beq.n	8006ac6 <TIM_OC1_SetConfig+0xc2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a1a      	ldr	r2, [pc, #104]	; (8006b14 <TIM_OC1_SetConfig+0x110>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00b      	beq.n	8006ac6 <TIM_OC1_SetConfig+0xc2>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a19      	ldr	r2, [pc, #100]	; (8006b18 <TIM_OC1_SetConfig+0x114>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d007      	beq.n	8006ac6 <TIM_OC1_SetConfig+0xc2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <TIM_OC1_SetConfig+0x118>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <TIM_OC1_SetConfig+0xc2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a17      	ldr	r2, [pc, #92]	; (8006b20 <TIM_OC1_SetConfig+0x11c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d111      	bne.n	8006aea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	621a      	str	r2, [r3, #32]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40014000 	.word	0x40014000
 8006b1c:	40014400 	.word	0x40014400
 8006b20:	40014800 	.word	0x40014800

08006b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0210 	bic.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	021b      	lsls	r3, r3, #8
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f023 0320 	bic.w	r3, r3, #32
 8006b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a28      	ldr	r2, [pc, #160]	; (8006c24 <TIM_OC2_SetConfig+0x100>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_OC2_SetConfig+0x6c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <TIM_OC2_SetConfig+0x104>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10d      	bne.n	8006bac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <TIM_OC2_SetConfig+0x100>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00f      	beq.n	8006bd4 <TIM_OC2_SetConfig+0xb0>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <TIM_OC2_SetConfig+0x104>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00b      	beq.n	8006bd4 <TIM_OC2_SetConfig+0xb0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <TIM_OC2_SetConfig+0x108>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_OC2_SetConfig+0xb0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	; (8006c30 <TIM_OC2_SetConfig+0x10c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC2_SetConfig+0xb0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <TIM_OC2_SetConfig+0x110>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d113      	bne.n	8006bfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a27      	ldr	r2, [pc, #156]	; (8006d34 <TIM_OC3_SetConfig+0xfc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC3_SetConfig+0x6a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <TIM_OC3_SetConfig+0x100>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d10d      	bne.n	8006cbe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	021b      	lsls	r3, r3, #8
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <TIM_OC3_SetConfig+0xfc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00f      	beq.n	8006ce6 <TIM_OC3_SetConfig+0xae>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <TIM_OC3_SetConfig+0x100>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <TIM_OC3_SetConfig+0xae>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <TIM_OC3_SetConfig+0x104>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <TIM_OC3_SetConfig+0xae>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <TIM_OC3_SetConfig+0x108>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_OC3_SetConfig+0xae>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <TIM_OC3_SetConfig+0x10c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d113      	bne.n	8006d0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	621a      	str	r2, [r3, #32]
}
 8006d28:	bf00      	nop
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40012c00 	.word	0x40012c00
 8006d38:	40013400 	.word	0x40013400
 8006d3c:	40014000 	.word	0x40014000
 8006d40:	40014400 	.word	0x40014400
 8006d44:	40014800 	.word	0x40014800

08006d48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	021b      	lsls	r3, r3, #8
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	031b      	lsls	r3, r3, #12
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a18      	ldr	r2, [pc, #96]	; (8006e08 <TIM_OC4_SetConfig+0xc0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00f      	beq.n	8006dcc <TIM_OC4_SetConfig+0x84>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <TIM_OC4_SetConfig+0xc4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <TIM_OC4_SetConfig+0x84>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <TIM_OC4_SetConfig+0xc8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d007      	beq.n	8006dcc <TIM_OC4_SetConfig+0x84>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <TIM_OC4_SetConfig+0xcc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_OC4_SetConfig+0x84>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <TIM_OC4_SetConfig+0xd0>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d109      	bne.n	8006de0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	019b      	lsls	r3, r3, #6
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40013400 	.word	0x40013400
 8006e10:	40014000 	.word	0x40014000
 8006e14:	40014400 	.word	0x40014400
 8006e18:	40014800 	.word	0x40014800

08006e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	041b      	lsls	r3, r3, #16
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a17      	ldr	r2, [pc, #92]	; (8006ed0 <TIM_OC5_SetConfig+0xb4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00f      	beq.n	8006e96 <TIM_OC5_SetConfig+0x7a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a16      	ldr	r2, [pc, #88]	; (8006ed4 <TIM_OC5_SetConfig+0xb8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00b      	beq.n	8006e96 <TIM_OC5_SetConfig+0x7a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <TIM_OC5_SetConfig+0xbc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d007      	beq.n	8006e96 <TIM_OC5_SetConfig+0x7a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a14      	ldr	r2, [pc, #80]	; (8006edc <TIM_OC5_SetConfig+0xc0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d003      	beq.n	8006e96 <TIM_OC5_SetConfig+0x7a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a13      	ldr	r2, [pc, #76]	; (8006ee0 <TIM_OC5_SetConfig+0xc4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d109      	bne.n	8006eaa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	621a      	str	r2, [r3, #32]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	40012c00 	.word	0x40012c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	051b      	lsls	r3, r3, #20
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <TIM_OC6_SetConfig+0xb8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00f      	beq.n	8006f60 <TIM_OC6_SetConfig+0x7c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a17      	ldr	r2, [pc, #92]	; (8006fa0 <TIM_OC6_SetConfig+0xbc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00b      	beq.n	8006f60 <TIM_OC6_SetConfig+0x7c>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <TIM_OC6_SetConfig+0xc0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d007      	beq.n	8006f60 <TIM_OC6_SetConfig+0x7c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <TIM_OC6_SetConfig+0xc4>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_OC6_SetConfig+0x7c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a14      	ldr	r2, [pc, #80]	; (8006fac <TIM_OC6_SetConfig+0xc8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d109      	bne.n	8006f74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	029b      	lsls	r3, r3, #10
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40012c00 	.word	0x40012c00
 8006fa0:	40013400 	.word	0x40013400
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40014400 	.word	0x40014400
 8006fac:	40014800 	.word	0x40014800

08006fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f023 0201 	bic.w	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 030a 	bic.w	r3, r3, #10
 8006fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	621a      	str	r2, [r3, #32]
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800700e:	b480      	push	{r7}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0210 	bic.w	r2, r3, #16
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	031b      	lsls	r3, r3, #12
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800704a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	f043 0307 	orr.w	r3, r3, #7
 8007090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	609a      	str	r2, [r3, #8]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	021a      	lsls	r2, r3, #8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	2201      	movs	r2, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	43db      	mvns	r3, r3
 8007106:	401a      	ands	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	fa01 f303 	lsl.w	r3, r1, r3
 800711c:	431a      	orrs	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007144:	2302      	movs	r3, #2
 8007146:	e068      	b.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2e      	ldr	r2, [pc, #184]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d004      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2d      	ldr	r2, [pc, #180]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d108      	bne.n	800718e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007182:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007194:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ba:	d018      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a1b      	ldr	r2, [pc, #108]	; (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a18      	ldr	r2, [pc, #96]	; (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a13      	ldr	r2, [pc, #76]	; (800722c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a14      	ldr	r2, [pc, #80]	; (800723c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d10c      	bne.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40013400 	.word	0x40013400
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800
 8007238:	40000c00 	.word	0x40000c00
 800723c:	40014000 	.word	0x40014000

08007240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e042      	b.n	80072d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007258:	2b00      	cmp	r3, #0
 800725a:	d106      	bne.n	800726a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7fb ff7f 	bl	8003168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2224      	movs	r2, #36	; 0x24
 800726e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f998 	bl	80075b8 <UART_SetConfig>
 8007288:	4603      	mov	r3, r0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e022      	b.n	80072d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fc58 	bl	8007b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fcdf 	bl	8007c94 <UART_CheckIdleState>
 80072d6:	4603      	mov	r3, r0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	f040 8084 	bne.w	8007404 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <HAL_UART_Transmit+0x28>
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e07c      	b.n	8007406 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_UART_Transmit+0x3a>
 8007316:	2302      	movs	r3, #2
 8007318:	e075      	b.n	8007406 <HAL_UART_Transmit+0x126>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2221      	movs	r2, #33	; 0x21
 800732e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007332:	f7fc f9f5 	bl	8003720 <HAL_GetTick>
 8007336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007350:	d108      	bne.n	8007364 <HAL_UART_Transmit+0x84>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d104      	bne.n	8007364 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	e003      	b.n	800736c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007368:	2300      	movs	r3, #0
 800736a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007374:	e02d      	b.n	80073d2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2200      	movs	r2, #0
 800737e:	2180      	movs	r1, #128	; 0x80
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fcd2 	bl	8007d2a <UART_WaitOnFlagUntilTimeout>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e03a      	b.n	8007406 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10b      	bne.n	80073ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	881a      	ldrh	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a2:	b292      	uxth	r2, r2
 80073a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	3302      	adds	r3, #2
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e008      	b.n	80073c0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	b292      	uxth	r2, r2
 80073b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3301      	adds	r3, #1
 80073be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1cb      	bne.n	8007376 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2200      	movs	r2, #0
 80073e6:	2140      	movs	r1, #64	; 0x40
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fc9e 	bl	8007d2a <UART_WaitOnFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e006      	b.n	8007406 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	e000      	b.n	8007406 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08a      	sub	sp, #40	; 0x28
 8007412:	af02      	add	r7, sp, #8
 8007414:	60f8      	str	r0, [r7, #12]
 8007416:	60b9      	str	r1, [r7, #8]
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	4613      	mov	r3, r2
 800741c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007424:	2b20      	cmp	r3, #32
 8007426:	f040 80c1 	bne.w	80075ac <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_UART_Receive+0x28>
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d101      	bne.n	800743a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e0b9      	b.n	80075ae <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_UART_Receive+0x3a>
 8007444:	2302      	movs	r3, #2
 8007446:	e0b2      	b.n	80075ae <HAL_UART_Receive+0x1a0>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2222      	movs	r2, #34	; 0x22
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007466:	f7fc f95b 	bl	8003720 <HAL_GetTick>
 800746a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	88fa      	ldrh	r2, [r7, #6]
 8007470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	88fa      	ldrh	r2, [r7, #6]
 8007478:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007484:	d10e      	bne.n	80074a4 <HAL_UART_Receive+0x96>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <HAL_UART_Receive+0x8c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007498:	e02d      	b.n	80074f6 <HAL_UART_Receive+0xe8>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	22ff      	movs	r2, #255	; 0xff
 800749e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074a2:	e028      	b.n	80074f6 <HAL_UART_Receive+0xe8>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10d      	bne.n	80074c8 <HAL_UART_Receive+0xba>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d104      	bne.n	80074be <HAL_UART_Receive+0xb0>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	22ff      	movs	r2, #255	; 0xff
 80074b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074bc:	e01b      	b.n	80074f6 <HAL_UART_Receive+0xe8>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	227f      	movs	r2, #127	; 0x7f
 80074c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074c6:	e016      	b.n	80074f6 <HAL_UART_Receive+0xe8>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074d0:	d10d      	bne.n	80074ee <HAL_UART_Receive+0xe0>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <HAL_UART_Receive+0xd6>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	227f      	movs	r2, #127	; 0x7f
 80074de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074e2:	e008      	b.n	80074f6 <HAL_UART_Receive+0xe8>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	223f      	movs	r2, #63	; 0x3f
 80074e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80074ec:	e003      	b.n	80074f6 <HAL_UART_Receive+0xe8>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074fc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007506:	d108      	bne.n	800751a <HAL_UART_Receive+0x10c>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007510:	2300      	movs	r3, #0
 8007512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	e003      	b.n	8007522 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800752a:	e033      	b.n	8007594 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2200      	movs	r2, #0
 8007534:	2120      	movs	r1, #32
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fbf7 	bl	8007d2a <UART_WaitOnFlagUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e033      	b.n	80075ae <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10c      	bne.n	8007566 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007552:	b29a      	uxth	r2, r3
 8007554:	8a7b      	ldrh	r3, [r7, #18]
 8007556:	4013      	ands	r3, r2
 8007558:	b29a      	uxth	r2, r3
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	3302      	adds	r3, #2
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e00d      	b.n	8007582 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800756c:	b29b      	uxth	r3, r3
 800756e:	b2da      	uxtb	r2, r3
 8007570:	8a7b      	ldrh	r3, [r7, #18]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	4013      	ands	r3, r2
 8007576:	b2da      	uxtb	r2, r3
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	3301      	adds	r3, #1
 8007580:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007588:	b29b      	uxth	r3, r3
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1c5      	bne.n	800752c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	e000      	b.n	80075ae <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80075ac:	2302      	movs	r3, #2
  }
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3720      	adds	r7, #32
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80075bc:	b088      	sub	sp, #32
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	4313      	orrs	r3, r2
 80075dc:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	4bb1      	ldr	r3, [pc, #708]	; (80078ac <UART_SetConfig+0x2f4>)
 80075e6:	4013      	ands	r3, r2
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	69f9      	ldr	r1, [r7, #28]
 80075ee:	430b      	orrs	r3, r1
 80075f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4aa7      	ldr	r2, [pc, #668]	; (80078b0 <UART_SetConfig+0x2f8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d004      	beq.n	8007622 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	69fa      	ldr	r2, [r7, #28]
 800761e:	4313      	orrs	r3, r2
 8007620:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800762c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	69f9      	ldr	r1, [r7, #28]
 8007636:	430b      	orrs	r3, r1
 8007638:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007640:	f023 010f 	bic.w	r1, r3, #15
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a97      	ldr	r2, [pc, #604]	; (80078b4 <UART_SetConfig+0x2fc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d122      	bne.n	80076a0 <UART_SetConfig+0xe8>
 800765a:	4b97      	ldr	r3, [pc, #604]	; (80078b8 <UART_SetConfig+0x300>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b03      	cmp	r3, #3
 8007666:	d817      	bhi.n	8007698 <UART_SetConfig+0xe0>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0xb8>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007681 	.word	0x08007681
 8007674:	0800768d 	.word	0x0800768d
 8007678:	08007687 	.word	0x08007687
 800767c:	08007693 	.word	0x08007693
 8007680:	2301      	movs	r3, #1
 8007682:	76fb      	strb	r3, [r7, #27]
 8007684:	e0e8      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007686:	2302      	movs	r3, #2
 8007688:	76fb      	strb	r3, [r7, #27]
 800768a:	e0e5      	b.n	8007858 <UART_SetConfig+0x2a0>
 800768c:	2304      	movs	r3, #4
 800768e:	76fb      	strb	r3, [r7, #27]
 8007690:	e0e2      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007692:	2308      	movs	r3, #8
 8007694:	76fb      	strb	r3, [r7, #27]
 8007696:	e0df      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007698:	2310      	movs	r3, #16
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	bf00      	nop
 800769e:	e0db      	b.n	8007858 <UART_SetConfig+0x2a0>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a85      	ldr	r2, [pc, #532]	; (80078bc <UART_SetConfig+0x304>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d134      	bne.n	8007714 <UART_SetConfig+0x15c>
 80076aa:	4b83      	ldr	r3, [pc, #524]	; (80078b8 <UART_SetConfig+0x300>)
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b0:	f003 030c 	and.w	r3, r3, #12
 80076b4:	2b0c      	cmp	r3, #12
 80076b6:	d829      	bhi.n	800770c <UART_SetConfig+0x154>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x108>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076f5 	.word	0x080076f5
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800770d 	.word	0x0800770d
 80076d0:	08007701 	.word	0x08007701
 80076d4:	0800770d 	.word	0x0800770d
 80076d8:	0800770d 	.word	0x0800770d
 80076dc:	0800770d 	.word	0x0800770d
 80076e0:	080076fb 	.word	0x080076fb
 80076e4:	0800770d 	.word	0x0800770d
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	08007707 	.word	0x08007707
 80076f4:	2300      	movs	r3, #0
 80076f6:	76fb      	strb	r3, [r7, #27]
 80076f8:	e0ae      	b.n	8007858 <UART_SetConfig+0x2a0>
 80076fa:	2302      	movs	r3, #2
 80076fc:	76fb      	strb	r3, [r7, #27]
 80076fe:	e0ab      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007700:	2304      	movs	r3, #4
 8007702:	76fb      	strb	r3, [r7, #27]
 8007704:	e0a8      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007706:	2308      	movs	r3, #8
 8007708:	76fb      	strb	r3, [r7, #27]
 800770a:	e0a5      	b.n	8007858 <UART_SetConfig+0x2a0>
 800770c:	2310      	movs	r3, #16
 800770e:	76fb      	strb	r3, [r7, #27]
 8007710:	bf00      	nop
 8007712:	e0a1      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a69      	ldr	r2, [pc, #420]	; (80078c0 <UART_SetConfig+0x308>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d120      	bne.n	8007760 <UART_SetConfig+0x1a8>
 800771e:	4b66      	ldr	r3, [pc, #408]	; (80078b8 <UART_SetConfig+0x300>)
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007724:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007728:	2b10      	cmp	r3, #16
 800772a:	d00f      	beq.n	800774c <UART_SetConfig+0x194>
 800772c:	2b10      	cmp	r3, #16
 800772e:	d802      	bhi.n	8007736 <UART_SetConfig+0x17e>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <UART_SetConfig+0x188>
 8007734:	e010      	b.n	8007758 <UART_SetConfig+0x1a0>
 8007736:	2b20      	cmp	r3, #32
 8007738:	d005      	beq.n	8007746 <UART_SetConfig+0x18e>
 800773a:	2b30      	cmp	r3, #48	; 0x30
 800773c:	d009      	beq.n	8007752 <UART_SetConfig+0x19a>
 800773e:	e00b      	b.n	8007758 <UART_SetConfig+0x1a0>
 8007740:	2300      	movs	r3, #0
 8007742:	76fb      	strb	r3, [r7, #27]
 8007744:	e088      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007746:	2302      	movs	r3, #2
 8007748:	76fb      	strb	r3, [r7, #27]
 800774a:	e085      	b.n	8007858 <UART_SetConfig+0x2a0>
 800774c:	2304      	movs	r3, #4
 800774e:	76fb      	strb	r3, [r7, #27]
 8007750:	e082      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007752:	2308      	movs	r3, #8
 8007754:	76fb      	strb	r3, [r7, #27]
 8007756:	e07f      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007758:	2310      	movs	r3, #16
 800775a:	76fb      	strb	r3, [r7, #27]
 800775c:	bf00      	nop
 800775e:	e07b      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a57      	ldr	r2, [pc, #348]	; (80078c4 <UART_SetConfig+0x30c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d120      	bne.n	80077ac <UART_SetConfig+0x1f4>
 800776a:	4b53      	ldr	r3, [pc, #332]	; (80078b8 <UART_SetConfig+0x300>)
 800776c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007770:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007774:	2b40      	cmp	r3, #64	; 0x40
 8007776:	d00f      	beq.n	8007798 <UART_SetConfig+0x1e0>
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d802      	bhi.n	8007782 <UART_SetConfig+0x1ca>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <UART_SetConfig+0x1d4>
 8007780:	e010      	b.n	80077a4 <UART_SetConfig+0x1ec>
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d005      	beq.n	8007792 <UART_SetConfig+0x1da>
 8007786:	2bc0      	cmp	r3, #192	; 0xc0
 8007788:	d009      	beq.n	800779e <UART_SetConfig+0x1e6>
 800778a:	e00b      	b.n	80077a4 <UART_SetConfig+0x1ec>
 800778c:	2300      	movs	r3, #0
 800778e:	76fb      	strb	r3, [r7, #27]
 8007790:	e062      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007792:	2302      	movs	r3, #2
 8007794:	76fb      	strb	r3, [r7, #27]
 8007796:	e05f      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007798:	2304      	movs	r3, #4
 800779a:	76fb      	strb	r3, [r7, #27]
 800779c:	e05c      	b.n	8007858 <UART_SetConfig+0x2a0>
 800779e:	2308      	movs	r3, #8
 80077a0:	76fb      	strb	r3, [r7, #27]
 80077a2:	e059      	b.n	8007858 <UART_SetConfig+0x2a0>
 80077a4:	2310      	movs	r3, #16
 80077a6:	76fb      	strb	r3, [r7, #27]
 80077a8:	bf00      	nop
 80077aa:	e055      	b.n	8007858 <UART_SetConfig+0x2a0>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a45      	ldr	r2, [pc, #276]	; (80078c8 <UART_SetConfig+0x310>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d124      	bne.n	8007800 <UART_SetConfig+0x248>
 80077b6:	4b40      	ldr	r3, [pc, #256]	; (80078b8 <UART_SetConfig+0x300>)
 80077b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c4:	d012      	beq.n	80077ec <UART_SetConfig+0x234>
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d802      	bhi.n	80077d2 <UART_SetConfig+0x21a>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <UART_SetConfig+0x228>
 80077d0:	e012      	b.n	80077f8 <UART_SetConfig+0x240>
 80077d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d6:	d006      	beq.n	80077e6 <UART_SetConfig+0x22e>
 80077d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077dc:	d009      	beq.n	80077f2 <UART_SetConfig+0x23a>
 80077de:	e00b      	b.n	80077f8 <UART_SetConfig+0x240>
 80077e0:	2300      	movs	r3, #0
 80077e2:	76fb      	strb	r3, [r7, #27]
 80077e4:	e038      	b.n	8007858 <UART_SetConfig+0x2a0>
 80077e6:	2302      	movs	r3, #2
 80077e8:	76fb      	strb	r3, [r7, #27]
 80077ea:	e035      	b.n	8007858 <UART_SetConfig+0x2a0>
 80077ec:	2304      	movs	r3, #4
 80077ee:	76fb      	strb	r3, [r7, #27]
 80077f0:	e032      	b.n	8007858 <UART_SetConfig+0x2a0>
 80077f2:	2308      	movs	r3, #8
 80077f4:	76fb      	strb	r3, [r7, #27]
 80077f6:	e02f      	b.n	8007858 <UART_SetConfig+0x2a0>
 80077f8:	2310      	movs	r3, #16
 80077fa:	76fb      	strb	r3, [r7, #27]
 80077fc:	bf00      	nop
 80077fe:	e02b      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2a      	ldr	r2, [pc, #168]	; (80078b0 <UART_SetConfig+0x2f8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d124      	bne.n	8007854 <UART_SetConfig+0x29c>
 800780a:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <UART_SetConfig+0x300>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007810:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007818:	d012      	beq.n	8007840 <UART_SetConfig+0x288>
 800781a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800781e:	d802      	bhi.n	8007826 <UART_SetConfig+0x26e>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <UART_SetConfig+0x27c>
 8007824:	e012      	b.n	800784c <UART_SetConfig+0x294>
 8007826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800782a:	d006      	beq.n	800783a <UART_SetConfig+0x282>
 800782c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007830:	d009      	beq.n	8007846 <UART_SetConfig+0x28e>
 8007832:	e00b      	b.n	800784c <UART_SetConfig+0x294>
 8007834:	2300      	movs	r3, #0
 8007836:	76fb      	strb	r3, [r7, #27]
 8007838:	e00e      	b.n	8007858 <UART_SetConfig+0x2a0>
 800783a:	2302      	movs	r3, #2
 800783c:	76fb      	strb	r3, [r7, #27]
 800783e:	e00b      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007840:	2304      	movs	r3, #4
 8007842:	76fb      	strb	r3, [r7, #27]
 8007844:	e008      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007846:	2308      	movs	r3, #8
 8007848:	76fb      	strb	r3, [r7, #27]
 800784a:	e005      	b.n	8007858 <UART_SetConfig+0x2a0>
 800784c:	2310      	movs	r3, #16
 800784e:	76fb      	strb	r3, [r7, #27]
 8007850:	bf00      	nop
 8007852:	e001      	b.n	8007858 <UART_SetConfig+0x2a0>
 8007854:	2310      	movs	r3, #16
 8007856:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a14      	ldr	r2, [pc, #80]	; (80078b0 <UART_SetConfig+0x2f8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	f040 80a1 	bne.w	80079a6 <UART_SetConfig+0x3ee>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007864:	7efb      	ldrb	r3, [r7, #27]
 8007866:	2b08      	cmp	r3, #8
 8007868:	d836      	bhi.n	80078d8 <UART_SetConfig+0x320>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0x2b8>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007895 	.word	0x08007895
 8007874:	080078d9 	.word	0x080078d9
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078d9 	.word	0x080078d9
 8007880:	080078a3 	.word	0x080078a3
 8007884:	080078d9 	.word	0x080078d9
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078d9 	.word	0x080078d9
 8007890:	080078d1 	.word	0x080078d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007894:	f7fd fe96 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8007898:	6178      	str	r0, [r7, #20]
        break;
 800789a:	e022      	b.n	80078e2 <UART_SetConfig+0x32a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800789c:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <UART_SetConfig+0x314>)
 800789e:	617b      	str	r3, [r7, #20]
        break;
 80078a0:	e01f      	b.n	80078e2 <UART_SetConfig+0x32a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078a2:	f7fd fdf9 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 80078a6:	6178      	str	r0, [r7, #20]
        break;
 80078a8:	e01b      	b.n	80078e2 <UART_SetConfig+0x32a>
 80078aa:	bf00      	nop
 80078ac:	cfff69f3 	.word	0xcfff69f3
 80078b0:	40008000 	.word	0x40008000
 80078b4:	40013800 	.word	0x40013800
 80078b8:	40021000 	.word	0x40021000
 80078bc:	40004400 	.word	0x40004400
 80078c0:	40004800 	.word	0x40004800
 80078c4:	40004c00 	.word	0x40004c00
 80078c8:	40005000 	.word	0x40005000
 80078cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d4:	617b      	str	r3, [r7, #20]
        break;
 80078d6:	e004      	b.n	80078e2 <UART_SetConfig+0x32a>
      default:
        pclk = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	76bb      	strb	r3, [r7, #26]
        break;
 80078e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 811b 	beq.w	8007b20 <UART_SetConfig+0x568>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	4a96      	ldr	r2, [pc, #600]	; (8007b48 <UART_SetConfig+0x590>)
 80078f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078f4:	461a      	mov	r2, r3
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80078fc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	4613      	mov	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4413      	add	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	d305      	bcc.n	800791a <UART_SetConfig+0x362>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	429a      	cmp	r2, r3
 8007918:	d902      	bls.n	8007920 <UART_SetConfig+0x368>
      {
        ret = HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	76bb      	strb	r3, [r7, #26]
 800791e:	e0ff      	b.n	8007b20 <UART_SetConfig+0x568>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4618      	mov	r0, r3
 8007924:	f04f 0100 	mov.w	r1, #0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	4a86      	ldr	r2, [pc, #536]	; (8007b48 <UART_SetConfig+0x590>)
 800792e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007932:	b29b      	uxth	r3, r3
 8007934:	f04f 0400 	mov.w	r4, #0
 8007938:	461a      	mov	r2, r3
 800793a:	4623      	mov	r3, r4
 800793c:	f7f9 f9ac 	bl	8000c98 <__aeabi_uldivmod>
 8007940:	4603      	mov	r3, r0
 8007942:	460c      	mov	r4, r1
 8007944:	4619      	mov	r1, r3
 8007946:	4622      	mov	r2, r4
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	f04f 0400 	mov.w	r4, #0
 8007950:	0214      	lsls	r4, r2, #8
 8007952:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007956:	020b      	lsls	r3, r1, #8
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6852      	ldr	r2, [r2, #4]
 800795c:	0852      	lsrs	r2, r2, #1
 800795e:	4611      	mov	r1, r2
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	eb13 0b01 	adds.w	fp, r3, r1
 8007968:	eb44 0c02 	adc.w	ip, r4, r2
 800796c:	4658      	mov	r0, fp
 800796e:	4661      	mov	r1, ip
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f04f 0400 	mov.w	r4, #0
 8007978:	461a      	mov	r2, r3
 800797a:	4623      	mov	r3, r4
 800797c:	f7f9 f98c 	bl	8000c98 <__aeabi_uldivmod>
 8007980:	4603      	mov	r3, r0
 8007982:	460c      	mov	r4, r1
 8007984:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800798c:	d308      	bcc.n	80079a0 <UART_SetConfig+0x3e8>
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007994:	d204      	bcs.n	80079a0 <UART_SetConfig+0x3e8>
        {
          huart->Instance->BRR = usartdiv;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	e0bf      	b.n	8007b20 <UART_SetConfig+0x568>
        }
        else
        {
          ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	76bb      	strb	r3, [r7, #26]
 80079a4:	e0bc      	b.n	8007b20 <UART_SetConfig+0x568>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ae:	d163      	bne.n	8007a78 <UART_SetConfig+0x4c0>
  {
    switch (clocksource)
 80079b0:	7efb      	ldrb	r3, [r7, #27]
 80079b2:	2b08      	cmp	r3, #8
 80079b4:	d827      	bhi.n	8007a06 <UART_SetConfig+0x44e>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <UART_SetConfig+0x404>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079e1 	.word	0x080079e1
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079f1 	.word	0x080079f1
 80079c8:	08007a07 	.word	0x08007a07
 80079cc:	080079f7 	.word	0x080079f7
 80079d0:	08007a07 	.word	0x08007a07
 80079d4:	08007a07 	.word	0x08007a07
 80079d8:	08007a07 	.word	0x08007a07
 80079dc:	080079ff 	.word	0x080079ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fd fdf0 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80079e4:	6178      	str	r0, [r7, #20]
        break;
 80079e6:	e013      	b.n	8007a10 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e8:	f7fd fe02 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 80079ec:	6178      	str	r0, [r7, #20]
        break;
 80079ee:	e00f      	b.n	8007a10 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f0:	4b56      	ldr	r3, [pc, #344]	; (8007b4c <UART_SetConfig+0x594>)
 80079f2:	617b      	str	r3, [r7, #20]
        break;
 80079f4:	e00c      	b.n	8007a10 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079f6:	f7fd fd4f 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 80079fa:	6178      	str	r0, [r7, #20]
        break;
 80079fc:	e008      	b.n	8007a10 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a02:	617b      	str	r3, [r7, #20]
        break;
 8007a04:	e004      	b.n	8007a10 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8084 	beq.w	8007b20 <UART_SetConfig+0x568>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	4a4a      	ldr	r2, [pc, #296]	; (8007b48 <UART_SetConfig+0x590>)
 8007a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a22:	461a      	mov	r2, r3
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a2a:	005a      	lsls	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	441a      	add	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b0f      	cmp	r3, #15
 8007a42:	d916      	bls.n	8007a72 <UART_SetConfig+0x4ba>
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4a:	d212      	bcs.n	8007a72 <UART_SetConfig+0x4ba>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f023 030f 	bic.w	r3, r3, #15
 8007a54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	89fb      	ldrh	r3, [r7, #14]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	89fa      	ldrh	r2, [r7, #14]
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	e056      	b.n	8007b20 <UART_SetConfig+0x568>
      }
      else
      {
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	76bb      	strb	r3, [r7, #26]
 8007a76:	e053      	b.n	8007b20 <UART_SetConfig+0x568>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a78:	7efb      	ldrb	r3, [r7, #27]
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d827      	bhi.n	8007ace <UART_SetConfig+0x516>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0x4cc>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007aa9 	.word	0x08007aa9
 8007a88:	08007ab1 	.word	0x08007ab1
 8007a8c:	08007ab9 	.word	0x08007ab9
 8007a90:	08007acf 	.word	0x08007acf
 8007a94:	08007abf 	.word	0x08007abf
 8007a98:	08007acf 	.word	0x08007acf
 8007a9c:	08007acf 	.word	0x08007acf
 8007aa0:	08007acf 	.word	0x08007acf
 8007aa4:	08007ac7 	.word	0x08007ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aa8:	f7fd fd8c 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8007aac:	6178      	str	r0, [r7, #20]
        break;
 8007aae:	e013      	b.n	8007ad8 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ab0:	f7fd fd9e 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 8007ab4:	6178      	str	r0, [r7, #20]
        break;
 8007ab6:	e00f      	b.n	8007ad8 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ab8:	4b24      	ldr	r3, [pc, #144]	; (8007b4c <UART_SetConfig+0x594>)
 8007aba:	617b      	str	r3, [r7, #20]
        break;
 8007abc:	e00c      	b.n	8007ad8 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007abe:	f7fd fceb 	bl	8005498 <HAL_RCC_GetSysClockFreq>
 8007ac2:	6178      	str	r0, [r7, #20]
        break;
 8007ac4:	e008      	b.n	8007ad8 <UART_SetConfig+0x520>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aca:	617b      	str	r3, [r7, #20]
        break;
 8007acc:	e004      	b.n	8007ad8 <UART_SetConfig+0x520>
      default:
        pclk = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	76bb      	strb	r3, [r7, #26]
        break;
 8007ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d020      	beq.n	8007b20 <UART_SetConfig+0x568>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	4a19      	ldr	r2, [pc, #100]	; (8007b48 <UART_SetConfig+0x590>)
 8007ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	fbb3 f2f2 	udiv	r2, r3, r2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	085b      	lsrs	r3, r3, #1
 8007af6:	441a      	add	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b00:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b0f      	cmp	r3, #15
 8007b06:	d909      	bls.n	8007b1c <UART_SetConfig+0x564>
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0e:	d205      	bcs.n	8007b1c <UART_SetConfig+0x564>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60da      	str	r2, [r3, #12]
 8007b1a:	e001      	b.n	8007b20 <UART_SetConfig+0x568>
      }
      else
      {
        ret = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007b48:	0800bac8 	.word	0x0800bac8
 8007b4c:	00f42400 	.word	0x00f42400

08007b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00a      	beq.n	8007bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	f003 0308 	and.w	r3, r3, #8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01a      	beq.n	8007c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4e:	d10a      	bne.n	8007c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]
  }
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ca4:	f7fb fd3c 	bl	8003720 <HAL_GetTick>
 8007ca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d10e      	bne.n	8007cd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f82f 	bl	8007d2a <UART_WaitOnFlagUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e025      	b.n	8007d22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d10e      	bne.n	8007d02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f819 	bl	8007d2a <UART_WaitOnFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e00f      	b.n	8007d22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b09c      	sub	sp, #112	; 0x70
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	4613      	mov	r3, r2
 8007d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d3a:	e0a9      	b.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	f000 80a5 	beq.w	8007e90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d46:	f7fb fceb 	bl	8003720 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d302      	bcc.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8007d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d140      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d70:	667b      	str	r3, [r7, #100]	; 0x64
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e6      	bne.n	8007d5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	663b      	str	r3, [r7, #96]	; 0x60
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3308      	adds	r3, #8
 8007dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8007db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e5      	bne.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e069      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d051      	beq.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dfa:	d149      	bne.n	8007e90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
 8007e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	613b      	str	r3, [r7, #16]
   return(result);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3308      	adds	r3, #8
 8007e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e58:	623a      	str	r2, [r7, #32]
 8007e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	69f9      	ldr	r1, [r7, #28]
 8007e5e:	6a3a      	ldr	r2, [r7, #32]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e5      	bne.n	8007e38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e010      	b.n	8007eb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	69da      	ldr	r2, [r3, #28]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	4013      	ands	r3, r2
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	79fb      	ldrb	r3, [r7, #7]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	f43f af46 	beq.w	8007d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3770      	adds	r7, #112	; 0x70
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d101      	bne.n	8007ed0 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ecc:	2302      	movs	r3, #2
 8007ece:	e027      	b.n	8007f20 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2224      	movs	r2, #36	; 0x24
 8007edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0201 	bic.w	r2, r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007efe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e02d      	b.n	8007fa0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2224      	movs	r2, #36	; 0x24
 8007f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0201 	bic.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f84f 	bl	8008024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e02d      	b.n	800801c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2224      	movs	r2, #36	; 0x24
 8007fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0201 	bic.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f811 	bl	8008024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008030:	2b00      	cmp	r3, #0
 8008032:	d108      	bne.n	8008046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008044:	e031      	b.n	80080aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008046:	2308      	movs	r3, #8
 8008048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800804a:	2308      	movs	r3, #8
 800804c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	0e5b      	lsrs	r3, r3, #25
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	0f5b      	lsrs	r3, r3, #29
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	7b3a      	ldrb	r2, [r7, #12]
 8008072:	4911      	ldr	r1, [pc, #68]	; (80080b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008074:	5c8a      	ldrb	r2, [r1, r2]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800807a:	7b3a      	ldrb	r2, [r7, #12]
 800807c:	490f      	ldr	r1, [pc, #60]	; (80080bc <UARTEx_SetNbDataToProcess+0x98>)
 800807e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008080:	fb93 f3f2 	sdiv	r3, r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	7b7a      	ldrb	r2, [r7, #13]
 8008090:	4909      	ldr	r1, [pc, #36]	; (80080b8 <UARTEx_SetNbDataToProcess+0x94>)
 8008092:	5c8a      	ldrb	r2, [r1, r2]
 8008094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008098:	7b7a      	ldrb	r2, [r7, #13]
 800809a:	4908      	ldr	r1, [pc, #32]	; (80080bc <UARTEx_SetNbDataToProcess+0x98>)
 800809c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800809e:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	0800bae0 	.word	0x0800bae0
 80080bc:	0800bae8 	.word	0x0800bae8

080080c0 <__assert_func>:
 80080c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080c2:	461c      	mov	r4, r3
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <__assert_func+0x2c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4605      	mov	r5, r0
 80080ca:	68d8      	ldr	r0, [r3, #12]
 80080cc:	b152      	cbz	r2, 80080e4 <__assert_func+0x24>
 80080ce:	4b08      	ldr	r3, [pc, #32]	; (80080f0 <__assert_func+0x30>)
 80080d0:	9100      	str	r1, [sp, #0]
 80080d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80080d6:	4907      	ldr	r1, [pc, #28]	; (80080f4 <__assert_func+0x34>)
 80080d8:	462b      	mov	r3, r5
 80080da:	4622      	mov	r2, r4
 80080dc:	f000 f828 	bl	8008130 <fiprintf>
 80080e0:	f001 f836 	bl	8009150 <abort>
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <__assert_func+0x38>)
 80080e6:	461a      	mov	r2, r3
 80080e8:	e7f2      	b.n	80080d0 <__assert_func+0x10>
 80080ea:	bf00      	nop
 80080ec:	2000000c 	.word	0x2000000c
 80080f0:	0800baf0 	.word	0x0800baf0
 80080f4:	0800bafd 	.word	0x0800bafd
 80080f8:	0800bb2b 	.word	0x0800bb2b

080080fc <__errno>:
 80080fc:	4b01      	ldr	r3, [pc, #4]	; (8008104 <__errno+0x8>)
 80080fe:	6818      	ldr	r0, [r3, #0]
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	2000000c 	.word	0x2000000c

08008108 <exit>:
 8008108:	b508      	push	{r3, lr}
 800810a:	4b07      	ldr	r3, [pc, #28]	; (8008128 <exit+0x20>)
 800810c:	4604      	mov	r4, r0
 800810e:	b113      	cbz	r3, 8008116 <exit+0xe>
 8008110:	2100      	movs	r1, #0
 8008112:	f3af 8000 	nop.w
 8008116:	4b05      	ldr	r3, [pc, #20]	; (800812c <exit+0x24>)
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800811c:	b103      	cbz	r3, 8008120 <exit+0x18>
 800811e:	4798      	blx	r3
 8008120:	4620      	mov	r0, r4
 8008122:	f7fb f9ac 	bl	800347e <_exit>
 8008126:	bf00      	nop
 8008128:	00000000 	.word	0x00000000
 800812c:	0800bb2c 	.word	0x0800bb2c

08008130 <fiprintf>:
 8008130:	b40e      	push	{r1, r2, r3}
 8008132:	b503      	push	{r0, r1, lr}
 8008134:	4601      	mov	r1, r0
 8008136:	ab03      	add	r3, sp, #12
 8008138:	4805      	ldr	r0, [pc, #20]	; (8008150 <fiprintf+0x20>)
 800813a:	f853 2b04 	ldr.w	r2, [r3], #4
 800813e:	6800      	ldr	r0, [r0, #0]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	f000 f90d 	bl	8008360 <_vfiprintf_r>
 8008146:	b002      	add	sp, #8
 8008148:	f85d eb04 	ldr.w	lr, [sp], #4
 800814c:	b003      	add	sp, #12
 800814e:	4770      	bx	lr
 8008150:	2000000c 	.word	0x2000000c

08008154 <__libc_init_array>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	4e0d      	ldr	r6, [pc, #52]	; (800818c <__libc_init_array+0x38>)
 8008158:	4c0d      	ldr	r4, [pc, #52]	; (8008190 <__libc_init_array+0x3c>)
 800815a:	1ba4      	subs	r4, r4, r6
 800815c:	10a4      	asrs	r4, r4, #2
 800815e:	2500      	movs	r5, #0
 8008160:	42a5      	cmp	r5, r4
 8008162:	d109      	bne.n	8008178 <__libc_init_array+0x24>
 8008164:	4e0b      	ldr	r6, [pc, #44]	; (8008194 <__libc_init_array+0x40>)
 8008166:	4c0c      	ldr	r4, [pc, #48]	; (8008198 <__libc_init_array+0x44>)
 8008168:	f002 fdc8 	bl	800acfc <_init>
 800816c:	1ba4      	subs	r4, r4, r6
 800816e:	10a4      	asrs	r4, r4, #2
 8008170:	2500      	movs	r5, #0
 8008172:	42a5      	cmp	r5, r4
 8008174:	d105      	bne.n	8008182 <__libc_init_array+0x2e>
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800817c:	4798      	blx	r3
 800817e:	3501      	adds	r5, #1
 8008180:	e7ee      	b.n	8008160 <__libc_init_array+0xc>
 8008182:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008186:	4798      	blx	r3
 8008188:	3501      	adds	r5, #1
 800818a:	e7f2      	b.n	8008172 <__libc_init_array+0x1e>
 800818c:	0800bdf8 	.word	0x0800bdf8
 8008190:	0800bdf8 	.word	0x0800bdf8
 8008194:	0800bdf8 	.word	0x0800bdf8
 8008198:	0800bdfc 	.word	0x0800bdfc

0800819c <malloc>:
 800819c:	4b02      	ldr	r3, [pc, #8]	; (80081a8 <malloc+0xc>)
 800819e:	4601      	mov	r1, r0
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	f000 b859 	b.w	8008258 <_malloc_r>
 80081a6:	bf00      	nop
 80081a8:	2000000c 	.word	0x2000000c

080081ac <memset>:
 80081ac:	4402      	add	r2, r0
 80081ae:	4603      	mov	r3, r0
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d100      	bne.n	80081b6 <memset+0xa>
 80081b4:	4770      	bx	lr
 80081b6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ba:	e7f9      	b.n	80081b0 <memset+0x4>

080081bc <_free_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4605      	mov	r5, r0
 80081c0:	2900      	cmp	r1, #0
 80081c2:	d045      	beq.n	8008250 <_free_r+0x94>
 80081c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c8:	1f0c      	subs	r4, r1, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfb8      	it	lt
 80081ce:	18e4      	addlt	r4, r4, r3
 80081d0:	f002 f82c 	bl	800a22c <__malloc_lock>
 80081d4:	4a1f      	ldr	r2, [pc, #124]	; (8008254 <_free_r+0x98>)
 80081d6:	6813      	ldr	r3, [r2, #0]
 80081d8:	4610      	mov	r0, r2
 80081da:	b933      	cbnz	r3, 80081ea <_free_r+0x2e>
 80081dc:	6063      	str	r3, [r4, #4]
 80081de:	6014      	str	r4, [r2, #0]
 80081e0:	4628      	mov	r0, r5
 80081e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e6:	f002 b822 	b.w	800a22e <__malloc_unlock>
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	d90c      	bls.n	8008208 <_free_r+0x4c>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	1862      	adds	r2, r4, r1
 80081f2:	4293      	cmp	r3, r2
 80081f4:	bf04      	itt	eq
 80081f6:	681a      	ldreq	r2, [r3, #0]
 80081f8:	685b      	ldreq	r3, [r3, #4]
 80081fa:	6063      	str	r3, [r4, #4]
 80081fc:	bf04      	itt	eq
 80081fe:	1852      	addeq	r2, r2, r1
 8008200:	6022      	streq	r2, [r4, #0]
 8008202:	6004      	str	r4, [r0, #0]
 8008204:	e7ec      	b.n	80081e0 <_free_r+0x24>
 8008206:	4613      	mov	r3, r2
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	b10a      	cbz	r2, 8008210 <_free_r+0x54>
 800820c:	42a2      	cmp	r2, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x4a>
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	1858      	adds	r0, r3, r1
 8008214:	42a0      	cmp	r0, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x74>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	4401      	add	r1, r0
 800821c:	1858      	adds	r0, r3, r1
 800821e:	4282      	cmp	r2, r0
 8008220:	6019      	str	r1, [r3, #0]
 8008222:	d1dd      	bne.n	80081e0 <_free_r+0x24>
 8008224:	6810      	ldr	r0, [r2, #0]
 8008226:	6852      	ldr	r2, [r2, #4]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	4401      	add	r1, r0
 800822c:	6019      	str	r1, [r3, #0]
 800822e:	e7d7      	b.n	80081e0 <_free_r+0x24>
 8008230:	d902      	bls.n	8008238 <_free_r+0x7c>
 8008232:	230c      	movs	r3, #12
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	e7d3      	b.n	80081e0 <_free_r+0x24>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428a      	cmp	r2, r1
 800823e:	bf04      	itt	eq
 8008240:	6811      	ldreq	r1, [r2, #0]
 8008242:	6852      	ldreq	r2, [r2, #4]
 8008244:	6062      	str	r2, [r4, #4]
 8008246:	bf04      	itt	eq
 8008248:	1809      	addeq	r1, r1, r0
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	605c      	str	r4, [r3, #4]
 800824e:	e7c7      	b.n	80081e0 <_free_r+0x24>
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	bf00      	nop
 8008254:	20000610 	.word	0x20000610

08008258 <_malloc_r>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	1ccd      	adds	r5, r1, #3
 800825c:	f025 0503 	bic.w	r5, r5, #3
 8008260:	3508      	adds	r5, #8
 8008262:	2d0c      	cmp	r5, #12
 8008264:	bf38      	it	cc
 8008266:	250c      	movcc	r5, #12
 8008268:	2d00      	cmp	r5, #0
 800826a:	4606      	mov	r6, r0
 800826c:	db01      	blt.n	8008272 <_malloc_r+0x1a>
 800826e:	42a9      	cmp	r1, r5
 8008270:	d903      	bls.n	800827a <_malloc_r+0x22>
 8008272:	230c      	movs	r3, #12
 8008274:	6033      	str	r3, [r6, #0]
 8008276:	2000      	movs	r0, #0
 8008278:	bd70      	pop	{r4, r5, r6, pc}
 800827a:	f001 ffd7 	bl	800a22c <__malloc_lock>
 800827e:	4a21      	ldr	r2, [pc, #132]	; (8008304 <_malloc_r+0xac>)
 8008280:	6814      	ldr	r4, [r2, #0]
 8008282:	4621      	mov	r1, r4
 8008284:	b991      	cbnz	r1, 80082ac <_malloc_r+0x54>
 8008286:	4c20      	ldr	r4, [pc, #128]	; (8008308 <_malloc_r+0xb0>)
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	b91b      	cbnz	r3, 8008294 <_malloc_r+0x3c>
 800828c:	4630      	mov	r0, r6
 800828e:	f000 fe55 	bl	8008f3c <_sbrk_r>
 8008292:	6020      	str	r0, [r4, #0]
 8008294:	4629      	mov	r1, r5
 8008296:	4630      	mov	r0, r6
 8008298:	f000 fe50 	bl	8008f3c <_sbrk_r>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d124      	bne.n	80082ea <_malloc_r+0x92>
 80082a0:	230c      	movs	r3, #12
 80082a2:	6033      	str	r3, [r6, #0]
 80082a4:	4630      	mov	r0, r6
 80082a6:	f001 ffc2 	bl	800a22e <__malloc_unlock>
 80082aa:	e7e4      	b.n	8008276 <_malloc_r+0x1e>
 80082ac:	680b      	ldr	r3, [r1, #0]
 80082ae:	1b5b      	subs	r3, r3, r5
 80082b0:	d418      	bmi.n	80082e4 <_malloc_r+0x8c>
 80082b2:	2b0b      	cmp	r3, #11
 80082b4:	d90f      	bls.n	80082d6 <_malloc_r+0x7e>
 80082b6:	600b      	str	r3, [r1, #0]
 80082b8:	50cd      	str	r5, [r1, r3]
 80082ba:	18cc      	adds	r4, r1, r3
 80082bc:	4630      	mov	r0, r6
 80082be:	f001 ffb6 	bl	800a22e <__malloc_unlock>
 80082c2:	f104 000b 	add.w	r0, r4, #11
 80082c6:	1d23      	adds	r3, r4, #4
 80082c8:	f020 0007 	bic.w	r0, r0, #7
 80082cc:	1ac3      	subs	r3, r0, r3
 80082ce:	d0d3      	beq.n	8008278 <_malloc_r+0x20>
 80082d0:	425a      	negs	r2, r3
 80082d2:	50e2      	str	r2, [r4, r3]
 80082d4:	e7d0      	b.n	8008278 <_malloc_r+0x20>
 80082d6:	428c      	cmp	r4, r1
 80082d8:	684b      	ldr	r3, [r1, #4]
 80082da:	bf16      	itet	ne
 80082dc:	6063      	strne	r3, [r4, #4]
 80082de:	6013      	streq	r3, [r2, #0]
 80082e0:	460c      	movne	r4, r1
 80082e2:	e7eb      	b.n	80082bc <_malloc_r+0x64>
 80082e4:	460c      	mov	r4, r1
 80082e6:	6849      	ldr	r1, [r1, #4]
 80082e8:	e7cc      	b.n	8008284 <_malloc_r+0x2c>
 80082ea:	1cc4      	adds	r4, r0, #3
 80082ec:	f024 0403 	bic.w	r4, r4, #3
 80082f0:	42a0      	cmp	r0, r4
 80082f2:	d005      	beq.n	8008300 <_malloc_r+0xa8>
 80082f4:	1a21      	subs	r1, r4, r0
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 fe20 	bl	8008f3c <_sbrk_r>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d0cf      	beq.n	80082a0 <_malloc_r+0x48>
 8008300:	6025      	str	r5, [r4, #0]
 8008302:	e7db      	b.n	80082bc <_malloc_r+0x64>
 8008304:	20000610 	.word	0x20000610
 8008308:	20000614 	.word	0x20000614

0800830c <__sfputc_r>:
 800830c:	6893      	ldr	r3, [r2, #8]
 800830e:	3b01      	subs	r3, #1
 8008310:	2b00      	cmp	r3, #0
 8008312:	b410      	push	{r4}
 8008314:	6093      	str	r3, [r2, #8]
 8008316:	da08      	bge.n	800832a <__sfputc_r+0x1e>
 8008318:	6994      	ldr	r4, [r2, #24]
 800831a:	42a3      	cmp	r3, r4
 800831c:	db01      	blt.n	8008322 <__sfputc_r+0x16>
 800831e:	290a      	cmp	r1, #10
 8008320:	d103      	bne.n	800832a <__sfputc_r+0x1e>
 8008322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008326:	f000 be53 	b.w	8008fd0 <__swbuf_r>
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	1c58      	adds	r0, r3, #1
 800832e:	6010      	str	r0, [r2, #0]
 8008330:	7019      	strb	r1, [r3, #0]
 8008332:	4608      	mov	r0, r1
 8008334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008338:	4770      	bx	lr

0800833a <__sfputs_r>:
 800833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	4614      	mov	r4, r2
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	42ac      	cmp	r4, r5
 8008346:	d101      	bne.n	800834c <__sfputs_r+0x12>
 8008348:	2000      	movs	r0, #0
 800834a:	e007      	b.n	800835c <__sfputs_r+0x22>
 800834c:	463a      	mov	r2, r7
 800834e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008352:	4630      	mov	r0, r6
 8008354:	f7ff ffda 	bl	800830c <__sfputc_r>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d1f3      	bne.n	8008344 <__sfputs_r+0xa>
 800835c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008360 <_vfiprintf_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	460c      	mov	r4, r1
 8008366:	b09d      	sub	sp, #116	; 0x74
 8008368:	4617      	mov	r7, r2
 800836a:	461d      	mov	r5, r3
 800836c:	4606      	mov	r6, r0
 800836e:	b118      	cbz	r0, 8008378 <_vfiprintf_r+0x18>
 8008370:	6983      	ldr	r3, [r0, #24]
 8008372:	b90b      	cbnz	r3, 8008378 <_vfiprintf_r+0x18>
 8008374:	f001 fe28 	bl	8009fc8 <__sinit>
 8008378:	4b7c      	ldr	r3, [pc, #496]	; (800856c <_vfiprintf_r+0x20c>)
 800837a:	429c      	cmp	r4, r3
 800837c:	d158      	bne.n	8008430 <_vfiprintf_r+0xd0>
 800837e:	6874      	ldr	r4, [r6, #4]
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	0718      	lsls	r0, r3, #28
 8008384:	d55e      	bpl.n	8008444 <_vfiprintf_r+0xe4>
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d05b      	beq.n	8008444 <_vfiprintf_r+0xe4>
 800838c:	2300      	movs	r3, #0
 800838e:	9309      	str	r3, [sp, #36]	; 0x24
 8008390:	2320      	movs	r3, #32
 8008392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008396:	2330      	movs	r3, #48	; 0x30
 8008398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800839c:	9503      	str	r5, [sp, #12]
 800839e:	f04f 0b01 	mov.w	fp, #1
 80083a2:	46b8      	mov	r8, r7
 80083a4:	4645      	mov	r5, r8
 80083a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083aa:	b10b      	cbz	r3, 80083b0 <_vfiprintf_r+0x50>
 80083ac:	2b25      	cmp	r3, #37	; 0x25
 80083ae:	d154      	bne.n	800845a <_vfiprintf_r+0xfa>
 80083b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80083b4:	d00b      	beq.n	80083ce <_vfiprintf_r+0x6e>
 80083b6:	4653      	mov	r3, sl
 80083b8:	463a      	mov	r2, r7
 80083ba:	4621      	mov	r1, r4
 80083bc:	4630      	mov	r0, r6
 80083be:	f7ff ffbc 	bl	800833a <__sfputs_r>
 80083c2:	3001      	adds	r0, #1
 80083c4:	f000 80c2 	beq.w	800854c <_vfiprintf_r+0x1ec>
 80083c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ca:	4453      	add	r3, sl
 80083cc:	9309      	str	r3, [sp, #36]	; 0x24
 80083ce:	f898 3000 	ldrb.w	r3, [r8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 80ba 	beq.w	800854c <_vfiprintf_r+0x1ec>
 80083d8:	2300      	movs	r3, #0
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083e2:	9304      	str	r3, [sp, #16]
 80083e4:	9307      	str	r3, [sp, #28]
 80083e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ea:	931a      	str	r3, [sp, #104]	; 0x68
 80083ec:	46a8      	mov	r8, r5
 80083ee:	2205      	movs	r2, #5
 80083f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80083f4:	485e      	ldr	r0, [pc, #376]	; (8008570 <_vfiprintf_r+0x210>)
 80083f6:	f7f7 ff1b 	bl	8000230 <memchr>
 80083fa:	9b04      	ldr	r3, [sp, #16]
 80083fc:	bb78      	cbnz	r0, 800845e <_vfiprintf_r+0xfe>
 80083fe:	06d9      	lsls	r1, r3, #27
 8008400:	bf44      	itt	mi
 8008402:	2220      	movmi	r2, #32
 8008404:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008408:	071a      	lsls	r2, r3, #28
 800840a:	bf44      	itt	mi
 800840c:	222b      	movmi	r2, #43	; 0x2b
 800840e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008412:	782a      	ldrb	r2, [r5, #0]
 8008414:	2a2a      	cmp	r2, #42	; 0x2a
 8008416:	d02a      	beq.n	800846e <_vfiprintf_r+0x10e>
 8008418:	9a07      	ldr	r2, [sp, #28]
 800841a:	46a8      	mov	r8, r5
 800841c:	2000      	movs	r0, #0
 800841e:	250a      	movs	r5, #10
 8008420:	4641      	mov	r1, r8
 8008422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008426:	3b30      	subs	r3, #48	; 0x30
 8008428:	2b09      	cmp	r3, #9
 800842a:	d969      	bls.n	8008500 <_vfiprintf_r+0x1a0>
 800842c:	b360      	cbz	r0, 8008488 <_vfiprintf_r+0x128>
 800842e:	e024      	b.n	800847a <_vfiprintf_r+0x11a>
 8008430:	4b50      	ldr	r3, [pc, #320]	; (8008574 <_vfiprintf_r+0x214>)
 8008432:	429c      	cmp	r4, r3
 8008434:	d101      	bne.n	800843a <_vfiprintf_r+0xda>
 8008436:	68b4      	ldr	r4, [r6, #8]
 8008438:	e7a2      	b.n	8008380 <_vfiprintf_r+0x20>
 800843a:	4b4f      	ldr	r3, [pc, #316]	; (8008578 <_vfiprintf_r+0x218>)
 800843c:	429c      	cmp	r4, r3
 800843e:	bf08      	it	eq
 8008440:	68f4      	ldreq	r4, [r6, #12]
 8008442:	e79d      	b.n	8008380 <_vfiprintf_r+0x20>
 8008444:	4621      	mov	r1, r4
 8008446:	4630      	mov	r0, r6
 8008448:	f000 fe14 	bl	8009074 <__swsetup_r>
 800844c:	2800      	cmp	r0, #0
 800844e:	d09d      	beq.n	800838c <_vfiprintf_r+0x2c>
 8008450:	f04f 30ff 	mov.w	r0, #4294967295
 8008454:	b01d      	add	sp, #116	; 0x74
 8008456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845a:	46a8      	mov	r8, r5
 800845c:	e7a2      	b.n	80083a4 <_vfiprintf_r+0x44>
 800845e:	4a44      	ldr	r2, [pc, #272]	; (8008570 <_vfiprintf_r+0x210>)
 8008460:	1a80      	subs	r0, r0, r2
 8008462:	fa0b f000 	lsl.w	r0, fp, r0
 8008466:	4318      	orrs	r0, r3
 8008468:	9004      	str	r0, [sp, #16]
 800846a:	4645      	mov	r5, r8
 800846c:	e7be      	b.n	80083ec <_vfiprintf_r+0x8c>
 800846e:	9a03      	ldr	r2, [sp, #12]
 8008470:	1d11      	adds	r1, r2, #4
 8008472:	6812      	ldr	r2, [r2, #0]
 8008474:	9103      	str	r1, [sp, #12]
 8008476:	2a00      	cmp	r2, #0
 8008478:	db01      	blt.n	800847e <_vfiprintf_r+0x11e>
 800847a:	9207      	str	r2, [sp, #28]
 800847c:	e004      	b.n	8008488 <_vfiprintf_r+0x128>
 800847e:	4252      	negs	r2, r2
 8008480:	f043 0302 	orr.w	r3, r3, #2
 8008484:	9207      	str	r2, [sp, #28]
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	f898 3000 	ldrb.w	r3, [r8]
 800848c:	2b2e      	cmp	r3, #46	; 0x2e
 800848e:	d10e      	bne.n	80084ae <_vfiprintf_r+0x14e>
 8008490:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008494:	2b2a      	cmp	r3, #42	; 0x2a
 8008496:	d138      	bne.n	800850a <_vfiprintf_r+0x1aa>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9203      	str	r2, [sp, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bfb8      	it	lt
 80084a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80084a8:	f108 0802 	add.w	r8, r8, #2
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	4d33      	ldr	r5, [pc, #204]	; (800857c <_vfiprintf_r+0x21c>)
 80084b0:	f898 1000 	ldrb.w	r1, [r8]
 80084b4:	2203      	movs	r2, #3
 80084b6:	4628      	mov	r0, r5
 80084b8:	f7f7 feba 	bl	8000230 <memchr>
 80084bc:	b140      	cbz	r0, 80084d0 <_vfiprintf_r+0x170>
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	1b40      	subs	r0, r0, r5
 80084c2:	fa03 f000 	lsl.w	r0, r3, r0
 80084c6:	9b04      	ldr	r3, [sp, #16]
 80084c8:	4303      	orrs	r3, r0
 80084ca:	f108 0801 	add.w	r8, r8, #1
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	f898 1000 	ldrb.w	r1, [r8]
 80084d4:	482a      	ldr	r0, [pc, #168]	; (8008580 <_vfiprintf_r+0x220>)
 80084d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084da:	2206      	movs	r2, #6
 80084dc:	f108 0701 	add.w	r7, r8, #1
 80084e0:	f7f7 fea6 	bl	8000230 <memchr>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d037      	beq.n	8008558 <_vfiprintf_r+0x1f8>
 80084e8:	4b26      	ldr	r3, [pc, #152]	; (8008584 <_vfiprintf_r+0x224>)
 80084ea:	bb1b      	cbnz	r3, 8008534 <_vfiprintf_r+0x1d4>
 80084ec:	9b03      	ldr	r3, [sp, #12]
 80084ee:	3307      	adds	r3, #7
 80084f0:	f023 0307 	bic.w	r3, r3, #7
 80084f4:	3308      	adds	r3, #8
 80084f6:	9303      	str	r3, [sp, #12]
 80084f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fa:	444b      	add	r3, r9
 80084fc:	9309      	str	r3, [sp, #36]	; 0x24
 80084fe:	e750      	b.n	80083a2 <_vfiprintf_r+0x42>
 8008500:	fb05 3202 	mla	r2, r5, r2, r3
 8008504:	2001      	movs	r0, #1
 8008506:	4688      	mov	r8, r1
 8008508:	e78a      	b.n	8008420 <_vfiprintf_r+0xc0>
 800850a:	2300      	movs	r3, #0
 800850c:	f108 0801 	add.w	r8, r8, #1
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	4619      	mov	r1, r3
 8008514:	250a      	movs	r5, #10
 8008516:	4640      	mov	r0, r8
 8008518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800851c:	3a30      	subs	r2, #48	; 0x30
 800851e:	2a09      	cmp	r2, #9
 8008520:	d903      	bls.n	800852a <_vfiprintf_r+0x1ca>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0c3      	beq.n	80084ae <_vfiprintf_r+0x14e>
 8008526:	9105      	str	r1, [sp, #20]
 8008528:	e7c1      	b.n	80084ae <_vfiprintf_r+0x14e>
 800852a:	fb05 2101 	mla	r1, r5, r1, r2
 800852e:	2301      	movs	r3, #1
 8008530:	4680      	mov	r8, r0
 8008532:	e7f0      	b.n	8008516 <_vfiprintf_r+0x1b6>
 8008534:	ab03      	add	r3, sp, #12
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4622      	mov	r2, r4
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <_vfiprintf_r+0x228>)
 800853c:	a904      	add	r1, sp, #16
 800853e:	4630      	mov	r0, r6
 8008540:	f000 f8b8 	bl	80086b4 <_printf_float>
 8008544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008548:	4681      	mov	r9, r0
 800854a:	d1d5      	bne.n	80084f8 <_vfiprintf_r+0x198>
 800854c:	89a3      	ldrh	r3, [r4, #12]
 800854e:	065b      	lsls	r3, r3, #25
 8008550:	f53f af7e 	bmi.w	8008450 <_vfiprintf_r+0xf0>
 8008554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008556:	e77d      	b.n	8008454 <_vfiprintf_r+0xf4>
 8008558:	ab03      	add	r3, sp, #12
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	4622      	mov	r2, r4
 800855e:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <_vfiprintf_r+0x228>)
 8008560:	a904      	add	r1, sp, #16
 8008562:	4630      	mov	r0, r6
 8008564:	f000 fb5c 	bl	8008c20 <_printf_i>
 8008568:	e7ec      	b.n	8008544 <_vfiprintf_r+0x1e4>
 800856a:	bf00      	nop
 800856c:	0800bba4 	.word	0x0800bba4
 8008570:	0800bb30 	.word	0x0800bb30
 8008574:	0800bbc4 	.word	0x0800bbc4
 8008578:	0800bb84 	.word	0x0800bb84
 800857c:	0800bb36 	.word	0x0800bb36
 8008580:	0800bb3a 	.word	0x0800bb3a
 8008584:	080086b5 	.word	0x080086b5
 8008588:	0800833b 	.word	0x0800833b

0800858c <__cvt>:
 800858c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	ec55 4b10 	vmov	r4, r5, d0
 8008594:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008596:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800859a:	2d00      	cmp	r5, #0
 800859c:	460e      	mov	r6, r1
 800859e:	4691      	mov	r9, r2
 80085a0:	4619      	mov	r1, r3
 80085a2:	bfb8      	it	lt
 80085a4:	4622      	movlt	r2, r4
 80085a6:	462b      	mov	r3, r5
 80085a8:	f027 0720 	bic.w	r7, r7, #32
 80085ac:	bfbb      	ittet	lt
 80085ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085b2:	461d      	movlt	r5, r3
 80085b4:	2300      	movge	r3, #0
 80085b6:	232d      	movlt	r3, #45	; 0x2d
 80085b8:	bfb8      	it	lt
 80085ba:	4614      	movlt	r4, r2
 80085bc:	2f46      	cmp	r7, #70	; 0x46
 80085be:	700b      	strb	r3, [r1, #0]
 80085c0:	d004      	beq.n	80085cc <__cvt+0x40>
 80085c2:	2f45      	cmp	r7, #69	; 0x45
 80085c4:	d100      	bne.n	80085c8 <__cvt+0x3c>
 80085c6:	3601      	adds	r6, #1
 80085c8:	2102      	movs	r1, #2
 80085ca:	e000      	b.n	80085ce <__cvt+0x42>
 80085cc:	2103      	movs	r1, #3
 80085ce:	ab03      	add	r3, sp, #12
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	ab02      	add	r3, sp, #8
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4632      	mov	r2, r6
 80085d8:	4653      	mov	r3, sl
 80085da:	ec45 4b10 	vmov	d0, r4, r5
 80085de:	f000 fe4b 	bl	8009278 <_dtoa_r>
 80085e2:	2f47      	cmp	r7, #71	; 0x47
 80085e4:	4680      	mov	r8, r0
 80085e6:	d102      	bne.n	80085ee <__cvt+0x62>
 80085e8:	f019 0f01 	tst.w	r9, #1
 80085ec:	d026      	beq.n	800863c <__cvt+0xb0>
 80085ee:	2f46      	cmp	r7, #70	; 0x46
 80085f0:	eb08 0906 	add.w	r9, r8, r6
 80085f4:	d111      	bne.n	800861a <__cvt+0x8e>
 80085f6:	f898 3000 	ldrb.w	r3, [r8]
 80085fa:	2b30      	cmp	r3, #48	; 0x30
 80085fc:	d10a      	bne.n	8008614 <__cvt+0x88>
 80085fe:	2200      	movs	r2, #0
 8008600:	2300      	movs	r3, #0
 8008602:	4620      	mov	r0, r4
 8008604:	4629      	mov	r1, r5
 8008606:	f7f8 fa87 	bl	8000b18 <__aeabi_dcmpeq>
 800860a:	b918      	cbnz	r0, 8008614 <__cvt+0x88>
 800860c:	f1c6 0601 	rsb	r6, r6, #1
 8008610:	f8ca 6000 	str.w	r6, [sl]
 8008614:	f8da 3000 	ldr.w	r3, [sl]
 8008618:	4499      	add	r9, r3
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f8 fa79 	bl	8000b18 <__aeabi_dcmpeq>
 8008626:	b938      	cbnz	r0, 8008638 <__cvt+0xac>
 8008628:	2230      	movs	r2, #48	; 0x30
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	454b      	cmp	r3, r9
 800862e:	d205      	bcs.n	800863c <__cvt+0xb0>
 8008630:	1c59      	adds	r1, r3, #1
 8008632:	9103      	str	r1, [sp, #12]
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e7f8      	b.n	800862a <__cvt+0x9e>
 8008638:	f8cd 900c 	str.w	r9, [sp, #12]
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008640:	eba3 0308 	sub.w	r3, r3, r8
 8008644:	4640      	mov	r0, r8
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	b004      	add	sp, #16
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800864e <__exponent>:
 800864e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008650:	2900      	cmp	r1, #0
 8008652:	4604      	mov	r4, r0
 8008654:	bfba      	itte	lt
 8008656:	4249      	neglt	r1, r1
 8008658:	232d      	movlt	r3, #45	; 0x2d
 800865a:	232b      	movge	r3, #43	; 0x2b
 800865c:	2909      	cmp	r1, #9
 800865e:	f804 2b02 	strb.w	r2, [r4], #2
 8008662:	7043      	strb	r3, [r0, #1]
 8008664:	dd20      	ble.n	80086a8 <__exponent+0x5a>
 8008666:	f10d 0307 	add.w	r3, sp, #7
 800866a:	461f      	mov	r7, r3
 800866c:	260a      	movs	r6, #10
 800866e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008672:	fb06 1115 	mls	r1, r6, r5, r1
 8008676:	3130      	adds	r1, #48	; 0x30
 8008678:	2d09      	cmp	r5, #9
 800867a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800867e:	f103 32ff 	add.w	r2, r3, #4294967295
 8008682:	4629      	mov	r1, r5
 8008684:	dc09      	bgt.n	800869a <__exponent+0x4c>
 8008686:	3130      	adds	r1, #48	; 0x30
 8008688:	3b02      	subs	r3, #2
 800868a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800868e:	42bb      	cmp	r3, r7
 8008690:	4622      	mov	r2, r4
 8008692:	d304      	bcc.n	800869e <__exponent+0x50>
 8008694:	1a10      	subs	r0, r2, r0
 8008696:	b003      	add	sp, #12
 8008698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869a:	4613      	mov	r3, r2
 800869c:	e7e7      	b.n	800866e <__exponent+0x20>
 800869e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086a2:	f804 2b01 	strb.w	r2, [r4], #1
 80086a6:	e7f2      	b.n	800868e <__exponent+0x40>
 80086a8:	2330      	movs	r3, #48	; 0x30
 80086aa:	4419      	add	r1, r3
 80086ac:	7083      	strb	r3, [r0, #2]
 80086ae:	1d02      	adds	r2, r0, #4
 80086b0:	70c1      	strb	r1, [r0, #3]
 80086b2:	e7ef      	b.n	8008694 <__exponent+0x46>

080086b4 <_printf_float>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	b08d      	sub	sp, #52	; 0x34
 80086ba:	460c      	mov	r4, r1
 80086bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80086c0:	4616      	mov	r6, r2
 80086c2:	461f      	mov	r7, r3
 80086c4:	4605      	mov	r5, r0
 80086c6:	f001 fd09 	bl	800a0dc <_localeconv_r>
 80086ca:	6803      	ldr	r3, [r0, #0]
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f7 fda0 	bl	8000214 <strlen>
 80086d4:	2300      	movs	r3, #0
 80086d6:	930a      	str	r3, [sp, #40]	; 0x28
 80086d8:	f8d8 3000 	ldr.w	r3, [r8]
 80086dc:	9005      	str	r0, [sp, #20]
 80086de:	3307      	adds	r3, #7
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	f103 0208 	add.w	r2, r3, #8
 80086e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086ec:	f8d4 b000 	ldr.w	fp, [r4]
 80086f0:	f8c8 2000 	str.w	r2, [r8]
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086fc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008700:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008704:	9307      	str	r3, [sp, #28]
 8008706:	f8cd 8018 	str.w	r8, [sp, #24]
 800870a:	f04f 32ff 	mov.w	r2, #4294967295
 800870e:	4ba7      	ldr	r3, [pc, #668]	; (80089ac <_printf_float+0x2f8>)
 8008710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008714:	f7f8 fa32 	bl	8000b7c <__aeabi_dcmpun>
 8008718:	bb70      	cbnz	r0, 8008778 <_printf_float+0xc4>
 800871a:	f04f 32ff 	mov.w	r2, #4294967295
 800871e:	4ba3      	ldr	r3, [pc, #652]	; (80089ac <_printf_float+0x2f8>)
 8008720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008724:	f7f8 fa0c 	bl	8000b40 <__aeabi_dcmple>
 8008728:	bb30      	cbnz	r0, 8008778 <_printf_float+0xc4>
 800872a:	2200      	movs	r2, #0
 800872c:	2300      	movs	r3, #0
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	f7f8 f9fb 	bl	8000b2c <__aeabi_dcmplt>
 8008736:	b110      	cbz	r0, 800873e <_printf_float+0x8a>
 8008738:	232d      	movs	r3, #45	; 0x2d
 800873a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800873e:	4a9c      	ldr	r2, [pc, #624]	; (80089b0 <_printf_float+0x2fc>)
 8008740:	4b9c      	ldr	r3, [pc, #624]	; (80089b4 <_printf_float+0x300>)
 8008742:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008746:	bf8c      	ite	hi
 8008748:	4690      	movhi	r8, r2
 800874a:	4698      	movls	r8, r3
 800874c:	2303      	movs	r3, #3
 800874e:	f02b 0204 	bic.w	r2, fp, #4
 8008752:	6123      	str	r3, [r4, #16]
 8008754:	6022      	str	r2, [r4, #0]
 8008756:	f04f 0900 	mov.w	r9, #0
 800875a:	9700      	str	r7, [sp, #0]
 800875c:	4633      	mov	r3, r6
 800875e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008760:	4621      	mov	r1, r4
 8008762:	4628      	mov	r0, r5
 8008764:	f000 f9e6 	bl	8008b34 <_printf_common>
 8008768:	3001      	adds	r0, #1
 800876a:	f040 808d 	bne.w	8008888 <_printf_float+0x1d4>
 800876e:	f04f 30ff 	mov.w	r0, #4294967295
 8008772:	b00d      	add	sp, #52	; 0x34
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9fc 	bl	8000b7c <__aeabi_dcmpun>
 8008784:	b110      	cbz	r0, 800878c <_printf_float+0xd8>
 8008786:	4a8c      	ldr	r2, [pc, #560]	; (80089b8 <_printf_float+0x304>)
 8008788:	4b8c      	ldr	r3, [pc, #560]	; (80089bc <_printf_float+0x308>)
 800878a:	e7da      	b.n	8008742 <_printf_float+0x8e>
 800878c:	6861      	ldr	r1, [r4, #4]
 800878e:	1c4b      	adds	r3, r1, #1
 8008790:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008794:	a80a      	add	r0, sp, #40	; 0x28
 8008796:	d13e      	bne.n	8008816 <_printf_float+0x162>
 8008798:	2306      	movs	r3, #6
 800879a:	6063      	str	r3, [r4, #4]
 800879c:	2300      	movs	r3, #0
 800879e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087a2:	ab09      	add	r3, sp, #36	; 0x24
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	ec49 8b10 	vmov	d0, r8, r9
 80087aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087ae:	6022      	str	r2, [r4, #0]
 80087b0:	f8cd a004 	str.w	sl, [sp, #4]
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	4628      	mov	r0, r5
 80087b8:	f7ff fee8 	bl	800858c <__cvt>
 80087bc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80087c0:	2b47      	cmp	r3, #71	; 0x47
 80087c2:	4680      	mov	r8, r0
 80087c4:	d109      	bne.n	80087da <_printf_float+0x126>
 80087c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c8:	1cd8      	adds	r0, r3, #3
 80087ca:	db02      	blt.n	80087d2 <_printf_float+0x11e>
 80087cc:	6862      	ldr	r2, [r4, #4]
 80087ce:	4293      	cmp	r3, r2
 80087d0:	dd47      	ble.n	8008862 <_printf_float+0x1ae>
 80087d2:	f1aa 0a02 	sub.w	sl, sl, #2
 80087d6:	fa5f fa8a 	uxtb.w	sl, sl
 80087da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80087de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e0:	d824      	bhi.n	800882c <_printf_float+0x178>
 80087e2:	3901      	subs	r1, #1
 80087e4:	4652      	mov	r2, sl
 80087e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087ea:	9109      	str	r1, [sp, #36]	; 0x24
 80087ec:	f7ff ff2f 	bl	800864e <__exponent>
 80087f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f2:	1813      	adds	r3, r2, r0
 80087f4:	2a01      	cmp	r2, #1
 80087f6:	4681      	mov	r9, r0
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	dc02      	bgt.n	8008802 <_printf_float+0x14e>
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	07d1      	lsls	r1, r2, #31
 8008800:	d501      	bpl.n	8008806 <_printf_float+0x152>
 8008802:	3301      	adds	r3, #1
 8008804:	6123      	str	r3, [r4, #16]
 8008806:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0a5      	beq.n	800875a <_printf_float+0xa6>
 800880e:	232d      	movs	r3, #45	; 0x2d
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	e7a1      	b.n	800875a <_printf_float+0xa6>
 8008816:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800881a:	f000 8177 	beq.w	8008b0c <_printf_float+0x458>
 800881e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008822:	d1bb      	bne.n	800879c <_printf_float+0xe8>
 8008824:	2900      	cmp	r1, #0
 8008826:	d1b9      	bne.n	800879c <_printf_float+0xe8>
 8008828:	2301      	movs	r3, #1
 800882a:	e7b6      	b.n	800879a <_printf_float+0xe6>
 800882c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008830:	d119      	bne.n	8008866 <_printf_float+0x1b2>
 8008832:	2900      	cmp	r1, #0
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	dd0c      	ble.n	8008852 <_printf_float+0x19e>
 8008838:	6121      	str	r1, [r4, #16]
 800883a:	b913      	cbnz	r3, 8008842 <_printf_float+0x18e>
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	07d2      	lsls	r2, r2, #31
 8008840:	d502      	bpl.n	8008848 <_printf_float+0x194>
 8008842:	3301      	adds	r3, #1
 8008844:	440b      	add	r3, r1
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800884a:	65a3      	str	r3, [r4, #88]	; 0x58
 800884c:	f04f 0900 	mov.w	r9, #0
 8008850:	e7d9      	b.n	8008806 <_printf_float+0x152>
 8008852:	b913      	cbnz	r3, 800885a <_printf_float+0x1a6>
 8008854:	6822      	ldr	r2, [r4, #0]
 8008856:	07d0      	lsls	r0, r2, #31
 8008858:	d501      	bpl.n	800885e <_printf_float+0x1aa>
 800885a:	3302      	adds	r3, #2
 800885c:	e7f3      	b.n	8008846 <_printf_float+0x192>
 800885e:	2301      	movs	r3, #1
 8008860:	e7f1      	b.n	8008846 <_printf_float+0x192>
 8008862:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008866:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800886a:	4293      	cmp	r3, r2
 800886c:	db05      	blt.n	800887a <_printf_float+0x1c6>
 800886e:	6822      	ldr	r2, [r4, #0]
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	07d1      	lsls	r1, r2, #31
 8008874:	d5e8      	bpl.n	8008848 <_printf_float+0x194>
 8008876:	3301      	adds	r3, #1
 8008878:	e7e5      	b.n	8008846 <_printf_float+0x192>
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfd4      	ite	le
 800887e:	f1c3 0302 	rsble	r3, r3, #2
 8008882:	2301      	movgt	r3, #1
 8008884:	4413      	add	r3, r2
 8008886:	e7de      	b.n	8008846 <_printf_float+0x192>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	055a      	lsls	r2, r3, #21
 800888c:	d407      	bmi.n	800889e <_printf_float+0x1ea>
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	4642      	mov	r2, r8
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	d12b      	bne.n	80088f4 <_printf_float+0x240>
 800889c:	e767      	b.n	800876e <_printf_float+0xba>
 800889e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088a2:	f240 80dc 	bls.w	8008a5e <_printf_float+0x3aa>
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ae:	f7f8 f933 	bl	8000b18 <__aeabi_dcmpeq>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d033      	beq.n	800891e <_printf_float+0x26a>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4a41      	ldr	r2, [pc, #260]	; (80089c0 <_printf_float+0x30c>)
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	f43f af54 	beq.w	800876e <_printf_float+0xba>
 80088c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ca:	429a      	cmp	r2, r3
 80088cc:	db02      	blt.n	80088d4 <_printf_float+0x220>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	07d8      	lsls	r0, r3, #31
 80088d2:	d50f      	bpl.n	80088f4 <_printf_float+0x240>
 80088d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f af45 	beq.w	800876e <_printf_float+0xba>
 80088e4:	f04f 0800 	mov.w	r8, #0
 80088e8:	f104 091a 	add.w	r9, r4, #26
 80088ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ee:	3b01      	subs	r3, #1
 80088f0:	4543      	cmp	r3, r8
 80088f2:	dc09      	bgt.n	8008908 <_printf_float+0x254>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	079b      	lsls	r3, r3, #30
 80088f8:	f100 8103 	bmi.w	8008b02 <_printf_float+0x44e>
 80088fc:	68e0      	ldr	r0, [r4, #12]
 80088fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008900:	4298      	cmp	r0, r3
 8008902:	bfb8      	it	lt
 8008904:	4618      	movlt	r0, r3
 8008906:	e734      	b.n	8008772 <_printf_float+0xbe>
 8008908:	2301      	movs	r3, #1
 800890a:	464a      	mov	r2, r9
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f af2b 	beq.w	800876e <_printf_float+0xba>
 8008918:	f108 0801 	add.w	r8, r8, #1
 800891c:	e7e6      	b.n	80088ec <_printf_float+0x238>
 800891e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008920:	2b00      	cmp	r3, #0
 8008922:	dc2b      	bgt.n	800897c <_printf_float+0x2c8>
 8008924:	2301      	movs	r3, #1
 8008926:	4a26      	ldr	r2, [pc, #152]	; (80089c0 <_printf_float+0x30c>)
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af1d 	beq.w	800876e <_printf_float+0xba>
 8008934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008936:	b923      	cbnz	r3, 8008942 <_printf_float+0x28e>
 8008938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893a:	b913      	cbnz	r3, 8008942 <_printf_float+0x28e>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d5d8      	bpl.n	80088f4 <_printf_float+0x240>
 8008942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	f43f af0e 	beq.w	800876e <_printf_float+0xba>
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	f104 0a1a 	add.w	sl, r4, #26
 800895a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895c:	425b      	negs	r3, r3
 800895e:	454b      	cmp	r3, r9
 8008960:	dc01      	bgt.n	8008966 <_printf_float+0x2b2>
 8008962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008964:	e794      	b.n	8008890 <_printf_float+0x1dc>
 8008966:	2301      	movs	r3, #1
 8008968:	4652      	mov	r2, sl
 800896a:	4631      	mov	r1, r6
 800896c:	4628      	mov	r0, r5
 800896e:	47b8      	blx	r7
 8008970:	3001      	adds	r0, #1
 8008972:	f43f aefc 	beq.w	800876e <_printf_float+0xba>
 8008976:	f109 0901 	add.w	r9, r9, #1
 800897a:	e7ee      	b.n	800895a <_printf_float+0x2a6>
 800897c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800897e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008980:	429a      	cmp	r2, r3
 8008982:	bfa8      	it	ge
 8008984:	461a      	movge	r2, r3
 8008986:	2a00      	cmp	r2, #0
 8008988:	4691      	mov	r9, r2
 800898a:	dd07      	ble.n	800899c <_printf_float+0x2e8>
 800898c:	4613      	mov	r3, r2
 800898e:	4631      	mov	r1, r6
 8008990:	4642      	mov	r2, r8
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	f43f aee9 	beq.w	800876e <_printf_float+0xba>
 800899c:	f104 031a 	add.w	r3, r4, #26
 80089a0:	f04f 0b00 	mov.w	fp, #0
 80089a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	e015      	b.n	80089d8 <_printf_float+0x324>
 80089ac:	7fefffff 	.word	0x7fefffff
 80089b0:	0800bb45 	.word	0x0800bb45
 80089b4:	0800bb41 	.word	0x0800bb41
 80089b8:	0800bb4d 	.word	0x0800bb4d
 80089bc:	0800bb49 	.word	0x0800bb49
 80089c0:	0800bb51 	.word	0x0800bb51
 80089c4:	2301      	movs	r3, #1
 80089c6:	9a06      	ldr	r2, [sp, #24]
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f aecd 	beq.w	800876e <_printf_float+0xba>
 80089d4:	f10b 0b01 	add.w	fp, fp, #1
 80089d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80089dc:	ebaa 0309 	sub.w	r3, sl, r9
 80089e0:	455b      	cmp	r3, fp
 80089e2:	dcef      	bgt.n	80089c4 <_printf_float+0x310>
 80089e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089e8:	429a      	cmp	r2, r3
 80089ea:	44d0      	add	r8, sl
 80089ec:	db15      	blt.n	8008a1a <_printf_float+0x366>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	07da      	lsls	r2, r3, #31
 80089f2:	d412      	bmi.n	8008a1a <_printf_float+0x366>
 80089f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089f8:	eba3 020a 	sub.w	r2, r3, sl
 80089fc:	eba3 0a01 	sub.w	sl, r3, r1
 8008a00:	4592      	cmp	sl, r2
 8008a02:	bfa8      	it	ge
 8008a04:	4692      	movge	sl, r2
 8008a06:	f1ba 0f00 	cmp.w	sl, #0
 8008a0a:	dc0e      	bgt.n	8008a2a <_printf_float+0x376>
 8008a0c:	f04f 0800 	mov.w	r8, #0
 8008a10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a14:	f104 091a 	add.w	r9, r4, #26
 8008a18:	e019      	b.n	8008a4e <_printf_float+0x39a>
 8008a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4628      	mov	r0, r5
 8008a22:	47b8      	blx	r7
 8008a24:	3001      	adds	r0, #1
 8008a26:	d1e5      	bne.n	80089f4 <_printf_float+0x340>
 8008a28:	e6a1      	b.n	800876e <_printf_float+0xba>
 8008a2a:	4653      	mov	r3, sl
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	d1e9      	bne.n	8008a0c <_printf_float+0x358>
 8008a38:	e699      	b.n	800876e <_printf_float+0xba>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	464a      	mov	r2, r9
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	f43f ae92 	beq.w	800876e <_printf_float+0xba>
 8008a4a:	f108 0801 	add.w	r8, r8, #1
 8008a4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a52:	1a9b      	subs	r3, r3, r2
 8008a54:	eba3 030a 	sub.w	r3, r3, sl
 8008a58:	4543      	cmp	r3, r8
 8008a5a:	dcee      	bgt.n	8008a3a <_printf_float+0x386>
 8008a5c:	e74a      	b.n	80088f4 <_printf_float+0x240>
 8008a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a60:	2a01      	cmp	r2, #1
 8008a62:	dc01      	bgt.n	8008a68 <_printf_float+0x3b4>
 8008a64:	07db      	lsls	r3, r3, #31
 8008a66:	d53a      	bpl.n	8008ade <_printf_float+0x42a>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	f43f ae7b 	beq.w	800876e <_printf_float+0xba>
 8008a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f108 0801 	add.w	r8, r8, #1
 8008a88:	f43f ae71 	beq.w	800876e <_printf_float+0xba>
 8008a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f103 3aff 	add.w	sl, r3, #4294967295
 8008a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a98:	2300      	movs	r3, #0
 8008a9a:	f7f8 f83d 	bl	8000b18 <__aeabi_dcmpeq>
 8008a9e:	b9c8      	cbnz	r0, 8008ad4 <_printf_float+0x420>
 8008aa0:	4653      	mov	r3, sl
 8008aa2:	4642      	mov	r2, r8
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d10e      	bne.n	8008acc <_printf_float+0x418>
 8008aae:	e65e      	b.n	800876e <_printf_float+0xba>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f ae57 	beq.w	800876e <_printf_float+0xba>
 8008ac0:	f108 0801 	add.w	r8, r8, #1
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	4543      	cmp	r3, r8
 8008aca:	dcf1      	bgt.n	8008ab0 <_printf_float+0x3fc>
 8008acc:	464b      	mov	r3, r9
 8008ace:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ad2:	e6de      	b.n	8008892 <_printf_float+0x1de>
 8008ad4:	f04f 0800 	mov.w	r8, #0
 8008ad8:	f104 0a1a 	add.w	sl, r4, #26
 8008adc:	e7f2      	b.n	8008ac4 <_printf_float+0x410>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e7df      	b.n	8008aa2 <_printf_float+0x3ee>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	464a      	mov	r2, r9
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4628      	mov	r0, r5
 8008aea:	47b8      	blx	r7
 8008aec:	3001      	adds	r0, #1
 8008aee:	f43f ae3e 	beq.w	800876e <_printf_float+0xba>
 8008af2:	f108 0801 	add.w	r8, r8, #1
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	4543      	cmp	r3, r8
 8008afe:	dcf0      	bgt.n	8008ae2 <_printf_float+0x42e>
 8008b00:	e6fc      	b.n	80088fc <_printf_float+0x248>
 8008b02:	f04f 0800 	mov.w	r8, #0
 8008b06:	f104 0919 	add.w	r9, r4, #25
 8008b0a:	e7f4      	b.n	8008af6 <_printf_float+0x442>
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	f43f ae8b 	beq.w	8008828 <_printf_float+0x174>
 8008b12:	2300      	movs	r3, #0
 8008b14:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b18:	ab09      	add	r3, sp, #36	; 0x24
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	ec49 8b10 	vmov	d0, r8, r9
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	f8cd a004 	str.w	sl, [sp, #4]
 8008b26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f7ff fd2e 	bl	800858c <__cvt>
 8008b30:	4680      	mov	r8, r0
 8008b32:	e648      	b.n	80087c6 <_printf_float+0x112>

08008b34 <_printf_common>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	4691      	mov	r9, r2
 8008b3a:	461f      	mov	r7, r3
 8008b3c:	688a      	ldr	r2, [r1, #8]
 8008b3e:	690b      	ldr	r3, [r1, #16]
 8008b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b44:	4293      	cmp	r3, r2
 8008b46:	bfb8      	it	lt
 8008b48:	4613      	movlt	r3, r2
 8008b4a:	f8c9 3000 	str.w	r3, [r9]
 8008b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b52:	4606      	mov	r6, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	b112      	cbz	r2, 8008b5e <_printf_common+0x2a>
 8008b58:	3301      	adds	r3, #1
 8008b5a:	f8c9 3000 	str.w	r3, [r9]
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	0699      	lsls	r1, r3, #26
 8008b62:	bf42      	ittt	mi
 8008b64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b68:	3302      	addmi	r3, #2
 8008b6a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b6e:	6825      	ldr	r5, [r4, #0]
 8008b70:	f015 0506 	ands.w	r5, r5, #6
 8008b74:	d107      	bne.n	8008b86 <_printf_common+0x52>
 8008b76:	f104 0a19 	add.w	sl, r4, #25
 8008b7a:	68e3      	ldr	r3, [r4, #12]
 8008b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	42ab      	cmp	r3, r5
 8008b84:	dc28      	bgt.n	8008bd8 <_printf_common+0xa4>
 8008b86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	3300      	adds	r3, #0
 8008b8e:	bf18      	it	ne
 8008b90:	2301      	movne	r3, #1
 8008b92:	0692      	lsls	r2, r2, #26
 8008b94:	d42d      	bmi.n	8008bf2 <_printf_common+0xbe>
 8008b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	47c0      	blx	r8
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d020      	beq.n	8008be6 <_printf_common+0xb2>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	68e5      	ldr	r5, [r4, #12]
 8008ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bac:	f003 0306 	and.w	r3, r3, #6
 8008bb0:	2b04      	cmp	r3, #4
 8008bb2:	bf08      	it	eq
 8008bb4:	1aad      	subeq	r5, r5, r2
 8008bb6:	68a3      	ldr	r3, [r4, #8]
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	bf0c      	ite	eq
 8008bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bc0:	2500      	movne	r5, #0
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	bfc4      	itt	gt
 8008bc6:	1a9b      	subgt	r3, r3, r2
 8008bc8:	18ed      	addgt	r5, r5, r3
 8008bca:	f04f 0900 	mov.w	r9, #0
 8008bce:	341a      	adds	r4, #26
 8008bd0:	454d      	cmp	r5, r9
 8008bd2:	d11a      	bne.n	8008c0a <_printf_common+0xd6>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e008      	b.n	8008bea <_printf_common+0xb6>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4652      	mov	r2, sl
 8008bdc:	4639      	mov	r1, r7
 8008bde:	4630      	mov	r0, r6
 8008be0:	47c0      	blx	r8
 8008be2:	3001      	adds	r0, #1
 8008be4:	d103      	bne.n	8008bee <_printf_common+0xba>
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bee:	3501      	adds	r5, #1
 8008bf0:	e7c3      	b.n	8008b7a <_printf_common+0x46>
 8008bf2:	18e1      	adds	r1, r4, r3
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	2030      	movs	r0, #48	; 0x30
 8008bf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bfc:	4422      	add	r2, r4
 8008bfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c06:	3302      	adds	r3, #2
 8008c08:	e7c5      	b.n	8008b96 <_printf_common+0x62>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4630      	mov	r0, r6
 8008c12:	47c0      	blx	r8
 8008c14:	3001      	adds	r0, #1
 8008c16:	d0e6      	beq.n	8008be6 <_printf_common+0xb2>
 8008c18:	f109 0901 	add.w	r9, r9, #1
 8008c1c:	e7d8      	b.n	8008bd0 <_printf_common+0x9c>
	...

08008c20 <_printf_i>:
 8008c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c28:	460c      	mov	r4, r1
 8008c2a:	7e09      	ldrb	r1, [r1, #24]
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	296e      	cmp	r1, #110	; 0x6e
 8008c30:	4617      	mov	r7, r2
 8008c32:	4606      	mov	r6, r0
 8008c34:	4698      	mov	r8, r3
 8008c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c38:	f000 80b3 	beq.w	8008da2 <_printf_i+0x182>
 8008c3c:	d822      	bhi.n	8008c84 <_printf_i+0x64>
 8008c3e:	2963      	cmp	r1, #99	; 0x63
 8008c40:	d036      	beq.n	8008cb0 <_printf_i+0x90>
 8008c42:	d80a      	bhi.n	8008c5a <_printf_i+0x3a>
 8008c44:	2900      	cmp	r1, #0
 8008c46:	f000 80b9 	beq.w	8008dbc <_printf_i+0x19c>
 8008c4a:	2958      	cmp	r1, #88	; 0x58
 8008c4c:	f000 8083 	beq.w	8008d56 <_printf_i+0x136>
 8008c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c58:	e032      	b.n	8008cc0 <_printf_i+0xa0>
 8008c5a:	2964      	cmp	r1, #100	; 0x64
 8008c5c:	d001      	beq.n	8008c62 <_printf_i+0x42>
 8008c5e:	2969      	cmp	r1, #105	; 0x69
 8008c60:	d1f6      	bne.n	8008c50 <_printf_i+0x30>
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	6813      	ldr	r3, [r2, #0]
 8008c66:	0605      	lsls	r5, r0, #24
 8008c68:	f103 0104 	add.w	r1, r3, #4
 8008c6c:	d52a      	bpl.n	8008cc4 <_printf_i+0xa4>
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6011      	str	r1, [r2, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da03      	bge.n	8008c7e <_printf_i+0x5e>
 8008c76:	222d      	movs	r2, #45	; 0x2d
 8008c78:	425b      	negs	r3, r3
 8008c7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c7e:	486f      	ldr	r0, [pc, #444]	; (8008e3c <_printf_i+0x21c>)
 8008c80:	220a      	movs	r2, #10
 8008c82:	e039      	b.n	8008cf8 <_printf_i+0xd8>
 8008c84:	2973      	cmp	r1, #115	; 0x73
 8008c86:	f000 809d 	beq.w	8008dc4 <_printf_i+0x1a4>
 8008c8a:	d808      	bhi.n	8008c9e <_printf_i+0x7e>
 8008c8c:	296f      	cmp	r1, #111	; 0x6f
 8008c8e:	d020      	beq.n	8008cd2 <_printf_i+0xb2>
 8008c90:	2970      	cmp	r1, #112	; 0x70
 8008c92:	d1dd      	bne.n	8008c50 <_printf_i+0x30>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	f043 0320 	orr.w	r3, r3, #32
 8008c9a:	6023      	str	r3, [r4, #0]
 8008c9c:	e003      	b.n	8008ca6 <_printf_i+0x86>
 8008c9e:	2975      	cmp	r1, #117	; 0x75
 8008ca0:	d017      	beq.n	8008cd2 <_printf_i+0xb2>
 8008ca2:	2978      	cmp	r1, #120	; 0x78
 8008ca4:	d1d4      	bne.n	8008c50 <_printf_i+0x30>
 8008ca6:	2378      	movs	r3, #120	; 0x78
 8008ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cac:	4864      	ldr	r0, [pc, #400]	; (8008e40 <_printf_i+0x220>)
 8008cae:	e055      	b.n	8008d5c <_printf_i+0x13c>
 8008cb0:	6813      	ldr	r3, [r2, #0]
 8008cb2:	1d19      	adds	r1, r3, #4
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6011      	str	r1, [r2, #0]
 8008cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e08c      	b.n	8008dde <_printf_i+0x1be>
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6011      	str	r1, [r2, #0]
 8008cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ccc:	bf18      	it	ne
 8008cce:	b21b      	sxthne	r3, r3
 8008cd0:	e7cf      	b.n	8008c72 <_printf_i+0x52>
 8008cd2:	6813      	ldr	r3, [r2, #0]
 8008cd4:	6825      	ldr	r5, [r4, #0]
 8008cd6:	1d18      	adds	r0, r3, #4
 8008cd8:	6010      	str	r0, [r2, #0]
 8008cda:	0628      	lsls	r0, r5, #24
 8008cdc:	d501      	bpl.n	8008ce2 <_printf_i+0xc2>
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	e002      	b.n	8008ce8 <_printf_i+0xc8>
 8008ce2:	0668      	lsls	r0, r5, #25
 8008ce4:	d5fb      	bpl.n	8008cde <_printf_i+0xbe>
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	4854      	ldr	r0, [pc, #336]	; (8008e3c <_printf_i+0x21c>)
 8008cea:	296f      	cmp	r1, #111	; 0x6f
 8008cec:	bf14      	ite	ne
 8008cee:	220a      	movne	r2, #10
 8008cf0:	2208      	moveq	r2, #8
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf8:	6865      	ldr	r5, [r4, #4]
 8008cfa:	60a5      	str	r5, [r4, #8]
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	f2c0 8095 	blt.w	8008e2c <_printf_i+0x20c>
 8008d02:	6821      	ldr	r1, [r4, #0]
 8008d04:	f021 0104 	bic.w	r1, r1, #4
 8008d08:	6021      	str	r1, [r4, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d13d      	bne.n	8008d8a <_printf_i+0x16a>
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	f040 808e 	bne.w	8008e30 <_printf_i+0x210>
 8008d14:	4665      	mov	r5, ip
 8008d16:	2a08      	cmp	r2, #8
 8008d18:	d10b      	bne.n	8008d32 <_printf_i+0x112>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	07db      	lsls	r3, r3, #31
 8008d1e:	d508      	bpl.n	8008d32 <_printf_i+0x112>
 8008d20:	6923      	ldr	r3, [r4, #16]
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	bfde      	ittt	le
 8008d28:	2330      	movle	r3, #48	; 0x30
 8008d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d32:	ebac 0305 	sub.w	r3, ip, r5
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	f8cd 8000 	str.w	r8, [sp]
 8008d3c:	463b      	mov	r3, r7
 8008d3e:	aa03      	add	r2, sp, #12
 8008d40:	4621      	mov	r1, r4
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7ff fef6 	bl	8008b34 <_printf_common>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d14d      	bne.n	8008de8 <_printf_i+0x1c8>
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	b005      	add	sp, #20
 8008d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d56:	4839      	ldr	r0, [pc, #228]	; (8008e3c <_printf_i+0x21c>)
 8008d58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d5c:	6813      	ldr	r3, [r2, #0]
 8008d5e:	6821      	ldr	r1, [r4, #0]
 8008d60:	1d1d      	adds	r5, r3, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6015      	str	r5, [r2, #0]
 8008d66:	060a      	lsls	r2, r1, #24
 8008d68:	d50b      	bpl.n	8008d82 <_printf_i+0x162>
 8008d6a:	07ca      	lsls	r2, r1, #31
 8008d6c:	bf44      	itt	mi
 8008d6e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d72:	6021      	strmi	r1, [r4, #0]
 8008d74:	b91b      	cbnz	r3, 8008d7e <_printf_i+0x15e>
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	f022 0220 	bic.w	r2, r2, #32
 8008d7c:	6022      	str	r2, [r4, #0]
 8008d7e:	2210      	movs	r2, #16
 8008d80:	e7b7      	b.n	8008cf2 <_printf_i+0xd2>
 8008d82:	064d      	lsls	r5, r1, #25
 8008d84:	bf48      	it	mi
 8008d86:	b29b      	uxthmi	r3, r3
 8008d88:	e7ef      	b.n	8008d6a <_printf_i+0x14a>
 8008d8a:	4665      	mov	r5, ip
 8008d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d90:	fb02 3311 	mls	r3, r2, r1, r3
 8008d94:	5cc3      	ldrb	r3, [r0, r3]
 8008d96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	d1f5      	bne.n	8008d8c <_printf_i+0x16c>
 8008da0:	e7b9      	b.n	8008d16 <_printf_i+0xf6>
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	6825      	ldr	r5, [r4, #0]
 8008da6:	6961      	ldr	r1, [r4, #20]
 8008da8:	1d18      	adds	r0, r3, #4
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	0628      	lsls	r0, r5, #24
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	d501      	bpl.n	8008db6 <_printf_i+0x196>
 8008db2:	6019      	str	r1, [r3, #0]
 8008db4:	e002      	b.n	8008dbc <_printf_i+0x19c>
 8008db6:	066a      	lsls	r2, r5, #25
 8008db8:	d5fb      	bpl.n	8008db2 <_printf_i+0x192>
 8008dba:	8019      	strh	r1, [r3, #0]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	4665      	mov	r5, ip
 8008dc2:	e7b9      	b.n	8008d38 <_printf_i+0x118>
 8008dc4:	6813      	ldr	r3, [r2, #0]
 8008dc6:	1d19      	adds	r1, r3, #4
 8008dc8:	6011      	str	r1, [r2, #0]
 8008dca:	681d      	ldr	r5, [r3, #0]
 8008dcc:	6862      	ldr	r2, [r4, #4]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7f7 fa2d 	bl	8000230 <memchr>
 8008dd6:	b108      	cbz	r0, 8008ddc <_printf_i+0x1bc>
 8008dd8:	1b40      	subs	r0, r0, r5
 8008dda:	6060      	str	r0, [r4, #4]
 8008ddc:	6863      	ldr	r3, [r4, #4]
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	2300      	movs	r3, #0
 8008de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008de6:	e7a7      	b.n	8008d38 <_printf_i+0x118>
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	462a      	mov	r2, r5
 8008dec:	4639      	mov	r1, r7
 8008dee:	4630      	mov	r0, r6
 8008df0:	47c0      	blx	r8
 8008df2:	3001      	adds	r0, #1
 8008df4:	d0aa      	beq.n	8008d4c <_printf_i+0x12c>
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	079b      	lsls	r3, r3, #30
 8008dfa:	d413      	bmi.n	8008e24 <_printf_i+0x204>
 8008dfc:	68e0      	ldr	r0, [r4, #12]
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	4298      	cmp	r0, r3
 8008e02:	bfb8      	it	lt
 8008e04:	4618      	movlt	r0, r3
 8008e06:	e7a3      	b.n	8008d50 <_printf_i+0x130>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	464a      	mov	r2, r9
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4630      	mov	r0, r6
 8008e10:	47c0      	blx	r8
 8008e12:	3001      	adds	r0, #1
 8008e14:	d09a      	beq.n	8008d4c <_printf_i+0x12c>
 8008e16:	3501      	adds	r5, #1
 8008e18:	68e3      	ldr	r3, [r4, #12]
 8008e1a:	9a03      	ldr	r2, [sp, #12]
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	42ab      	cmp	r3, r5
 8008e20:	dcf2      	bgt.n	8008e08 <_printf_i+0x1e8>
 8008e22:	e7eb      	b.n	8008dfc <_printf_i+0x1dc>
 8008e24:	2500      	movs	r5, #0
 8008e26:	f104 0919 	add.w	r9, r4, #25
 8008e2a:	e7f5      	b.n	8008e18 <_printf_i+0x1f8>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1ac      	bne.n	8008d8a <_printf_i+0x16a>
 8008e30:	7803      	ldrb	r3, [r0, #0]
 8008e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e3a:	e76c      	b.n	8008d16 <_printf_i+0xf6>
 8008e3c:	0800bb53 	.word	0x0800bb53
 8008e40:	0800bb64 	.word	0x0800bb64

08008e44 <iprintf>:
 8008e44:	b40f      	push	{r0, r1, r2, r3}
 8008e46:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <iprintf+0x2c>)
 8008e48:	b513      	push	{r0, r1, r4, lr}
 8008e4a:	681c      	ldr	r4, [r3, #0]
 8008e4c:	b124      	cbz	r4, 8008e58 <iprintf+0x14>
 8008e4e:	69a3      	ldr	r3, [r4, #24]
 8008e50:	b913      	cbnz	r3, 8008e58 <iprintf+0x14>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f001 f8b8 	bl	8009fc8 <__sinit>
 8008e58:	ab05      	add	r3, sp, #20
 8008e5a:	9a04      	ldr	r2, [sp, #16]
 8008e5c:	68a1      	ldr	r1, [r4, #8]
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	4620      	mov	r0, r4
 8008e62:	f7ff fa7d 	bl	8008360 <_vfiprintf_r>
 8008e66:	b002      	add	sp, #8
 8008e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e6c:	b004      	add	sp, #16
 8008e6e:	4770      	bx	lr
 8008e70:	2000000c 	.word	0x2000000c

08008e74 <_puts_r>:
 8008e74:	b570      	push	{r4, r5, r6, lr}
 8008e76:	460e      	mov	r6, r1
 8008e78:	4605      	mov	r5, r0
 8008e7a:	b118      	cbz	r0, 8008e84 <_puts_r+0x10>
 8008e7c:	6983      	ldr	r3, [r0, #24]
 8008e7e:	b90b      	cbnz	r3, 8008e84 <_puts_r+0x10>
 8008e80:	f001 f8a2 	bl	8009fc8 <__sinit>
 8008e84:	69ab      	ldr	r3, [r5, #24]
 8008e86:	68ac      	ldr	r4, [r5, #8]
 8008e88:	b913      	cbnz	r3, 8008e90 <_puts_r+0x1c>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f001 f89c 	bl	8009fc8 <__sinit>
 8008e90:	4b23      	ldr	r3, [pc, #140]	; (8008f20 <_puts_r+0xac>)
 8008e92:	429c      	cmp	r4, r3
 8008e94:	d117      	bne.n	8008ec6 <_puts_r+0x52>
 8008e96:	686c      	ldr	r4, [r5, #4]
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	071b      	lsls	r3, r3, #28
 8008e9c:	d51d      	bpl.n	8008eda <_puts_r+0x66>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	b1db      	cbz	r3, 8008eda <_puts_r+0x66>
 8008ea2:	3e01      	subs	r6, #1
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	b9e9      	cbnz	r1, 8008eec <_puts_r+0x78>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da2e      	bge.n	8008f12 <_puts_r+0x9e>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	210a      	movs	r1, #10
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f000 f889 	bl	8008fd0 <__swbuf_r>
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d011      	beq.n	8008ee6 <_puts_r+0x72>
 8008ec2:	200a      	movs	r0, #10
 8008ec4:	e011      	b.n	8008eea <_puts_r+0x76>
 8008ec6:	4b17      	ldr	r3, [pc, #92]	; (8008f24 <_puts_r+0xb0>)
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	d101      	bne.n	8008ed0 <_puts_r+0x5c>
 8008ecc:	68ac      	ldr	r4, [r5, #8]
 8008ece:	e7e3      	b.n	8008e98 <_puts_r+0x24>
 8008ed0:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <_puts_r+0xb4>)
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	bf08      	it	eq
 8008ed6:	68ec      	ldreq	r4, [r5, #12]
 8008ed8:	e7de      	b.n	8008e98 <_puts_r+0x24>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f000 f8c9 	bl	8009074 <__swsetup_r>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d0dd      	beq.n	8008ea2 <_puts_r+0x2e>
 8008ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	da04      	bge.n	8008efa <_puts_r+0x86>
 8008ef0:	69a2      	ldr	r2, [r4, #24]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	dc06      	bgt.n	8008f04 <_puts_r+0x90>
 8008ef6:	290a      	cmp	r1, #10
 8008ef8:	d004      	beq.n	8008f04 <_puts_r+0x90>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	7019      	strb	r1, [r3, #0]
 8008f02:	e7cf      	b.n	8008ea4 <_puts_r+0x30>
 8008f04:	4622      	mov	r2, r4
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 f862 	bl	8008fd0 <__swbuf_r>
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d1c9      	bne.n	8008ea4 <_puts_r+0x30>
 8008f10:	e7e9      	b.n	8008ee6 <_puts_r+0x72>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	200a      	movs	r0, #10
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	6022      	str	r2, [r4, #0]
 8008f1a:	7018      	strb	r0, [r3, #0]
 8008f1c:	e7e5      	b.n	8008eea <_puts_r+0x76>
 8008f1e:	bf00      	nop
 8008f20:	0800bba4 	.word	0x0800bba4
 8008f24:	0800bbc4 	.word	0x0800bbc4
 8008f28:	0800bb84 	.word	0x0800bb84

08008f2c <puts>:
 8008f2c:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <puts+0xc>)
 8008f2e:	4601      	mov	r1, r0
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	f7ff bf9f 	b.w	8008e74 <_puts_r>
 8008f36:	bf00      	nop
 8008f38:	2000000c 	.word	0x2000000c

08008f3c <_sbrk_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4c06      	ldr	r4, [pc, #24]	; (8008f58 <_sbrk_r+0x1c>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4605      	mov	r5, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	6023      	str	r3, [r4, #0]
 8008f48:	f7fa fb10 	bl	800356c <_sbrk>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_sbrk_r+0x1a>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_sbrk_r+0x1a>
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	20000c20 	.word	0x20000c20

08008f5c <siprintf>:
 8008f5c:	b40e      	push	{r1, r2, r3}
 8008f5e:	b500      	push	{lr}
 8008f60:	b09c      	sub	sp, #112	; 0x70
 8008f62:	ab1d      	add	r3, sp, #116	; 0x74
 8008f64:	9002      	str	r0, [sp, #8]
 8008f66:	9006      	str	r0, [sp, #24]
 8008f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f6c:	4809      	ldr	r0, [pc, #36]	; (8008f94 <siprintf+0x38>)
 8008f6e:	9107      	str	r1, [sp, #28]
 8008f70:	9104      	str	r1, [sp, #16]
 8008f72:	4909      	ldr	r1, [pc, #36]	; (8008f98 <siprintf+0x3c>)
 8008f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f78:	9105      	str	r1, [sp, #20]
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	9301      	str	r3, [sp, #4]
 8008f7e:	a902      	add	r1, sp, #8
 8008f80:	f001 fcc0 	bl	800a904 <_svfiprintf_r>
 8008f84:	9b02      	ldr	r3, [sp, #8]
 8008f86:	2200      	movs	r2, #0
 8008f88:	701a      	strb	r2, [r3, #0]
 8008f8a:	b01c      	add	sp, #112	; 0x70
 8008f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f90:	b003      	add	sp, #12
 8008f92:	4770      	bx	lr
 8008f94:	2000000c 	.word	0x2000000c
 8008f98:	ffff0208 	.word	0xffff0208

08008f9c <strstr>:
 8008f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9e:	7803      	ldrb	r3, [r0, #0]
 8008fa0:	b17b      	cbz	r3, 8008fc2 <strstr+0x26>
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	7823      	ldrb	r3, [r4, #0]
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	1c66      	adds	r6, r4, #1
 8008faa:	b17b      	cbz	r3, 8008fcc <strstr+0x30>
 8008fac:	1e4a      	subs	r2, r1, #1
 8008fae:	1e63      	subs	r3, r4, #1
 8008fb0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008fb4:	b14d      	cbz	r5, 8008fca <strstr+0x2e>
 8008fb6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008fba:	42af      	cmp	r7, r5
 8008fbc:	4634      	mov	r4, r6
 8008fbe:	d0f7      	beq.n	8008fb0 <strstr+0x14>
 8008fc0:	e7f0      	b.n	8008fa4 <strstr+0x8>
 8008fc2:	780b      	ldrb	r3, [r1, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bf18      	it	ne
 8008fc8:	2000      	movne	r0, #0
 8008fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	e7fc      	b.n	8008fca <strstr+0x2e>

08008fd0 <__swbuf_r>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	460e      	mov	r6, r1
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	b118      	cbz	r0, 8008fe2 <__swbuf_r+0x12>
 8008fda:	6983      	ldr	r3, [r0, #24]
 8008fdc:	b90b      	cbnz	r3, 8008fe2 <__swbuf_r+0x12>
 8008fde:	f000 fff3 	bl	8009fc8 <__sinit>
 8008fe2:	4b21      	ldr	r3, [pc, #132]	; (8009068 <__swbuf_r+0x98>)
 8008fe4:	429c      	cmp	r4, r3
 8008fe6:	d12a      	bne.n	800903e <__swbuf_r+0x6e>
 8008fe8:	686c      	ldr	r4, [r5, #4]
 8008fea:	69a3      	ldr	r3, [r4, #24]
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	071a      	lsls	r2, r3, #28
 8008ff2:	d52e      	bpl.n	8009052 <__swbuf_r+0x82>
 8008ff4:	6923      	ldr	r3, [r4, #16]
 8008ff6:	b363      	cbz	r3, 8009052 <__swbuf_r+0x82>
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	6820      	ldr	r0, [r4, #0]
 8008ffc:	1ac0      	subs	r0, r0, r3
 8008ffe:	6963      	ldr	r3, [r4, #20]
 8009000:	b2f6      	uxtb	r6, r6
 8009002:	4283      	cmp	r3, r0
 8009004:	4637      	mov	r7, r6
 8009006:	dc04      	bgt.n	8009012 <__swbuf_r+0x42>
 8009008:	4621      	mov	r1, r4
 800900a:	4628      	mov	r0, r5
 800900c:	f000 ff72 	bl	8009ef4 <_fflush_r>
 8009010:	bb28      	cbnz	r0, 800905e <__swbuf_r+0x8e>
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	3b01      	subs	r3, #1
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	6022      	str	r2, [r4, #0]
 800901e:	701e      	strb	r6, [r3, #0]
 8009020:	6963      	ldr	r3, [r4, #20]
 8009022:	3001      	adds	r0, #1
 8009024:	4283      	cmp	r3, r0
 8009026:	d004      	beq.n	8009032 <__swbuf_r+0x62>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	07db      	lsls	r3, r3, #31
 800902c:	d519      	bpl.n	8009062 <__swbuf_r+0x92>
 800902e:	2e0a      	cmp	r6, #10
 8009030:	d117      	bne.n	8009062 <__swbuf_r+0x92>
 8009032:	4621      	mov	r1, r4
 8009034:	4628      	mov	r0, r5
 8009036:	f000 ff5d 	bl	8009ef4 <_fflush_r>
 800903a:	b190      	cbz	r0, 8009062 <__swbuf_r+0x92>
 800903c:	e00f      	b.n	800905e <__swbuf_r+0x8e>
 800903e:	4b0b      	ldr	r3, [pc, #44]	; (800906c <__swbuf_r+0x9c>)
 8009040:	429c      	cmp	r4, r3
 8009042:	d101      	bne.n	8009048 <__swbuf_r+0x78>
 8009044:	68ac      	ldr	r4, [r5, #8]
 8009046:	e7d0      	b.n	8008fea <__swbuf_r+0x1a>
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <__swbuf_r+0xa0>)
 800904a:	429c      	cmp	r4, r3
 800904c:	bf08      	it	eq
 800904e:	68ec      	ldreq	r4, [r5, #12]
 8009050:	e7cb      	b.n	8008fea <__swbuf_r+0x1a>
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f80d 	bl	8009074 <__swsetup_r>
 800905a:	2800      	cmp	r0, #0
 800905c:	d0cc      	beq.n	8008ff8 <__swbuf_r+0x28>
 800905e:	f04f 37ff 	mov.w	r7, #4294967295
 8009062:	4638      	mov	r0, r7
 8009064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009066:	bf00      	nop
 8009068:	0800bba4 	.word	0x0800bba4
 800906c:	0800bbc4 	.word	0x0800bbc4
 8009070:	0800bb84 	.word	0x0800bb84

08009074 <__swsetup_r>:
 8009074:	4b32      	ldr	r3, [pc, #200]	; (8009140 <__swsetup_r+0xcc>)
 8009076:	b570      	push	{r4, r5, r6, lr}
 8009078:	681d      	ldr	r5, [r3, #0]
 800907a:	4606      	mov	r6, r0
 800907c:	460c      	mov	r4, r1
 800907e:	b125      	cbz	r5, 800908a <__swsetup_r+0x16>
 8009080:	69ab      	ldr	r3, [r5, #24]
 8009082:	b913      	cbnz	r3, 800908a <__swsetup_r+0x16>
 8009084:	4628      	mov	r0, r5
 8009086:	f000 ff9f 	bl	8009fc8 <__sinit>
 800908a:	4b2e      	ldr	r3, [pc, #184]	; (8009144 <__swsetup_r+0xd0>)
 800908c:	429c      	cmp	r4, r3
 800908e:	d10f      	bne.n	80090b0 <__swsetup_r+0x3c>
 8009090:	686c      	ldr	r4, [r5, #4]
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	b29a      	uxth	r2, r3
 8009098:	0715      	lsls	r5, r2, #28
 800909a:	d42c      	bmi.n	80090f6 <__swsetup_r+0x82>
 800909c:	06d0      	lsls	r0, r2, #27
 800909e:	d411      	bmi.n	80090c4 <__swsetup_r+0x50>
 80090a0:	2209      	movs	r2, #9
 80090a2:	6032      	str	r2, [r6, #0]
 80090a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	e03e      	b.n	800912e <__swsetup_r+0xba>
 80090b0:	4b25      	ldr	r3, [pc, #148]	; (8009148 <__swsetup_r+0xd4>)
 80090b2:	429c      	cmp	r4, r3
 80090b4:	d101      	bne.n	80090ba <__swsetup_r+0x46>
 80090b6:	68ac      	ldr	r4, [r5, #8]
 80090b8:	e7eb      	b.n	8009092 <__swsetup_r+0x1e>
 80090ba:	4b24      	ldr	r3, [pc, #144]	; (800914c <__swsetup_r+0xd8>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	bf08      	it	eq
 80090c0:	68ec      	ldreq	r4, [r5, #12]
 80090c2:	e7e6      	b.n	8009092 <__swsetup_r+0x1e>
 80090c4:	0751      	lsls	r1, r2, #29
 80090c6:	d512      	bpl.n	80090ee <__swsetup_r+0x7a>
 80090c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ca:	b141      	cbz	r1, 80090de <__swsetup_r+0x6a>
 80090cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090d0:	4299      	cmp	r1, r3
 80090d2:	d002      	beq.n	80090da <__swsetup_r+0x66>
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7ff f871 	bl	80081bc <_free_r>
 80090da:	2300      	movs	r3, #0
 80090dc:	6363      	str	r3, [r4, #52]	; 0x34
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090e4:	81a3      	strh	r3, [r4, #12]
 80090e6:	2300      	movs	r3, #0
 80090e8:	6063      	str	r3, [r4, #4]
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	f043 0308 	orr.w	r3, r3, #8
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	6923      	ldr	r3, [r4, #16]
 80090f8:	b94b      	cbnz	r3, 800910e <__swsetup_r+0x9a>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009104:	d003      	beq.n	800910e <__swsetup_r+0x9a>
 8009106:	4621      	mov	r1, r4
 8009108:	4630      	mov	r0, r6
 800910a:	f001 f819 	bl	800a140 <__smakebuf_r>
 800910e:	89a2      	ldrh	r2, [r4, #12]
 8009110:	f012 0301 	ands.w	r3, r2, #1
 8009114:	d00c      	beq.n	8009130 <__swsetup_r+0xbc>
 8009116:	2300      	movs	r3, #0
 8009118:	60a3      	str	r3, [r4, #8]
 800911a:	6963      	ldr	r3, [r4, #20]
 800911c:	425b      	negs	r3, r3
 800911e:	61a3      	str	r3, [r4, #24]
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	b953      	cbnz	r3, 800913a <__swsetup_r+0xc6>
 8009124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009128:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800912c:	d1ba      	bne.n	80090a4 <__swsetup_r+0x30>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	0792      	lsls	r2, r2, #30
 8009132:	bf58      	it	pl
 8009134:	6963      	ldrpl	r3, [r4, #20]
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	e7f2      	b.n	8009120 <__swsetup_r+0xac>
 800913a:	2000      	movs	r0, #0
 800913c:	e7f7      	b.n	800912e <__swsetup_r+0xba>
 800913e:	bf00      	nop
 8009140:	2000000c 	.word	0x2000000c
 8009144:	0800bba4 	.word	0x0800bba4
 8009148:	0800bbc4 	.word	0x0800bbc4
 800914c:	0800bb84 	.word	0x0800bb84

08009150 <abort>:
 8009150:	b508      	push	{r3, lr}
 8009152:	2006      	movs	r0, #6
 8009154:	f001 fcf6 	bl	800ab44 <raise>
 8009158:	2001      	movs	r0, #1
 800915a:	f7fa f990 	bl	800347e <_exit>

0800915e <quorem>:
 800915e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009162:	6903      	ldr	r3, [r0, #16]
 8009164:	690c      	ldr	r4, [r1, #16]
 8009166:	42a3      	cmp	r3, r4
 8009168:	4680      	mov	r8, r0
 800916a:	f2c0 8082 	blt.w	8009272 <quorem+0x114>
 800916e:	3c01      	subs	r4, #1
 8009170:	f101 0714 	add.w	r7, r1, #20
 8009174:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009178:	f100 0614 	add.w	r6, r0, #20
 800917c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009180:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009184:	eb06 030c 	add.w	r3, r6, ip
 8009188:	3501      	adds	r5, #1
 800918a:	eb07 090c 	add.w	r9, r7, ip
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	fbb0 f5f5 	udiv	r5, r0, r5
 8009194:	b395      	cbz	r5, 80091fc <quorem+0x9e>
 8009196:	f04f 0a00 	mov.w	sl, #0
 800919a:	4638      	mov	r0, r7
 800919c:	46b6      	mov	lr, r6
 800919e:	46d3      	mov	fp, sl
 80091a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80091a4:	b293      	uxth	r3, r2
 80091a6:	fb05 a303 	mla	r3, r5, r3, sl
 80091aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	ebab 0303 	sub.w	r3, fp, r3
 80091b4:	0c12      	lsrs	r2, r2, #16
 80091b6:	f8de b000 	ldr.w	fp, [lr]
 80091ba:	fb05 a202 	mla	r2, r5, r2, sl
 80091be:	fa13 f38b 	uxtah	r3, r3, fp
 80091c2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80091c6:	fa1f fb82 	uxth.w	fp, r2
 80091ca:	f8de 2000 	ldr.w	r2, [lr]
 80091ce:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80091d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091dc:	4581      	cmp	r9, r0
 80091de:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80091e2:	f84e 3b04 	str.w	r3, [lr], #4
 80091e6:	d2db      	bcs.n	80091a0 <quorem+0x42>
 80091e8:	f856 300c 	ldr.w	r3, [r6, ip]
 80091ec:	b933      	cbnz	r3, 80091fc <quorem+0x9e>
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	3b04      	subs	r3, #4
 80091f2:	429e      	cmp	r6, r3
 80091f4:	461a      	mov	r2, r3
 80091f6:	d330      	bcc.n	800925a <quorem+0xfc>
 80091f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80091fc:	4640      	mov	r0, r8
 80091fe:	f001 fa2d 	bl	800a65c <__mcmp>
 8009202:	2800      	cmp	r0, #0
 8009204:	db25      	blt.n	8009252 <quorem+0xf4>
 8009206:	3501      	adds	r5, #1
 8009208:	4630      	mov	r0, r6
 800920a:	f04f 0c00 	mov.w	ip, #0
 800920e:	f857 2b04 	ldr.w	r2, [r7], #4
 8009212:	f8d0 e000 	ldr.w	lr, [r0]
 8009216:	b293      	uxth	r3, r2
 8009218:	ebac 0303 	sub.w	r3, ip, r3
 800921c:	0c12      	lsrs	r2, r2, #16
 800921e:	fa13 f38e 	uxtah	r3, r3, lr
 8009222:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009226:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800922a:	b29b      	uxth	r3, r3
 800922c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009230:	45b9      	cmp	r9, r7
 8009232:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009236:	f840 3b04 	str.w	r3, [r0], #4
 800923a:	d2e8      	bcs.n	800920e <quorem+0xb0>
 800923c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009240:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009244:	b92a      	cbnz	r2, 8009252 <quorem+0xf4>
 8009246:	3b04      	subs	r3, #4
 8009248:	429e      	cmp	r6, r3
 800924a:	461a      	mov	r2, r3
 800924c:	d30b      	bcc.n	8009266 <quorem+0x108>
 800924e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009252:	4628      	mov	r0, r5
 8009254:	b003      	add	sp, #12
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	6812      	ldr	r2, [r2, #0]
 800925c:	3b04      	subs	r3, #4
 800925e:	2a00      	cmp	r2, #0
 8009260:	d1ca      	bne.n	80091f8 <quorem+0x9a>
 8009262:	3c01      	subs	r4, #1
 8009264:	e7c5      	b.n	80091f2 <quorem+0x94>
 8009266:	6812      	ldr	r2, [r2, #0]
 8009268:	3b04      	subs	r3, #4
 800926a:	2a00      	cmp	r2, #0
 800926c:	d1ef      	bne.n	800924e <quorem+0xf0>
 800926e:	3c01      	subs	r4, #1
 8009270:	e7ea      	b.n	8009248 <quorem+0xea>
 8009272:	2000      	movs	r0, #0
 8009274:	e7ee      	b.n	8009254 <quorem+0xf6>
	...

08009278 <_dtoa_r>:
 8009278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	ec57 6b10 	vmov	r6, r7, d0
 8009280:	b097      	sub	sp, #92	; 0x5c
 8009282:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009284:	9106      	str	r1, [sp, #24]
 8009286:	4604      	mov	r4, r0
 8009288:	920b      	str	r2, [sp, #44]	; 0x2c
 800928a:	9312      	str	r3, [sp, #72]	; 0x48
 800928c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009290:	e9cd 6700 	strd	r6, r7, [sp]
 8009294:	b93d      	cbnz	r5, 80092a6 <_dtoa_r+0x2e>
 8009296:	2010      	movs	r0, #16
 8009298:	f7fe ff80 	bl	800819c <malloc>
 800929c:	6260      	str	r0, [r4, #36]	; 0x24
 800929e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092a2:	6005      	str	r5, [r0, #0]
 80092a4:	60c5      	str	r5, [r0, #12]
 80092a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092a8:	6819      	ldr	r1, [r3, #0]
 80092aa:	b151      	cbz	r1, 80092c2 <_dtoa_r+0x4a>
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	604a      	str	r2, [r1, #4]
 80092b0:	2301      	movs	r3, #1
 80092b2:	4093      	lsls	r3, r2
 80092b4:	608b      	str	r3, [r1, #8]
 80092b6:	4620      	mov	r0, r4
 80092b8:	f000 ffee 	bl	800a298 <_Bfree>
 80092bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	1e3b      	subs	r3, r7, #0
 80092c4:	bfbb      	ittet	lt
 80092c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092ca:	9301      	strlt	r3, [sp, #4]
 80092cc:	2300      	movge	r3, #0
 80092ce:	2201      	movlt	r2, #1
 80092d0:	bfac      	ite	ge
 80092d2:	f8c8 3000 	strge.w	r3, [r8]
 80092d6:	f8c8 2000 	strlt.w	r2, [r8]
 80092da:	4baf      	ldr	r3, [pc, #700]	; (8009598 <_dtoa_r+0x320>)
 80092dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092e0:	ea33 0308 	bics.w	r3, r3, r8
 80092e4:	d114      	bne.n	8009310 <_dtoa_r+0x98>
 80092e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	9b00      	ldr	r3, [sp, #0]
 80092f0:	b923      	cbnz	r3, 80092fc <_dtoa_r+0x84>
 80092f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f000 8542 	beq.w	8009d80 <_dtoa_r+0xb08>
 80092fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80095ac <_dtoa_r+0x334>
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8544 	beq.w	8009d90 <_dtoa_r+0xb18>
 8009308:	f10b 0303 	add.w	r3, fp, #3
 800930c:	f000 bd3e 	b.w	8009d8c <_dtoa_r+0xb14>
 8009310:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009314:	2200      	movs	r2, #0
 8009316:	2300      	movs	r3, #0
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f7 fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 8009320:	4681      	mov	r9, r0
 8009322:	b168      	cbz	r0, 8009340 <_dtoa_r+0xc8>
 8009324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009326:	2301      	movs	r3, #1
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8524 	beq.w	8009d7a <_dtoa_r+0xb02>
 8009332:	4b9a      	ldr	r3, [pc, #616]	; (800959c <_dtoa_r+0x324>)
 8009334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009336:	f103 3bff 	add.w	fp, r3, #4294967295
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	f000 bd28 	b.w	8009d90 <_dtoa_r+0xb18>
 8009340:	aa14      	add	r2, sp, #80	; 0x50
 8009342:	a915      	add	r1, sp, #84	; 0x54
 8009344:	ec47 6b10 	vmov	d0, r6, r7
 8009348:	4620      	mov	r0, r4
 800934a:	f001 f9fe 	bl	800a74a <__d2b>
 800934e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009352:	9004      	str	r0, [sp, #16]
 8009354:	2d00      	cmp	r5, #0
 8009356:	d07c      	beq.n	8009452 <_dtoa_r+0x1da>
 8009358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800935c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009360:	46b2      	mov	sl, r6
 8009362:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800936a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800936e:	2200      	movs	r2, #0
 8009370:	4b8b      	ldr	r3, [pc, #556]	; (80095a0 <_dtoa_r+0x328>)
 8009372:	4650      	mov	r0, sl
 8009374:	4659      	mov	r1, fp
 8009376:	f7f6 ffaf 	bl	80002d8 <__aeabi_dsub>
 800937a:	a381      	add	r3, pc, #516	; (adr r3, 8009580 <_dtoa_r+0x308>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	f7f7 f962 	bl	8000648 <__aeabi_dmul>
 8009384:	a380      	add	r3, pc, #512	; (adr r3, 8009588 <_dtoa_r+0x310>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ffa7 	bl	80002dc <__adddf3>
 800938e:	4606      	mov	r6, r0
 8009390:	4628      	mov	r0, r5
 8009392:	460f      	mov	r7, r1
 8009394:	f7f7 f8ee 	bl	8000574 <__aeabi_i2d>
 8009398:	a37d      	add	r3, pc, #500	; (adr r3, 8009590 <_dtoa_r+0x318>)
 800939a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939e:	f7f7 f953 	bl	8000648 <__aeabi_dmul>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f6 ff97 	bl	80002dc <__adddf3>
 80093ae:	4606      	mov	r6, r0
 80093b0:	460f      	mov	r7, r1
 80093b2:	f7f7 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 80093b6:	2200      	movs	r2, #0
 80093b8:	4682      	mov	sl, r0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4630      	mov	r0, r6
 80093be:	4639      	mov	r1, r7
 80093c0:	f7f7 fbb4 	bl	8000b2c <__aeabi_dcmplt>
 80093c4:	b148      	cbz	r0, 80093da <_dtoa_r+0x162>
 80093c6:	4650      	mov	r0, sl
 80093c8:	f7f7 f8d4 	bl	8000574 <__aeabi_i2d>
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	f7f7 fba2 	bl	8000b18 <__aeabi_dcmpeq>
 80093d4:	b908      	cbnz	r0, 80093da <_dtoa_r+0x162>
 80093d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093da:	f1ba 0f16 	cmp.w	sl, #22
 80093de:	d859      	bhi.n	8009494 <_dtoa_r+0x21c>
 80093e0:	4970      	ldr	r1, [pc, #448]	; (80095a4 <_dtoa_r+0x32c>)
 80093e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80093e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ee:	f7f7 fbbb 	bl	8000b68 <__aeabi_dcmpgt>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d050      	beq.n	8009498 <_dtoa_r+0x220>
 80093f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093fa:	2300      	movs	r3, #0
 80093fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80093fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009400:	1b5d      	subs	r5, r3, r5
 8009402:	f1b5 0801 	subs.w	r8, r5, #1
 8009406:	bf49      	itett	mi
 8009408:	f1c5 0301 	rsbmi	r3, r5, #1
 800940c:	2300      	movpl	r3, #0
 800940e:	9305      	strmi	r3, [sp, #20]
 8009410:	f04f 0800 	movmi.w	r8, #0
 8009414:	bf58      	it	pl
 8009416:	9305      	strpl	r3, [sp, #20]
 8009418:	f1ba 0f00 	cmp.w	sl, #0
 800941c:	db3e      	blt.n	800949c <_dtoa_r+0x224>
 800941e:	2300      	movs	r3, #0
 8009420:	44d0      	add	r8, sl
 8009422:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009426:	9307      	str	r3, [sp, #28]
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	2b09      	cmp	r3, #9
 800942c:	f200 8090 	bhi.w	8009550 <_dtoa_r+0x2d8>
 8009430:	2b05      	cmp	r3, #5
 8009432:	bfc4      	itt	gt
 8009434:	3b04      	subgt	r3, #4
 8009436:	9306      	strgt	r3, [sp, #24]
 8009438:	9b06      	ldr	r3, [sp, #24]
 800943a:	f1a3 0302 	sub.w	r3, r3, #2
 800943e:	bfcc      	ite	gt
 8009440:	2500      	movgt	r5, #0
 8009442:	2501      	movle	r5, #1
 8009444:	2b03      	cmp	r3, #3
 8009446:	f200 808f 	bhi.w	8009568 <_dtoa_r+0x2f0>
 800944a:	e8df f003 	tbb	[pc, r3]
 800944e:	7f7d      	.short	0x7f7d
 8009450:	7131      	.short	0x7131
 8009452:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009456:	441d      	add	r5, r3
 8009458:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800945c:	2820      	cmp	r0, #32
 800945e:	dd13      	ble.n	8009488 <_dtoa_r+0x210>
 8009460:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	fa08 f800 	lsl.w	r8, r8, r0
 800946a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800946e:	fa23 f000 	lsr.w	r0, r3, r0
 8009472:	ea48 0000 	orr.w	r0, r8, r0
 8009476:	f7f7 f86d 	bl	8000554 <__aeabi_ui2d>
 800947a:	2301      	movs	r3, #1
 800947c:	4682      	mov	sl, r0
 800947e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009482:	3d01      	subs	r5, #1
 8009484:	9313      	str	r3, [sp, #76]	; 0x4c
 8009486:	e772      	b.n	800936e <_dtoa_r+0xf6>
 8009488:	9b00      	ldr	r3, [sp, #0]
 800948a:	f1c0 0020 	rsb	r0, r0, #32
 800948e:	fa03 f000 	lsl.w	r0, r3, r0
 8009492:	e7f0      	b.n	8009476 <_dtoa_r+0x1fe>
 8009494:	2301      	movs	r3, #1
 8009496:	e7b1      	b.n	80093fc <_dtoa_r+0x184>
 8009498:	900f      	str	r0, [sp, #60]	; 0x3c
 800949a:	e7b0      	b.n	80093fe <_dtoa_r+0x186>
 800949c:	9b05      	ldr	r3, [sp, #20]
 800949e:	eba3 030a 	sub.w	r3, r3, sl
 80094a2:	9305      	str	r3, [sp, #20]
 80094a4:	f1ca 0300 	rsb	r3, sl, #0
 80094a8:	9307      	str	r3, [sp, #28]
 80094aa:	2300      	movs	r3, #0
 80094ac:	930e      	str	r3, [sp, #56]	; 0x38
 80094ae:	e7bb      	b.n	8009428 <_dtoa_r+0x1b0>
 80094b0:	2301      	movs	r3, #1
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	dd59      	ble.n	800956e <_dtoa_r+0x2f6>
 80094ba:	9302      	str	r3, [sp, #8]
 80094bc:	4699      	mov	r9, r3
 80094be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094c0:	2200      	movs	r2, #0
 80094c2:	6072      	str	r2, [r6, #4]
 80094c4:	2204      	movs	r2, #4
 80094c6:	f102 0014 	add.w	r0, r2, #20
 80094ca:	4298      	cmp	r0, r3
 80094cc:	6871      	ldr	r1, [r6, #4]
 80094ce:	d953      	bls.n	8009578 <_dtoa_r+0x300>
 80094d0:	4620      	mov	r0, r4
 80094d2:	f000 fead 	bl	800a230 <_Balloc>
 80094d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094d8:	6030      	str	r0, [r6, #0]
 80094da:	f1b9 0f0e 	cmp.w	r9, #14
 80094de:	f8d3 b000 	ldr.w	fp, [r3]
 80094e2:	f200 80e6 	bhi.w	80096b2 <_dtoa_r+0x43a>
 80094e6:	2d00      	cmp	r5, #0
 80094e8:	f000 80e3 	beq.w	80096b2 <_dtoa_r+0x43a>
 80094ec:	ed9d 7b00 	vldr	d7, [sp]
 80094f0:	f1ba 0f00 	cmp.w	sl, #0
 80094f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80094f8:	dd74      	ble.n	80095e4 <_dtoa_r+0x36c>
 80094fa:	4a2a      	ldr	r2, [pc, #168]	; (80095a4 <_dtoa_r+0x32c>)
 80094fc:	f00a 030f 	and.w	r3, sl, #15
 8009500:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009504:	ed93 7b00 	vldr	d7, [r3]
 8009508:	ea4f 162a 	mov.w	r6, sl, asr #4
 800950c:	06f0      	lsls	r0, r6, #27
 800950e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009512:	d565      	bpl.n	80095e0 <_dtoa_r+0x368>
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <_dtoa_r+0x330>)
 8009516:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800951a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800951e:	f7f7 f9bd 	bl	800089c <__aeabi_ddiv>
 8009522:	e9cd 0100 	strd	r0, r1, [sp]
 8009526:	f006 060f 	and.w	r6, r6, #15
 800952a:	2503      	movs	r5, #3
 800952c:	4f1e      	ldr	r7, [pc, #120]	; (80095a8 <_dtoa_r+0x330>)
 800952e:	e04c      	b.n	80095ca <_dtoa_r+0x352>
 8009530:	2301      	movs	r3, #1
 8009532:	930a      	str	r3, [sp, #40]	; 0x28
 8009534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009536:	4453      	add	r3, sl
 8009538:	f103 0901 	add.w	r9, r3, #1
 800953c:	9302      	str	r3, [sp, #8]
 800953e:	464b      	mov	r3, r9
 8009540:	2b01      	cmp	r3, #1
 8009542:	bfb8      	it	lt
 8009544:	2301      	movlt	r3, #1
 8009546:	e7ba      	b.n	80094be <_dtoa_r+0x246>
 8009548:	2300      	movs	r3, #0
 800954a:	e7b2      	b.n	80094b2 <_dtoa_r+0x23a>
 800954c:	2300      	movs	r3, #0
 800954e:	e7f0      	b.n	8009532 <_dtoa_r+0x2ba>
 8009550:	2501      	movs	r5, #1
 8009552:	2300      	movs	r3, #0
 8009554:	9306      	str	r3, [sp, #24]
 8009556:	950a      	str	r5, [sp, #40]	; 0x28
 8009558:	f04f 33ff 	mov.w	r3, #4294967295
 800955c:	9302      	str	r3, [sp, #8]
 800955e:	4699      	mov	r9, r3
 8009560:	2200      	movs	r2, #0
 8009562:	2312      	movs	r3, #18
 8009564:	920b      	str	r2, [sp, #44]	; 0x2c
 8009566:	e7aa      	b.n	80094be <_dtoa_r+0x246>
 8009568:	2301      	movs	r3, #1
 800956a:	930a      	str	r3, [sp, #40]	; 0x28
 800956c:	e7f4      	b.n	8009558 <_dtoa_r+0x2e0>
 800956e:	2301      	movs	r3, #1
 8009570:	9302      	str	r3, [sp, #8]
 8009572:	4699      	mov	r9, r3
 8009574:	461a      	mov	r2, r3
 8009576:	e7f5      	b.n	8009564 <_dtoa_r+0x2ec>
 8009578:	3101      	adds	r1, #1
 800957a:	6071      	str	r1, [r6, #4]
 800957c:	0052      	lsls	r2, r2, #1
 800957e:	e7a2      	b.n	80094c6 <_dtoa_r+0x24e>
 8009580:	636f4361 	.word	0x636f4361
 8009584:	3fd287a7 	.word	0x3fd287a7
 8009588:	8b60c8b3 	.word	0x8b60c8b3
 800958c:	3fc68a28 	.word	0x3fc68a28
 8009590:	509f79fb 	.word	0x509f79fb
 8009594:	3fd34413 	.word	0x3fd34413
 8009598:	7ff00000 	.word	0x7ff00000
 800959c:	0800bb52 	.word	0x0800bb52
 80095a0:	3ff80000 	.word	0x3ff80000
 80095a4:	0800bc18 	.word	0x0800bc18
 80095a8:	0800bbf0 	.word	0x0800bbf0
 80095ac:	0800bb7e 	.word	0x0800bb7e
 80095b0:	07f1      	lsls	r1, r6, #31
 80095b2:	d508      	bpl.n	80095c6 <_dtoa_r+0x34e>
 80095b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095bc:	f7f7 f844 	bl	8000648 <__aeabi_dmul>
 80095c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095c4:	3501      	adds	r5, #1
 80095c6:	1076      	asrs	r6, r6, #1
 80095c8:	3708      	adds	r7, #8
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	d1f0      	bne.n	80095b0 <_dtoa_r+0x338>
 80095ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095d6:	f7f7 f961 	bl	800089c <__aeabi_ddiv>
 80095da:	e9cd 0100 	strd	r0, r1, [sp]
 80095de:	e01a      	b.n	8009616 <_dtoa_r+0x39e>
 80095e0:	2502      	movs	r5, #2
 80095e2:	e7a3      	b.n	800952c <_dtoa_r+0x2b4>
 80095e4:	f000 80a0 	beq.w	8009728 <_dtoa_r+0x4b0>
 80095e8:	f1ca 0600 	rsb	r6, sl, #0
 80095ec:	4b9f      	ldr	r3, [pc, #636]	; (800986c <_dtoa_r+0x5f4>)
 80095ee:	4fa0      	ldr	r7, [pc, #640]	; (8009870 <_dtoa_r+0x5f8>)
 80095f0:	f006 020f 	and.w	r2, r6, #15
 80095f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009600:	f7f7 f822 	bl	8000648 <__aeabi_dmul>
 8009604:	e9cd 0100 	strd	r0, r1, [sp]
 8009608:	1136      	asrs	r6, r6, #4
 800960a:	2300      	movs	r3, #0
 800960c:	2502      	movs	r5, #2
 800960e:	2e00      	cmp	r6, #0
 8009610:	d17f      	bne.n	8009712 <_dtoa_r+0x49a>
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1e1      	bne.n	80095da <_dtoa_r+0x362>
 8009616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8087 	beq.w	800972c <_dtoa_r+0x4b4>
 800961e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009622:	2200      	movs	r2, #0
 8009624:	4b93      	ldr	r3, [pc, #588]	; (8009874 <_dtoa_r+0x5fc>)
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	f7f7 fa7f 	bl	8000b2c <__aeabi_dcmplt>
 800962e:	2800      	cmp	r0, #0
 8009630:	d07c      	beq.n	800972c <_dtoa_r+0x4b4>
 8009632:	f1b9 0f00 	cmp.w	r9, #0
 8009636:	d079      	beq.n	800972c <_dtoa_r+0x4b4>
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dd35      	ble.n	80096aa <_dtoa_r+0x432>
 800963e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009642:	9308      	str	r3, [sp, #32]
 8009644:	4639      	mov	r1, r7
 8009646:	2200      	movs	r2, #0
 8009648:	4b8b      	ldr	r3, [pc, #556]	; (8009878 <_dtoa_r+0x600>)
 800964a:	4630      	mov	r0, r6
 800964c:	f7f6 fffc 	bl	8000648 <__aeabi_dmul>
 8009650:	e9cd 0100 	strd	r0, r1, [sp]
 8009654:	9f02      	ldr	r7, [sp, #8]
 8009656:	3501      	adds	r5, #1
 8009658:	4628      	mov	r0, r5
 800965a:	f7f6 ff8b 	bl	8000574 <__aeabi_i2d>
 800965e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009662:	f7f6 fff1 	bl	8000648 <__aeabi_dmul>
 8009666:	2200      	movs	r2, #0
 8009668:	4b84      	ldr	r3, [pc, #528]	; (800987c <_dtoa_r+0x604>)
 800966a:	f7f6 fe37 	bl	80002dc <__adddf3>
 800966e:	4605      	mov	r5, r0
 8009670:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009674:	2f00      	cmp	r7, #0
 8009676:	d15d      	bne.n	8009734 <_dtoa_r+0x4bc>
 8009678:	2200      	movs	r2, #0
 800967a:	4b81      	ldr	r3, [pc, #516]	; (8009880 <_dtoa_r+0x608>)
 800967c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009680:	f7f6 fe2a 	bl	80002d8 <__aeabi_dsub>
 8009684:	462a      	mov	r2, r5
 8009686:	4633      	mov	r3, r6
 8009688:	e9cd 0100 	strd	r0, r1, [sp]
 800968c:	f7f7 fa6c 	bl	8000b68 <__aeabi_dcmpgt>
 8009690:	2800      	cmp	r0, #0
 8009692:	f040 8288 	bne.w	8009ba6 <_dtoa_r+0x92e>
 8009696:	462a      	mov	r2, r5
 8009698:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800969c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096a0:	f7f7 fa44 	bl	8000b2c <__aeabi_dcmplt>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f040 827c 	bne.w	8009ba2 <_dtoa_r+0x92a>
 80096aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096ae:	e9cd 2300 	strd	r2, r3, [sp]
 80096b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f2c0 8150 	blt.w	800995a <_dtoa_r+0x6e2>
 80096ba:	f1ba 0f0e 	cmp.w	sl, #14
 80096be:	f300 814c 	bgt.w	800995a <_dtoa_r+0x6e2>
 80096c2:	4b6a      	ldr	r3, [pc, #424]	; (800986c <_dtoa_r+0x5f4>)
 80096c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096c8:	ed93 7b00 	vldr	d7, [r3]
 80096cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096d4:	f280 80d8 	bge.w	8009888 <_dtoa_r+0x610>
 80096d8:	f1b9 0f00 	cmp.w	r9, #0
 80096dc:	f300 80d4 	bgt.w	8009888 <_dtoa_r+0x610>
 80096e0:	f040 825e 	bne.w	8009ba0 <_dtoa_r+0x928>
 80096e4:	2200      	movs	r2, #0
 80096e6:	4b66      	ldr	r3, [pc, #408]	; (8009880 <_dtoa_r+0x608>)
 80096e8:	ec51 0b17 	vmov	r0, r1, d7
 80096ec:	f7f6 ffac 	bl	8000648 <__aeabi_dmul>
 80096f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096f4:	f7f7 fa2e 	bl	8000b54 <__aeabi_dcmpge>
 80096f8:	464f      	mov	r7, r9
 80096fa:	464e      	mov	r6, r9
 80096fc:	2800      	cmp	r0, #0
 80096fe:	f040 8234 	bne.w	8009b6a <_dtoa_r+0x8f2>
 8009702:	2331      	movs	r3, #49	; 0x31
 8009704:	f10b 0501 	add.w	r5, fp, #1
 8009708:	f88b 3000 	strb.w	r3, [fp]
 800970c:	f10a 0a01 	add.w	sl, sl, #1
 8009710:	e22f      	b.n	8009b72 <_dtoa_r+0x8fa>
 8009712:	07f2      	lsls	r2, r6, #31
 8009714:	d505      	bpl.n	8009722 <_dtoa_r+0x4aa>
 8009716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800971a:	f7f6 ff95 	bl	8000648 <__aeabi_dmul>
 800971e:	3501      	adds	r5, #1
 8009720:	2301      	movs	r3, #1
 8009722:	1076      	asrs	r6, r6, #1
 8009724:	3708      	adds	r7, #8
 8009726:	e772      	b.n	800960e <_dtoa_r+0x396>
 8009728:	2502      	movs	r5, #2
 800972a:	e774      	b.n	8009616 <_dtoa_r+0x39e>
 800972c:	f8cd a020 	str.w	sl, [sp, #32]
 8009730:	464f      	mov	r7, r9
 8009732:	e791      	b.n	8009658 <_dtoa_r+0x3e0>
 8009734:	4b4d      	ldr	r3, [pc, #308]	; (800986c <_dtoa_r+0x5f4>)
 8009736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800973a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800973e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	d047      	beq.n	80097d4 <_dtoa_r+0x55c>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	2000      	movs	r0, #0
 800974a:	494e      	ldr	r1, [pc, #312]	; (8009884 <_dtoa_r+0x60c>)
 800974c:	f7f7 f8a6 	bl	800089c <__aeabi_ddiv>
 8009750:	462a      	mov	r2, r5
 8009752:	4633      	mov	r3, r6
 8009754:	f7f6 fdc0 	bl	80002d8 <__aeabi_dsub>
 8009758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800975c:	465d      	mov	r5, fp
 800975e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009762:	f7f7 fa21 	bl	8000ba8 <__aeabi_d2iz>
 8009766:	4606      	mov	r6, r0
 8009768:	f7f6 ff04 	bl	8000574 <__aeabi_i2d>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009774:	f7f6 fdb0 	bl	80002d8 <__aeabi_dsub>
 8009778:	3630      	adds	r6, #48	; 0x30
 800977a:	f805 6b01 	strb.w	r6, [r5], #1
 800977e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009782:	e9cd 0100 	strd	r0, r1, [sp]
 8009786:	f7f7 f9d1 	bl	8000b2c <__aeabi_dcmplt>
 800978a:	2800      	cmp	r0, #0
 800978c:	d163      	bne.n	8009856 <_dtoa_r+0x5de>
 800978e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009792:	2000      	movs	r0, #0
 8009794:	4937      	ldr	r1, [pc, #220]	; (8009874 <_dtoa_r+0x5fc>)
 8009796:	f7f6 fd9f 	bl	80002d8 <__aeabi_dsub>
 800979a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800979e:	f7f7 f9c5 	bl	8000b2c <__aeabi_dcmplt>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f040 80b7 	bne.w	8009916 <_dtoa_r+0x69e>
 80097a8:	eba5 030b 	sub.w	r3, r5, fp
 80097ac:	429f      	cmp	r7, r3
 80097ae:	f77f af7c 	ble.w	80096aa <_dtoa_r+0x432>
 80097b2:	2200      	movs	r2, #0
 80097b4:	4b30      	ldr	r3, [pc, #192]	; (8009878 <_dtoa_r+0x600>)
 80097b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097ba:	f7f6 ff45 	bl	8000648 <__aeabi_dmul>
 80097be:	2200      	movs	r2, #0
 80097c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097c4:	4b2c      	ldr	r3, [pc, #176]	; (8009878 <_dtoa_r+0x600>)
 80097c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ca:	f7f6 ff3d 	bl	8000648 <__aeabi_dmul>
 80097ce:	e9cd 0100 	strd	r0, r1, [sp]
 80097d2:	e7c4      	b.n	800975e <_dtoa_r+0x4e6>
 80097d4:	462a      	mov	r2, r5
 80097d6:	4633      	mov	r3, r6
 80097d8:	f7f6 ff36 	bl	8000648 <__aeabi_dmul>
 80097dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097e0:	eb0b 0507 	add.w	r5, fp, r7
 80097e4:	465e      	mov	r6, fp
 80097e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ea:	f7f7 f9dd 	bl	8000ba8 <__aeabi_d2iz>
 80097ee:	4607      	mov	r7, r0
 80097f0:	f7f6 fec0 	bl	8000574 <__aeabi_i2d>
 80097f4:	3730      	adds	r7, #48	; 0x30
 80097f6:	4602      	mov	r2, r0
 80097f8:	460b      	mov	r3, r1
 80097fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097fe:	f7f6 fd6b 	bl	80002d8 <__aeabi_dsub>
 8009802:	f806 7b01 	strb.w	r7, [r6], #1
 8009806:	42ae      	cmp	r6, r5
 8009808:	e9cd 0100 	strd	r0, r1, [sp]
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	d126      	bne.n	8009860 <_dtoa_r+0x5e8>
 8009812:	4b1c      	ldr	r3, [pc, #112]	; (8009884 <_dtoa_r+0x60c>)
 8009814:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009818:	f7f6 fd60 	bl	80002dc <__adddf3>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009824:	f7f7 f9a0 	bl	8000b68 <__aeabi_dcmpgt>
 8009828:	2800      	cmp	r0, #0
 800982a:	d174      	bne.n	8009916 <_dtoa_r+0x69e>
 800982c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009830:	2000      	movs	r0, #0
 8009832:	4914      	ldr	r1, [pc, #80]	; (8009884 <_dtoa_r+0x60c>)
 8009834:	f7f6 fd50 	bl	80002d8 <__aeabi_dsub>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009840:	f7f7 f974 	bl	8000b2c <__aeabi_dcmplt>
 8009844:	2800      	cmp	r0, #0
 8009846:	f43f af30 	beq.w	80096aa <_dtoa_r+0x432>
 800984a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800984e:	2b30      	cmp	r3, #48	; 0x30
 8009850:	f105 32ff 	add.w	r2, r5, #4294967295
 8009854:	d002      	beq.n	800985c <_dtoa_r+0x5e4>
 8009856:	f8dd a020 	ldr.w	sl, [sp, #32]
 800985a:	e04a      	b.n	80098f2 <_dtoa_r+0x67a>
 800985c:	4615      	mov	r5, r2
 800985e:	e7f4      	b.n	800984a <_dtoa_r+0x5d2>
 8009860:	4b05      	ldr	r3, [pc, #20]	; (8009878 <_dtoa_r+0x600>)
 8009862:	f7f6 fef1 	bl	8000648 <__aeabi_dmul>
 8009866:	e9cd 0100 	strd	r0, r1, [sp]
 800986a:	e7bc      	b.n	80097e6 <_dtoa_r+0x56e>
 800986c:	0800bc18 	.word	0x0800bc18
 8009870:	0800bbf0 	.word	0x0800bbf0
 8009874:	3ff00000 	.word	0x3ff00000
 8009878:	40240000 	.word	0x40240000
 800987c:	401c0000 	.word	0x401c0000
 8009880:	40140000 	.word	0x40140000
 8009884:	3fe00000 	.word	0x3fe00000
 8009888:	e9dd 6700 	ldrd	r6, r7, [sp]
 800988c:	465d      	mov	r5, fp
 800988e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f7 f801 	bl	800089c <__aeabi_ddiv>
 800989a:	f7f7 f985 	bl	8000ba8 <__aeabi_d2iz>
 800989e:	4680      	mov	r8, r0
 80098a0:	f7f6 fe68 	bl	8000574 <__aeabi_i2d>
 80098a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a8:	f7f6 fece 	bl	8000648 <__aeabi_dmul>
 80098ac:	4602      	mov	r2, r0
 80098ae:	460b      	mov	r3, r1
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80098b8:	f7f6 fd0e 	bl	80002d8 <__aeabi_dsub>
 80098bc:	f805 6b01 	strb.w	r6, [r5], #1
 80098c0:	eba5 060b 	sub.w	r6, r5, fp
 80098c4:	45b1      	cmp	r9, r6
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	d139      	bne.n	8009940 <_dtoa_r+0x6c8>
 80098cc:	f7f6 fd06 	bl	80002dc <__adddf3>
 80098d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d4:	4606      	mov	r6, r0
 80098d6:	460f      	mov	r7, r1
 80098d8:	f7f7 f946 	bl	8000b68 <__aeabi_dcmpgt>
 80098dc:	b9c8      	cbnz	r0, 8009912 <_dtoa_r+0x69a>
 80098de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f7 f917 	bl	8000b18 <__aeabi_dcmpeq>
 80098ea:	b110      	cbz	r0, 80098f2 <_dtoa_r+0x67a>
 80098ec:	f018 0f01 	tst.w	r8, #1
 80098f0:	d10f      	bne.n	8009912 <_dtoa_r+0x69a>
 80098f2:	9904      	ldr	r1, [sp, #16]
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 fccf 	bl	800a298 <_Bfree>
 80098fa:	2300      	movs	r3, #0
 80098fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098fe:	702b      	strb	r3, [r5, #0]
 8009900:	f10a 0301 	add.w	r3, sl, #1
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8241 	beq.w	8009d90 <_dtoa_r+0xb18>
 800990e:	601d      	str	r5, [r3, #0]
 8009910:	e23e      	b.n	8009d90 <_dtoa_r+0xb18>
 8009912:	f8cd a020 	str.w	sl, [sp, #32]
 8009916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800991a:	2a39      	cmp	r2, #57	; 0x39
 800991c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009920:	d108      	bne.n	8009934 <_dtoa_r+0x6bc>
 8009922:	459b      	cmp	fp, r3
 8009924:	d10a      	bne.n	800993c <_dtoa_r+0x6c4>
 8009926:	9b08      	ldr	r3, [sp, #32]
 8009928:	3301      	adds	r3, #1
 800992a:	9308      	str	r3, [sp, #32]
 800992c:	2330      	movs	r3, #48	; 0x30
 800992e:	f88b 3000 	strb.w	r3, [fp]
 8009932:	465b      	mov	r3, fp
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	3201      	adds	r2, #1
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e78c      	b.n	8009856 <_dtoa_r+0x5de>
 800993c:	461d      	mov	r5, r3
 800993e:	e7ea      	b.n	8009916 <_dtoa_r+0x69e>
 8009940:	2200      	movs	r2, #0
 8009942:	4b9b      	ldr	r3, [pc, #620]	; (8009bb0 <_dtoa_r+0x938>)
 8009944:	f7f6 fe80 	bl	8000648 <__aeabi_dmul>
 8009948:	2200      	movs	r2, #0
 800994a:	2300      	movs	r3, #0
 800994c:	4606      	mov	r6, r0
 800994e:	460f      	mov	r7, r1
 8009950:	f7f7 f8e2 	bl	8000b18 <__aeabi_dcmpeq>
 8009954:	2800      	cmp	r0, #0
 8009956:	d09a      	beq.n	800988e <_dtoa_r+0x616>
 8009958:	e7cb      	b.n	80098f2 <_dtoa_r+0x67a>
 800995a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800995c:	2a00      	cmp	r2, #0
 800995e:	f000 808b 	beq.w	8009a78 <_dtoa_r+0x800>
 8009962:	9a06      	ldr	r2, [sp, #24]
 8009964:	2a01      	cmp	r2, #1
 8009966:	dc6e      	bgt.n	8009a46 <_dtoa_r+0x7ce>
 8009968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800996a:	2a00      	cmp	r2, #0
 800996c:	d067      	beq.n	8009a3e <_dtoa_r+0x7c6>
 800996e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009972:	9f07      	ldr	r7, [sp, #28]
 8009974:	9d05      	ldr	r5, [sp, #20]
 8009976:	9a05      	ldr	r2, [sp, #20]
 8009978:	2101      	movs	r1, #1
 800997a:	441a      	add	r2, r3
 800997c:	4620      	mov	r0, r4
 800997e:	9205      	str	r2, [sp, #20]
 8009980:	4498      	add	r8, r3
 8009982:	f000 fd29 	bl	800a3d8 <__i2b>
 8009986:	4606      	mov	r6, r0
 8009988:	2d00      	cmp	r5, #0
 800998a:	dd0c      	ble.n	80099a6 <_dtoa_r+0x72e>
 800998c:	f1b8 0f00 	cmp.w	r8, #0
 8009990:	dd09      	ble.n	80099a6 <_dtoa_r+0x72e>
 8009992:	4545      	cmp	r5, r8
 8009994:	9a05      	ldr	r2, [sp, #20]
 8009996:	462b      	mov	r3, r5
 8009998:	bfa8      	it	ge
 800999a:	4643      	movge	r3, r8
 800999c:	1ad2      	subs	r2, r2, r3
 800999e:	9205      	str	r2, [sp, #20]
 80099a0:	1aed      	subs	r5, r5, r3
 80099a2:	eba8 0803 	sub.w	r8, r8, r3
 80099a6:	9b07      	ldr	r3, [sp, #28]
 80099a8:	b1eb      	cbz	r3, 80099e6 <_dtoa_r+0x76e>
 80099aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d067      	beq.n	8009a80 <_dtoa_r+0x808>
 80099b0:	b18f      	cbz	r7, 80099d6 <_dtoa_r+0x75e>
 80099b2:	4631      	mov	r1, r6
 80099b4:	463a      	mov	r2, r7
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 fdae 	bl	800a518 <__pow5mult>
 80099bc:	9a04      	ldr	r2, [sp, #16]
 80099be:	4601      	mov	r1, r0
 80099c0:	4606      	mov	r6, r0
 80099c2:	4620      	mov	r0, r4
 80099c4:	f000 fd11 	bl	800a3ea <__multiply>
 80099c8:	9904      	ldr	r1, [sp, #16]
 80099ca:	9008      	str	r0, [sp, #32]
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fc63 	bl	800a298 <_Bfree>
 80099d2:	9b08      	ldr	r3, [sp, #32]
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	9b07      	ldr	r3, [sp, #28]
 80099d8:	1bda      	subs	r2, r3, r7
 80099da:	d004      	beq.n	80099e6 <_dtoa_r+0x76e>
 80099dc:	9904      	ldr	r1, [sp, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 fd9a 	bl	800a518 <__pow5mult>
 80099e4:	9004      	str	r0, [sp, #16]
 80099e6:	2101      	movs	r1, #1
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fcf5 	bl	800a3d8 <__i2b>
 80099ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099f0:	4607      	mov	r7, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 81d0 	beq.w	8009d98 <_dtoa_r+0xb20>
 80099f8:	461a      	mov	r2, r3
 80099fa:	4601      	mov	r1, r0
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fd8b 	bl	800a518 <__pow5mult>
 8009a02:	9b06      	ldr	r3, [sp, #24]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	4607      	mov	r7, r0
 8009a08:	dc40      	bgt.n	8009a8c <_dtoa_r+0x814>
 8009a0a:	9b00      	ldr	r3, [sp, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d139      	bne.n	8009a84 <_dtoa_r+0x80c>
 8009a10:	9b01      	ldr	r3, [sp, #4]
 8009a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d136      	bne.n	8009a88 <_dtoa_r+0x810>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a20:	0d1b      	lsrs	r3, r3, #20
 8009a22:	051b      	lsls	r3, r3, #20
 8009a24:	b12b      	cbz	r3, 8009a32 <_dtoa_r+0x7ba>
 8009a26:	9b05      	ldr	r3, [sp, #20]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	f108 0801 	add.w	r8, r8, #1
 8009a30:	2301      	movs	r3, #1
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d12a      	bne.n	8009a90 <_dtoa_r+0x818>
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	e030      	b.n	8009aa0 <_dtoa_r+0x828>
 8009a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a44:	e795      	b.n	8009972 <_dtoa_r+0x6fa>
 8009a46:	9b07      	ldr	r3, [sp, #28]
 8009a48:	f109 37ff 	add.w	r7, r9, #4294967295
 8009a4c:	42bb      	cmp	r3, r7
 8009a4e:	bfbf      	itttt	lt
 8009a50:	9b07      	ldrlt	r3, [sp, #28]
 8009a52:	9707      	strlt	r7, [sp, #28]
 8009a54:	1afa      	sublt	r2, r7, r3
 8009a56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009a58:	bfbb      	ittet	lt
 8009a5a:	189b      	addlt	r3, r3, r2
 8009a5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009a5e:	1bdf      	subge	r7, r3, r7
 8009a60:	2700      	movlt	r7, #0
 8009a62:	f1b9 0f00 	cmp.w	r9, #0
 8009a66:	bfb5      	itete	lt
 8009a68:	9b05      	ldrlt	r3, [sp, #20]
 8009a6a:	9d05      	ldrge	r5, [sp, #20]
 8009a6c:	eba3 0509 	sublt.w	r5, r3, r9
 8009a70:	464b      	movge	r3, r9
 8009a72:	bfb8      	it	lt
 8009a74:	2300      	movlt	r3, #0
 8009a76:	e77e      	b.n	8009976 <_dtoa_r+0x6fe>
 8009a78:	9f07      	ldr	r7, [sp, #28]
 8009a7a:	9d05      	ldr	r5, [sp, #20]
 8009a7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009a7e:	e783      	b.n	8009988 <_dtoa_r+0x710>
 8009a80:	9a07      	ldr	r2, [sp, #28]
 8009a82:	e7ab      	b.n	80099dc <_dtoa_r+0x764>
 8009a84:	2300      	movs	r3, #0
 8009a86:	e7d4      	b.n	8009a32 <_dtoa_r+0x7ba>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	e7d2      	b.n	8009a32 <_dtoa_r+0x7ba>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9307      	str	r3, [sp, #28]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009a96:	6918      	ldr	r0, [r3, #16]
 8009a98:	f000 fc50 	bl	800a33c <__hi0bits>
 8009a9c:	f1c0 0020 	rsb	r0, r0, #32
 8009aa0:	4440      	add	r0, r8
 8009aa2:	f010 001f 	ands.w	r0, r0, #31
 8009aa6:	d047      	beq.n	8009b38 <_dtoa_r+0x8c0>
 8009aa8:	f1c0 0320 	rsb	r3, r0, #32
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	dd3b      	ble.n	8009b28 <_dtoa_r+0x8b0>
 8009ab0:	9b05      	ldr	r3, [sp, #20]
 8009ab2:	f1c0 001c 	rsb	r0, r0, #28
 8009ab6:	4403      	add	r3, r0
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	4405      	add	r5, r0
 8009abc:	4480      	add	r8, r0
 8009abe:	9b05      	ldr	r3, [sp, #20]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dd05      	ble.n	8009ad0 <_dtoa_r+0x858>
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	9904      	ldr	r1, [sp, #16]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 fd73 	bl	800a5b4 <__lshift>
 8009ace:	9004      	str	r0, [sp, #16]
 8009ad0:	f1b8 0f00 	cmp.w	r8, #0
 8009ad4:	dd05      	ble.n	8009ae2 <_dtoa_r+0x86a>
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4642      	mov	r2, r8
 8009ada:	4620      	mov	r0, r4
 8009adc:	f000 fd6a 	bl	800a5b4 <__lshift>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ae4:	b353      	cbz	r3, 8009b3c <_dtoa_r+0x8c4>
 8009ae6:	4639      	mov	r1, r7
 8009ae8:	9804      	ldr	r0, [sp, #16]
 8009aea:	f000 fdb7 	bl	800a65c <__mcmp>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	da24      	bge.n	8009b3c <_dtoa_r+0x8c4>
 8009af2:	2300      	movs	r3, #0
 8009af4:	220a      	movs	r2, #10
 8009af6:	9904      	ldr	r1, [sp, #16]
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fbe4 	bl	800a2c6 <__multadd>
 8009afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b00:	9004      	str	r0, [sp, #16]
 8009b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 814d 	beq.w	8009da6 <_dtoa_r+0xb2e>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4631      	mov	r1, r6
 8009b10:	220a      	movs	r2, #10
 8009b12:	4620      	mov	r0, r4
 8009b14:	f000 fbd7 	bl	800a2c6 <__multadd>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	dc4f      	bgt.n	8009bc0 <_dtoa_r+0x948>
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	dd4c      	ble.n	8009bc0 <_dtoa_r+0x948>
 8009b26:	e011      	b.n	8009b4c <_dtoa_r+0x8d4>
 8009b28:	d0c9      	beq.n	8009abe <_dtoa_r+0x846>
 8009b2a:	9a05      	ldr	r2, [sp, #20]
 8009b2c:	331c      	adds	r3, #28
 8009b2e:	441a      	add	r2, r3
 8009b30:	9205      	str	r2, [sp, #20]
 8009b32:	441d      	add	r5, r3
 8009b34:	4498      	add	r8, r3
 8009b36:	e7c2      	b.n	8009abe <_dtoa_r+0x846>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	e7f6      	b.n	8009b2a <_dtoa_r+0x8b2>
 8009b3c:	f1b9 0f00 	cmp.w	r9, #0
 8009b40:	dc38      	bgt.n	8009bb4 <_dtoa_r+0x93c>
 8009b42:	9b06      	ldr	r3, [sp, #24]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	dd35      	ble.n	8009bb4 <_dtoa_r+0x93c>
 8009b48:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	b963      	cbnz	r3, 8009b6a <_dtoa_r+0x8f2>
 8009b50:	4639      	mov	r1, r7
 8009b52:	2205      	movs	r2, #5
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fbb6 	bl	800a2c6 <__multadd>
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	9804      	ldr	r0, [sp, #16]
 8009b60:	f000 fd7c 	bl	800a65c <__mcmp>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f73f adcc 	bgt.w	8009702 <_dtoa_r+0x48a>
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6c:	465d      	mov	r5, fp
 8009b6e:	ea6f 0a03 	mvn.w	sl, r3
 8009b72:	f04f 0900 	mov.w	r9, #0
 8009b76:	4639      	mov	r1, r7
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f000 fb8d 	bl	800a298 <_Bfree>
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	f43f aeb7 	beq.w	80098f2 <_dtoa_r+0x67a>
 8009b84:	f1b9 0f00 	cmp.w	r9, #0
 8009b88:	d005      	beq.n	8009b96 <_dtoa_r+0x91e>
 8009b8a:	45b1      	cmp	r9, r6
 8009b8c:	d003      	beq.n	8009b96 <_dtoa_r+0x91e>
 8009b8e:	4649      	mov	r1, r9
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fb81 	bl	800a298 <_Bfree>
 8009b96:	4631      	mov	r1, r6
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fb7d 	bl	800a298 <_Bfree>
 8009b9e:	e6a8      	b.n	80098f2 <_dtoa_r+0x67a>
 8009ba0:	2700      	movs	r7, #0
 8009ba2:	463e      	mov	r6, r7
 8009ba4:	e7e1      	b.n	8009b6a <_dtoa_r+0x8f2>
 8009ba6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009baa:	463e      	mov	r6, r7
 8009bac:	e5a9      	b.n	8009702 <_dtoa_r+0x48a>
 8009bae:	bf00      	nop
 8009bb0:	40240000 	.word	0x40240000
 8009bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 80fa 	beq.w	8009db4 <_dtoa_r+0xb3c>
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	dd05      	ble.n	8009bd0 <_dtoa_r+0x958>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fcf3 	bl	800a5b4 <__lshift>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d04c      	beq.n	8009c70 <_dtoa_r+0x9f8>
 8009bd6:	6871      	ldr	r1, [r6, #4]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 fb29 	bl	800a230 <_Balloc>
 8009bde:	6932      	ldr	r2, [r6, #16]
 8009be0:	3202      	adds	r2, #2
 8009be2:	4605      	mov	r5, r0
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	f106 010c 	add.w	r1, r6, #12
 8009bea:	300c      	adds	r0, #12
 8009bec:	f000 fafa 	bl	800a1e4 <memcpy>
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 fcdd 	bl	800a5b4 <__lshift>
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	f8cd b014 	str.w	fp, [sp, #20]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	46b1      	mov	r9, r6
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	4606      	mov	r6, r0
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	9804      	ldr	r0, [sp, #16]
 8009c0e:	f7ff faa6 	bl	800915e <quorem>
 8009c12:	4649      	mov	r1, r9
 8009c14:	4605      	mov	r5, r0
 8009c16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c1a:	9804      	ldr	r0, [sp, #16]
 8009c1c:	f000 fd1e 	bl	800a65c <__mcmp>
 8009c20:	4632      	mov	r2, r6
 8009c22:	9000      	str	r0, [sp, #0]
 8009c24:	4639      	mov	r1, r7
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fd32 	bl	800a690 <__mdiff>
 8009c2c:	68c3      	ldr	r3, [r0, #12]
 8009c2e:	4602      	mov	r2, r0
 8009c30:	bb03      	cbnz	r3, 8009c74 <_dtoa_r+0x9fc>
 8009c32:	4601      	mov	r1, r0
 8009c34:	9008      	str	r0, [sp, #32]
 8009c36:	9804      	ldr	r0, [sp, #16]
 8009c38:	f000 fd10 	bl	800a65c <__mcmp>
 8009c3c:	9a08      	ldr	r2, [sp, #32]
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4611      	mov	r1, r2
 8009c42:	4620      	mov	r0, r4
 8009c44:	9308      	str	r3, [sp, #32]
 8009c46:	f000 fb27 	bl	800a298 <_Bfree>
 8009c4a:	9b08      	ldr	r3, [sp, #32]
 8009c4c:	b9a3      	cbnz	r3, 8009c78 <_dtoa_r+0xa00>
 8009c4e:	9a06      	ldr	r2, [sp, #24]
 8009c50:	b992      	cbnz	r2, 8009c78 <_dtoa_r+0xa00>
 8009c52:	9a07      	ldr	r2, [sp, #28]
 8009c54:	b982      	cbnz	r2, 8009c78 <_dtoa_r+0xa00>
 8009c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c5a:	d029      	beq.n	8009cb0 <_dtoa_r+0xa38>
 8009c5c:	9b00      	ldr	r3, [sp, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dd01      	ble.n	8009c66 <_dtoa_r+0x9ee>
 8009c62:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009c66:	9b05      	ldr	r3, [sp, #20]
 8009c68:	1c5d      	adds	r5, r3, #1
 8009c6a:	f883 8000 	strb.w	r8, [r3]
 8009c6e:	e782      	b.n	8009b76 <_dtoa_r+0x8fe>
 8009c70:	4630      	mov	r0, r6
 8009c72:	e7c2      	b.n	8009bfa <_dtoa_r+0x982>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e7e3      	b.n	8009c40 <_dtoa_r+0x9c8>
 8009c78:	9a00      	ldr	r2, [sp, #0]
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	db04      	blt.n	8009c88 <_dtoa_r+0xa10>
 8009c7e:	d125      	bne.n	8009ccc <_dtoa_r+0xa54>
 8009c80:	9a06      	ldr	r2, [sp, #24]
 8009c82:	bb1a      	cbnz	r2, 8009ccc <_dtoa_r+0xa54>
 8009c84:	9a07      	ldr	r2, [sp, #28]
 8009c86:	bb0a      	cbnz	r2, 8009ccc <_dtoa_r+0xa54>
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	ddec      	ble.n	8009c66 <_dtoa_r+0x9ee>
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	9904      	ldr	r1, [sp, #16]
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 fc8f 	bl	800a5b4 <__lshift>
 8009c96:	4639      	mov	r1, r7
 8009c98:	9004      	str	r0, [sp, #16]
 8009c9a:	f000 fcdf 	bl	800a65c <__mcmp>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	dc03      	bgt.n	8009caa <_dtoa_r+0xa32>
 8009ca2:	d1e0      	bne.n	8009c66 <_dtoa_r+0x9ee>
 8009ca4:	f018 0f01 	tst.w	r8, #1
 8009ca8:	d0dd      	beq.n	8009c66 <_dtoa_r+0x9ee>
 8009caa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009cae:	d1d8      	bne.n	8009c62 <_dtoa_r+0x9ea>
 8009cb0:	9b05      	ldr	r3, [sp, #20]
 8009cb2:	9a05      	ldr	r2, [sp, #20]
 8009cb4:	1c5d      	adds	r5, r3, #1
 8009cb6:	2339      	movs	r3, #57	; 0x39
 8009cb8:	7013      	strb	r3, [r2, #0]
 8009cba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cbe:	2b39      	cmp	r3, #57	; 0x39
 8009cc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009cc4:	d04f      	beq.n	8009d66 <_dtoa_r+0xaee>
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	7013      	strb	r3, [r2, #0]
 8009cca:	e754      	b.n	8009b76 <_dtoa_r+0x8fe>
 8009ccc:	9a05      	ldr	r2, [sp, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f102 0501 	add.w	r5, r2, #1
 8009cd4:	dd06      	ble.n	8009ce4 <_dtoa_r+0xa6c>
 8009cd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009cda:	d0e9      	beq.n	8009cb0 <_dtoa_r+0xa38>
 8009cdc:	f108 0801 	add.w	r8, r8, #1
 8009ce0:	9b05      	ldr	r3, [sp, #20]
 8009ce2:	e7c2      	b.n	8009c6a <_dtoa_r+0x9f2>
 8009ce4:	9a02      	ldr	r2, [sp, #8]
 8009ce6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009cea:	eba5 030b 	sub.w	r3, r5, fp
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d021      	beq.n	8009d36 <_dtoa_r+0xabe>
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	220a      	movs	r2, #10
 8009cf6:	9904      	ldr	r1, [sp, #16]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fae4 	bl	800a2c6 <__multadd>
 8009cfe:	45b1      	cmp	r9, r6
 8009d00:	9004      	str	r0, [sp, #16]
 8009d02:	f04f 0300 	mov.w	r3, #0
 8009d06:	f04f 020a 	mov.w	r2, #10
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	d105      	bne.n	8009d1c <_dtoa_r+0xaa4>
 8009d10:	f000 fad9 	bl	800a2c6 <__multadd>
 8009d14:	4681      	mov	r9, r0
 8009d16:	4606      	mov	r6, r0
 8009d18:	9505      	str	r5, [sp, #20]
 8009d1a:	e776      	b.n	8009c0a <_dtoa_r+0x992>
 8009d1c:	f000 fad3 	bl	800a2c6 <__multadd>
 8009d20:	4631      	mov	r1, r6
 8009d22:	4681      	mov	r9, r0
 8009d24:	2300      	movs	r3, #0
 8009d26:	220a      	movs	r2, #10
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 facc 	bl	800a2c6 <__multadd>
 8009d2e:	4606      	mov	r6, r0
 8009d30:	e7f2      	b.n	8009d18 <_dtoa_r+0xaa0>
 8009d32:	f04f 0900 	mov.w	r9, #0
 8009d36:	2201      	movs	r2, #1
 8009d38:	9904      	ldr	r1, [sp, #16]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f000 fc3a 	bl	800a5b4 <__lshift>
 8009d40:	4639      	mov	r1, r7
 8009d42:	9004      	str	r0, [sp, #16]
 8009d44:	f000 fc8a 	bl	800a65c <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	dcb6      	bgt.n	8009cba <_dtoa_r+0xa42>
 8009d4c:	d102      	bne.n	8009d54 <_dtoa_r+0xadc>
 8009d4e:	f018 0f01 	tst.w	r8, #1
 8009d52:	d1b2      	bne.n	8009cba <_dtoa_r+0xa42>
 8009d54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d58:	2b30      	cmp	r3, #48	; 0x30
 8009d5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d5e:	f47f af0a 	bne.w	8009b76 <_dtoa_r+0x8fe>
 8009d62:	4615      	mov	r5, r2
 8009d64:	e7f6      	b.n	8009d54 <_dtoa_r+0xadc>
 8009d66:	4593      	cmp	fp, r2
 8009d68:	d105      	bne.n	8009d76 <_dtoa_r+0xafe>
 8009d6a:	2331      	movs	r3, #49	; 0x31
 8009d6c:	f10a 0a01 	add.w	sl, sl, #1
 8009d70:	f88b 3000 	strb.w	r3, [fp]
 8009d74:	e6ff      	b.n	8009b76 <_dtoa_r+0x8fe>
 8009d76:	4615      	mov	r5, r2
 8009d78:	e79f      	b.n	8009cba <_dtoa_r+0xa42>
 8009d7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009de0 <_dtoa_r+0xb68>
 8009d7e:	e007      	b.n	8009d90 <_dtoa_r+0xb18>
 8009d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009de4 <_dtoa_r+0xb6c>
 8009d86:	b11b      	cbz	r3, 8009d90 <_dtoa_r+0xb18>
 8009d88:	f10b 0308 	add.w	r3, fp, #8
 8009d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	4658      	mov	r0, fp
 8009d92:	b017      	add	sp, #92	; 0x5c
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d98:	9b06      	ldr	r3, [sp, #24]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	f77f ae35 	ble.w	8009a0a <_dtoa_r+0x792>
 8009da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009da2:	9307      	str	r3, [sp, #28]
 8009da4:	e649      	b.n	8009a3a <_dtoa_r+0x7c2>
 8009da6:	9b02      	ldr	r3, [sp, #8]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	dc03      	bgt.n	8009db4 <_dtoa_r+0xb3c>
 8009dac:	9b06      	ldr	r3, [sp, #24]
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	f73f aecc 	bgt.w	8009b4c <_dtoa_r+0x8d4>
 8009db4:	465d      	mov	r5, fp
 8009db6:	4639      	mov	r1, r7
 8009db8:	9804      	ldr	r0, [sp, #16]
 8009dba:	f7ff f9d0 	bl	800915e <quorem>
 8009dbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009dc2:	f805 8b01 	strb.w	r8, [r5], #1
 8009dc6:	9a02      	ldr	r2, [sp, #8]
 8009dc8:	eba5 030b 	sub.w	r3, r5, fp
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	ddb0      	ble.n	8009d32 <_dtoa_r+0xaba>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	220a      	movs	r2, #10
 8009dd4:	9904      	ldr	r1, [sp, #16]
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fa75 	bl	800a2c6 <__multadd>
 8009ddc:	9004      	str	r0, [sp, #16]
 8009dde:	e7ea      	b.n	8009db6 <_dtoa_r+0xb3e>
 8009de0:	0800bb51 	.word	0x0800bb51
 8009de4:	0800bb75 	.word	0x0800bb75

08009de8 <__sflush_r>:
 8009de8:	898a      	ldrh	r2, [r1, #12]
 8009dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	4605      	mov	r5, r0
 8009df0:	0710      	lsls	r0, r2, #28
 8009df2:	460c      	mov	r4, r1
 8009df4:	d458      	bmi.n	8009ea8 <__sflush_r+0xc0>
 8009df6:	684b      	ldr	r3, [r1, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dc05      	bgt.n	8009e08 <__sflush_r+0x20>
 8009dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dc02      	bgt.n	8009e08 <__sflush_r+0x20>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e0a:	2e00      	cmp	r6, #0
 8009e0c:	d0f9      	beq.n	8009e02 <__sflush_r+0x1a>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e14:	682f      	ldr	r7, [r5, #0]
 8009e16:	6a21      	ldr	r1, [r4, #32]
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	d032      	beq.n	8009e82 <__sflush_r+0x9a>
 8009e1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	075a      	lsls	r2, r3, #29
 8009e22:	d505      	bpl.n	8009e30 <__sflush_r+0x48>
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	1ac0      	subs	r0, r0, r3
 8009e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e2a:	b10b      	cbz	r3, 8009e30 <__sflush_r+0x48>
 8009e2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e2e:	1ac0      	subs	r0, r0, r3
 8009e30:	2300      	movs	r3, #0
 8009e32:	4602      	mov	r2, r0
 8009e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e36:	6a21      	ldr	r1, [r4, #32]
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b0      	blx	r6
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	d106      	bne.n	8009e50 <__sflush_r+0x68>
 8009e42:	6829      	ldr	r1, [r5, #0]
 8009e44:	291d      	cmp	r1, #29
 8009e46:	d848      	bhi.n	8009eda <__sflush_r+0xf2>
 8009e48:	4a29      	ldr	r2, [pc, #164]	; (8009ef0 <__sflush_r+0x108>)
 8009e4a:	40ca      	lsrs	r2, r1
 8009e4c:	07d6      	lsls	r6, r2, #31
 8009e4e:	d544      	bpl.n	8009eda <__sflush_r+0xf2>
 8009e50:	2200      	movs	r2, #0
 8009e52:	6062      	str	r2, [r4, #4]
 8009e54:	04d9      	lsls	r1, r3, #19
 8009e56:	6922      	ldr	r2, [r4, #16]
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	d504      	bpl.n	8009e66 <__sflush_r+0x7e>
 8009e5c:	1c42      	adds	r2, r0, #1
 8009e5e:	d101      	bne.n	8009e64 <__sflush_r+0x7c>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	b903      	cbnz	r3, 8009e66 <__sflush_r+0x7e>
 8009e64:	6560      	str	r0, [r4, #84]	; 0x54
 8009e66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e68:	602f      	str	r7, [r5, #0]
 8009e6a:	2900      	cmp	r1, #0
 8009e6c:	d0c9      	beq.n	8009e02 <__sflush_r+0x1a>
 8009e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e72:	4299      	cmp	r1, r3
 8009e74:	d002      	beq.n	8009e7c <__sflush_r+0x94>
 8009e76:	4628      	mov	r0, r5
 8009e78:	f7fe f9a0 	bl	80081bc <_free_r>
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	6360      	str	r0, [r4, #52]	; 0x34
 8009e80:	e7c0      	b.n	8009e04 <__sflush_r+0x1c>
 8009e82:	2301      	movs	r3, #1
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b0      	blx	r6
 8009e88:	1c41      	adds	r1, r0, #1
 8009e8a:	d1c8      	bne.n	8009e1e <__sflush_r+0x36>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0c5      	beq.n	8009e1e <__sflush_r+0x36>
 8009e92:	2b1d      	cmp	r3, #29
 8009e94:	d001      	beq.n	8009e9a <__sflush_r+0xb2>
 8009e96:	2b16      	cmp	r3, #22
 8009e98:	d101      	bne.n	8009e9e <__sflush_r+0xb6>
 8009e9a:	602f      	str	r7, [r5, #0]
 8009e9c:	e7b1      	b.n	8009e02 <__sflush_r+0x1a>
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea4:	81a3      	strh	r3, [r4, #12]
 8009ea6:	e7ad      	b.n	8009e04 <__sflush_r+0x1c>
 8009ea8:	690f      	ldr	r7, [r1, #16]
 8009eaa:	2f00      	cmp	r7, #0
 8009eac:	d0a9      	beq.n	8009e02 <__sflush_r+0x1a>
 8009eae:	0793      	lsls	r3, r2, #30
 8009eb0:	680e      	ldr	r6, [r1, #0]
 8009eb2:	bf08      	it	eq
 8009eb4:	694b      	ldreq	r3, [r1, #20]
 8009eb6:	600f      	str	r7, [r1, #0]
 8009eb8:	bf18      	it	ne
 8009eba:	2300      	movne	r3, #0
 8009ebc:	eba6 0807 	sub.w	r8, r6, r7
 8009ec0:	608b      	str	r3, [r1, #8]
 8009ec2:	f1b8 0f00 	cmp.w	r8, #0
 8009ec6:	dd9c      	ble.n	8009e02 <__sflush_r+0x1a>
 8009ec8:	4643      	mov	r3, r8
 8009eca:	463a      	mov	r2, r7
 8009ecc:	6a21      	ldr	r1, [r4, #32]
 8009ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	47b0      	blx	r6
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	dc06      	bgt.n	8009ee6 <__sflush_r+0xfe>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee4:	e78e      	b.n	8009e04 <__sflush_r+0x1c>
 8009ee6:	4407      	add	r7, r0
 8009ee8:	eba8 0800 	sub.w	r8, r8, r0
 8009eec:	e7e9      	b.n	8009ec2 <__sflush_r+0xda>
 8009eee:	bf00      	nop
 8009ef0:	20400001 	.word	0x20400001

08009ef4 <_fflush_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	690b      	ldr	r3, [r1, #16]
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b1db      	cbz	r3, 8009f36 <_fflush_r+0x42>
 8009efe:	b118      	cbz	r0, 8009f08 <_fflush_r+0x14>
 8009f00:	6983      	ldr	r3, [r0, #24]
 8009f02:	b90b      	cbnz	r3, 8009f08 <_fflush_r+0x14>
 8009f04:	f000 f860 	bl	8009fc8 <__sinit>
 8009f08:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <_fflush_r+0x48>)
 8009f0a:	429c      	cmp	r4, r3
 8009f0c:	d109      	bne.n	8009f22 <_fflush_r+0x2e>
 8009f0e:	686c      	ldr	r4, [r5, #4]
 8009f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f14:	b17b      	cbz	r3, 8009f36 <_fflush_r+0x42>
 8009f16:	4621      	mov	r1, r4
 8009f18:	4628      	mov	r0, r5
 8009f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f1e:	f7ff bf63 	b.w	8009de8 <__sflush_r>
 8009f22:	4b07      	ldr	r3, [pc, #28]	; (8009f40 <_fflush_r+0x4c>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d101      	bne.n	8009f2c <_fflush_r+0x38>
 8009f28:	68ac      	ldr	r4, [r5, #8]
 8009f2a:	e7f1      	b.n	8009f10 <_fflush_r+0x1c>
 8009f2c:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <_fflush_r+0x50>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	bf08      	it	eq
 8009f32:	68ec      	ldreq	r4, [r5, #12]
 8009f34:	e7ec      	b.n	8009f10 <_fflush_r+0x1c>
 8009f36:	2000      	movs	r0, #0
 8009f38:	bd38      	pop	{r3, r4, r5, pc}
 8009f3a:	bf00      	nop
 8009f3c:	0800bba4 	.word	0x0800bba4
 8009f40:	0800bbc4 	.word	0x0800bbc4
 8009f44:	0800bb84 	.word	0x0800bb84

08009f48 <std>:
 8009f48:	2300      	movs	r3, #0
 8009f4a:	b510      	push	{r4, lr}
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f52:	6083      	str	r3, [r0, #8]
 8009f54:	8181      	strh	r1, [r0, #12]
 8009f56:	6643      	str	r3, [r0, #100]	; 0x64
 8009f58:	81c2      	strh	r2, [r0, #14]
 8009f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f5e:	6183      	str	r3, [r0, #24]
 8009f60:	4619      	mov	r1, r3
 8009f62:	2208      	movs	r2, #8
 8009f64:	305c      	adds	r0, #92	; 0x5c
 8009f66:	f7fe f921 	bl	80081ac <memset>
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x38>)
 8009f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <std+0x3c>)
 8009f70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f72:	4b05      	ldr	r3, [pc, #20]	; (8009f88 <std+0x40>)
 8009f74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f76:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <std+0x44>)
 8009f78:	6224      	str	r4, [r4, #32]
 8009f7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	bf00      	nop
 8009f80:	0800ab7d 	.word	0x0800ab7d
 8009f84:	0800ab9f 	.word	0x0800ab9f
 8009f88:	0800abd7 	.word	0x0800abd7
 8009f8c:	0800abfb 	.word	0x0800abfb

08009f90 <_cleanup_r>:
 8009f90:	4901      	ldr	r1, [pc, #4]	; (8009f98 <_cleanup_r+0x8>)
 8009f92:	f000 b885 	b.w	800a0a0 <_fwalk_reent>
 8009f96:	bf00      	nop
 8009f98:	08009ef5 	.word	0x08009ef5

08009f9c <__sfmoreglue>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	1e4a      	subs	r2, r1, #1
 8009fa0:	2568      	movs	r5, #104	; 0x68
 8009fa2:	4355      	muls	r5, r2
 8009fa4:	460e      	mov	r6, r1
 8009fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009faa:	f7fe f955 	bl	8008258 <_malloc_r>
 8009fae:	4604      	mov	r4, r0
 8009fb0:	b140      	cbz	r0, 8009fc4 <__sfmoreglue+0x28>
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	e9c0 1600 	strd	r1, r6, [r0]
 8009fb8:	300c      	adds	r0, #12
 8009fba:	60a0      	str	r0, [r4, #8]
 8009fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fc0:	f7fe f8f4 	bl	80081ac <memset>
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}

08009fc8 <__sinit>:
 8009fc8:	6983      	ldr	r3, [r0, #24]
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	bb33      	cbnz	r3, 800a01e <__sinit+0x56>
 8009fd0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009fd4:	6503      	str	r3, [r0, #80]	; 0x50
 8009fd6:	4b12      	ldr	r3, [pc, #72]	; (800a020 <__sinit+0x58>)
 8009fd8:	4a12      	ldr	r2, [pc, #72]	; (800a024 <__sinit+0x5c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6282      	str	r2, [r0, #40]	; 0x28
 8009fde:	4298      	cmp	r0, r3
 8009fe0:	bf04      	itt	eq
 8009fe2:	2301      	moveq	r3, #1
 8009fe4:	6183      	streq	r3, [r0, #24]
 8009fe6:	f000 f81f 	bl	800a028 <__sfp>
 8009fea:	6060      	str	r0, [r4, #4]
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 f81b 	bl	800a028 <__sfp>
 8009ff2:	60a0      	str	r0, [r4, #8]
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 f817 	bl	800a028 <__sfp>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	60e0      	str	r0, [r4, #12]
 8009ffe:	2104      	movs	r1, #4
 800a000:	6860      	ldr	r0, [r4, #4]
 800a002:	f7ff ffa1 	bl	8009f48 <std>
 800a006:	2201      	movs	r2, #1
 800a008:	2109      	movs	r1, #9
 800a00a:	68a0      	ldr	r0, [r4, #8]
 800a00c:	f7ff ff9c 	bl	8009f48 <std>
 800a010:	2202      	movs	r2, #2
 800a012:	2112      	movs	r1, #18
 800a014:	68e0      	ldr	r0, [r4, #12]
 800a016:	f7ff ff97 	bl	8009f48 <std>
 800a01a:	2301      	movs	r3, #1
 800a01c:	61a3      	str	r3, [r4, #24]
 800a01e:	bd10      	pop	{r4, pc}
 800a020:	0800bb2c 	.word	0x0800bb2c
 800a024:	08009f91 	.word	0x08009f91

0800a028 <__sfp>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	4b1b      	ldr	r3, [pc, #108]	; (800a098 <__sfp+0x70>)
 800a02c:	681e      	ldr	r6, [r3, #0]
 800a02e:	69b3      	ldr	r3, [r6, #24]
 800a030:	4607      	mov	r7, r0
 800a032:	b913      	cbnz	r3, 800a03a <__sfp+0x12>
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff ffc7 	bl	8009fc8 <__sinit>
 800a03a:	3648      	adds	r6, #72	; 0x48
 800a03c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a040:	3b01      	subs	r3, #1
 800a042:	d503      	bpl.n	800a04c <__sfp+0x24>
 800a044:	6833      	ldr	r3, [r6, #0]
 800a046:	b133      	cbz	r3, 800a056 <__sfp+0x2e>
 800a048:	6836      	ldr	r6, [r6, #0]
 800a04a:	e7f7      	b.n	800a03c <__sfp+0x14>
 800a04c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a050:	b16d      	cbz	r5, 800a06e <__sfp+0x46>
 800a052:	3468      	adds	r4, #104	; 0x68
 800a054:	e7f4      	b.n	800a040 <__sfp+0x18>
 800a056:	2104      	movs	r1, #4
 800a058:	4638      	mov	r0, r7
 800a05a:	f7ff ff9f 	bl	8009f9c <__sfmoreglue>
 800a05e:	6030      	str	r0, [r6, #0]
 800a060:	2800      	cmp	r0, #0
 800a062:	d1f1      	bne.n	800a048 <__sfp+0x20>
 800a064:	230c      	movs	r3, #12
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4604      	mov	r4, r0
 800a06a:	4620      	mov	r0, r4
 800a06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a06e:	4b0b      	ldr	r3, [pc, #44]	; (800a09c <__sfp+0x74>)
 800a070:	6665      	str	r5, [r4, #100]	; 0x64
 800a072:	e9c4 5500 	strd	r5, r5, [r4]
 800a076:	60a5      	str	r5, [r4, #8]
 800a078:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a07c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a080:	2208      	movs	r2, #8
 800a082:	4629      	mov	r1, r5
 800a084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a088:	f7fe f890 	bl	80081ac <memset>
 800a08c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a094:	e7e9      	b.n	800a06a <__sfp+0x42>
 800a096:	bf00      	nop
 800a098:	0800bb2c 	.word	0x0800bb2c
 800a09c:	ffff0001 	.word	0xffff0001

0800a0a0 <_fwalk_reent>:
 800a0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	4689      	mov	r9, r1
 800a0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0ac:	2600      	movs	r6, #0
 800a0ae:	b914      	cbnz	r4, 800a0b6 <_fwalk_reent+0x16>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a0ba:	3f01      	subs	r7, #1
 800a0bc:	d501      	bpl.n	800a0c2 <_fwalk_reent+0x22>
 800a0be:	6824      	ldr	r4, [r4, #0]
 800a0c0:	e7f5      	b.n	800a0ae <_fwalk_reent+0xe>
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d907      	bls.n	800a0d8 <_fwalk_reent+0x38>
 800a0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	d003      	beq.n	800a0d8 <_fwalk_reent+0x38>
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	47c8      	blx	r9
 800a0d6:	4306      	orrs	r6, r0
 800a0d8:	3568      	adds	r5, #104	; 0x68
 800a0da:	e7ee      	b.n	800a0ba <_fwalk_reent+0x1a>

0800a0dc <_localeconv_r>:
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <_localeconv_r+0x14>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a18      	ldr	r0, [r3, #32]
 800a0e2:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <_localeconv_r+0x18>)
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	bf08      	it	eq
 800a0e8:	4618      	moveq	r0, r3
 800a0ea:	30f0      	adds	r0, #240	; 0xf0
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	2000000c 	.word	0x2000000c
 800a0f4:	20000070 	.word	0x20000070

0800a0f8 <__swhatbuf_r>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	460e      	mov	r6, r1
 800a0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a100:	2900      	cmp	r1, #0
 800a102:	b096      	sub	sp, #88	; 0x58
 800a104:	4614      	mov	r4, r2
 800a106:	461d      	mov	r5, r3
 800a108:	da07      	bge.n	800a11a <__swhatbuf_r+0x22>
 800a10a:	2300      	movs	r3, #0
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	89b3      	ldrh	r3, [r6, #12]
 800a110:	061a      	lsls	r2, r3, #24
 800a112:	d410      	bmi.n	800a136 <__swhatbuf_r+0x3e>
 800a114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a118:	e00e      	b.n	800a138 <__swhatbuf_r+0x40>
 800a11a:	466a      	mov	r2, sp
 800a11c:	f000 fda0 	bl	800ac60 <_fstat_r>
 800a120:	2800      	cmp	r0, #0
 800a122:	dbf2      	blt.n	800a10a <__swhatbuf_r+0x12>
 800a124:	9a01      	ldr	r2, [sp, #4]
 800a126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a12a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a12e:	425a      	negs	r2, r3
 800a130:	415a      	adcs	r2, r3
 800a132:	602a      	str	r2, [r5, #0]
 800a134:	e7ee      	b.n	800a114 <__swhatbuf_r+0x1c>
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	2000      	movs	r0, #0
 800a13a:	6023      	str	r3, [r4, #0]
 800a13c:	b016      	add	sp, #88	; 0x58
 800a13e:	bd70      	pop	{r4, r5, r6, pc}

0800a140 <__smakebuf_r>:
 800a140:	898b      	ldrh	r3, [r1, #12]
 800a142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a144:	079d      	lsls	r5, r3, #30
 800a146:	4606      	mov	r6, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	d507      	bpl.n	800a15c <__smakebuf_r+0x1c>
 800a14c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	2301      	movs	r3, #1
 800a156:	6163      	str	r3, [r4, #20]
 800a158:	b002      	add	sp, #8
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	ab01      	add	r3, sp, #4
 800a15e:	466a      	mov	r2, sp
 800a160:	f7ff ffca 	bl	800a0f8 <__swhatbuf_r>
 800a164:	9900      	ldr	r1, [sp, #0]
 800a166:	4605      	mov	r5, r0
 800a168:	4630      	mov	r0, r6
 800a16a:	f7fe f875 	bl	8008258 <_malloc_r>
 800a16e:	b948      	cbnz	r0, 800a184 <__smakebuf_r+0x44>
 800a170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a174:	059a      	lsls	r2, r3, #22
 800a176:	d4ef      	bmi.n	800a158 <__smakebuf_r+0x18>
 800a178:	f023 0303 	bic.w	r3, r3, #3
 800a17c:	f043 0302 	orr.w	r3, r3, #2
 800a180:	81a3      	strh	r3, [r4, #12]
 800a182:	e7e3      	b.n	800a14c <__smakebuf_r+0xc>
 800a184:	4b0d      	ldr	r3, [pc, #52]	; (800a1bc <__smakebuf_r+0x7c>)
 800a186:	62b3      	str	r3, [r6, #40]	; 0x28
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	6020      	str	r0, [r4, #0]
 800a18c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a190:	81a3      	strh	r3, [r4, #12]
 800a192:	9b00      	ldr	r3, [sp, #0]
 800a194:	6163      	str	r3, [r4, #20]
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	6120      	str	r0, [r4, #16]
 800a19a:	b15b      	cbz	r3, 800a1b4 <__smakebuf_r+0x74>
 800a19c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f000 fd6f 	bl	800ac84 <_isatty_r>
 800a1a6:	b128      	cbz	r0, 800a1b4 <__smakebuf_r+0x74>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	f043 0301 	orr.w	r3, r3, #1
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	431d      	orrs	r5, r3
 800a1b8:	81a5      	strh	r5, [r4, #12]
 800a1ba:	e7cd      	b.n	800a158 <__smakebuf_r+0x18>
 800a1bc:	08009f91 	.word	0x08009f91

0800a1c0 <__ascii_mbtowc>:
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	b901      	cbnz	r1, 800a1c6 <__ascii_mbtowc+0x6>
 800a1c4:	a901      	add	r1, sp, #4
 800a1c6:	b142      	cbz	r2, 800a1da <__ascii_mbtowc+0x1a>
 800a1c8:	b14b      	cbz	r3, 800a1de <__ascii_mbtowc+0x1e>
 800a1ca:	7813      	ldrb	r3, [r2, #0]
 800a1cc:	600b      	str	r3, [r1, #0]
 800a1ce:	7812      	ldrb	r2, [r2, #0]
 800a1d0:	1c10      	adds	r0, r2, #0
 800a1d2:	bf18      	it	ne
 800a1d4:	2001      	movne	r0, #1
 800a1d6:	b002      	add	sp, #8
 800a1d8:	4770      	bx	lr
 800a1da:	4610      	mov	r0, r2
 800a1dc:	e7fb      	b.n	800a1d6 <__ascii_mbtowc+0x16>
 800a1de:	f06f 0001 	mvn.w	r0, #1
 800a1e2:	e7f8      	b.n	800a1d6 <__ascii_mbtowc+0x16>

0800a1e4 <memcpy>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	1e43      	subs	r3, r0, #1
 800a1e8:	440a      	add	r2, r1
 800a1ea:	4291      	cmp	r1, r2
 800a1ec:	d100      	bne.n	800a1f0 <memcpy+0xc>
 800a1ee:	bd10      	pop	{r4, pc}
 800a1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1f8:	e7f7      	b.n	800a1ea <memcpy+0x6>

0800a1fa <memmove>:
 800a1fa:	4288      	cmp	r0, r1
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	eb01 0302 	add.w	r3, r1, r2
 800a202:	d807      	bhi.n	800a214 <memmove+0x1a>
 800a204:	1e42      	subs	r2, r0, #1
 800a206:	4299      	cmp	r1, r3
 800a208:	d00a      	beq.n	800a220 <memmove+0x26>
 800a20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a20e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a212:	e7f8      	b.n	800a206 <memmove+0xc>
 800a214:	4283      	cmp	r3, r0
 800a216:	d9f5      	bls.n	800a204 <memmove+0xa>
 800a218:	1881      	adds	r1, r0, r2
 800a21a:	1ad2      	subs	r2, r2, r3
 800a21c:	42d3      	cmn	r3, r2
 800a21e:	d100      	bne.n	800a222 <memmove+0x28>
 800a220:	bd10      	pop	{r4, pc}
 800a222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a226:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a22a:	e7f7      	b.n	800a21c <memmove+0x22>

0800a22c <__malloc_lock>:
 800a22c:	4770      	bx	lr

0800a22e <__malloc_unlock>:
 800a22e:	4770      	bx	lr

0800a230 <_Balloc>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a234:	4604      	mov	r4, r0
 800a236:	460e      	mov	r6, r1
 800a238:	b93d      	cbnz	r5, 800a24a <_Balloc+0x1a>
 800a23a:	2010      	movs	r0, #16
 800a23c:	f7fd ffae 	bl	800819c <malloc>
 800a240:	6260      	str	r0, [r4, #36]	; 0x24
 800a242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a246:	6005      	str	r5, [r0, #0]
 800a248:	60c5      	str	r5, [r0, #12]
 800a24a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a24c:	68eb      	ldr	r3, [r5, #12]
 800a24e:	b183      	cbz	r3, 800a272 <_Balloc+0x42>
 800a250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a258:	b9b8      	cbnz	r0, 800a28a <_Balloc+0x5a>
 800a25a:	2101      	movs	r1, #1
 800a25c:	fa01 f506 	lsl.w	r5, r1, r6
 800a260:	1d6a      	adds	r2, r5, #5
 800a262:	0092      	lsls	r2, r2, #2
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fabf 	bl	800a7e8 <_calloc_r>
 800a26a:	b160      	cbz	r0, 800a286 <_Balloc+0x56>
 800a26c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a270:	e00e      	b.n	800a290 <_Balloc+0x60>
 800a272:	2221      	movs	r2, #33	; 0x21
 800a274:	2104      	movs	r1, #4
 800a276:	4620      	mov	r0, r4
 800a278:	f000 fab6 	bl	800a7e8 <_calloc_r>
 800a27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27e:	60e8      	str	r0, [r5, #12]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1e4      	bne.n	800a250 <_Balloc+0x20>
 800a286:	2000      	movs	r0, #0
 800a288:	bd70      	pop	{r4, r5, r6, pc}
 800a28a:	6802      	ldr	r2, [r0, #0]
 800a28c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a290:	2300      	movs	r3, #0
 800a292:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a296:	e7f7      	b.n	800a288 <_Balloc+0x58>

0800a298 <_Bfree>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a29c:	4606      	mov	r6, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	b93c      	cbnz	r4, 800a2b2 <_Bfree+0x1a>
 800a2a2:	2010      	movs	r0, #16
 800a2a4:	f7fd ff7a 	bl	800819c <malloc>
 800a2a8:	6270      	str	r0, [r6, #36]	; 0x24
 800a2aa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ae:	6004      	str	r4, [r0, #0]
 800a2b0:	60c4      	str	r4, [r0, #12]
 800a2b2:	b13d      	cbz	r5, 800a2c4 <_Bfree+0x2c>
 800a2b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2b6:	686a      	ldr	r2, [r5, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2be:	6029      	str	r1, [r5, #0]
 800a2c0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}

0800a2c6 <__multadd>:
 800a2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ca:	690d      	ldr	r5, [r1, #16]
 800a2cc:	461f      	mov	r7, r3
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	f101 0c14 	add.w	ip, r1, #20
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f8dc 0000 	ldr.w	r0, [ip]
 800a2dc:	b281      	uxth	r1, r0
 800a2de:	fb02 7101 	mla	r1, r2, r1, r7
 800a2e2:	0c0f      	lsrs	r7, r1, #16
 800a2e4:	0c00      	lsrs	r0, r0, #16
 800a2e6:	fb02 7000 	mla	r0, r2, r0, r7
 800a2ea:	b289      	uxth	r1, r1
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a2f8:	f84c 1b04 	str.w	r1, [ip], #4
 800a2fc:	dcec      	bgt.n	800a2d8 <__multadd+0x12>
 800a2fe:	b1d7      	cbz	r7, 800a336 <__multadd+0x70>
 800a300:	68a3      	ldr	r3, [r4, #8]
 800a302:	42ab      	cmp	r3, r5
 800a304:	dc12      	bgt.n	800a32c <__multadd+0x66>
 800a306:	6861      	ldr	r1, [r4, #4]
 800a308:	4630      	mov	r0, r6
 800a30a:	3101      	adds	r1, #1
 800a30c:	f7ff ff90 	bl	800a230 <_Balloc>
 800a310:	6922      	ldr	r2, [r4, #16]
 800a312:	3202      	adds	r2, #2
 800a314:	f104 010c 	add.w	r1, r4, #12
 800a318:	4680      	mov	r8, r0
 800a31a:	0092      	lsls	r2, r2, #2
 800a31c:	300c      	adds	r0, #12
 800a31e:	f7ff ff61 	bl	800a1e4 <memcpy>
 800a322:	4621      	mov	r1, r4
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff ffb7 	bl	800a298 <_Bfree>
 800a32a:	4644      	mov	r4, r8
 800a32c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a330:	3501      	adds	r5, #1
 800a332:	615f      	str	r7, [r3, #20]
 800a334:	6125      	str	r5, [r4, #16]
 800a336:	4620      	mov	r0, r4
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a33c <__hi0bits>:
 800a33c:	0c02      	lsrs	r2, r0, #16
 800a33e:	0412      	lsls	r2, r2, #16
 800a340:	4603      	mov	r3, r0
 800a342:	b9b2      	cbnz	r2, 800a372 <__hi0bits+0x36>
 800a344:	0403      	lsls	r3, r0, #16
 800a346:	2010      	movs	r0, #16
 800a348:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a34c:	bf04      	itt	eq
 800a34e:	021b      	lsleq	r3, r3, #8
 800a350:	3008      	addeq	r0, #8
 800a352:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a356:	bf04      	itt	eq
 800a358:	011b      	lsleq	r3, r3, #4
 800a35a:	3004      	addeq	r0, #4
 800a35c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a360:	bf04      	itt	eq
 800a362:	009b      	lsleq	r3, r3, #2
 800a364:	3002      	addeq	r0, #2
 800a366:	2b00      	cmp	r3, #0
 800a368:	db06      	blt.n	800a378 <__hi0bits+0x3c>
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	d503      	bpl.n	800a376 <__hi0bits+0x3a>
 800a36e:	3001      	adds	r0, #1
 800a370:	4770      	bx	lr
 800a372:	2000      	movs	r0, #0
 800a374:	e7e8      	b.n	800a348 <__hi0bits+0xc>
 800a376:	2020      	movs	r0, #32
 800a378:	4770      	bx	lr

0800a37a <__lo0bits>:
 800a37a:	6803      	ldr	r3, [r0, #0]
 800a37c:	f013 0207 	ands.w	r2, r3, #7
 800a380:	4601      	mov	r1, r0
 800a382:	d00b      	beq.n	800a39c <__lo0bits+0x22>
 800a384:	07da      	lsls	r2, r3, #31
 800a386:	d423      	bmi.n	800a3d0 <__lo0bits+0x56>
 800a388:	0798      	lsls	r0, r3, #30
 800a38a:	bf49      	itett	mi
 800a38c:	085b      	lsrmi	r3, r3, #1
 800a38e:	089b      	lsrpl	r3, r3, #2
 800a390:	2001      	movmi	r0, #1
 800a392:	600b      	strmi	r3, [r1, #0]
 800a394:	bf5c      	itt	pl
 800a396:	600b      	strpl	r3, [r1, #0]
 800a398:	2002      	movpl	r0, #2
 800a39a:	4770      	bx	lr
 800a39c:	b298      	uxth	r0, r3
 800a39e:	b9a8      	cbnz	r0, 800a3cc <__lo0bits+0x52>
 800a3a0:	0c1b      	lsrs	r3, r3, #16
 800a3a2:	2010      	movs	r0, #16
 800a3a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3a8:	bf04      	itt	eq
 800a3aa:	0a1b      	lsreq	r3, r3, #8
 800a3ac:	3008      	addeq	r0, #8
 800a3ae:	071a      	lsls	r2, r3, #28
 800a3b0:	bf04      	itt	eq
 800a3b2:	091b      	lsreq	r3, r3, #4
 800a3b4:	3004      	addeq	r0, #4
 800a3b6:	079a      	lsls	r2, r3, #30
 800a3b8:	bf04      	itt	eq
 800a3ba:	089b      	lsreq	r3, r3, #2
 800a3bc:	3002      	addeq	r0, #2
 800a3be:	07da      	lsls	r2, r3, #31
 800a3c0:	d402      	bmi.n	800a3c8 <__lo0bits+0x4e>
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	d006      	beq.n	800a3d4 <__lo0bits+0x5a>
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	600b      	str	r3, [r1, #0]
 800a3ca:	4770      	bx	lr
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	e7e9      	b.n	800a3a4 <__lo0bits+0x2a>
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	4770      	bx	lr
 800a3d4:	2020      	movs	r0, #32
 800a3d6:	4770      	bx	lr

0800a3d8 <__i2b>:
 800a3d8:	b510      	push	{r4, lr}
 800a3da:	460c      	mov	r4, r1
 800a3dc:	2101      	movs	r1, #1
 800a3de:	f7ff ff27 	bl	800a230 <_Balloc>
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	6144      	str	r4, [r0, #20]
 800a3e6:	6102      	str	r2, [r0, #16]
 800a3e8:	bd10      	pop	{r4, pc}

0800a3ea <__multiply>:
 800a3ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ee:	4614      	mov	r4, r2
 800a3f0:	690a      	ldr	r2, [r1, #16]
 800a3f2:	6923      	ldr	r3, [r4, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	bfb8      	it	lt
 800a3f8:	460b      	movlt	r3, r1
 800a3fa:	4688      	mov	r8, r1
 800a3fc:	bfbc      	itt	lt
 800a3fe:	46a0      	movlt	r8, r4
 800a400:	461c      	movlt	r4, r3
 800a402:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a406:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a40a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a40e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a412:	eb07 0609 	add.w	r6, r7, r9
 800a416:	42b3      	cmp	r3, r6
 800a418:	bfb8      	it	lt
 800a41a:	3101      	addlt	r1, #1
 800a41c:	f7ff ff08 	bl	800a230 <_Balloc>
 800a420:	f100 0514 	add.w	r5, r0, #20
 800a424:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a428:	462b      	mov	r3, r5
 800a42a:	2200      	movs	r2, #0
 800a42c:	4573      	cmp	r3, lr
 800a42e:	d316      	bcc.n	800a45e <__multiply+0x74>
 800a430:	f104 0214 	add.w	r2, r4, #20
 800a434:	f108 0114 	add.w	r1, r8, #20
 800a438:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a43c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a440:	9300      	str	r3, [sp, #0]
 800a442:	9b00      	ldr	r3, [sp, #0]
 800a444:	9201      	str	r2, [sp, #4]
 800a446:	4293      	cmp	r3, r2
 800a448:	d80c      	bhi.n	800a464 <__multiply+0x7a>
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	dd03      	ble.n	800a456 <__multiply+0x6c>
 800a44e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a452:	2b00      	cmp	r3, #0
 800a454:	d05d      	beq.n	800a512 <__multiply+0x128>
 800a456:	6106      	str	r6, [r0, #16]
 800a458:	b003      	add	sp, #12
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45e:	f843 2b04 	str.w	r2, [r3], #4
 800a462:	e7e3      	b.n	800a42c <__multiply+0x42>
 800a464:	f8b2 b000 	ldrh.w	fp, [r2]
 800a468:	f1bb 0f00 	cmp.w	fp, #0
 800a46c:	d023      	beq.n	800a4b6 <__multiply+0xcc>
 800a46e:	4689      	mov	r9, r1
 800a470:	46ac      	mov	ip, r5
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	f859 4b04 	ldr.w	r4, [r9], #4
 800a47a:	f8dc a000 	ldr.w	sl, [ip]
 800a47e:	b2a3      	uxth	r3, r4
 800a480:	fa1f fa8a 	uxth.w	sl, sl
 800a484:	fb0b a303 	mla	r3, fp, r3, sl
 800a488:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a48c:	f8dc 4000 	ldr.w	r4, [ip]
 800a490:	4443      	add	r3, r8
 800a492:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a496:	fb0b 840a 	mla	r4, fp, sl, r8
 800a49a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a49e:	46e2      	mov	sl, ip
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4a6:	454f      	cmp	r7, r9
 800a4a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4ac:	f84a 3b04 	str.w	r3, [sl], #4
 800a4b0:	d82b      	bhi.n	800a50a <__multiply+0x120>
 800a4b2:	f8cc 8004 	str.w	r8, [ip, #4]
 800a4b6:	9b01      	ldr	r3, [sp, #4]
 800a4b8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a4bc:	3204      	adds	r2, #4
 800a4be:	f1ba 0f00 	cmp.w	sl, #0
 800a4c2:	d020      	beq.n	800a506 <__multiply+0x11c>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	4689      	mov	r9, r1
 800a4c8:	46a8      	mov	r8, r5
 800a4ca:	f04f 0b00 	mov.w	fp, #0
 800a4ce:	f8b9 c000 	ldrh.w	ip, [r9]
 800a4d2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a4d6:	fb0a 440c 	mla	r4, sl, ip, r4
 800a4da:	445c      	add	r4, fp
 800a4dc:	46c4      	mov	ip, r8
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4e4:	f84c 3b04 	str.w	r3, [ip], #4
 800a4e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4ec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a4f0:	0c1b      	lsrs	r3, r3, #16
 800a4f2:	fb0a b303 	mla	r3, sl, r3, fp
 800a4f6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a4fa:	454f      	cmp	r7, r9
 800a4fc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a500:	d805      	bhi.n	800a50e <__multiply+0x124>
 800a502:	f8c8 3004 	str.w	r3, [r8, #4]
 800a506:	3504      	adds	r5, #4
 800a508:	e79b      	b.n	800a442 <__multiply+0x58>
 800a50a:	46d4      	mov	ip, sl
 800a50c:	e7b3      	b.n	800a476 <__multiply+0x8c>
 800a50e:	46e0      	mov	r8, ip
 800a510:	e7dd      	b.n	800a4ce <__multiply+0xe4>
 800a512:	3e01      	subs	r6, #1
 800a514:	e799      	b.n	800a44a <__multiply+0x60>
	...

0800a518 <__pow5mult>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	4615      	mov	r5, r2
 800a51e:	f012 0203 	ands.w	r2, r2, #3
 800a522:	4606      	mov	r6, r0
 800a524:	460f      	mov	r7, r1
 800a526:	d007      	beq.n	800a538 <__pow5mult+0x20>
 800a528:	3a01      	subs	r2, #1
 800a52a:	4c21      	ldr	r4, [pc, #132]	; (800a5b0 <__pow5mult+0x98>)
 800a52c:	2300      	movs	r3, #0
 800a52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a532:	f7ff fec8 	bl	800a2c6 <__multadd>
 800a536:	4607      	mov	r7, r0
 800a538:	10ad      	asrs	r5, r5, #2
 800a53a:	d035      	beq.n	800a5a8 <__pow5mult+0x90>
 800a53c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a53e:	b93c      	cbnz	r4, 800a550 <__pow5mult+0x38>
 800a540:	2010      	movs	r0, #16
 800a542:	f7fd fe2b 	bl	800819c <malloc>
 800a546:	6270      	str	r0, [r6, #36]	; 0x24
 800a548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a54c:	6004      	str	r4, [r0, #0]
 800a54e:	60c4      	str	r4, [r0, #12]
 800a550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a558:	b94c      	cbnz	r4, 800a56e <__pow5mult+0x56>
 800a55a:	f240 2171 	movw	r1, #625	; 0x271
 800a55e:	4630      	mov	r0, r6
 800a560:	f7ff ff3a 	bl	800a3d8 <__i2b>
 800a564:	2300      	movs	r3, #0
 800a566:	f8c8 0008 	str.w	r0, [r8, #8]
 800a56a:	4604      	mov	r4, r0
 800a56c:	6003      	str	r3, [r0, #0]
 800a56e:	f04f 0800 	mov.w	r8, #0
 800a572:	07eb      	lsls	r3, r5, #31
 800a574:	d50a      	bpl.n	800a58c <__pow5mult+0x74>
 800a576:	4639      	mov	r1, r7
 800a578:	4622      	mov	r2, r4
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7ff ff35 	bl	800a3ea <__multiply>
 800a580:	4639      	mov	r1, r7
 800a582:	4681      	mov	r9, r0
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff fe87 	bl	800a298 <_Bfree>
 800a58a:	464f      	mov	r7, r9
 800a58c:	106d      	asrs	r5, r5, #1
 800a58e:	d00b      	beq.n	800a5a8 <__pow5mult+0x90>
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	b938      	cbnz	r0, 800a5a4 <__pow5mult+0x8c>
 800a594:	4622      	mov	r2, r4
 800a596:	4621      	mov	r1, r4
 800a598:	4630      	mov	r0, r6
 800a59a:	f7ff ff26 	bl	800a3ea <__multiply>
 800a59e:	6020      	str	r0, [r4, #0]
 800a5a0:	f8c0 8000 	str.w	r8, [r0]
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	e7e4      	b.n	800a572 <__pow5mult+0x5a>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0800bce0 	.word	0x0800bce0

0800a5b4 <__lshift>:
 800a5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5be:	6923      	ldr	r3, [r4, #16]
 800a5c0:	6849      	ldr	r1, [r1, #4]
 800a5c2:	eb0a 0903 	add.w	r9, sl, r3
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	4616      	mov	r6, r2
 800a5cc:	f109 0501 	add.w	r5, r9, #1
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	db32      	blt.n	800a63a <__lshift+0x86>
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff fe2b 	bl	800a230 <_Balloc>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4680      	mov	r8, r0
 800a5de:	f100 0114 	add.w	r1, r0, #20
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4553      	cmp	r3, sl
 800a5e6:	db2b      	blt.n	800a640 <__lshift+0x8c>
 800a5e8:	6920      	ldr	r0, [r4, #16]
 800a5ea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5ee:	f104 0314 	add.w	r3, r4, #20
 800a5f2:	f016 021f 	ands.w	r2, r6, #31
 800a5f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5fa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5fe:	d025      	beq.n	800a64c <__lshift+0x98>
 800a600:	f1c2 0e20 	rsb	lr, r2, #32
 800a604:	2000      	movs	r0, #0
 800a606:	681e      	ldr	r6, [r3, #0]
 800a608:	468a      	mov	sl, r1
 800a60a:	4096      	lsls	r6, r2
 800a60c:	4330      	orrs	r0, r6
 800a60e:	f84a 0b04 	str.w	r0, [sl], #4
 800a612:	f853 0b04 	ldr.w	r0, [r3], #4
 800a616:	459c      	cmp	ip, r3
 800a618:	fa20 f00e 	lsr.w	r0, r0, lr
 800a61c:	d814      	bhi.n	800a648 <__lshift+0x94>
 800a61e:	6048      	str	r0, [r1, #4]
 800a620:	b108      	cbz	r0, 800a626 <__lshift+0x72>
 800a622:	f109 0502 	add.w	r5, r9, #2
 800a626:	3d01      	subs	r5, #1
 800a628:	4638      	mov	r0, r7
 800a62a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a62e:	4621      	mov	r1, r4
 800a630:	f7ff fe32 	bl	800a298 <_Bfree>
 800a634:	4640      	mov	r0, r8
 800a636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63a:	3101      	adds	r1, #1
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	e7c7      	b.n	800a5d0 <__lshift+0x1c>
 800a640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a644:	3301      	adds	r3, #1
 800a646:	e7cd      	b.n	800a5e4 <__lshift+0x30>
 800a648:	4651      	mov	r1, sl
 800a64a:	e7dc      	b.n	800a606 <__lshift+0x52>
 800a64c:	3904      	subs	r1, #4
 800a64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a652:	f841 2f04 	str.w	r2, [r1, #4]!
 800a656:	459c      	cmp	ip, r3
 800a658:	d8f9      	bhi.n	800a64e <__lshift+0x9a>
 800a65a:	e7e4      	b.n	800a626 <__lshift+0x72>

0800a65c <__mcmp>:
 800a65c:	6903      	ldr	r3, [r0, #16]
 800a65e:	690a      	ldr	r2, [r1, #16]
 800a660:	1a9b      	subs	r3, r3, r2
 800a662:	b530      	push	{r4, r5, lr}
 800a664:	d10c      	bne.n	800a680 <__mcmp+0x24>
 800a666:	0092      	lsls	r2, r2, #2
 800a668:	3014      	adds	r0, #20
 800a66a:	3114      	adds	r1, #20
 800a66c:	1884      	adds	r4, r0, r2
 800a66e:	4411      	add	r1, r2
 800a670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a678:	4295      	cmp	r5, r2
 800a67a:	d003      	beq.n	800a684 <__mcmp+0x28>
 800a67c:	d305      	bcc.n	800a68a <__mcmp+0x2e>
 800a67e:	2301      	movs	r3, #1
 800a680:	4618      	mov	r0, r3
 800a682:	bd30      	pop	{r4, r5, pc}
 800a684:	42a0      	cmp	r0, r4
 800a686:	d3f3      	bcc.n	800a670 <__mcmp+0x14>
 800a688:	e7fa      	b.n	800a680 <__mcmp+0x24>
 800a68a:	f04f 33ff 	mov.w	r3, #4294967295
 800a68e:	e7f7      	b.n	800a680 <__mcmp+0x24>

0800a690 <__mdiff>:
 800a690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a694:	460d      	mov	r5, r1
 800a696:	4607      	mov	r7, r0
 800a698:	4611      	mov	r1, r2
 800a69a:	4628      	mov	r0, r5
 800a69c:	4614      	mov	r4, r2
 800a69e:	f7ff ffdd 	bl	800a65c <__mcmp>
 800a6a2:	1e06      	subs	r6, r0, #0
 800a6a4:	d108      	bne.n	800a6b8 <__mdiff+0x28>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	f7ff fdc1 	bl	800a230 <_Balloc>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b8:	bfa4      	itt	ge
 800a6ba:	4623      	movge	r3, r4
 800a6bc:	462c      	movge	r4, r5
 800a6be:	4638      	mov	r0, r7
 800a6c0:	6861      	ldr	r1, [r4, #4]
 800a6c2:	bfa6      	itte	ge
 800a6c4:	461d      	movge	r5, r3
 800a6c6:	2600      	movge	r6, #0
 800a6c8:	2601      	movlt	r6, #1
 800a6ca:	f7ff fdb1 	bl	800a230 <_Balloc>
 800a6ce:	692b      	ldr	r3, [r5, #16]
 800a6d0:	60c6      	str	r6, [r0, #12]
 800a6d2:	6926      	ldr	r6, [r4, #16]
 800a6d4:	f105 0914 	add.w	r9, r5, #20
 800a6d8:	f104 0214 	add.w	r2, r4, #20
 800a6dc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a6e0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a6e4:	f100 0514 	add.w	r5, r0, #20
 800a6e8:	f04f 0e00 	mov.w	lr, #0
 800a6ec:	f852 ab04 	ldr.w	sl, [r2], #4
 800a6f0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a6f4:	fa1e f18a 	uxtah	r1, lr, sl
 800a6f8:	b2a3      	uxth	r3, r4
 800a6fa:	1ac9      	subs	r1, r1, r3
 800a6fc:	0c23      	lsrs	r3, r4, #16
 800a6fe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a702:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a706:	b289      	uxth	r1, r1
 800a708:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a70c:	45c8      	cmp	r8, r9
 800a70e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a712:	4694      	mov	ip, r2
 800a714:	f845 3b04 	str.w	r3, [r5], #4
 800a718:	d8e8      	bhi.n	800a6ec <__mdiff+0x5c>
 800a71a:	45bc      	cmp	ip, r7
 800a71c:	d304      	bcc.n	800a728 <__mdiff+0x98>
 800a71e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a722:	b183      	cbz	r3, 800a746 <__mdiff+0xb6>
 800a724:	6106      	str	r6, [r0, #16]
 800a726:	e7c5      	b.n	800a6b4 <__mdiff+0x24>
 800a728:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a72c:	fa1e f381 	uxtah	r3, lr, r1
 800a730:	141a      	asrs	r2, r3, #16
 800a732:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a736:	b29b      	uxth	r3, r3
 800a738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a73c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a740:	f845 3b04 	str.w	r3, [r5], #4
 800a744:	e7e9      	b.n	800a71a <__mdiff+0x8a>
 800a746:	3e01      	subs	r6, #1
 800a748:	e7e9      	b.n	800a71e <__mdiff+0x8e>

0800a74a <__d2b>:
 800a74a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a74e:	460e      	mov	r6, r1
 800a750:	2101      	movs	r1, #1
 800a752:	ec59 8b10 	vmov	r8, r9, d0
 800a756:	4615      	mov	r5, r2
 800a758:	f7ff fd6a 	bl	800a230 <_Balloc>
 800a75c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a760:	4607      	mov	r7, r0
 800a762:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a766:	bb34      	cbnz	r4, 800a7b6 <__d2b+0x6c>
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	f1b8 0300 	subs.w	r3, r8, #0
 800a76e:	d027      	beq.n	800a7c0 <__d2b+0x76>
 800a770:	a802      	add	r0, sp, #8
 800a772:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a776:	f7ff fe00 	bl	800a37a <__lo0bits>
 800a77a:	9900      	ldr	r1, [sp, #0]
 800a77c:	b1f0      	cbz	r0, 800a7bc <__d2b+0x72>
 800a77e:	9a01      	ldr	r2, [sp, #4]
 800a780:	f1c0 0320 	rsb	r3, r0, #32
 800a784:	fa02 f303 	lsl.w	r3, r2, r3
 800a788:	430b      	orrs	r3, r1
 800a78a:	40c2      	lsrs	r2, r0
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	9201      	str	r2, [sp, #4]
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	61bb      	str	r3, [r7, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	bf14      	ite	ne
 800a798:	2102      	movne	r1, #2
 800a79a:	2101      	moveq	r1, #1
 800a79c:	6139      	str	r1, [r7, #16]
 800a79e:	b1c4      	cbz	r4, 800a7d2 <__d2b+0x88>
 800a7a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a7a4:	4404      	add	r4, r0
 800a7a6:	6034      	str	r4, [r6, #0]
 800a7a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7ac:	6028      	str	r0, [r5, #0]
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	b003      	add	sp, #12
 800a7b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7ba:	e7d5      	b.n	800a768 <__d2b+0x1e>
 800a7bc:	6179      	str	r1, [r7, #20]
 800a7be:	e7e7      	b.n	800a790 <__d2b+0x46>
 800a7c0:	a801      	add	r0, sp, #4
 800a7c2:	f7ff fdda 	bl	800a37a <__lo0bits>
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	6139      	str	r1, [r7, #16]
 800a7ce:	3020      	adds	r0, #32
 800a7d0:	e7e5      	b.n	800a79e <__d2b+0x54>
 800a7d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a7d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7da:	6030      	str	r0, [r6, #0]
 800a7dc:	6918      	ldr	r0, [r3, #16]
 800a7de:	f7ff fdad 	bl	800a33c <__hi0bits>
 800a7e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a7e6:	e7e1      	b.n	800a7ac <__d2b+0x62>

0800a7e8 <_calloc_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	fb02 f401 	mul.w	r4, r2, r1
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	f7fd fd32 	bl	8008258 <_malloc_r>
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	b118      	cbz	r0, 800a800 <_calloc_r+0x18>
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	f7fd fcd6 	bl	80081ac <memset>
 800a800:	4628      	mov	r0, r5
 800a802:	bd38      	pop	{r3, r4, r5, pc}

0800a804 <_realloc_r>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	4607      	mov	r7, r0
 800a808:	4614      	mov	r4, r2
 800a80a:	460e      	mov	r6, r1
 800a80c:	b921      	cbnz	r1, 800a818 <_realloc_r+0x14>
 800a80e:	4611      	mov	r1, r2
 800a810:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a814:	f7fd bd20 	b.w	8008258 <_malloc_r>
 800a818:	b922      	cbnz	r2, 800a824 <_realloc_r+0x20>
 800a81a:	f7fd fccf 	bl	80081bc <_free_r>
 800a81e:	4625      	mov	r5, r4
 800a820:	4628      	mov	r0, r5
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a824:	f000 fa50 	bl	800acc8 <_malloc_usable_size_r>
 800a828:	42a0      	cmp	r0, r4
 800a82a:	d20f      	bcs.n	800a84c <_realloc_r+0x48>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4638      	mov	r0, r7
 800a830:	f7fd fd12 	bl	8008258 <_malloc_r>
 800a834:	4605      	mov	r5, r0
 800a836:	2800      	cmp	r0, #0
 800a838:	d0f2      	beq.n	800a820 <_realloc_r+0x1c>
 800a83a:	4631      	mov	r1, r6
 800a83c:	4622      	mov	r2, r4
 800a83e:	f7ff fcd1 	bl	800a1e4 <memcpy>
 800a842:	4631      	mov	r1, r6
 800a844:	4638      	mov	r0, r7
 800a846:	f7fd fcb9 	bl	80081bc <_free_r>
 800a84a:	e7e9      	b.n	800a820 <_realloc_r+0x1c>
 800a84c:	4635      	mov	r5, r6
 800a84e:	e7e7      	b.n	800a820 <_realloc_r+0x1c>

0800a850 <__ssputs_r>:
 800a850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a854:	688e      	ldr	r6, [r1, #8]
 800a856:	429e      	cmp	r6, r3
 800a858:	4682      	mov	sl, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	4690      	mov	r8, r2
 800a85e:	4699      	mov	r9, r3
 800a860:	d837      	bhi.n	800a8d2 <__ssputs_r+0x82>
 800a862:	898a      	ldrh	r2, [r1, #12]
 800a864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a868:	d031      	beq.n	800a8ce <__ssputs_r+0x7e>
 800a86a:	6825      	ldr	r5, [r4, #0]
 800a86c:	6909      	ldr	r1, [r1, #16]
 800a86e:	1a6f      	subs	r7, r5, r1
 800a870:	6965      	ldr	r5, [r4, #20]
 800a872:	2302      	movs	r3, #2
 800a874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a878:	fb95 f5f3 	sdiv	r5, r5, r3
 800a87c:	f109 0301 	add.w	r3, r9, #1
 800a880:	443b      	add	r3, r7
 800a882:	429d      	cmp	r5, r3
 800a884:	bf38      	it	cc
 800a886:	461d      	movcc	r5, r3
 800a888:	0553      	lsls	r3, r2, #21
 800a88a:	d530      	bpl.n	800a8ee <__ssputs_r+0x9e>
 800a88c:	4629      	mov	r1, r5
 800a88e:	f7fd fce3 	bl	8008258 <_malloc_r>
 800a892:	4606      	mov	r6, r0
 800a894:	b950      	cbnz	r0, 800a8ac <__ssputs_r+0x5c>
 800a896:	230c      	movs	r3, #12
 800a898:	f8ca 3000 	str.w	r3, [sl]
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a2:	81a3      	strh	r3, [r4, #12]
 800a8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ac:	463a      	mov	r2, r7
 800a8ae:	6921      	ldr	r1, [r4, #16]
 800a8b0:	f7ff fc98 	bl	800a1e4 <memcpy>
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	6126      	str	r6, [r4, #16]
 800a8c2:	6165      	str	r5, [r4, #20]
 800a8c4:	443e      	add	r6, r7
 800a8c6:	1bed      	subs	r5, r5, r7
 800a8c8:	6026      	str	r6, [r4, #0]
 800a8ca:	60a5      	str	r5, [r4, #8]
 800a8cc:	464e      	mov	r6, r9
 800a8ce:	454e      	cmp	r6, r9
 800a8d0:	d900      	bls.n	800a8d4 <__ssputs_r+0x84>
 800a8d2:	464e      	mov	r6, r9
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	6820      	ldr	r0, [r4, #0]
 800a8da:	f7ff fc8e 	bl	800a1fa <memmove>
 800a8de:	68a3      	ldr	r3, [r4, #8]
 800a8e0:	1b9b      	subs	r3, r3, r6
 800a8e2:	60a3      	str	r3, [r4, #8]
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	441e      	add	r6, r3
 800a8e8:	6026      	str	r6, [r4, #0]
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7dc      	b.n	800a8a8 <__ssputs_r+0x58>
 800a8ee:	462a      	mov	r2, r5
 800a8f0:	f7ff ff88 	bl	800a804 <_realloc_r>
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d1e2      	bne.n	800a8c0 <__ssputs_r+0x70>
 800a8fa:	6921      	ldr	r1, [r4, #16]
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	f7fd fc5d 	bl	80081bc <_free_r>
 800a902:	e7c8      	b.n	800a896 <__ssputs_r+0x46>

0800a904 <_svfiprintf_r>:
 800a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	461d      	mov	r5, r3
 800a90a:	898b      	ldrh	r3, [r1, #12]
 800a90c:	061f      	lsls	r7, r3, #24
 800a90e:	b09d      	sub	sp, #116	; 0x74
 800a910:	4680      	mov	r8, r0
 800a912:	460c      	mov	r4, r1
 800a914:	4616      	mov	r6, r2
 800a916:	d50f      	bpl.n	800a938 <_svfiprintf_r+0x34>
 800a918:	690b      	ldr	r3, [r1, #16]
 800a91a:	b96b      	cbnz	r3, 800a938 <_svfiprintf_r+0x34>
 800a91c:	2140      	movs	r1, #64	; 0x40
 800a91e:	f7fd fc9b 	bl	8008258 <_malloc_r>
 800a922:	6020      	str	r0, [r4, #0]
 800a924:	6120      	str	r0, [r4, #16]
 800a926:	b928      	cbnz	r0, 800a934 <_svfiprintf_r+0x30>
 800a928:	230c      	movs	r3, #12
 800a92a:	f8c8 3000 	str.w	r3, [r8]
 800a92e:	f04f 30ff 	mov.w	r0, #4294967295
 800a932:	e0c8      	b.n	800aac6 <_svfiprintf_r+0x1c2>
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	6163      	str	r3, [r4, #20]
 800a938:	2300      	movs	r3, #0
 800a93a:	9309      	str	r3, [sp, #36]	; 0x24
 800a93c:	2320      	movs	r3, #32
 800a93e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a942:	2330      	movs	r3, #48	; 0x30
 800a944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a948:	9503      	str	r5, [sp, #12]
 800a94a:	f04f 0b01 	mov.w	fp, #1
 800a94e:	4637      	mov	r7, r6
 800a950:	463d      	mov	r5, r7
 800a952:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a956:	b10b      	cbz	r3, 800a95c <_svfiprintf_r+0x58>
 800a958:	2b25      	cmp	r3, #37	; 0x25
 800a95a:	d13e      	bne.n	800a9da <_svfiprintf_r+0xd6>
 800a95c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a960:	d00b      	beq.n	800a97a <_svfiprintf_r+0x76>
 800a962:	4653      	mov	r3, sl
 800a964:	4632      	mov	r2, r6
 800a966:	4621      	mov	r1, r4
 800a968:	4640      	mov	r0, r8
 800a96a:	f7ff ff71 	bl	800a850 <__ssputs_r>
 800a96e:	3001      	adds	r0, #1
 800a970:	f000 80a4 	beq.w	800aabc <_svfiprintf_r+0x1b8>
 800a974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a976:	4453      	add	r3, sl
 800a978:	9309      	str	r3, [sp, #36]	; 0x24
 800a97a:	783b      	ldrb	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 809d 	beq.w	800aabc <_svfiprintf_r+0x1b8>
 800a982:	2300      	movs	r3, #0
 800a984:	f04f 32ff 	mov.w	r2, #4294967295
 800a988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	9307      	str	r3, [sp, #28]
 800a990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a994:	931a      	str	r3, [sp, #104]	; 0x68
 800a996:	462f      	mov	r7, r5
 800a998:	2205      	movs	r2, #5
 800a99a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a99e:	4850      	ldr	r0, [pc, #320]	; (800aae0 <_svfiprintf_r+0x1dc>)
 800a9a0:	f7f5 fc46 	bl	8000230 <memchr>
 800a9a4:	9b04      	ldr	r3, [sp, #16]
 800a9a6:	b9d0      	cbnz	r0, 800a9de <_svfiprintf_r+0xda>
 800a9a8:	06d9      	lsls	r1, r3, #27
 800a9aa:	bf44      	itt	mi
 800a9ac:	2220      	movmi	r2, #32
 800a9ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9b2:	071a      	lsls	r2, r3, #28
 800a9b4:	bf44      	itt	mi
 800a9b6:	222b      	movmi	r2, #43	; 0x2b
 800a9b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a9bc:	782a      	ldrb	r2, [r5, #0]
 800a9be:	2a2a      	cmp	r2, #42	; 0x2a
 800a9c0:	d015      	beq.n	800a9ee <_svfiprintf_r+0xea>
 800a9c2:	9a07      	ldr	r2, [sp, #28]
 800a9c4:	462f      	mov	r7, r5
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	250a      	movs	r5, #10
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9d0:	3b30      	subs	r3, #48	; 0x30
 800a9d2:	2b09      	cmp	r3, #9
 800a9d4:	d94d      	bls.n	800aa72 <_svfiprintf_r+0x16e>
 800a9d6:	b1b8      	cbz	r0, 800aa08 <_svfiprintf_r+0x104>
 800a9d8:	e00f      	b.n	800a9fa <_svfiprintf_r+0xf6>
 800a9da:	462f      	mov	r7, r5
 800a9dc:	e7b8      	b.n	800a950 <_svfiprintf_r+0x4c>
 800a9de:	4a40      	ldr	r2, [pc, #256]	; (800aae0 <_svfiprintf_r+0x1dc>)
 800a9e0:	1a80      	subs	r0, r0, r2
 800a9e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a9e6:	4318      	orrs	r0, r3
 800a9e8:	9004      	str	r0, [sp, #16]
 800a9ea:	463d      	mov	r5, r7
 800a9ec:	e7d3      	b.n	800a996 <_svfiprintf_r+0x92>
 800a9ee:	9a03      	ldr	r2, [sp, #12]
 800a9f0:	1d11      	adds	r1, r2, #4
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	9103      	str	r1, [sp, #12]
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	db01      	blt.n	800a9fe <_svfiprintf_r+0xfa>
 800a9fa:	9207      	str	r2, [sp, #28]
 800a9fc:	e004      	b.n	800aa08 <_svfiprintf_r+0x104>
 800a9fe:	4252      	negs	r2, r2
 800aa00:	f043 0302 	orr.w	r3, r3, #2
 800aa04:	9207      	str	r2, [sp, #28]
 800aa06:	9304      	str	r3, [sp, #16]
 800aa08:	783b      	ldrb	r3, [r7, #0]
 800aa0a:	2b2e      	cmp	r3, #46	; 0x2e
 800aa0c:	d10c      	bne.n	800aa28 <_svfiprintf_r+0x124>
 800aa0e:	787b      	ldrb	r3, [r7, #1]
 800aa10:	2b2a      	cmp	r3, #42	; 0x2a
 800aa12:	d133      	bne.n	800aa7c <_svfiprintf_r+0x178>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	1d1a      	adds	r2, r3, #4
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	9203      	str	r2, [sp, #12]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bfb8      	it	lt
 800aa20:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa24:	3702      	adds	r7, #2
 800aa26:	9305      	str	r3, [sp, #20]
 800aa28:	4d2e      	ldr	r5, [pc, #184]	; (800aae4 <_svfiprintf_r+0x1e0>)
 800aa2a:	7839      	ldrb	r1, [r7, #0]
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f7f5 fbfe 	bl	8000230 <memchr>
 800aa34:	b138      	cbz	r0, 800aa46 <_svfiprintf_r+0x142>
 800aa36:	2340      	movs	r3, #64	; 0x40
 800aa38:	1b40      	subs	r0, r0, r5
 800aa3a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa3e:	9b04      	ldr	r3, [sp, #16]
 800aa40:	4303      	orrs	r3, r0
 800aa42:	3701      	adds	r7, #1
 800aa44:	9304      	str	r3, [sp, #16]
 800aa46:	7839      	ldrb	r1, [r7, #0]
 800aa48:	4827      	ldr	r0, [pc, #156]	; (800aae8 <_svfiprintf_r+0x1e4>)
 800aa4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa4e:	2206      	movs	r2, #6
 800aa50:	1c7e      	adds	r6, r7, #1
 800aa52:	f7f5 fbed 	bl	8000230 <memchr>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d038      	beq.n	800aacc <_svfiprintf_r+0x1c8>
 800aa5a:	4b24      	ldr	r3, [pc, #144]	; (800aaec <_svfiprintf_r+0x1e8>)
 800aa5c:	bb13      	cbnz	r3, 800aaa4 <_svfiprintf_r+0x1a0>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	3307      	adds	r3, #7
 800aa62:	f023 0307 	bic.w	r3, r3, #7
 800aa66:	3308      	adds	r3, #8
 800aa68:	9303      	str	r3, [sp, #12]
 800aa6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa6c:	444b      	add	r3, r9
 800aa6e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa70:	e76d      	b.n	800a94e <_svfiprintf_r+0x4a>
 800aa72:	fb05 3202 	mla	r2, r5, r2, r3
 800aa76:	2001      	movs	r0, #1
 800aa78:	460f      	mov	r7, r1
 800aa7a:	e7a6      	b.n	800a9ca <_svfiprintf_r+0xc6>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	3701      	adds	r7, #1
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	4619      	mov	r1, r3
 800aa84:	250a      	movs	r5, #10
 800aa86:	4638      	mov	r0, r7
 800aa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa8c:	3a30      	subs	r2, #48	; 0x30
 800aa8e:	2a09      	cmp	r2, #9
 800aa90:	d903      	bls.n	800aa9a <_svfiprintf_r+0x196>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0c8      	beq.n	800aa28 <_svfiprintf_r+0x124>
 800aa96:	9105      	str	r1, [sp, #20]
 800aa98:	e7c6      	b.n	800aa28 <_svfiprintf_r+0x124>
 800aa9a:	fb05 2101 	mla	r1, r5, r1, r2
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	e7f0      	b.n	800aa86 <_svfiprintf_r+0x182>
 800aaa4:	ab03      	add	r3, sp, #12
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	4b11      	ldr	r3, [pc, #68]	; (800aaf0 <_svfiprintf_r+0x1ec>)
 800aaac:	a904      	add	r1, sp, #16
 800aaae:	4640      	mov	r0, r8
 800aab0:	f7fd fe00 	bl	80086b4 <_printf_float>
 800aab4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aab8:	4681      	mov	r9, r0
 800aaba:	d1d6      	bne.n	800aa6a <_svfiprintf_r+0x166>
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	065b      	lsls	r3, r3, #25
 800aac0:	f53f af35 	bmi.w	800a92e <_svfiprintf_r+0x2a>
 800aac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aac6:	b01d      	add	sp, #116	; 0x74
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aacc:	ab03      	add	r3, sp, #12
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	4622      	mov	r2, r4
 800aad2:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <_svfiprintf_r+0x1ec>)
 800aad4:	a904      	add	r1, sp, #16
 800aad6:	4640      	mov	r0, r8
 800aad8:	f7fe f8a2 	bl	8008c20 <_printf_i>
 800aadc:	e7ea      	b.n	800aab4 <_svfiprintf_r+0x1b0>
 800aade:	bf00      	nop
 800aae0:	0800bb30 	.word	0x0800bb30
 800aae4:	0800bb36 	.word	0x0800bb36
 800aae8:	0800bb3a 	.word	0x0800bb3a
 800aaec:	080086b5 	.word	0x080086b5
 800aaf0:	0800a851 	.word	0x0800a851

0800aaf4 <_raise_r>:
 800aaf4:	291f      	cmp	r1, #31
 800aaf6:	b538      	push	{r3, r4, r5, lr}
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	d904      	bls.n	800ab08 <_raise_r+0x14>
 800aafe:	2316      	movs	r3, #22
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	f04f 30ff 	mov.w	r0, #4294967295
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab0a:	b112      	cbz	r2, 800ab12 <_raise_r+0x1e>
 800ab0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab10:	b94b      	cbnz	r3, 800ab26 <_raise_r+0x32>
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 f830 	bl	800ab78 <_getpid_r>
 800ab18:	462a      	mov	r2, r5
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab22:	f000 b817 	b.w	800ab54 <_kill_r>
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d00a      	beq.n	800ab40 <_raise_r+0x4c>
 800ab2a:	1c59      	adds	r1, r3, #1
 800ab2c:	d103      	bne.n	800ab36 <_raise_r+0x42>
 800ab2e:	2316      	movs	r3, #22
 800ab30:	6003      	str	r3, [r0, #0]
 800ab32:	2001      	movs	r0, #1
 800ab34:	e7e7      	b.n	800ab06 <_raise_r+0x12>
 800ab36:	2400      	movs	r4, #0
 800ab38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	4798      	blx	r3
 800ab40:	2000      	movs	r0, #0
 800ab42:	e7e0      	b.n	800ab06 <_raise_r+0x12>

0800ab44 <raise>:
 800ab44:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <raise+0xc>)
 800ab46:	4601      	mov	r1, r0
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	f7ff bfd3 	b.w	800aaf4 <_raise_r>
 800ab4e:	bf00      	nop
 800ab50:	2000000c 	.word	0x2000000c

0800ab54 <_kill_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4c07      	ldr	r4, [pc, #28]	; (800ab74 <_kill_r+0x20>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	4611      	mov	r1, r2
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	f7f8 fc7c 	bl	800345e <_kill>
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	d102      	bne.n	800ab70 <_kill_r+0x1c>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	b103      	cbz	r3, 800ab70 <_kill_r+0x1c>
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	bd38      	pop	{r3, r4, r5, pc}
 800ab72:	bf00      	nop
 800ab74:	20000c20 	.word	0x20000c20

0800ab78 <_getpid_r>:
 800ab78:	f7f8 bc69 	b.w	800344e <_getpid>

0800ab7c <__sread>:
 800ab7c:	b510      	push	{r4, lr}
 800ab7e:	460c      	mov	r4, r1
 800ab80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab84:	f000 f8a8 	bl	800acd8 <_read_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	bfab      	itete	ge
 800ab8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab90:	181b      	addge	r3, r3, r0
 800ab92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab96:	bfac      	ite	ge
 800ab98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab9a:	81a3      	strhlt	r3, [r4, #12]
 800ab9c:	bd10      	pop	{r4, pc}

0800ab9e <__swrite>:
 800ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	461f      	mov	r7, r3
 800aba4:	898b      	ldrh	r3, [r1, #12]
 800aba6:	05db      	lsls	r3, r3, #23
 800aba8:	4605      	mov	r5, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	4616      	mov	r6, r2
 800abae:	d505      	bpl.n	800abbc <__swrite+0x1e>
 800abb0:	2302      	movs	r3, #2
 800abb2:	2200      	movs	r2, #0
 800abb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb8:	f000 f874 	bl	800aca4 <_lseek_r>
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	4632      	mov	r2, r6
 800abca:	463b      	mov	r3, r7
 800abcc:	4628      	mov	r0, r5
 800abce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	f000 b823 	b.w	800ac1c <_write_r>

0800abd6 <__sseek>:
 800abd6:	b510      	push	{r4, lr}
 800abd8:	460c      	mov	r4, r1
 800abda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abde:	f000 f861 	bl	800aca4 <_lseek_r>
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	bf15      	itete	ne
 800abe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800abea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abf2:	81a3      	strheq	r3, [r4, #12]
 800abf4:	bf18      	it	ne
 800abf6:	81a3      	strhne	r3, [r4, #12]
 800abf8:	bd10      	pop	{r4, pc}

0800abfa <__sclose>:
 800abfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abfe:	f000 b81f 	b.w	800ac40 <_close_r>

0800ac02 <__ascii_wctomb>:
 800ac02:	b149      	cbz	r1, 800ac18 <__ascii_wctomb+0x16>
 800ac04:	2aff      	cmp	r2, #255	; 0xff
 800ac06:	bf85      	ittet	hi
 800ac08:	238a      	movhi	r3, #138	; 0x8a
 800ac0a:	6003      	strhi	r3, [r0, #0]
 800ac0c:	700a      	strbls	r2, [r1, #0]
 800ac0e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac12:	bf98      	it	ls
 800ac14:	2001      	movls	r0, #1
 800ac16:	4770      	bx	lr
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4770      	bx	lr

0800ac1c <_write_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4c07      	ldr	r4, [pc, #28]	; (800ac3c <_write_r+0x20>)
 800ac20:	4605      	mov	r5, r0
 800ac22:	4608      	mov	r0, r1
 800ac24:	4611      	mov	r1, r2
 800ac26:	2200      	movs	r2, #0
 800ac28:	6022      	str	r2, [r4, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f7f8 fc4e 	bl	80034cc <_write>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_write_r+0x1e>
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_write_r+0x1e>
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	20000c20 	.word	0x20000c20

0800ac40 <_close_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4c06      	ldr	r4, [pc, #24]	; (800ac5c <_close_r+0x1c>)
 800ac44:	2300      	movs	r3, #0
 800ac46:	4605      	mov	r5, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	f7f8 fc5a 	bl	8003504 <_close>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d102      	bne.n	800ac5a <_close_r+0x1a>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	b103      	cbz	r3, 800ac5a <_close_r+0x1a>
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	20000c20 	.word	0x20000c20

0800ac60 <_fstat_r>:
 800ac60:	b538      	push	{r3, r4, r5, lr}
 800ac62:	4c07      	ldr	r4, [pc, #28]	; (800ac80 <_fstat_r+0x20>)
 800ac64:	2300      	movs	r3, #0
 800ac66:	4605      	mov	r5, r0
 800ac68:	4608      	mov	r0, r1
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	f7f8 fc55 	bl	800351c <_fstat>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	d102      	bne.n	800ac7c <_fstat_r+0x1c>
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	b103      	cbz	r3, 800ac7c <_fstat_r+0x1c>
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000c20 	.word	0x20000c20

0800ac84 <_isatty_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4c06      	ldr	r4, [pc, #24]	; (800aca0 <_isatty_r+0x1c>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	f7f8 fc54 	bl	800353c <_isatty>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_isatty_r+0x1a>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_isatty_r+0x1a>
 800ac9c:	602b      	str	r3, [r5, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20000c20 	.word	0x20000c20

0800aca4 <_lseek_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4c07      	ldr	r4, [pc, #28]	; (800acc4 <_lseek_r+0x20>)
 800aca8:	4605      	mov	r5, r0
 800acaa:	4608      	mov	r0, r1
 800acac:	4611      	mov	r1, r2
 800acae:	2200      	movs	r2, #0
 800acb0:	6022      	str	r2, [r4, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	f7f8 fc4d 	bl	8003552 <_lseek>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_lseek_r+0x1e>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_lseek_r+0x1e>
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	20000c20 	.word	0x20000c20

0800acc8 <_malloc_usable_size_r>:
 800acc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800accc:	1f18      	subs	r0, r3, #4
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfbc      	itt	lt
 800acd2:	580b      	ldrlt	r3, [r1, r0]
 800acd4:	18c0      	addlt	r0, r0, r3
 800acd6:	4770      	bx	lr

0800acd8 <_read_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	4c07      	ldr	r4, [pc, #28]	; (800acf8 <_read_r+0x20>)
 800acdc:	4605      	mov	r5, r0
 800acde:	4608      	mov	r0, r1
 800ace0:	4611      	mov	r1, r2
 800ace2:	2200      	movs	r2, #0
 800ace4:	6022      	str	r2, [r4, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	f7f8 fbd3 	bl	8003492 <_read>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	d102      	bne.n	800acf6 <_read_r+0x1e>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	b103      	cbz	r3, 800acf6 <_read_r+0x1e>
 800acf4:	602b      	str	r3, [r5, #0]
 800acf6:	bd38      	pop	{r3, r4, r5, pc}
 800acf8:	20000c20 	.word	0x20000c20

0800acfc <_init>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr

0800ad08 <_fini>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr
