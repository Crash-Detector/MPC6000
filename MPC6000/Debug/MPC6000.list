
MPC6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ddc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08007fa0  08007fa0  00017fa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008574  08008574  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800857c  0800857c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800857c  0800857c  0001857c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001dc  08008760  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08008760  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fd9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236e  00000000  00000000  000341e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00036558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000372f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aae4  00000000  00000000  00037fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011032  00000000  00000000  00062a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101beb  00000000  00000000  00073ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001756b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  00175704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007f84 	.word	0x08007f84

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08007f84 	.word	0x08007f84

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <readMPU>:
#define MPU_SAD_R 0b11010001 // The last bit corresponds to R
#define MPU_SAD_W 0b11010000

#define MPU_SAD 0b1101000
uint8_t MPUbuf[10] = {0};
void readMPU(uint8_t* val, uint8_t reg_addr, size_t len){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b088      	sub	sp, #32
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	72fb      	strb	r3, [r7, #11]
	  HAL_StatusTypeDef ret;
	  MPUbuf[0] = reg_addr;
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <readMPU+0x90>)
 8000ee0:	7afb      	ldrb	r3, [r7, #11]
 8000ee2:	7013      	strb	r3, [r2, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 1, 1000);
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <readMPU+0x90>)
 8000eee:	21d0      	movs	r1, #208	; 0xd0
 8000ef0:	481c      	ldr	r0, [pc, #112]	; (8000f64 <readMPU+0x94>)
 8000ef2:	f001 fa7d 	bl	80023f0 <HAL_I2C_Master_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	74fb      	strb	r3, [r7, #19]
	  if (ret != HAL_OK) {
 8000efa:	7cfb      	ldrb	r3, [r7, #19]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <readMPU+0x3c>
		  printf("Error reading Data from MPU reg: %d \n\r", reg_addr);
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	4619      	mov	r1, r3
 8000f04:	4818      	ldr	r0, [pc, #96]	; (8000f68 <readMPU+0x98>)
 8000f06:	f004 ff49 	bl	8005d9c <iprintf>
		  return;
 8000f0a:	e026      	b.n	8000f5a <readMPU+0x8a>
	  }
	  ret = HAL_I2C_Master_Receive(&hi2c3, MPU_SAD_R, &MPUbuf[0], len, 1000);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <readMPU+0x90>)
 8000f18:	21d1      	movs	r1, #209	; 0xd1
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <readMPU+0x94>)
 8000f1c:	f001 fb5c 	bl	80025d8 <HAL_I2C_Master_Receive>
 8000f20:	4603      	mov	r3, r0
 8000f22:	74fb      	strb	r3, [r7, #19]
	  if (ret != HAL_OK) printf("Error reading Data from MPU reg: %d size: %d\n\r", reg_addr, len);
 8000f24:	7cfb      	ldrb	r3, [r7, #19]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <readMPU+0x66>
 8000f2a:	7afb      	ldrb	r3, [r7, #11]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <readMPU+0x9c>)
 8000f32:	f004 ff33 	bl	8005d9c <iprintf>
	  for(size_t i=0; i<len; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e00a      	b.n	8000f52 <readMPU+0x82>
		  val[i] = MPUbuf[i];
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	4413      	add	r3, r2
 8000f42:	4907      	ldr	r1, [pc, #28]	; (8000f60 <readMPU+0x90>)
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	440a      	add	r2, r1
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	701a      	strb	r2, [r3, #0]
	  for(size_t i=0; i<len; i++)
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3f0      	bcc.n	8000f3c <readMPU+0x6c>
}
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	200001f8 	.word	0x200001f8
 8000f64:	20000210 	.word	0x20000210
 8000f68:	08007fa0 	.word	0x08007fa0
 8000f6c:	08007fc8 	.word	0x08007fc8

08000f70 <writeMPU>:

void writeMPU(uint8_t val, uint8_t reg_addr){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	460a      	mov	r2, r1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	MPUbuf[0] = reg_addr;
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <writeMPU+0x4c>)
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	7013      	strb	r3, [r2, #0]
	MPUbuf[1] = val;
 8000f86:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <writeMPU+0x4c>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	7053      	strb	r3, [r2, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 2, 1000);
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2302      	movs	r3, #2
 8000f94:	4a09      	ldr	r2, [pc, #36]	; (8000fbc <writeMPU+0x4c>)
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <writeMPU+0x50>)
 8000f9a:	f001 fa29 	bl	80023f0 <HAL_I2C_Master_Transmit>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) printf("Error writing to MPU reg: %d = %d\n\r", reg_addr, val);
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <writeMPU+0x44>
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <writeMPU+0x54>)
 8000fb0:	f004 fef4 	bl	8005d9c <iprintf>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200001f8 	.word	0x200001f8
 8000fc0:	20000210 	.word	0x20000210
 8000fc4:	08007ff8 	.word	0x08007ff8

08000fc8 <SetupMPU>:

/* measurements*/
#define MPU_ACC_X_OUT			0x3b
#define MPU_GYRO_X_OUT			0x43

void SetupMPU(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	  uint8_t mpu_id;
	  readMPU(&mpu_id, MPU_WHO_AM_I, 1);
 8000fce:	1d7b      	adds	r3, r7, #5
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2175      	movs	r1, #117	; 0x75
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff7b 	bl	8000ed0 <readMPU>
	  printf("Setting up MPU Device on I2C3...\n\r");
 8000fda:	482b      	ldr	r0, [pc, #172]	; (8001088 <SetupMPU+0xc0>)
 8000fdc:	f004 fede 	bl	8005d9c <iprintf>
	  if (mpu_id != 104) {
 8000fe0:	797b      	ldrb	r3, [r7, #5]
 8000fe2:	2b68      	cmp	r3, #104	; 0x68
 8000fe4:	d005      	beq.n	8000ff2 <SetupMPU+0x2a>
		  printf("[ERROR] MPU Device Setup Failed!!!\n\r");
 8000fe6:	4829      	ldr	r0, [pc, #164]	; (800108c <SetupMPU+0xc4>)
 8000fe8:	f004 fed8 	bl	8005d9c <iprintf>
		  exit(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f004 fa2b 	bl	8005448 <exit>
	  }
	  // reset and wait up from sleep
	  uint8_t mpu_pwr_1= 0b10000000;
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	71fb      	strb	r3, [r7, #7]
	  writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	216b      	movs	r1, #107	; 0x6b
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffb8 	bl	8000f70 <writeMPU>
	  HAL_Delay(100);
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f000 fec9 	bl	8001d98 <HAL_Delay>
	  mpu_pwr_1 = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]
	  writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	216b      	movs	r1, #107	; 0x6b
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffae 	bl	8000f70 <writeMPU>
	  // config reg
	  uint8_t mpu_config_reg;
	  mpu_config_reg = 0b001 << 3;
 8001014:	2308      	movs	r3, #8
 8001016:	71bb      	strb	r3, [r7, #6]
	  writeMPU(mpu_config_reg, MPU_CONFIG_REG);
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	211a      	movs	r1, #26
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ffa7 	bl	8000f70 <writeMPU>
	  // gyro config
	  uint8_t mpu_gyro_config = 0b11 << 3;
 8001022:	2318      	movs	r3, #24
 8001024:	713b      	strb	r3, [r7, #4]
	  writeMPU(mpu_gyro_config, MPU_GYRO_CONFIG);
 8001026:	793b      	ldrb	r3, [r7, #4]
 8001028:	211b      	movs	r1, #27
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffa0 	bl	8000f70 <writeMPU>
	  readMPU(&mpu_gyro_config, MPU_GYRO_CONFIG, 1);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2201      	movs	r2, #1
 8001034:	211b      	movs	r1, #27
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff4a 	bl	8000ed0 <readMPU>
	  if (mpu_gyro_config != 0b11 << 3) {
 800103c:	793b      	ldrb	r3, [r7, #4]
 800103e:	2b18      	cmp	r3, #24
 8001040:	d005      	beq.n	800104e <SetupMPU+0x86>
		  printf("[ERROR] MPU GyroMeter Setup Failed!!!");
 8001042:	4813      	ldr	r0, [pc, #76]	; (8001090 <SetupMPU+0xc8>)
 8001044:	f004 feaa 	bl	8005d9c <iprintf>
		  exit(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f004 f9fd 	bl	8005448 <exit>
	  }

	  // Acc config
	  uint8_t mpu_acc_config;
	  mpu_acc_config = 0b11 << 3;
 800104e:	2318      	movs	r3, #24
 8001050:	70fb      	strb	r3, [r7, #3]
	  writeMPU(mpu_acc_config, MPU_ACC_CONFIG);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	211c      	movs	r1, #28
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff8a 	bl	8000f70 <writeMPU>
	  readMPU(&mpu_acc_config, MPU_ACC_CONFIG, 1);
 800105c:	1cfb      	adds	r3, r7, #3
 800105e:	2201      	movs	r2, #1
 8001060:	211c      	movs	r1, #28
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff34 	bl	8000ed0 <readMPU>
	  if (mpu_acc_config != 0b11 << 3) {
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b18      	cmp	r3, #24
 800106c:	d005      	beq.n	800107a <SetupMPU+0xb2>
		  printf("[ERROR] MPU Acc Setup Failed!!!\n\r");
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <SetupMPU+0xcc>)
 8001070:	f004 fe94 	bl	8005d9c <iprintf>
		  exit(1);
 8001074:	2001      	movs	r0, #1
 8001076:	f004 f9e7 	bl	8005448 <exit>
	  }
	  printf("...MPU Setup Success\n\r");
 800107a:	4807      	ldr	r0, [pc, #28]	; (8001098 <SetupMPU+0xd0>)
 800107c:	f004 fe8e 	bl	8005d9c <iprintf>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	0800801c 	.word	0x0800801c
 800108c:	08008040 	.word	0x08008040
 8001090:	08008068 	.word	0x08008068
 8001094:	08008090 	.word	0x08008090
 8001098:	080080b4 	.word	0x080080b4

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010a0:	b092      	sub	sp, #72	; 0x48
 80010a2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fe03 	bl	8001cae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f8c8 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 f996 	bl	80013dc <MX_GPIO_Init>
  MX_I2C3_Init();
 80010b0:	f000 f90a 	bl	80012c8 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80010b4:	f000 f946 	bl	8001344 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n");
 80010b8:	485c      	ldr	r0, [pc, #368]	; (800122c <main+0x190>)
 80010ba:	f004 fef5 	bl	8005ea8 <puts>
  SetupMPU();
 80010be:	f7ff ff83 	bl	8000fc8 <SetupMPU>
  while (1)
  {
	 /* USER CODE BEGIN WHILE */
	// Read from x-axis:
	  uint8_t raw_acc[6];
	  readMPU(raw_acc, MPU_ACC_X_OUT, 6);
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2206      	movs	r2, #6
 80010c8:	213b      	movs	r1, #59	; 0x3b
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff00 	bl	8000ed0 <readMPU>
	  int16_t raw_x, raw_y, raw_z;
	  raw_x = raw_acc[0] << 8 | raw_acc[1];
 80010d0:	7a3b      	ldrb	r3, [r7, #8]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	7a7b      	ldrb	r3, [r7, #9]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	4313      	orrs	r3, r2
 80010dc:	86fb      	strh	r3, [r7, #54]	; 0x36
	  raw_y = raw_acc[2] << 8 | raw_acc[3];
 80010de:	7abb      	ldrb	r3, [r7, #10]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7afb      	ldrb	r3, [r7, #11]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	86bb      	strh	r3, [r7, #52]	; 0x34
	  raw_z = raw_acc[4] << 8 | raw_acc[5];
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7b7b      	ldrb	r3, [r7, #13]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	867b      	strh	r3, [r7, #50]	; 0x32
	  float Accx = (float)(raw_x)/2048.0;
 80010fa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001230 <main+0x194>
 800110a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800110e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	  float Accy = (float)(raw_y)/2048.0;
 8001112:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001230 <main+0x194>
 8001122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001126:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  float Accz = (float)(raw_z)/2048.0;
 800112a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001136:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001230 <main+0x194>
 800113a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  printf("Acc X: %f Gs Y: %f Gs Z: %f Gs \n\r", Accx, Accy, Accz);
 8001142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001144:	f7ff fa18 	bl	8000578 <__aeabi_f2d>
 8001148:	4680      	mov	r8, r0
 800114a:	4689      	mov	r9, r1
 800114c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800114e:	f7ff fa13 	bl	8000578 <__aeabi_f2d>
 8001152:	4604      	mov	r4, r0
 8001154:	460d      	mov	r5, r1
 8001156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001158:	f7ff fa0e 	bl	8000578 <__aeabi_f2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001164:	e9cd 4500 	strd	r4, r5, [sp]
 8001168:	4642      	mov	r2, r8
 800116a:	464b      	mov	r3, r9
 800116c:	4831      	ldr	r0, [pc, #196]	; (8001234 <main+0x198>)
 800116e:	f004 fe15 	bl	8005d9c <iprintf>
	  uint8_t raw_gyro[6];
	  readMPU(raw_gyro, MPU_GYRO_X_OUT, 6);
 8001172:	463b      	mov	r3, r7
 8001174:	2206      	movs	r2, #6
 8001176:	2143      	movs	r1, #67	; 0x43
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fea9 	bl	8000ed0 <readMPU>
	  int16_t raw_x_g, raw_y_g, raw_z_g;
	  raw_x_g = raw_gyro[0] << 8 | raw_gyro[1];
 800117e:	783b      	ldrb	r3, [r7, #0]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	847b      	strh	r3, [r7, #34]	; 0x22
	  raw_y_g = raw_gyro[2] << 8 | raw_gyro[3];
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	843b      	strh	r3, [r7, #32]
	  raw_z_g = raw_gyro[4] << 8 | raw_gyro[5];
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	797b      	ldrb	r3, [r7, #5]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	83fb      	strh	r3, [r7, #30]
	  float Gx = (float)(raw_x_g)/2048.0;
 80011a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001230 <main+0x194>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	edc7 7a06 	vstr	s15, [r7, #24]
	  float Gy = (float)(raw_y_g)/2048.0;
 80011c0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011cc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001230 <main+0x194>
 80011d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011d4:	edc7 7a05 	vstr	s15, [r7, #20]
	  float Gz = (float)(raw_z_g)/2048.0;
 80011d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001230 <main+0x194>
 80011e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ec:	edc7 7a04 	vstr	s15, [r7, #16]
	  printf("Gyro X: %f deg/s Y: %f deg/s Z: %f deg/s\n\r", Gx, Gy, Gz);
 80011f0:	69b8      	ldr	r0, [r7, #24]
 80011f2:	f7ff f9c1 	bl	8000578 <__aeabi_f2d>
 80011f6:	4680      	mov	r8, r0
 80011f8:	4689      	mov	r9, r1
 80011fa:	6978      	ldr	r0, [r7, #20]
 80011fc:	f7ff f9bc 	bl	8000578 <__aeabi_f2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f7ff f9b7 	bl	8000578 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001212:	e9cd 4500 	strd	r4, r5, [sp]
 8001216:	4642      	mov	r2, r8
 8001218:	464b      	mov	r3, r9
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <main+0x19c>)
 800121c:	f004 fdbe 	bl	8005d9c <iprintf>
	  HAL_Delay(1000);
 8001220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001224:	f000 fdb8 	bl	8001d98 <HAL_Delay>
  {
 8001228:	e74b      	b.n	80010c2 <main+0x26>
 800122a:	bf00      	nop
 800122c:	080080cc 	.word	0x080080cc
 8001230:	45000000 	.word	0x45000000
 8001234:	080080d0 	.word	0x080080d0
 8001238:	080080f4 	.word	0x080080f4

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b096      	sub	sp, #88	; 0x58
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	2244      	movs	r2, #68	; 0x44
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f004 f934 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800125e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001262:	f001 fddf 	bl	8002e24 <HAL_PWREx_ControlVoltageScaling>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800126c:	f000 fb0c 	bl	8001888 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001270:	2310      	movs	r3, #16
 8001272:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001274:	2301      	movs	r3, #1
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fe7f 	bl	8002f8c <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001294:	f000 faf8 	bl	8001888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ac:	463b      	mov	r3, r7
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f002 fa91 	bl	80037d8 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012bc:	f000 fae4 	bl	8001888 <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3758      	adds	r7, #88	; 0x58
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_I2C3_Init+0x74>)
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <MX_I2C3_Init+0x78>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_I2C3_Init+0x74>)
 80012d4:	f640 6214 	movw	r2, #3604	; 0xe14
 80012d8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_I2C3_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_I2C3_Init+0x74>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_I2C3_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_I2C3_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C3_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_I2C3_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C3_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_I2C3_Init+0x74>)
 8001306:	f000 ffe3 	bl	80022d0 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 faba 	bl	8001888 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001314:	2100      	movs	r1, #0
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <MX_I2C3_Init+0x74>)
 8001318:	f001 fccc 	bl	8002cb4 <HAL_I2CEx_ConfigAnalogFilter>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001322:	f000 fab1 	bl	8001888 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C3_Init+0x74>)
 800132a:	f001 fd0e 	bl	8002d4a <HAL_I2CEx_ConfigDigitalFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001334:	f000 faa8 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000210 	.word	0x20000210
 8001340:	40005c00 	.word	0x40005c00

08001344 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 800134a:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <MX_LPUART1_UART_Init+0x94>)
 800134c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 800138e:	f003 f9ed 	bl	800476c <HAL_UART_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 fa76 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139c:	2100      	movs	r1, #0
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 80013a0:	f003 ff82 	bl	80052a8 <HAL_UARTEx_SetTxFifoThreshold>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013aa:	f000 fa6d 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 80013b2:	f003 ffb7 	bl	8005324 <HAL_UARTEx_SetRxFifoThreshold>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013bc:	f000 fa64 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_LPUART1_UART_Init+0x90>)
 80013c2:	f003 ff38 	bl	8005236 <HAL_UARTEx_DisableFifoMode>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013cc:	f000 fa5c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000025c 	.word	0x2000025c
 80013d8:	40008000 	.word	0x40008000

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	4bb2      	ldr	r3, [pc, #712]	; (80016bc <MX_GPIO_Init+0x2e0>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	4ab1      	ldr	r2, [pc, #708]	; (80016bc <MX_GPIO_Init+0x2e0>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fe:	4baf      	ldr	r3, [pc, #700]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4bac      	ldr	r3, [pc, #688]	; (80016bc <MX_GPIO_Init+0x2e0>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4aab      	ldr	r2, [pc, #684]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001422:	4ba6      	ldr	r3, [pc, #664]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4aa5      	ldr	r2, [pc, #660]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001428:	f043 0320 	orr.w	r3, r3, #32
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4ba3      	ldr	r3, [pc, #652]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0320 	and.w	r3, r3, #32
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	4ba0      	ldr	r3, [pc, #640]	; (80016bc <MX_GPIO_Init+0x2e0>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a9f      	ldr	r2, [pc, #636]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b9d      	ldr	r3, [pc, #628]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b9a      	ldr	r3, [pc, #616]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a99      	ldr	r2, [pc, #612]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b97      	ldr	r3, [pc, #604]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	4b94      	ldr	r3, [pc, #592]	; (80016bc <MX_GPIO_Init+0x2e0>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a93      	ldr	r2, [pc, #588]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b91      	ldr	r3, [pc, #580]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b8e      	ldr	r3, [pc, #568]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a8d      	ldr	r2, [pc, #564]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b8b      	ldr	r3, [pc, #556]	; (80016bc <MX_GPIO_Init+0x2e0>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149a:	4b88      	ldr	r3, [pc, #544]	; (80016bc <MX_GPIO_Init+0x2e0>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a87      	ldr	r2, [pc, #540]	; (80016bc <MX_GPIO_Init+0x2e0>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b85      	ldr	r3, [pc, #532]	; (80016bc <MX_GPIO_Init+0x2e0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80014b2:	f001 fd5b 	bl	8002f6c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b6:	230c      	movs	r3, #12
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80014c6:	230d      	movs	r3, #13
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	487b      	ldr	r0, [pc, #492]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 80014d2:	f000 fd6b 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014d6:	2307      	movs	r3, #7
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e6:	2304      	movs	r3, #4
 80014e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4874      	ldr	r0, [pc, #464]	; (80016c4 <MX_GPIO_Init+0x2e8>)
 80014f2:	f000 fd5b 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001506:	230d      	movs	r3, #13
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	486c      	ldr	r0, [pc, #432]	; (80016c4 <MX_GPIO_Init+0x2e8>)
 8001512:	f000 fd4b 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001516:	233c      	movs	r3, #60	; 0x3c
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800151a:	230b      	movs	r3, #11
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4867      	ldr	r0, [pc, #412]	; (80016c8 <MX_GPIO_Init+0x2ec>)
 800152a:	f000 fd3f 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152e:	2301      	movs	r3, #1
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153e:	2301      	movs	r3, #1
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f000 fd2e 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001550:	230a      	movs	r3, #10
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001554:	230b      	movs	r3, #11
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f000 fd21 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23f0      	movs	r3, #240	; 0xf0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157a:	2305      	movs	r3, #5
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f000 fd10 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158c:	2301      	movs	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800159c:	2302      	movs	r3, #2
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4849      	ldr	r0, [pc, #292]	; (80016cc <MX_GPIO_Init+0x2f0>)
 80015a8:	f000 fd00 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ac:	2302      	movs	r3, #2
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015b0:	230b      	movs	r3, #11
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4843      	ldr	r0, [pc, #268]	; (80016cc <MX_GPIO_Init+0x2f0>)
 80015c0:	f000 fcf4 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80015c4:	2344      	movs	r3, #68	; 0x44
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c8:	2303      	movs	r3, #3
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	483d      	ldr	r0, [pc, #244]	; (80016cc <MX_GPIO_Init+0x2f0>)
 80015d8:	f000 fce8 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80015dc:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4831      	ldr	r0, [pc, #196]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 80015fa:	f000 fcd7 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80015fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001610:	2303      	movs	r3, #3
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4829      	ldr	r0, [pc, #164]	; (80016c0 <MX_GPIO_Init+0x2e4>)
 800161c:	f000 fcc6 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001632:	2301      	movs	r3, #1
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4823      	ldr	r0, [pc, #140]	; (80016cc <MX_GPIO_Init+0x2f0>)
 800163e:	f000 fcb5 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001642:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001654:	230d      	movs	r3, #13
 8001656:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	481b      	ldr	r0, [pc, #108]	; (80016cc <MX_GPIO_Init+0x2f0>)
 8001660:	f000 fca4 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001664:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001676:	230e      	movs	r3, #14
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <MX_GPIO_Init+0x2f0>)
 8001682:	f000 fc93 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001698:	2307      	movs	r3, #7
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <MX_GPIO_Init+0x2f4>)
 80016a4:	f000 fc82 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e00c      	b.n	80016d4 <MX_GPIO_Init+0x2f8>
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48001000 	.word	0x48001000
 80016c4:	48001400 	.word	0x48001400
 80016c8:	48000800 	.word	0x48000800
 80016cc:	48000400 	.word	0x48000400
 80016d0:	48000c00 	.word	0x48000c00
 80016d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016d6:	2302      	movs	r3, #2
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	485c      	ldr	r0, [pc, #368]	; (8001854 <MX_GPIO_Init+0x478>)
 80016e2:	f000 fc63 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80016f6:	230d      	movs	r3, #13
 80016f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fe:	4619      	mov	r1, r3
 8001700:	4855      	ldr	r0, [pc, #340]	; (8001858 <MX_GPIO_Init+0x47c>)
 8001702:	f000 fc53 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001716:	2302      	movs	r3, #2
 8001718:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171e:	4619      	mov	r1, r3
 8001720:	484d      	ldr	r0, [pc, #308]	; (8001858 <MX_GPIO_Init+0x47c>)
 8001722:	f000 fc43 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001726:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001738:	230c      	movs	r3, #12
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	4845      	ldr	r0, [pc, #276]	; (8001858 <MX_GPIO_Init+0x47c>)
 8001744:	f000 fc32 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001748:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001756:	2303      	movs	r3, #3
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800175a:	230a      	movs	r3, #10
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f000 fc20 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800176c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f000 fc12 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001788:	2301      	movs	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001798:	2309      	movs	r3, #9
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800179c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	482c      	ldr	r0, [pc, #176]	; (8001854 <MX_GPIO_Init+0x478>)
 80017a4:	f000 fc02 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a8:	2304      	movs	r3, #4
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017b8:	230c      	movs	r3, #12
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	4619      	mov	r1, r3
 80017c2:	4824      	ldr	r0, [pc, #144]	; (8001854 <MX_GPIO_Init+0x478>)
 80017c4:	f000 fbf2 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017c8:	2378      	movs	r3, #120	; 0x78
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d4:	2303      	movs	r3, #3
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d8:	2307      	movs	r3, #7
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e0:	4619      	mov	r1, r3
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <MX_GPIO_Init+0x478>)
 80017e4:	f000 fbe2 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017e8:	2338      	movs	r3, #56	; 0x38
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f8:	2306      	movs	r3, #6
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	4619      	mov	r1, r3
 8001802:	4816      	ldr	r0, [pc, #88]	; (800185c <MX_GPIO_Init+0x480>)
 8001804:	f000 fbd2 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001808:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180e:	2312      	movs	r3, #18
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181a:	2304      	movs	r3, #4
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_GPIO_Init+0x480>)
 8001826:	f000 fbc1 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800182a:	2301      	movs	r3, #1
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800183a:	2302      	movs	r3, #2
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	4806      	ldr	r0, [pc, #24]	; (8001860 <MX_GPIO_Init+0x484>)
 8001846:	f000 fbb1 	bl	8001fac <HAL_GPIO_Init>

}
 800184a:	bf00      	nop
 800184c:	3738      	adds	r7, #56	; 0x38
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	48000c00 	.word	0x48000c00
 8001858:	48000800 	.word	0x48000800
 800185c:	48000400 	.word	0x48000400
 8001860:	48001000 	.word	0x48001000

08001864 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800186c:	1d39      	adds	r1, r7, #4
 800186e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001872:	2201      	movs	r2, #1
 8001874:	4803      	ldr	r0, [pc, #12]	; (8001884 <__io_putchar+0x20>)
 8001876:	f002 ffc9 	bl	800480c <HAL_UART_Transmit>
  return ch;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000025c 	.word	0x2000025c

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_MspInit+0x44>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <HAL_MspInit+0x44>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6613      	str	r3, [r2, #96]	; 0x60
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_MspInit+0x44>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x44>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x44>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x44>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0ae      	sub	sp, #184	; 0xb8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	2294      	movs	r2, #148	; 0x94
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fddb 	bl	80054b8 <memset>
  if(hi2c->Instance==I2C3)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a21      	ldr	r2, [pc, #132]	; (800198c <HAL_I2C_MspInit+0xb0>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d13b      	bne.n	8001984 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001910:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001912:	2300      	movs	r3, #0
 8001914:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fa0e 	bl	8003d3c <HAL_RCCEx_PeriphCLKConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001926:	f7ff ffaf 	bl	8001888 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_I2C_MspInit+0xb4>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_I2C_MspInit+0xb4>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <HAL_I2C_MspInit+0xb4>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001942:	2303      	movs	r3, #3
 8001944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001948:	2312      	movs	r3, #18
 800194a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800195a:	2304      	movs	r3, #4
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001960:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001964:	4619      	mov	r1, r3
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <HAL_I2C_MspInit+0xb8>)
 8001968:	f000 fb20 	bl	8001fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_I2C_MspInit+0xb4>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_I2C_MspInit+0xb4>)
 8001972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001976:	6593      	str	r3, [r2, #88]	; 0x58
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_I2C_MspInit+0xb4>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001984:	bf00      	nop
 8001986:	37b8      	adds	r7, #184	; 0xb8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40005c00 	.word	0x40005c00
 8001990:	40021000 	.word	0x40021000
 8001994:	48000800 	.word	0x48000800

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b0ae      	sub	sp, #184	; 0xb8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2294      	movs	r2, #148	; 0x94
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fd7d 	bl	80054b8 <memset>
  if(huart->Instance==LPUART1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_UART_MspInit+0xb4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d13d      	bne.n	8001a44 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80019c8:	2320      	movs	r3, #32
 80019ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 f9b1 	bl	8003d3c <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e0:	f7ff ff52 	bl	8001888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_UART_MspInit+0xb8>)
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_UART_MspInit+0xb8>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0xb8>)
 80019f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0xb8>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <HAL_UART_MspInit+0xb8>)
 8001a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0xb8>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001a14:	f001 faaa 	bl	8002f6c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001a18:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a32:	2308      	movs	r3, #8
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <HAL_UART_MspInit+0xbc>)
 8001a40:	f000 fab4 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	37b8      	adds	r7, #184	; 0xb8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40008000 	.word	0x40008000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48001800 	.word	0x48001800

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f958 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
	return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_kill>:

int _kill(int pid, int sig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ac6:	f003 fcb9 	bl	800543c <__errno>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2216      	movs	r2, #22
 8001ace:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_exit>:

void _exit (int status)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ffe7 	bl	8001abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aee:	e7fe      	b.n	8001aee <_exit+0x12>

08001af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e00a      	b.n	8001b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b02:	f3af 8000 	nop.w
 8001b06:	4601      	mov	r1, r0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	60ba      	str	r2, [r7, #8]
 8001b0e:	b2ca      	uxtb	r2, r1
 8001b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf0      	blt.n	8001b02 <_read+0x12>
	}

return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e009      	b.n	8001b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	60ba      	str	r2, [r7, #8]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe8d 	bl	8001864 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	dbf1      	blt.n	8001b3c <_write+0x12>
	}
	return len;
 8001b58:	687b      	ldr	r3, [r7, #4]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_close>:

int _close(int file)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_isatty>:

int _isatty(int file)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <_sbrk+0x5c>)
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <_sbrk+0x60>)
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be0:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <_sbrk+0x64>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <_sbrk+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d207      	bcs.n	8001c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bfc:	f003 fc1e 	bl	800543c <__errno>
 8001c00:	4603      	mov	r3, r0
 8001c02:	220c      	movs	r2, #12
 8001c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	e009      	b.n	8001c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <_sbrk+0x64>)
 8001c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200a0000 	.word	0x200a0000
 8001c2c:	00000400 	.word	0x00000400
 8001c30:	20000204 	.word	0x20000204
 8001c34:	20000300 	.word	0x20000300

08001c38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <SystemInit+0x20>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <SystemInit+0x20>)
 8001c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c60:	f7ff ffea 	bl	8001c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c64:	480c      	ldr	r0, [pc, #48]	; (8001c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c66:	490d      	ldr	r1, [pc, #52]	; (8001c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <LoopForever+0xe>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ca8 <LoopForever+0x16>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f003 fbf1 	bl	8005470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8e:	f7ff fa05 	bl	800109c <main>

08001c92 <LoopForever>:

LoopForever:
    b LoopForever
 8001c92:	e7fe      	b.n	8001c92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c94:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ca0:	08008584 	.word	0x08008584
  ldr r2, =_sbss
 8001ca4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ca8:	20000300 	.word	0x20000300

08001cac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC1_IRQHandler>

08001cae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 f943 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f000 f80e 	bl	8001ce0 <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	e001      	b.n	8001cd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cd0:	f7ff fde0 	bl	8001894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_InitTick+0x6c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d023      	beq.n	8001d3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cf4:	4b16      	ldr	r3, [pc, #88]	; (8001d50 <HAL_InitTick+0x70>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_InitTick+0x6c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f941 	bl	8001f92 <HAL_SYSTICK_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d809      	bhi.n	8001d30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 f919 	bl	8001f5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_InitTick+0x74>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e007      	b.n	8001d40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e004      	b.n	8001d40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e001      	b.n	8001d40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x20>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_IncTick+0x24>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000008 	.word	0x20000008
 8001d7c:	200002ec 	.word	0x200002ec

08001d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_GetTick+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200002ec 	.word	0x200002ec

08001d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff ffee 	bl	8001d80 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d005      	beq.n	8001dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Delay+0x44>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dbe:	bf00      	nop
 8001dc0:	f7ff ffde 	bl	8001d80 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d8f7      	bhi.n	8001dc0 <HAL_Delay+0x28>
  {
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000008 	.word	0x20000008

08001de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e12:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <__NVIC_SetPriorityGrouping+0x44>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <__NVIC_GetPriorityGrouping+0x18>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	0a1b      	lsrs	r3, r3, #8
 8001e32:	f003 0307 	and.w	r3, r3, #7
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff8e 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff47 	bl	8001de0 <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff5c 	bl	8001e28 <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff8e 	bl	8001e98 <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5d 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffb0 	bl	8001f00 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	e166      	b.n	800228a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8158 	beq.w	8002284 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x40>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	6939      	ldr	r1, [r7, #16]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80b2 	beq.w	8002284 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 8002122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002124:	4a60      	ldr	r2, [pc, #384]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6613      	str	r3, [r2, #96]	; 0x60
 800212c:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <HAL_GPIO_Init+0x2fc>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002138:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_GPIO_Init+0x300>)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	089b      	lsrs	r3, r3, #2
 800213e:	3302      	adds	r3, #2
 8002140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220f      	movs	r2, #15
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002162:	d02b      	beq.n	80021bc <HAL_GPIO_Init+0x210>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d025      	beq.n	80021b8 <HAL_GPIO_Init+0x20c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a51      	ldr	r2, [pc, #324]	; (80022b4 <HAL_GPIO_Init+0x308>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d01f      	beq.n	80021b4 <HAL_GPIO_Init+0x208>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a50      	ldr	r2, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x30c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d019      	beq.n	80021b0 <HAL_GPIO_Init+0x204>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a4f      	ldr	r2, [pc, #316]	; (80022bc <HAL_GPIO_Init+0x310>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d013      	beq.n	80021ac <HAL_GPIO_Init+0x200>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <HAL_GPIO_Init+0x314>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00d      	beq.n	80021a8 <HAL_GPIO_Init+0x1fc>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a4d      	ldr	r2, [pc, #308]	; (80022c4 <HAL_GPIO_Init+0x318>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0x1f8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <HAL_GPIO_Init+0x31c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_GPIO_Init+0x1f4>
 800219c:	2307      	movs	r3, #7
 800219e:	e00e      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021a0:	2308      	movs	r3, #8
 80021a2:	e00c      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021a4:	2306      	movs	r3, #6
 80021a6:	e00a      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021a8:	2305      	movs	r3, #5
 80021aa:	e008      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021ac:	2304      	movs	r3, #4
 80021ae:	e006      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e004      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e002      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_GPIO_Init+0x212>
 80021bc:	2300      	movs	r3, #0
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	f002 0203 	and.w	r2, r2, #3
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	4093      	lsls	r3, r2
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ce:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_GPIO_Init+0x300>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_GPIO_Init+0x320>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002200:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222a:	4a28      	ldr	r2, [pc, #160]	; (80022cc <HAL_GPIO_Init+0x320>)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002230:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002254:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800225a:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <HAL_GPIO_Init+0x320>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_GPIO_Init+0x320>)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3301      	adds	r3, #1
 8002288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f ae91 	bne.w	8001fbc <HAL_GPIO_Init+0x10>
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40010000 	.word	0x40010000
 80022b0:	48000400 	.word	0x48000400
 80022b4:	48000800 	.word	0x48000800
 80022b8:	48000c00 	.word	0x48000c00
 80022bc:	48001000 	.word	0x48001000
 80022c0:	48001400 	.word	0x48001400
 80022c4:	48001800 	.word	0x48001800
 80022c8:	48001c00 	.word	0x48001c00
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e081      	b.n	80023e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff faf0 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2224      	movs	r2, #36	; 0x24
 8002300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d107      	bne.n	800234a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e006      	b.n	8002358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d104      	bne.n	800236a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800238c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69d9      	ldr	r1, [r3, #28]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	461a      	mov	r2, r3
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	4613      	mov	r3, r2
 8002402:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b20      	cmp	r3, #32
 800240e:	f040 80da 	bne.w	80025c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_I2C_Master_Transmit+0x30>
 800241c:	2302      	movs	r3, #2
 800241e:	e0d3      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1d8>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002428:	f7ff fcaa 	bl	8001d80 <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2319      	movs	r3, #25
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f9e6 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0be      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2221      	movs	r2, #33	; 0x21
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2210      	movs	r2, #16
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	893a      	ldrh	r2, [r7, #8]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	2bff      	cmp	r3, #255	; 0xff
 800247a:	d90e      	bls.n	800249a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	22ff      	movs	r2, #255	; 0xff
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	b2da      	uxtb	r2, r3
 8002488:	8979      	ldrh	r1, [r7, #10]
 800248a:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 fbdc 	bl	8002c50 <I2C_TransferConfig>
 8002498:	e06c      	b.n	8002574 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fbcb 	bl	8002c50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024ba:	e05b      	b.n	8002574 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	6a39      	ldr	r1, [r7, #32]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f9e3 	bl	800288c <I2C_WaitOnTXISFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e07b      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d034      	beq.n	8002574 <HAL_I2C_Master_Transmit+0x184>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	2b00      	cmp	r3, #0
 8002510:	d130      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2200      	movs	r2, #0
 800251a:	2180      	movs	r1, #128	; 0x80
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f975 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e04d      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	2bff      	cmp	r3, #255	; 0xff
 8002534:	d90e      	bls.n	8002554 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	22ff      	movs	r2, #255	; 0xff
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	b2da      	uxtb	r2, r3
 8002542:	8979      	ldrh	r1, [r7, #10]
 8002544:	2300      	movs	r3, #0
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fb7f 	bl	8002c50 <I2C_TransferConfig>
 8002552:	e00f      	b.n	8002574 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	b2da      	uxtb	r2, r3
 8002564:	8979      	ldrh	r1, [r7, #10]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fb6e 	bl	8002c50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d19e      	bne.n	80024bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	6a39      	ldr	r1, [r7, #32]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f9c2 	bl	800290c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e01a      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2220      	movs	r2, #32
 8002598:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80025a6:	400b      	ands	r3, r1
 80025a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
  }
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	80002000 	.word	0x80002000
 80025d4:	fe00e800 	.word	0xfe00e800

080025d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607a      	str	r2, [r7, #4]
 80025e2:	461a      	mov	r2, r3
 80025e4:	460b      	mov	r3, r1
 80025e6:	817b      	strh	r3, [r7, #10]
 80025e8:	4613      	mov	r3, r2
 80025ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	f040 80db 	bne.w	80027b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_I2C_Master_Receive+0x30>
 8002604:	2302      	movs	r3, #2
 8002606:	e0d4      	b.n	80027b2 <HAL_I2C_Master_Receive+0x1da>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002610:	f7ff fbb6 	bl	8001d80 <HAL_GetTick>
 8002614:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2319      	movs	r3, #25
 800261c:	2201      	movs	r2, #1
 800261e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f8f2 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0bf      	b.n	80027b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2222      	movs	r2, #34	; 0x22
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2210      	movs	r2, #16
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	893a      	ldrh	r2, [r7, #8]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	2bff      	cmp	r3, #255	; 0xff
 8002662:	d90e      	bls.n	8002682 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	22ff      	movs	r2, #255	; 0xff
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	b2da      	uxtb	r2, r3
 8002670:	8979      	ldrh	r1, [r7, #10]
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_I2C_Master_Receive+0x1e4>)
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fae8 	bl	8002c50 <I2C_TransferConfig>
 8002680:	e06d      	b.n	800275e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	b2da      	uxtb	r2, r3
 8002692:	8979      	ldrh	r1, [r7, #10]
 8002694:	4b49      	ldr	r3, [pc, #292]	; (80027bc <HAL_I2C_Master_Receive+0x1e4>)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fad7 	bl	8002c50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026a2:	e05c      	b.n	800275e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	6a39      	ldr	r1, [r7, #32]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f96b 	bl	8002984 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e07c      	b.n	80027b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d034      	beq.n	800275e <HAL_I2C_Master_Receive+0x186>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d130      	bne.n	800275e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2200      	movs	r2, #0
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f880 	bl	800280c <I2C_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e04d      	b.n	80027b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2bff      	cmp	r3, #255	; 0xff
 800271e:	d90e      	bls.n	800273e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	22ff      	movs	r2, #255	; 0xff
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	b2da      	uxtb	r2, r3
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	2300      	movs	r3, #0
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fa8a 	bl	8002c50 <I2C_TransferConfig>
 800273c:	e00f      	b.n	800275e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	b2da      	uxtb	r2, r3
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	2300      	movs	r3, #0
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fa79 	bl	8002c50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d19d      	bne.n	80026a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	6a39      	ldr	r1, [r7, #32]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f8cd 	bl	800290c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e01a      	b.n	80027b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2220      	movs	r2, #32
 8002782:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6859      	ldr	r1, [r3, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_I2C_Master_Receive+0x1e8>)
 8002790:	400b      	ands	r3, r1
 8002792:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e000      	b.n	80027b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027b0:	2302      	movs	r3, #2
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	80002400 	.word	0x80002400
 80027c0:	fe00e800 	.word	0xfe00e800

080027c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d103      	bne.n	80027e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d007      	beq.n	8002800 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	619a      	str	r2, [r3, #24]
  }
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800281c:	e022      	b.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d01e      	beq.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002826:	f7ff faab 	bl	8001d80 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d302      	bcc.n	800283c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d113      	bne.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e00f      	b.n	8002884 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4013      	ands	r3, r2
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	429a      	cmp	r2, r3
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	429a      	cmp	r2, r3
 8002880:	d0cd      	beq.n	800281e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002898:	e02c      	b.n	80028f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f8ea 	bl	8002a78 <I2C_IsErrorOccurred>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e02a      	b.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d01e      	beq.n	80028f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7ff fa63 	bl	8001d80 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d113      	bne.n	80028f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e007      	b.n	8002904 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d1cb      	bne.n	800289a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002918:	e028      	b.n	800296c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f8aa 	bl	8002a78 <I2C_IsErrorOccurred>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e026      	b.n	800297c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7ff fa27 	bl	8001d80 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e007      	b.n	800297c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b20      	cmp	r3, #32
 8002978:	d1cf      	bne.n	800291a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002990:	e064      	b.n	8002a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f86e 	bl	8002a78 <I2C_IsErrorOccurred>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e062      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d138      	bne.n	8002a26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d105      	bne.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e04e      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d107      	bne.n	80029ec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2210      	movs	r2, #16
 80029e2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2204      	movs	r2, #4
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
 80029ea:	e002      	b.n	80029f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2220      	movs	r2, #32
 80029f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002a06:	400b      	ands	r3, r1
 8002a08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e022      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7ff f9ab 	bl	8001d80 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f043 0220 	orr.w	r2, r3, #32
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e007      	b.n	8002a6c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d193      	bne.n	8002992 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	fe00e800 	.word	0xfe00e800

08002a78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d075      	beq.n	8002b90 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aac:	e056      	b.n	8002b5c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d052      	beq.n	8002b5c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7ff f963 	bl	8001d80 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_IsErrorOccurred+0x54>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d147      	bne.n	8002b5c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ade:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aee:	d12e      	bne.n	8002b4e <I2C_IsErrorOccurred+0xd6>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002af6:	d02a      	beq.n	8002b4e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d027      	beq.n	8002b4e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b0c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b0e:	f7ff f937 	bl	8001d80 <HAL_GetTick>
 8002b12:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b14:	e01b      	b.n	8002b4e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b16:	f7ff f933 	bl	8001d80 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b19      	cmp	r3, #25
 8002b22:	d914      	bls.n	8002b4e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d1dc      	bne.n	8002b16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d003      	beq.n	8002b72 <I2C_IsErrorOccurred+0xfa>
 8002b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d09d      	beq.n	8002aae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d103      	bne.n	8002b82 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00b      	beq.n	8002bba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	f043 0308 	orr.w	r3, r3, #8
 8002bca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f043 0302 	orr.w	r3, r3, #2
 8002bec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01c      	beq.n	8002c40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff fddc 	bl	80027c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <I2C_IsErrorOccurred+0x1d4>)
 8002c18:	400b      	ands	r3, r1
 8002c1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3728      	adds	r7, #40	; 0x28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	fe00e800 	.word	0xfe00e800

08002c50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c62:	897b      	ldrh	r3, [r7, #10]
 8002c64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c68:	7a7b      	ldrb	r3, [r7, #9]
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c70:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c7e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	0d5b      	lsrs	r3, r3, #21
 8002c8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <I2C_TransferConfig+0x60>)
 8002c90:	430b      	orrs	r3, r1
 8002c92:	43db      	mvns	r3, r3
 8002c94:	ea02 0103 	and.w	r1, r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	03ff63ff 	.word	0x03ff63ff

08002cb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d138      	bne.n	8002d3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e032      	b.n	8002d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2224      	movs	r2, #36	; 0x24
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e000      	b.n	8002d3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b085      	sub	sp, #20
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d139      	bne.n	8002dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e033      	b.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2224      	movs	r2, #36	; 0x24
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df4:	d102      	bne.n	8002dfc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	e00b      	b.n	8002e14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0a:	d102      	bne.n	8002e12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e10:	e000      	b.n	8002e14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40007000 	.word	0x40007000

08002e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d141      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d131      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e46:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e50:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e58:	4a41      	ldr	r2, [pc, #260]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2232      	movs	r2, #50	; 0x32
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e76:	e002      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d102      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f2      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d158      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e057      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb4:	e04d      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d141      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d131      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	e002      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d112      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e011      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f40:	e007      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40007000 	.word	0x40007000
 8002f64:	20000000 	.word	0x20000000
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7a:	6053      	str	r3, [r2, #4]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f000 bc16 	b.w	80037cc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa0:	4ba0      	ldr	r3, [pc, #640]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002faa:	4b9e      	ldr	r3, [pc, #632]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80e4 	beq.w	800318a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4c>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	f040 808b 	bne.w	80030e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 8087 	bne.w	80030e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd8:	4b92      	ldr	r3, [pc, #584]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x64>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e3ed      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	4b8b      	ldr	r3, [pc, #556]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_RCC_OscConfig+0x7e>
 8003000:	4b88      	ldr	r3, [pc, #544]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003008:	e005      	b.n	8003016 <HAL_RCC_OscConfig+0x8a>
 800300a:	4b86      	ldr	r3, [pc, #536]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003016:	4293      	cmp	r3, r2
 8003018:	d223      	bcs.n	8003062 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fdca 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e3ce      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302e:	4b7d      	ldr	r3, [pc, #500]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a7c      	ldr	r2, [pc, #496]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	4b7a      	ldr	r3, [pc, #488]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4977      	ldr	r1, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304c:	4b75      	ldr	r3, [pc, #468]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	4972      	ldr	r1, [pc, #456]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800305c:	4313      	orrs	r3, r2
 800305e:	604b      	str	r3, [r1, #4]
 8003060:	e025      	b.n	80030ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003062:	4b70      	ldr	r3, [pc, #448]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6f      	ldr	r2, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	496a      	ldr	r1, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4965      	ldr	r1, [pc, #404]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fd8a 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e38e      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ae:	f000 fcbf 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80030b2:	4602      	mov	r2, r0
 80030b4:	4b5b      	ldr	r3, [pc, #364]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	495a      	ldr	r1, [pc, #360]	; (8003228 <HAL_RCC_OscConfig+0x29c>)
 80030c0:	5ccb      	ldrb	r3, [r1, r3]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ca:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x2a0>)
 80030cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030ce:	4b58      	ldr	r3, [pc, #352]	; (8003230 <HAL_RCC_OscConfig+0x2a4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fe04 	bl	8001ce0 <HAL_InitTick>
 80030d8:	4603      	mov	r3, r0
 80030da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d052      	beq.n	8003188 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	e372      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d032      	beq.n	8003154 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030ee:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a4c      	ldr	r2, [pc, #304]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030fa:	f7fe fe41 	bl	8001d80 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003102:	f7fe fe3d 	bl	8001d80 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e35b      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003114:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003120:	4b40      	ldr	r3, [pc, #256]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a3f      	ldr	r2, [pc, #252]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003126:	f043 0308 	orr.w	r3, r3, #8
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	493a      	ldr	r1, [pc, #232]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4935      	ldr	r1, [pc, #212]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
 8003152:	e01a      	b.n	800318a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003154:	4b33      	ldr	r3, [pc, #204]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a32      	ldr	r2, [pc, #200]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003160:	f7fe fe0e 	bl	8001d80 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003168:	f7fe fe0a 	bl	8001d80 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e328      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x1dc>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d073      	beq.n	800327e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_OscConfig+0x21c>
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d10e      	bne.n	80031c0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d063      	beq.n	800327c <HAL_RCC_OscConfig+0x2f0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d15f      	bne.n	800327c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e305      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d106      	bne.n	80031d8 <HAL_RCC_OscConfig+0x24c>
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a15      	ldr	r2, [pc, #84]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e01d      	b.n	8003214 <HAL_RCC_OscConfig+0x288>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x270>
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a0f      	ldr	r2, [pc, #60]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e00b      	b.n	8003214 <HAL_RCC_OscConfig+0x288>
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a08      	ldr	r2, [pc, #32]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 8003202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a05      	ldr	r2, [pc, #20]	; (8003224 <HAL_RCC_OscConfig+0x298>)
 800320e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01b      	beq.n	8003254 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe fdb0 	bl	8001d80 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	e010      	b.n	8003246 <HAL_RCC_OscConfig+0x2ba>
 8003224:	40021000 	.word	0x40021000
 8003228:	08008120 	.word	0x08008120
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe fda4 	bl	8001d80 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e2c2      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003246:	4baf      	ldr	r3, [pc, #700]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x2a8>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fd94 	bl	8001d80 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fd90 	bl	8001d80 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e2ae      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326e:	4ba5      	ldr	r3, [pc, #660]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x2d0>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d060      	beq.n	800334c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x310>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b0c      	cmp	r3, #12
 8003294:	d119      	bne.n	80032ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d116      	bne.n	80032ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329c:	4b99      	ldr	r3, [pc, #612]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x328>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e28b      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b93      	ldr	r3, [pc, #588]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	061b      	lsls	r3, r3, #24
 80032c2:	4990      	ldr	r1, [pc, #576]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c8:	e040      	b.n	800334c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d023      	beq.n	800331a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d2:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a8b      	ldr	r2, [pc, #556]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fd4f 	bl	8001d80 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe fd4b 	bl	8001d80 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e269      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f8:	4b82      	ldr	r3, [pc, #520]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b7f      	ldr	r3, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	061b      	lsls	r3, r3, #24
 8003312:	497c      	ldr	r1, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e018      	b.n	800334c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331a:	4b7a      	ldr	r3, [pc, #488]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a79      	ldr	r2, [pc, #484]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe fd2b 	bl	8001d80 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe fd27 	bl	8001d80 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e245      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003340:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d03c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01c      	beq.n	800339a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003366:	4a67      	ldr	r2, [pc, #412]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fd06 	bl	8001d80 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003378:	f7fe fd02 	bl	8001d80 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e220      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800338a:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800338c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ef      	beq.n	8003378 <HAL_RCC_OscConfig+0x3ec>
 8003398:	e01b      	b.n	80033d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800339a:	4b5a      	ldr	r3, [pc, #360]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800339c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033aa:	f7fe fce9 	bl	8001d80 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fe fce5 	bl	8001d80 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e203      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c4:	4b4f      	ldr	r3, [pc, #316]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ef      	bne.n	80033b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a6 	beq.w	800352c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033e4:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b44      	ldr	r3, [pc, #272]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
 80033fc:	4b41      	ldr	r3, [pc, #260]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003408:	2301      	movs	r3, #1
 800340a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340c:	4b3e      	ldr	r3, [pc, #248]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d118      	bne.n	800344a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003418:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003424:	f7fe fcac 	bl	8001d80 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fe fca8 	bl	8001d80 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1c6      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343e:	4b32      	ldr	r3, [pc, #200]	; (8003508 <HAL_RCC_OscConfig+0x57c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d108      	bne.n	8003464 <HAL_RCC_OscConfig+0x4d8>
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003462:	e024      	b.n	80034ae <HAL_RCC_OscConfig+0x522>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d110      	bne.n	800348e <HAL_RCC_OscConfig+0x502>
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800347c:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4a20      	ldr	r2, [pc, #128]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800348c:	e00f      	b.n	80034ae <HAL_RCC_OscConfig+0x522>
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d016      	beq.n	80034e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe fc63 	bl	8001d80 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fe fc5f 	bl	8001d80 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e17b      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_RCC_OscConfig+0x578>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ed      	beq.n	80034be <HAL_RCC_OscConfig+0x532>
 80034e2:	e01a      	b.n	800351a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fc4c 	bl	8001d80 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ea:	e00f      	b.n	800350c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fc48 	bl	8001d80 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d906      	bls.n	800350c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e164      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800350c:	4ba8      	ldr	r3, [pc, #672]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e8      	bne.n	80034ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351a:	7ffb      	ldrb	r3, [r7, #31]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003520:	4ba3      	ldr	r3, [pc, #652]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4aa2      	ldr	r2, [pc, #648]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d03c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01c      	beq.n	800357a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003540:	4b9b      	ldr	r3, [pc, #620]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003546:	4a9a      	ldr	r2, [pc, #616]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fe fc16 	bl	8001d80 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003558:	f7fe fc12 	bl	8001d80 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e130      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800356a:	4b91      	ldr	r3, [pc, #580]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800356c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0ef      	beq.n	8003558 <HAL_RCC_OscConfig+0x5cc>
 8003578:	e01b      	b.n	80035b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800357a:	4b8d      	ldr	r3, [pc, #564]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800357c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003580:	4a8b      	ldr	r2, [pc, #556]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe fbf9 	bl	8001d80 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003592:	f7fe fbf5 	bl	8001d80 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e113      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035a4:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80035a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ef      	bne.n	8003592 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8107 	beq.w	80037ca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f040 80cb 	bne.w	800375c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035c6:	4b7a      	ldr	r3, [pc, #488]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f003 0203 	and.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d12c      	bne.n	8003634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	3b01      	subs	r3, #1
 80035e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d123      	bne.n	8003634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d11b      	bne.n	8003634 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d113      	bne.n	8003634 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	3b01      	subs	r3, #1
 800361a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d109      	bne.n	8003634 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	3b01      	subs	r3, #1
 800362e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d06d      	beq.n	8003710 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d068      	beq.n	800370c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800363a:	4b5d      	ldr	r3, [pc, #372]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0ba      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a55      	ldr	r2, [pc, #340]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800365c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003660:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003662:	f7fe fb8d 	bl	8001d80 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366a:	f7fe fb89 	bl	8001d80 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0a7      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367c:	4b4c      	ldr	r3, [pc, #304]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f0      	bne.n	800366a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003688:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <HAL_RCC_OscConfig+0x828>)
 800368e:	4013      	ands	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003698:	3a01      	subs	r2, #1
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	4311      	orrs	r1, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036a2:	0212      	lsls	r2, r2, #8
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036aa:	0852      	lsrs	r2, r2, #1
 80036ac:	3a01      	subs	r2, #1
 80036ae:	0552      	lsls	r2, r2, #21
 80036b0:	4311      	orrs	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036b6:	0852      	lsrs	r2, r2, #1
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0652      	lsls	r2, r2, #25
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036c2:	06d2      	lsls	r2, r2, #27
 80036c4:	430a      	orrs	r2, r1
 80036c6:	493a      	ldr	r1, [pc, #232]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036cc:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80036d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036e4:	f7fe fb4c 	bl	8001d80 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fb48 	bl	8001d80 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e066      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800370a:	e05e      	b.n	80037ca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e05d      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d156      	bne.n	80037ca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003726:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a20      	ldr	r2, [pc, #128]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800372e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003732:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003734:	f7fe fb24 	bl	8001d80 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fb20 	bl	8001d80 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e03e      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800374e:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x7b0>
 800375a:	e036      	b.n	80037ca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d031      	beq.n	80037c6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	4b13      	ldr	r3, [pc, #76]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800376c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d105      	bne.n	8003786 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003780:	f023 0303 	bic.w	r3, r3, #3
 8003784:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_OscConfig+0x824>)
 800378c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003794:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003796:	f7fe faf3 	bl	8001d80 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379c:	e00c      	b.n	80037b8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379e:	f7fe faef 	bl	8001d80 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d905      	bls.n	80037b8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e00d      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
 80037b0:	40021000 	.word	0x40021000
 80037b4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_OscConfig+0x848>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ec      	bne.n	800379e <HAL_RCC_OscConfig+0x812>
 80037c4:	e001      	b.n	80037ca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e10f      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 020f 	bic.w	r2, r3, #15
 8003806:	4984      	ldr	r1, [pc, #528]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b82      	ldr	r3, [pc, #520]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e0f7      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8089 	beq.w	8003940 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d133      	bne.n	800389e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003836:	4b79      	ldr	r3, [pc, #484]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0e4      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003846:	f000 fa11 	bl	8003c6c <RCC_GetSysClockFreqFromPLLSource>
 800384a:	4603      	mov	r3, r0
 800384c:	4a74      	ldr	r2, [pc, #464]	; (8003a20 <HAL_RCC_ClockConfig+0x248>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d955      	bls.n	80038fe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003866:	4a6d      	ldr	r2, [pc, #436]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e044      	b.n	80038fe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d03e      	beq.n	80038fe <HAL_RCC_ClockConfig+0x126>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d13a      	bne.n	80038fe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003888:	4b64      	ldr	r3, [pc, #400]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003890:	4a62      	ldr	r2, [pc, #392]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003896:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e02f      	b.n	80038fe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0ac      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038be:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0a0      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ce:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e098      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038de:	f000 f8a7 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80038e2:	4603      	mov	r3, r0
 80038e4:	4a4e      	ldr	r2, [pc, #312]	; (8003a20 <HAL_RCC_ClockConfig+0x248>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d909      	bls.n	80038fe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038ea:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f2:	4a4a      	ldr	r2, [pc, #296]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f023 0203 	bic.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	4944      	ldr	r1, [pc, #272]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800390c:	4313      	orrs	r3, r2
 800390e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fe fa36 	bl	8001d80 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	e00a      	b.n	800392e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003918:	f7fe fa32 	bl	8001d80 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e070      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	4b3b      	ldr	r3, [pc, #236]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 020c 	and.w	r2, r3, #12
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	429a      	cmp	r2, r3
 800393e:	d1eb      	bne.n	8003918 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4930      	ldr	r1, [pc, #192]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
 800395e:	e008      	b.n	8003972 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d105      	bne.n	8003972 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a2c      	ldr	r2, [pc, #176]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800396c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003970:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d210      	bcs.n	80039a2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 020f 	bic.w	r2, r3, #15
 8003988:	4923      	ldr	r1, [pc, #140]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003990:	4b21      	ldr	r3, [pc, #132]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e036      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4918      	ldr	r1, [pc, #96]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039cc:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4910      	ldr	r1, [pc, #64]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e0:	f000 f826 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <HAL_RCC_ClockConfig+0x24c>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x250>)
 80039fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x254>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe f96b 	bl	8001ce0 <HAL_InitTick>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	04c4b400 	.word	0x04c4b400
 8003a24:	08008120 	.word	0x08008120
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d121      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11e      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e004      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d134      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xac>
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad8:	617b      	str	r3, [r7, #20]
      break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ade:	617b      	str	r3, [r7, #20]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	617b      	str	r3, [r7, #20]
      break;
 8003ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	3301      	adds	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	fb02 f203 	mul.w	r2, r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0e5b      	lsrs	r3, r3, #25
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b28:	69bb      	ldr	r3, [r7, #24]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08008138 	.word	0x08008138
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	007a1200 	.word	0x007a1200

08003b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000000 	.word	0x20000000

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08008130 	.word	0x08008130

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b90:	f7ff ffda 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0adb      	lsrs	r3, r3, #11
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08008130 	.word	0x08008130

08003bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff f908 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
 8003bd6:	e014      	b.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f8f8 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d10b      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d913      	bls.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2ba0      	cmp	r3, #160	; 0xa0
 8003c14:	d902      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c16:	2302      	movs	r3, #2
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e00d      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e00a      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b7f      	cmp	r3, #127	; 0x7f
 8003c26:	d902      	bls.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c28:	2302      	movs	r3, #2
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e004      	b.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b70      	cmp	r3, #112	; 0x70
 8003c32:	d101      	bne.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c34:	2301      	movs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 020f 	bic.w	r2, r3, #15
 8003c40:	4909      	ldr	r1, [pc, #36]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c48:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d001      	beq.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40022000 	.word	0x40022000

08003c6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003c76:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d118      	bne.n	8003cb4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c82:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e005      	b.n	8003caa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c9e:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003caa:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d003      	beq.n	8003ccc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d003      	beq.n	8003cd2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8003cca:	e005      	b.n	8003cd8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003cce:	613b      	str	r3, [r7, #16]
    break;
 8003cd0:	e005      	b.n	8003cde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cd4:	613b      	str	r3, [r7, #16]
    break;
 8003cd6:	e002      	b.n	8003cde <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	613b      	str	r3, [r7, #16]
    break;
 8003cdc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	fb02 f203 	mul.w	r2, r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	0e5b      	lsrs	r3, r3, #25
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d1e:	683b      	ldr	r3, [r7, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08008138 	.word	0x08008138
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d44:	2300      	movs	r3, #0
 8003d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d040      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5c:	2b80      	cmp	r3, #128	; 0x80
 8003d5e:	d02a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d825      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d026      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d821      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d006      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d81d      	bhi.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d009      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d7c:	e018      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	4a88      	ldr	r2, [pc, #544]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d8a:	e015      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb02 	bl	800439c <RCCEx_PLLSAI1_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d9c:	e00c      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3320      	adds	r3, #32
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fbed 	bl	8004584 <RCCEx_PLLSAI2_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dae:	e003      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	74fb      	strb	r3, [r7, #19]
      break;
 8003db4:	e000      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003db6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10b      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dbe:	4b79      	ldr	r3, [pc, #484]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dcc:	4975      	ldr	r1, [pc, #468]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd4:	e001      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d047      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dee:	d030      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d82a      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfa:	d02a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e00:	d824      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e06:	d008      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0c:	d81e      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e16:	d010      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e18:	e018      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4a61      	ldr	r2, [pc, #388]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e26:	e015      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fab4 	bl	800439c <RCCEx_PLLSAI1_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e38:	e00c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3320      	adds	r3, #32
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fb9f 	bl	8004584 <RCCEx_PLLSAI2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e4a:	e003      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	74fb      	strb	r3, [r7, #19]
      break;
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e5a:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	494e      	ldr	r1, [pc, #312]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e70:	e001      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 809f 	beq.w	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e84:	2300      	movs	r3, #0
 8003e86:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e88:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00d      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3a      	ldr	r2, [pc, #232]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec6:	f7fd ff5b 	bl	8001d80 <HAL_GetTick>
 8003eca:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ecc:	e009      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ece:	f7fd ff57 	bl	8001d80 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d902      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ee2:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0ef      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d15b      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01f      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d019      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	4a1b      	ldr	r2, [pc, #108]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f3e:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d016      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fd ff16 	bl	8001d80 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f56:	e00b      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fd ff12 	bl	8001d80 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d902      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	74fb      	strb	r3, [r7, #19]
            break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0ec      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10c      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	74bb      	strb	r3, [r7, #18]
 8003fa2:	e005      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb0:	7c7b      	ldrb	r3, [r7, #17]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb6:	4ba0      	ldr	r3, [pc, #640]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fce:	4b9a      	ldr	r3, [pc, #616]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f023 0203 	bic.w	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	4996      	ldr	r1, [pc, #600]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff0:	4b91      	ldr	r3, [pc, #580]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f023 020c 	bic.w	r2, r3, #12
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	498e      	ldr	r1, [pc, #568]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004012:	4b89      	ldr	r3, [pc, #548]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	4985      	ldr	r1, [pc, #532]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004034:	4b80      	ldr	r3, [pc, #512]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	497d      	ldr	r1, [pc, #500]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004056:	4b78      	ldr	r3, [pc, #480]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	4974      	ldr	r1, [pc, #464]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004078:	4b6f      	ldr	r3, [pc, #444]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004086:	496c      	ldr	r1, [pc, #432]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409a:	4b67      	ldr	r3, [pc, #412]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a8:	4963      	ldr	r1, [pc, #396]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040ca:	495b      	ldr	r1, [pc, #364]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040de:	4b56      	ldr	r3, [pc, #344]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	4952      	ldr	r1, [pc, #328]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004100:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	494a      	ldr	r1, [pc, #296]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004122:	4b45      	ldr	r3, [pc, #276]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	4941      	ldr	r1, [pc, #260]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004144:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	4939      	ldr	r1, [pc, #228]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d028      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004166:	4b34      	ldr	r3, [pc, #208]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004174:	4930      	ldr	r1, [pc, #192]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004184:	d106      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004186:	4b2c      	ldr	r3, [pc, #176]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004190:	60d3      	str	r3, [r2, #12]
 8004192:	e011      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 f8f9 	bl	800439c <RCCEx_PLLSAI1_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
 80041b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d04d      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d108      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041de:	e012      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80041e0:	4b15      	ldr	r3, [pc, #84]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80041f0:	4b11      	ldr	r3, [pc, #68]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	490e      	ldr	r1, [pc, #56]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420e:	d106      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a08      	ldr	r2, [pc, #32]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
 800421c:	e020      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004226:	d109      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004228:	4b03      	ldr	r3, [pc, #12]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a02      	ldr	r2, [pc, #8]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004232:	60d3      	str	r3, [r2, #12]
 8004234:	e014      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004244:	d10c      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 f8a5 	bl	800439c <RCCEx_PLLSAI1_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d028      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800426c:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004272:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800427a:	4947      	ldr	r1, [pc, #284]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428a:	d106      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800428c:	4b42      	ldr	r3, [pc, #264]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a41      	ldr	r2, [pc, #260]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004296:	60d3      	str	r3, [r2, #12]
 8004298:	e011      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d10c      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f876 	bl	800439c <RCCEx_PLLSAI1_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042b4:	7cfb      	ldrb	r3, [r7, #19]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01e      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ca:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042da:	492f      	ldr	r1, [pc, #188]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2102      	movs	r1, #2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f851 	bl	800439c <RCCEx_PLLSAI1_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004314:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800431a:	f023 0204 	bic.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	491c      	ldr	r1, [pc, #112]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800433a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433e:	f023 0218 	bic.w	r2, r3, #24
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	4913      	ldr	r1, [pc, #76]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d017      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800435c:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436c:	490a      	ldr	r1, [pc, #40]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800437e:	d105      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800438c:	7cbb      	ldrb	r3, [r7, #18]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000

0800439c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043aa:	4b72      	ldr	r3, [pc, #456]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043b6:	4b6f      	ldr	r3, [pc, #444]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d103      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
       ||
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d142      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e03f      	b.n	8004454 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d018      	beq.n	800440e <RCCEx_PLLSAI1_Config+0x72>
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d825      	bhi.n	800442c <RCCEx_PLLSAI1_Config+0x90>
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d002      	beq.n	80043ea <RCCEx_PLLSAI1_Config+0x4e>
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d009      	beq.n	80043fc <RCCEx_PLLSAI1_Config+0x60>
 80043e8:	e020      	b.n	800442c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ea:	4b62      	ldr	r3, [pc, #392]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d11d      	bne.n	8004432 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fa:	e01a      	b.n	8004432 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043fc:	4b5d      	ldr	r3, [pc, #372]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440c:	e013      	b.n	8004436 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800440e:	4b59      	ldr	r3, [pc, #356]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10f      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800441a:	4b56      	ldr	r3, [pc, #344]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800442a:	e006      	b.n	800443a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e004      	b.n	800443c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004432:	bf00      	nop
 8004434:	e002      	b.n	800443c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800443a:	bf00      	nop
    }

    if(status == HAL_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004442:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f023 0203 	bic.w	r2, r3, #3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4949      	ldr	r1, [pc, #292]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004450:	4313      	orrs	r3, r2
 8004452:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 8086 	bne.w	8004568 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800445c:	4b45      	ldr	r3, [pc, #276]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a44      	ldr	r2, [pc, #272]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004462:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fd fc8a 	bl	8001d80 <HAL_GetTick>
 800446c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800446e:	e009      	b.n	8004484 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004470:	f7fd fc86 	bl	8001d80 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d902      	bls.n	8004484 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	73fb      	strb	r3, [r7, #15]
        break;
 8004482:	e005      	b.n	8004490 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004484:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ef      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d168      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d113      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	4b35      	ldr	r3, [pc, #212]	; (8004578 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6892      	ldr	r2, [r2, #8]
 80044a8:	0211      	lsls	r1, r2, #8
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68d2      	ldr	r2, [r2, #12]
 80044ae:	06d2      	lsls	r2, r2, #27
 80044b0:	4311      	orrs	r1, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6852      	ldr	r2, [r2, #4]
 80044b6:	3a01      	subs	r2, #1
 80044b8:	0112      	lsls	r2, r2, #4
 80044ba:	430a      	orrs	r2, r1
 80044bc:	492d      	ldr	r1, [pc, #180]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	610b      	str	r3, [r1, #16]
 80044c2:	e02d      	b.n	8004520 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d115      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ca:	4b2a      	ldr	r3, [pc, #168]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6892      	ldr	r2, [r2, #8]
 80044d6:	0211      	lsls	r1, r2, #8
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6912      	ldr	r2, [r2, #16]
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	3a01      	subs	r2, #1
 80044e0:	0552      	lsls	r2, r2, #21
 80044e2:	4311      	orrs	r1, r2
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	6852      	ldr	r2, [r2, #4]
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	4921      	ldr	r1, [pc, #132]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
 80044f4:	e014      	b.n	8004520 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6892      	ldr	r2, [r2, #8]
 8004502:	0211      	lsls	r1, r2, #8
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6952      	ldr	r2, [r2, #20]
 8004508:	0852      	lsrs	r2, r2, #1
 800450a:	3a01      	subs	r2, #1
 800450c:	0652      	lsls	r2, r2, #25
 800450e:	4311      	orrs	r1, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6852      	ldr	r2, [r2, #4]
 8004514:	3a01      	subs	r2, #1
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	430a      	orrs	r2, r1
 800451a:	4916      	ldr	r1, [pc, #88]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800451c:	4313      	orrs	r3, r2
 800451e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a13      	ldr	r2, [pc, #76]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800452a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fc28 	bl	8001d80 <HAL_GetTick>
 8004530:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004532:	e009      	b.n	8004548 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004534:	f7fd fc24 	bl	8001d80 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	73fb      	strb	r3, [r7, #15]
          break;
 8004546:	e005      	b.n	8004554 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ef      	beq.n	8004534 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 800455c:	691a      	ldr	r2, [r3, #16]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	4904      	ldr	r1, [pc, #16]	; (8004574 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	07ff800f 	.word	0x07ff800f
 800457c:	ff9f800f 	.word	0xff9f800f
 8004580:	f9ff800f 	.word	0xf9ff800f

08004584 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004592:	4b72      	ldr	r3, [pc, #456]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800459e:	4b6f      	ldr	r3, [pc, #444]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0203 	and.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d103      	bne.n	80045b6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
       ||
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d142      	bne.n	800463c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e03f      	b.n	800463c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d018      	beq.n	80045f6 <RCCEx_PLLSAI2_Config+0x72>
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d825      	bhi.n	8004614 <RCCEx_PLLSAI2_Config+0x90>
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d002      	beq.n	80045d2 <RCCEx_PLLSAI2_Config+0x4e>
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d009      	beq.n	80045e4 <RCCEx_PLLSAI2_Config+0x60>
 80045d0:	e020      	b.n	8004614 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045d2:	4b62      	ldr	r3, [pc, #392]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11d      	bne.n	800461a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e2:	e01a      	b.n	800461a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045e4:	4b5d      	ldr	r3, [pc, #372]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d116      	bne.n	800461e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f4:	e013      	b.n	800461e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004602:	4b56      	ldr	r3, [pc, #344]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004612:	e006      	b.n	8004622 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e004      	b.n	8004624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800461a:	bf00      	nop
 800461c:	e002      	b.n	8004624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004622:	bf00      	nop
    }

    if(status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800462a:	4b4c      	ldr	r3, [pc, #304]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4949      	ldr	r1, [pc, #292]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f040 8086 	bne.w	8004750 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004644:	4b45      	ldr	r3, [pc, #276]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a44      	ldr	r2, [pc, #272]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fd fb96 	bl	8001d80 <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004656:	e009      	b.n	800466c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004658:	f7fd fb92 	bl	8001d80 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d902      	bls.n	800466c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
        break;
 800466a:	e005      	b.n	8004678 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ef      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d168      	bne.n	8004750 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d113      	bne.n	80046ac <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <RCCEx_PLLSAI2_Config+0x1dc>)
 800468a:	4013      	ands	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	0211      	lsls	r1, r2, #8
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68d2      	ldr	r2, [r2, #12]
 8004696:	06d2      	lsls	r2, r2, #27
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6852      	ldr	r2, [r2, #4]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	430a      	orrs	r2, r1
 80046a4:	492d      	ldr	r1, [pc, #180]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	614b      	str	r3, [r1, #20]
 80046aa:	e02d      	b.n	8004708 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d115      	bne.n	80046de <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <RCCEx_PLLSAI2_Config+0x1e0>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6892      	ldr	r2, [r2, #8]
 80046be:	0211      	lsls	r1, r2, #8
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6912      	ldr	r2, [r2, #16]
 80046c4:	0852      	lsrs	r2, r2, #1
 80046c6:	3a01      	subs	r2, #1
 80046c8:	0552      	lsls	r2, r2, #21
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6852      	ldr	r2, [r2, #4]
 80046d0:	3a01      	subs	r2, #1
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	430a      	orrs	r2, r1
 80046d6:	4921      	ldr	r1, [pc, #132]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	614b      	str	r3, [r1, #20]
 80046dc:	e014      	b.n	8004708 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <RCCEx_PLLSAI2_Config+0x1e4>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6892      	ldr	r2, [r2, #8]
 80046ea:	0211      	lsls	r1, r2, #8
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6952      	ldr	r2, [r2, #20]
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	3a01      	subs	r2, #1
 80046f4:	0652      	lsls	r2, r2, #25
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	3a01      	subs	r2, #1
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	430a      	orrs	r2, r1
 8004702:	4916      	ldr	r1, [pc, #88]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004704:	4313      	orrs	r3, r2
 8004706:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fb34 	bl	8001d80 <HAL_GetTick>
 8004718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800471a:	e009      	b.n	8004730 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800471c:	f7fd fb30 	bl	8001d80 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d902      	bls.n	8004730 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	73fb      	strb	r3, [r7, #15]
          break;
 800472e:	e005      	b.n	800473c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ef      	beq.n	800471c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	4904      	ldr	r1, [pc, #16]	; (800475c <RCCEx_PLLSAI2_Config+0x1d8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	07ff800f 	.word	0x07ff800f
 8004764:	ff9f800f 	.word	0xff9f800f
 8004768:	f9ff800f 	.word	0xf9ff800f

0800476c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e042      	b.n	8004804 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fd f901 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2224      	movs	r2, #36	; 0x24
 800479a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f8c4 	bl	800493c <UART_SetConfig>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e022      	b.n	8004804 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fb80 	bl	8004ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fc07 	bl	8005010 <UART_CheckIdleState>
 8004802:	4603      	mov	r3, r0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	2b20      	cmp	r3, #32
 8004824:	f040 8084 	bne.w	8004930 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_UART_Transmit+0x28>
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e07c      	b.n	8004932 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_UART_Transmit+0x3a>
 8004842:	2302      	movs	r3, #2
 8004844:	e075      	b.n	8004932 <HAL_UART_Transmit+0x126>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2221      	movs	r2, #33	; 0x21
 800485a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800485e:	f7fd fa8f 	bl	8001d80 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d108      	bne.n	8004890 <HAL_UART_Transmit+0x84>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e003      	b.n	8004898 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80048a0:	e02d      	b.n	80048fe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2200      	movs	r2, #0
 80048aa:	2180      	movs	r1, #128	; 0x80
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fbfa 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e03a      	b.n	8004932 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10b      	bne.n	80048da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ce:	b292      	uxth	r2, r2
 80048d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	3302      	adds	r3, #2
 80048d6:	61bb      	str	r3, [r7, #24]
 80048d8:	e008      	b.n	80048ec <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	b292      	uxth	r2, r2
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3301      	adds	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1cb      	bne.n	80048a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2200      	movs	r2, #0
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fbc6 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e006      	b.n	8004932 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800493c:	b5b0      	push	{r4, r5, r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	4313      	orrs	r3, r2
 800495e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4bb1      	ldr	r3, [pc, #708]	; (8004c2c <UART_SetConfig+0x2f0>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	430b      	orrs	r3, r1
 8004972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4aa6      	ldr	r2, [pc, #664]	; (8004c30 <UART_SetConfig+0x2f4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80049ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	69f9      	ldr	r1, [r7, #28]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	f023 010f 	bic.w	r1, r3, #15
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a97      	ldr	r2, [pc, #604]	; (8004c34 <UART_SetConfig+0x2f8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d120      	bne.n	8004a1e <UART_SetConfig+0xe2>
 80049dc:	4b96      	ldr	r3, [pc, #600]	; (8004c38 <UART_SetConfig+0x2fc>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d816      	bhi.n	8004a18 <UART_SetConfig+0xdc>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0xb4>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a01 	.word	0x08004a01
 80049f4:	08004a0d 	.word	0x08004a0d
 80049f8:	08004a07 	.word	0x08004a07
 80049fc:	08004a13 	.word	0x08004a13
 8004a00:	2301      	movs	r3, #1
 8004a02:	76fb      	strb	r3, [r7, #27]
 8004a04:	e0e7      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	76fb      	strb	r3, [r7, #27]
 8004a0a:	e0e4      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	76fb      	strb	r3, [r7, #27]
 8004a10:	e0e1      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a12:	2308      	movs	r3, #8
 8004a14:	76fb      	strb	r3, [r7, #27]
 8004a16:	e0de      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a18:	2310      	movs	r3, #16
 8004a1a:	76fb      	strb	r3, [r7, #27]
 8004a1c:	e0db      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a86      	ldr	r2, [pc, #536]	; (8004c3c <UART_SetConfig+0x300>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d132      	bne.n	8004a8e <UART_SetConfig+0x152>
 8004a28:	4b83      	ldr	r3, [pc, #524]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d828      	bhi.n	8004a88 <UART_SetConfig+0x14c>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x100>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a89 	.word	0x08004a89
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004a89 	.word	0x08004a89
 8004a5c:	08004a77 	.word	0x08004a77
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a89 	.word	0x08004a89
 8004a6c:	08004a83 	.word	0x08004a83
 8004a70:	2300      	movs	r3, #0
 8004a72:	76fb      	strb	r3, [r7, #27]
 8004a74:	e0af      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a76:	2302      	movs	r3, #2
 8004a78:	76fb      	strb	r3, [r7, #27]
 8004a7a:	e0ac      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	76fb      	strb	r3, [r7, #27]
 8004a80:	e0a9      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a82:	2308      	movs	r3, #8
 8004a84:	76fb      	strb	r3, [r7, #27]
 8004a86:	e0a6      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	76fb      	strb	r3, [r7, #27]
 8004a8c:	e0a3      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6b      	ldr	r2, [pc, #428]	; (8004c40 <UART_SetConfig+0x304>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d120      	bne.n	8004ada <UART_SetConfig+0x19e>
 8004a98:	4b67      	ldr	r3, [pc, #412]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aa2:	2b30      	cmp	r3, #48	; 0x30
 8004aa4:	d013      	beq.n	8004ace <UART_SetConfig+0x192>
 8004aa6:	2b30      	cmp	r3, #48	; 0x30
 8004aa8:	d814      	bhi.n	8004ad4 <UART_SetConfig+0x198>
 8004aaa:	2b20      	cmp	r3, #32
 8004aac:	d009      	beq.n	8004ac2 <UART_SetConfig+0x186>
 8004aae:	2b20      	cmp	r3, #32
 8004ab0:	d810      	bhi.n	8004ad4 <UART_SetConfig+0x198>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <UART_SetConfig+0x180>
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d006      	beq.n	8004ac8 <UART_SetConfig+0x18c>
 8004aba:	e00b      	b.n	8004ad4 <UART_SetConfig+0x198>
 8004abc:	2300      	movs	r3, #0
 8004abe:	76fb      	strb	r3, [r7, #27]
 8004ac0:	e089      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	76fb      	strb	r3, [r7, #27]
 8004ac6:	e086      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	76fb      	strb	r3, [r7, #27]
 8004acc:	e083      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	76fb      	strb	r3, [r7, #27]
 8004ad2:	e080      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	76fb      	strb	r3, [r7, #27]
 8004ad8:	e07d      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a59      	ldr	r2, [pc, #356]	; (8004c44 <UART_SetConfig+0x308>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d120      	bne.n	8004b26 <UART_SetConfig+0x1ea>
 8004ae4:	4b54      	ldr	r3, [pc, #336]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aee:	2bc0      	cmp	r3, #192	; 0xc0
 8004af0:	d013      	beq.n	8004b1a <UART_SetConfig+0x1de>
 8004af2:	2bc0      	cmp	r3, #192	; 0xc0
 8004af4:	d814      	bhi.n	8004b20 <UART_SetConfig+0x1e4>
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d009      	beq.n	8004b0e <UART_SetConfig+0x1d2>
 8004afa:	2b80      	cmp	r3, #128	; 0x80
 8004afc:	d810      	bhi.n	8004b20 <UART_SetConfig+0x1e4>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <UART_SetConfig+0x1cc>
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d006      	beq.n	8004b14 <UART_SetConfig+0x1d8>
 8004b06:	e00b      	b.n	8004b20 <UART_SetConfig+0x1e4>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	76fb      	strb	r3, [r7, #27]
 8004b0c:	e063      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	76fb      	strb	r3, [r7, #27]
 8004b12:	e060      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b14:	2304      	movs	r3, #4
 8004b16:	76fb      	strb	r3, [r7, #27]
 8004b18:	e05d      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	76fb      	strb	r3, [r7, #27]
 8004b1e:	e05a      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b20:	2310      	movs	r3, #16
 8004b22:	76fb      	strb	r3, [r7, #27]
 8004b24:	e057      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a47      	ldr	r2, [pc, #284]	; (8004c48 <UART_SetConfig+0x30c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d125      	bne.n	8004b7c <UART_SetConfig+0x240>
 8004b30:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b3e:	d017      	beq.n	8004b70 <UART_SetConfig+0x234>
 8004b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b44:	d817      	bhi.n	8004b76 <UART_SetConfig+0x23a>
 8004b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b4a:	d00b      	beq.n	8004b64 <UART_SetConfig+0x228>
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b50:	d811      	bhi.n	8004b76 <UART_SetConfig+0x23a>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <UART_SetConfig+0x222>
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5a:	d006      	beq.n	8004b6a <UART_SetConfig+0x22e>
 8004b5c:	e00b      	b.n	8004b76 <UART_SetConfig+0x23a>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	76fb      	strb	r3, [r7, #27]
 8004b62:	e038      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b64:	2302      	movs	r3, #2
 8004b66:	76fb      	strb	r3, [r7, #27]
 8004b68:	e035      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	76fb      	strb	r3, [r7, #27]
 8004b6e:	e032      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b70:	2308      	movs	r3, #8
 8004b72:	76fb      	strb	r3, [r7, #27]
 8004b74:	e02f      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b76:	2310      	movs	r3, #16
 8004b78:	76fb      	strb	r3, [r7, #27]
 8004b7a:	e02c      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2b      	ldr	r2, [pc, #172]	; (8004c30 <UART_SetConfig+0x2f4>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d125      	bne.n	8004bd2 <UART_SetConfig+0x296>
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <UART_SetConfig+0x2fc>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b94:	d017      	beq.n	8004bc6 <UART_SetConfig+0x28a>
 8004b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b9a:	d817      	bhi.n	8004bcc <UART_SetConfig+0x290>
 8004b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba0:	d00b      	beq.n	8004bba <UART_SetConfig+0x27e>
 8004ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba6:	d811      	bhi.n	8004bcc <UART_SetConfig+0x290>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <UART_SetConfig+0x278>
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d006      	beq.n	8004bc0 <UART_SetConfig+0x284>
 8004bb2:	e00b      	b.n	8004bcc <UART_SetConfig+0x290>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	76fb      	strb	r3, [r7, #27]
 8004bb8:	e00d      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	76fb      	strb	r3, [r7, #27]
 8004bbe:	e00a      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	76fb      	strb	r3, [r7, #27]
 8004bc4:	e007      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004bc6:	2308      	movs	r3, #8
 8004bc8:	76fb      	strb	r3, [r7, #27]
 8004bca:	e004      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004bcc:	2310      	movs	r3, #16
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	e001      	b.n	8004bd6 <UART_SetConfig+0x29a>
 8004bd2:	2310      	movs	r3, #16
 8004bd4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <UART_SetConfig+0x2f4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	f040 809f 	bne.w	8004d20 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004be2:	7efb      	ldrb	r3, [r7, #27]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d837      	bhi.n	8004c58 <UART_SetConfig+0x31c>
 8004be8:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <UART_SetConfig+0x2b4>)
 8004bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bee:	bf00      	nop
 8004bf0:	08004c15 	.word	0x08004c15
 8004bf4:	08004c59 	.word	0x08004c59
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c59 	.word	0x08004c59
 8004c00:	08004c23 	.word	0x08004c23
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004c59 	.word	0x08004c59
 8004c0c:	08004c59 	.word	0x08004c59
 8004c10:	08004c51 	.word	0x08004c51
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c14:	f7fe ffa4 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004c18:	6178      	str	r0, [r7, #20]
        break;
 8004c1a:	e022      	b.n	8004c62 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <UART_SetConfig+0x310>)
 8004c1e:	617b      	str	r3, [r7, #20]
        break;
 8004c20:	e01f      	b.n	8004c62 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c22:	f7fe ff05 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004c26:	6178      	str	r0, [r7, #20]
        break;
 8004c28:	e01b      	b.n	8004c62 <UART_SetConfig+0x326>
 8004c2a:	bf00      	nop
 8004c2c:	cfff69f3 	.word	0xcfff69f3
 8004c30:	40008000 	.word	0x40008000
 8004c34:	40013800 	.word	0x40013800
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40004400 	.word	0x40004400
 8004c40:	40004800 	.word	0x40004800
 8004c44:	40004c00 	.word	0x40004c00
 8004c48:	40005000 	.word	0x40005000
 8004c4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c54:	617b      	str	r3, [r7, #20]
        break;
 8004c56:	e004      	b.n	8004c62 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	76bb      	strb	r3, [r7, #26]
        break;
 8004c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8119 	beq.w	8004e9c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	4a95      	ldr	r2, [pc, #596]	; (8004ec4 <UART_SetConfig+0x588>)
 8004c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c74:	461a      	mov	r2, r3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d305      	bcc.n	8004c9a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d902      	bls.n	8004ca0 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	76bb      	strb	r3, [r7, #26]
 8004c9e:	e0fd      	b.n	8004e9c <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	4a85      	ldr	r2, [pc, #532]	; (8004ec4 <UART_SetConfig+0x588>)
 8004cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	f7fb ff8e 	bl	8000bd8 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	020b      	lsls	r3, r1, #8
 8004cce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cd2:	0202      	lsls	r2, r0, #8
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	6849      	ldr	r1, [r1, #4]
 8004cd8:	0849      	lsrs	r1, r1, #1
 8004cda:	4608      	mov	r0, r1
 8004cdc:	f04f 0100 	mov.w	r1, #0
 8004ce0:	1814      	adds	r4, r2, r0
 8004ce2:	eb43 0501 	adc.w	r5, r3, r1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	f7fb ff70 	bl	8000bd8 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d06:	d308      	bcc.n	8004d1a <UART_SetConfig+0x3de>
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0e:	d204      	bcs.n	8004d1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	e0c0      	b.n	8004e9c <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	76bb      	strb	r3, [r7, #26]
 8004d1e:	e0bd      	b.n	8004e9c <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d28:	d164      	bne.n	8004df4 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8004d2a:	7efb      	ldrb	r3, [r7, #27]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d828      	bhi.n	8004d82 <UART_SetConfig+0x446>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x3fc>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d6d 	.word	0x08004d6d
 8004d44:	08004d83 	.word	0x08004d83
 8004d48:	08004d73 	.word	0x08004d73
 8004d4c:	08004d83 	.word	0x08004d83
 8004d50:	08004d83 	.word	0x08004d83
 8004d54:	08004d83 	.word	0x08004d83
 8004d58:	08004d7b 	.word	0x08004d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7fe ff00 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004d60:	6178      	str	r0, [r7, #20]
        break;
 8004d62:	e013      	b.n	8004d8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe ff12 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004d68:	6178      	str	r0, [r7, #20]
        break;
 8004d6a:	e00f      	b.n	8004d8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d6c:	4b56      	ldr	r3, [pc, #344]	; (8004ec8 <UART_SetConfig+0x58c>)
 8004d6e:	617b      	str	r3, [r7, #20]
        break;
 8004d70:	e00c      	b.n	8004d8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d72:	f7fe fe5d 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004d76:	6178      	str	r0, [r7, #20]
        break;
 8004d78:	e008      	b.n	8004d8c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d7e:	617b      	str	r3, [r7, #20]
        break;
 8004d80:	e004      	b.n	8004d8c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	76bb      	strb	r3, [r7, #26]
        break;
 8004d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 8084 	beq.w	8004e9c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <UART_SetConfig+0x588>)
 8004d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da6:	005a      	lsls	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	441a      	add	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b0f      	cmp	r3, #15
 8004dbe:	d916      	bls.n	8004dee <UART_SetConfig+0x4b2>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc6:	d212      	bcs.n	8004dee <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f023 030f 	bic.w	r3, r3, #15
 8004dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	085b      	lsrs	r3, r3, #1
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	89fb      	ldrh	r3, [r7, #14]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	89fa      	ldrh	r2, [r7, #14]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e056      	b.n	8004e9c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	76bb      	strb	r3, [r7, #26]
 8004df2:	e053      	b.n	8004e9c <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df4:	7efb      	ldrb	r3, [r7, #27]
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d827      	bhi.n	8004e4a <UART_SetConfig+0x50e>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x4c4>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fe fe9c 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004e28:	6178      	str	r0, [r7, #20]
        break;
 8004e2a:	e013      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fe feae 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004e30:	6178      	str	r0, [r7, #20]
        break;
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <UART_SetConfig+0x58c>)
 8004e36:	617b      	str	r3, [r7, #20]
        break;
 8004e38:	e00c      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fe fdf9 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004e3e:	6178      	str	r0, [r7, #20]
        break;
 8004e40:	e008      	b.n	8004e54 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	617b      	str	r3, [r7, #20]
        break;
 8004e48:	e004      	b.n	8004e54 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	76bb      	strb	r3, [r7, #26]
        break;
 8004e52:	bf00      	nop
    }

    if (pclk != 0U)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d020      	beq.n	8004e9c <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <UART_SetConfig+0x588>)
 8004e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e64:	461a      	mov	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	441a      	add	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b0f      	cmp	r3, #15
 8004e82:	d909      	bls.n	8004e98 <UART_SetConfig+0x55c>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8a:	d205      	bcs.n	8004e98 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	e001      	b.n	8004e9c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004eb8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	08008168 	.word	0x08008168
 8004ec8:	00f42400 	.word	0x00f42400

08004ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fca:	d10a      	bne.n	8004fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005020:	f7fc feae 	bl	8001d80 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b08      	cmp	r3, #8
 8005032:	d10e      	bne.n	8005052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f82f 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e025      	b.n	800509e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d10e      	bne.n	800507e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f819 	bl	80050a6 <UART_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e00f      	b.n	800509e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b09c      	sub	sp, #112	; 0x70
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b6:	e0a9      	b.n	800520c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	f000 80a5 	beq.w	800520c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fc fe5d 	bl	8001d80 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80050d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d140      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ec:	667b      	str	r3, [r7, #100]	; 0x64
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e6      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3308      	adds	r3, #8
 8005128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800512a:	64ba      	str	r2, [r7, #72]	; 0x48
 800512c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e5      	bne.n	800510a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e069      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d051      	beq.n	800520c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005176:	d149      	bne.n	800520c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005196:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
 80051a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e6      	bne.n	8005182 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	613b      	str	r3, [r7, #16]
   return(result);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051d4:	623a      	str	r2, [r7, #32]
 80051d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	6a3a      	ldr	r2, [r7, #32]
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e010      	b.n	800522e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	429a      	cmp	r2, r3
 8005228:	f43f af46 	beq.w	80050b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3770      	adds	r7, #112	; 0x70
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UARTEx_DisableFifoMode+0x16>
 8005248:	2302      	movs	r3, #2
 800524a:	e027      	b.n	800529c <HAL_UARTEx_DisableFifoMode+0x66>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0201 	bic.w	r2, r2, #1
 8005272:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800527a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052bc:	2302      	movs	r3, #2
 80052be:	e02d      	b.n	800531c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2224      	movs	r2, #36	; 0x24
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f84f 	bl	80053a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005338:	2302      	movs	r3, #2
 800533a:	e02d      	b.n	8005398 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2224      	movs	r2, #36	; 0x24
 8005348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f811 	bl	80053a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d108      	bne.n	80053c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053c0:	e031      	b.n	8005426 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053c2:	2308      	movs	r3, #8
 80053c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053c6:	2308      	movs	r3, #8
 80053c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	0e5b      	lsrs	r3, r3, #25
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	0f5b      	lsrs	r3, r3, #29
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	7b3a      	ldrb	r2, [r7, #12]
 80053ee:	4911      	ldr	r1, [pc, #68]	; (8005434 <UARTEx_SetNbDataToProcess+0x94>)
 80053f0:	5c8a      	ldrb	r2, [r1, r2]
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053f6:	7b3a      	ldrb	r2, [r7, #12]
 80053f8:	490f      	ldr	r1, [pc, #60]	; (8005438 <UARTEx_SetNbDataToProcess+0x98>)
 80053fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	7b7a      	ldrb	r2, [r7, #13]
 800540c:	4909      	ldr	r1, [pc, #36]	; (8005434 <UARTEx_SetNbDataToProcess+0x94>)
 800540e:	5c8a      	ldrb	r2, [r1, r2]
 8005410:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005414:	7b7a      	ldrb	r2, [r7, #13]
 8005416:	4908      	ldr	r1, [pc, #32]	; (8005438 <UARTEx_SetNbDataToProcess+0x98>)
 8005418:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800541a:	fb93 f3f2 	sdiv	r3, r3, r2
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	08008180 	.word	0x08008180
 8005438:	08008188 	.word	0x08008188

0800543c <__errno>:
 800543c:	4b01      	ldr	r3, [pc, #4]	; (8005444 <__errno+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c

08005448 <exit>:
 8005448:	b508      	push	{r3, lr}
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <exit+0x20>)
 800544c:	4604      	mov	r4, r0
 800544e:	b113      	cbz	r3, 8005456 <exit+0xe>
 8005450:	2100      	movs	r1, #0
 8005452:	f3af 8000 	nop.w
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <exit+0x24>)
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800545c:	b103      	cbz	r3, 8005460 <exit+0x18>
 800545e:	4798      	blx	r3
 8005460:	4620      	mov	r0, r4
 8005462:	f7fc fb3b 	bl	8001adc <_exit>
 8005466:	bf00      	nop
 8005468:	00000000 	.word	0x00000000
 800546c:	08008190 	.word	0x08008190

08005470 <__libc_init_array>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	4d0d      	ldr	r5, [pc, #52]	; (80054a8 <__libc_init_array+0x38>)
 8005474:	4c0d      	ldr	r4, [pc, #52]	; (80054ac <__libc_init_array+0x3c>)
 8005476:	1b64      	subs	r4, r4, r5
 8005478:	10a4      	asrs	r4, r4, #2
 800547a:	2600      	movs	r6, #0
 800547c:	42a6      	cmp	r6, r4
 800547e:	d109      	bne.n	8005494 <__libc_init_array+0x24>
 8005480:	4d0b      	ldr	r5, [pc, #44]	; (80054b0 <__libc_init_array+0x40>)
 8005482:	4c0c      	ldr	r4, [pc, #48]	; (80054b4 <__libc_init_array+0x44>)
 8005484:	f002 fd7e 	bl	8007f84 <_init>
 8005488:	1b64      	subs	r4, r4, r5
 800548a:	10a4      	asrs	r4, r4, #2
 800548c:	2600      	movs	r6, #0
 800548e:	42a6      	cmp	r6, r4
 8005490:	d105      	bne.n	800549e <__libc_init_array+0x2e>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	f855 3b04 	ldr.w	r3, [r5], #4
 8005498:	4798      	blx	r3
 800549a:	3601      	adds	r6, #1
 800549c:	e7ee      	b.n	800547c <__libc_init_array+0xc>
 800549e:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a2:	4798      	blx	r3
 80054a4:	3601      	adds	r6, #1
 80054a6:	e7f2      	b.n	800548e <__libc_init_array+0x1e>
 80054a8:	0800857c 	.word	0x0800857c
 80054ac:	0800857c 	.word	0x0800857c
 80054b0:	0800857c 	.word	0x0800857c
 80054b4:	08008580 	.word	0x08008580

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <__cvt>:
 80054c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054cc:	ec55 4b10 	vmov	r4, r5, d0
 80054d0:	2d00      	cmp	r5, #0
 80054d2:	460e      	mov	r6, r1
 80054d4:	4619      	mov	r1, r3
 80054d6:	462b      	mov	r3, r5
 80054d8:	bfbb      	ittet	lt
 80054da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054de:	461d      	movlt	r5, r3
 80054e0:	2300      	movge	r3, #0
 80054e2:	232d      	movlt	r3, #45	; 0x2d
 80054e4:	700b      	strb	r3, [r1, #0]
 80054e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054ec:	4691      	mov	r9, r2
 80054ee:	f023 0820 	bic.w	r8, r3, #32
 80054f2:	bfbc      	itt	lt
 80054f4:	4622      	movlt	r2, r4
 80054f6:	4614      	movlt	r4, r2
 80054f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054fc:	d005      	beq.n	800550a <__cvt+0x42>
 80054fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005502:	d100      	bne.n	8005506 <__cvt+0x3e>
 8005504:	3601      	adds	r6, #1
 8005506:	2102      	movs	r1, #2
 8005508:	e000      	b.n	800550c <__cvt+0x44>
 800550a:	2103      	movs	r1, #3
 800550c:	ab03      	add	r3, sp, #12
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	ab02      	add	r3, sp, #8
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	ec45 4b10 	vmov	d0, r4, r5
 8005518:	4653      	mov	r3, sl
 800551a:	4632      	mov	r2, r6
 800551c:	f000 fe18 	bl	8006150 <_dtoa_r>
 8005520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005524:	4607      	mov	r7, r0
 8005526:	d102      	bne.n	800552e <__cvt+0x66>
 8005528:	f019 0f01 	tst.w	r9, #1
 800552c:	d022      	beq.n	8005574 <__cvt+0xac>
 800552e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005532:	eb07 0906 	add.w	r9, r7, r6
 8005536:	d110      	bne.n	800555a <__cvt+0x92>
 8005538:	783b      	ldrb	r3, [r7, #0]
 800553a:	2b30      	cmp	r3, #48	; 0x30
 800553c:	d10a      	bne.n	8005554 <__cvt+0x8c>
 800553e:	2200      	movs	r2, #0
 8005540:	2300      	movs	r3, #0
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fb fad7 	bl	8000af8 <__aeabi_dcmpeq>
 800554a:	b918      	cbnz	r0, 8005554 <__cvt+0x8c>
 800554c:	f1c6 0601 	rsb	r6, r6, #1
 8005550:	f8ca 6000 	str.w	r6, [sl]
 8005554:	f8da 3000 	ldr.w	r3, [sl]
 8005558:	4499      	add	r9, r3
 800555a:	2200      	movs	r2, #0
 800555c:	2300      	movs	r3, #0
 800555e:	4620      	mov	r0, r4
 8005560:	4629      	mov	r1, r5
 8005562:	f7fb fac9 	bl	8000af8 <__aeabi_dcmpeq>
 8005566:	b108      	cbz	r0, 800556c <__cvt+0xa4>
 8005568:	f8cd 900c 	str.w	r9, [sp, #12]
 800556c:	2230      	movs	r2, #48	; 0x30
 800556e:	9b03      	ldr	r3, [sp, #12]
 8005570:	454b      	cmp	r3, r9
 8005572:	d307      	bcc.n	8005584 <__cvt+0xbc>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005578:	1bdb      	subs	r3, r3, r7
 800557a:	4638      	mov	r0, r7
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	b004      	add	sp, #16
 8005580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005584:	1c59      	adds	r1, r3, #1
 8005586:	9103      	str	r1, [sp, #12]
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	e7f0      	b.n	800556e <__cvt+0xa6>

0800558c <__exponent>:
 800558c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558e:	4603      	mov	r3, r0
 8005590:	2900      	cmp	r1, #0
 8005592:	bfb8      	it	lt
 8005594:	4249      	neglt	r1, r1
 8005596:	f803 2b02 	strb.w	r2, [r3], #2
 800559a:	bfb4      	ite	lt
 800559c:	222d      	movlt	r2, #45	; 0x2d
 800559e:	222b      	movge	r2, #43	; 0x2b
 80055a0:	2909      	cmp	r1, #9
 80055a2:	7042      	strb	r2, [r0, #1]
 80055a4:	dd2a      	ble.n	80055fc <__exponent+0x70>
 80055a6:	f10d 0407 	add.w	r4, sp, #7
 80055aa:	46a4      	mov	ip, r4
 80055ac:	270a      	movs	r7, #10
 80055ae:	46a6      	mov	lr, r4
 80055b0:	460a      	mov	r2, r1
 80055b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80055b6:	fb07 1516 	mls	r5, r7, r6, r1
 80055ba:	3530      	adds	r5, #48	; 0x30
 80055bc:	2a63      	cmp	r2, #99	; 0x63
 80055be:	f104 34ff 	add.w	r4, r4, #4294967295
 80055c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055c6:	4631      	mov	r1, r6
 80055c8:	dcf1      	bgt.n	80055ae <__exponent+0x22>
 80055ca:	3130      	adds	r1, #48	; 0x30
 80055cc:	f1ae 0502 	sub.w	r5, lr, #2
 80055d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055d4:	1c44      	adds	r4, r0, #1
 80055d6:	4629      	mov	r1, r5
 80055d8:	4561      	cmp	r1, ip
 80055da:	d30a      	bcc.n	80055f2 <__exponent+0x66>
 80055dc:	f10d 0209 	add.w	r2, sp, #9
 80055e0:	eba2 020e 	sub.w	r2, r2, lr
 80055e4:	4565      	cmp	r5, ip
 80055e6:	bf88      	it	hi
 80055e8:	2200      	movhi	r2, #0
 80055ea:	4413      	add	r3, r2
 80055ec:	1a18      	subs	r0, r3, r0
 80055ee:	b003      	add	sp, #12
 80055f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055fa:	e7ed      	b.n	80055d8 <__exponent+0x4c>
 80055fc:	2330      	movs	r3, #48	; 0x30
 80055fe:	3130      	adds	r1, #48	; 0x30
 8005600:	7083      	strb	r3, [r0, #2]
 8005602:	70c1      	strb	r1, [r0, #3]
 8005604:	1d03      	adds	r3, r0, #4
 8005606:	e7f1      	b.n	80055ec <__exponent+0x60>

08005608 <_printf_float>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	ed2d 8b02 	vpush	{d8}
 8005610:	b08d      	sub	sp, #52	; 0x34
 8005612:	460c      	mov	r4, r1
 8005614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005618:	4616      	mov	r6, r2
 800561a:	461f      	mov	r7, r3
 800561c:	4605      	mov	r5, r0
 800561e:	f001 fd3b 	bl	8007098 <_localeconv_r>
 8005622:	f8d0 a000 	ldr.w	sl, [r0]
 8005626:	4650      	mov	r0, sl
 8005628:	f7fa fdea 	bl	8000200 <strlen>
 800562c:	2300      	movs	r3, #0
 800562e:	930a      	str	r3, [sp, #40]	; 0x28
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	f8d8 3000 	ldr.w	r3, [r8]
 8005638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800563c:	3307      	adds	r3, #7
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	f103 0208 	add.w	r2, r3, #8
 8005646:	f8c8 2000 	str.w	r2, [r8]
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005652:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800565a:	9307      	str	r3, [sp, #28]
 800565c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005660:	ee08 0a10 	vmov	s16, r0
 8005664:	4b9f      	ldr	r3, [pc, #636]	; (80058e4 <_printf_float+0x2dc>)
 8005666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	f7fb fa75 	bl	8000b5c <__aeabi_dcmpun>
 8005672:	bb88      	cbnz	r0, 80056d8 <_printf_float+0xd0>
 8005674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005678:	4b9a      	ldr	r3, [pc, #616]	; (80058e4 <_printf_float+0x2dc>)
 800567a:	f04f 32ff 	mov.w	r2, #4294967295
 800567e:	f7fb fa4f 	bl	8000b20 <__aeabi_dcmple>
 8005682:	bb48      	cbnz	r0, 80056d8 <_printf_float+0xd0>
 8005684:	2200      	movs	r2, #0
 8005686:	2300      	movs	r3, #0
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fb fa3e 	bl	8000b0c <__aeabi_dcmplt>
 8005690:	b110      	cbz	r0, 8005698 <_printf_float+0x90>
 8005692:	232d      	movs	r3, #45	; 0x2d
 8005694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005698:	4b93      	ldr	r3, [pc, #588]	; (80058e8 <_printf_float+0x2e0>)
 800569a:	4894      	ldr	r0, [pc, #592]	; (80058ec <_printf_float+0x2e4>)
 800569c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80056a0:	bf94      	ite	ls
 80056a2:	4698      	movls	r8, r3
 80056a4:	4680      	movhi	r8, r0
 80056a6:	2303      	movs	r3, #3
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	f023 0204 	bic.w	r2, r3, #4
 80056b0:	6022      	str	r2, [r4, #0]
 80056b2:	f04f 0900 	mov.w	r9, #0
 80056b6:	9700      	str	r7, [sp, #0]
 80056b8:	4633      	mov	r3, r6
 80056ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 f9d8 	bl	8005a74 <_printf_common>
 80056c4:	3001      	adds	r0, #1
 80056c6:	f040 8090 	bne.w	80057ea <_printf_float+0x1e2>
 80056ca:	f04f 30ff 	mov.w	r0, #4294967295
 80056ce:	b00d      	add	sp, #52	; 0x34
 80056d0:	ecbd 8b02 	vpop	{d8}
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	4649      	mov	r1, r9
 80056e0:	f7fb fa3c 	bl	8000b5c <__aeabi_dcmpun>
 80056e4:	b140      	cbz	r0, 80056f8 <_printf_float+0xf0>
 80056e6:	464b      	mov	r3, r9
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfbc      	itt	lt
 80056ec:	232d      	movlt	r3, #45	; 0x2d
 80056ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056f2:	487f      	ldr	r0, [pc, #508]	; (80058f0 <_printf_float+0x2e8>)
 80056f4:	4b7f      	ldr	r3, [pc, #508]	; (80058f4 <_printf_float+0x2ec>)
 80056f6:	e7d1      	b.n	800569c <_printf_float+0x94>
 80056f8:	6863      	ldr	r3, [r4, #4]
 80056fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056fe:	9206      	str	r2, [sp, #24]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	d13f      	bne.n	8005784 <_printf_float+0x17c>
 8005704:	2306      	movs	r3, #6
 8005706:	6063      	str	r3, [r4, #4]
 8005708:	9b05      	ldr	r3, [sp, #20]
 800570a:	6861      	ldr	r1, [r4, #4]
 800570c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005710:	2300      	movs	r3, #0
 8005712:	9303      	str	r3, [sp, #12]
 8005714:	ab0a      	add	r3, sp, #40	; 0x28
 8005716:	e9cd b301 	strd	fp, r3, [sp, #4]
 800571a:	ab09      	add	r3, sp, #36	; 0x24
 800571c:	ec49 8b10 	vmov	d0, r8, r9
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	6022      	str	r2, [r4, #0]
 8005724:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005728:	4628      	mov	r0, r5
 800572a:	f7ff fecd 	bl	80054c8 <__cvt>
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005732:	2b47      	cmp	r3, #71	; 0x47
 8005734:	4680      	mov	r8, r0
 8005736:	d108      	bne.n	800574a <_printf_float+0x142>
 8005738:	1cc8      	adds	r0, r1, #3
 800573a:	db02      	blt.n	8005742 <_printf_float+0x13a>
 800573c:	6863      	ldr	r3, [r4, #4]
 800573e:	4299      	cmp	r1, r3
 8005740:	dd41      	ble.n	80057c6 <_printf_float+0x1be>
 8005742:	f1ab 0b02 	sub.w	fp, fp, #2
 8005746:	fa5f fb8b 	uxtb.w	fp, fp
 800574a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800574e:	d820      	bhi.n	8005792 <_printf_float+0x18a>
 8005750:	3901      	subs	r1, #1
 8005752:	465a      	mov	r2, fp
 8005754:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005758:	9109      	str	r1, [sp, #36]	; 0x24
 800575a:	f7ff ff17 	bl	800558c <__exponent>
 800575e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005760:	1813      	adds	r3, r2, r0
 8005762:	2a01      	cmp	r2, #1
 8005764:	4681      	mov	r9, r0
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	dc02      	bgt.n	8005770 <_printf_float+0x168>
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	07d2      	lsls	r2, r2, #31
 800576e:	d501      	bpl.n	8005774 <_printf_float+0x16c>
 8005770:	3301      	adds	r3, #1
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005778:	2b00      	cmp	r3, #0
 800577a:	d09c      	beq.n	80056b6 <_printf_float+0xae>
 800577c:	232d      	movs	r3, #45	; 0x2d
 800577e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005782:	e798      	b.n	80056b6 <_printf_float+0xae>
 8005784:	9a06      	ldr	r2, [sp, #24]
 8005786:	2a47      	cmp	r2, #71	; 0x47
 8005788:	d1be      	bne.n	8005708 <_printf_float+0x100>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1bc      	bne.n	8005708 <_printf_float+0x100>
 800578e:	2301      	movs	r3, #1
 8005790:	e7b9      	b.n	8005706 <_printf_float+0xfe>
 8005792:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005796:	d118      	bne.n	80057ca <_printf_float+0x1c2>
 8005798:	2900      	cmp	r1, #0
 800579a:	6863      	ldr	r3, [r4, #4]
 800579c:	dd0b      	ble.n	80057b6 <_printf_float+0x1ae>
 800579e:	6121      	str	r1, [r4, #16]
 80057a0:	b913      	cbnz	r3, 80057a8 <_printf_float+0x1a0>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	07d0      	lsls	r0, r2, #31
 80057a6:	d502      	bpl.n	80057ae <_printf_float+0x1a6>
 80057a8:	3301      	adds	r3, #1
 80057aa:	440b      	add	r3, r1
 80057ac:	6123      	str	r3, [r4, #16]
 80057ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80057b0:	f04f 0900 	mov.w	r9, #0
 80057b4:	e7de      	b.n	8005774 <_printf_float+0x16c>
 80057b6:	b913      	cbnz	r3, 80057be <_printf_float+0x1b6>
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	07d2      	lsls	r2, r2, #31
 80057bc:	d501      	bpl.n	80057c2 <_printf_float+0x1ba>
 80057be:	3302      	adds	r3, #2
 80057c0:	e7f4      	b.n	80057ac <_printf_float+0x1a4>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7f2      	b.n	80057ac <_printf_float+0x1a4>
 80057c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057cc:	4299      	cmp	r1, r3
 80057ce:	db05      	blt.n	80057dc <_printf_float+0x1d4>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	6121      	str	r1, [r4, #16]
 80057d4:	07d8      	lsls	r0, r3, #31
 80057d6:	d5ea      	bpl.n	80057ae <_printf_float+0x1a6>
 80057d8:	1c4b      	adds	r3, r1, #1
 80057da:	e7e7      	b.n	80057ac <_printf_float+0x1a4>
 80057dc:	2900      	cmp	r1, #0
 80057de:	bfd4      	ite	le
 80057e0:	f1c1 0202 	rsble	r2, r1, #2
 80057e4:	2201      	movgt	r2, #1
 80057e6:	4413      	add	r3, r2
 80057e8:	e7e0      	b.n	80057ac <_printf_float+0x1a4>
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	055a      	lsls	r2, r3, #21
 80057ee:	d407      	bmi.n	8005800 <_printf_float+0x1f8>
 80057f0:	6923      	ldr	r3, [r4, #16]
 80057f2:	4642      	mov	r2, r8
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	d12c      	bne.n	8005858 <_printf_float+0x250>
 80057fe:	e764      	b.n	80056ca <_printf_float+0xc2>
 8005800:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005804:	f240 80e0 	bls.w	80059c8 <_printf_float+0x3c0>
 8005808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800580c:	2200      	movs	r2, #0
 800580e:	2300      	movs	r3, #0
 8005810:	f7fb f972 	bl	8000af8 <__aeabi_dcmpeq>
 8005814:	2800      	cmp	r0, #0
 8005816:	d034      	beq.n	8005882 <_printf_float+0x27a>
 8005818:	4a37      	ldr	r2, [pc, #220]	; (80058f8 <_printf_float+0x2f0>)
 800581a:	2301      	movs	r3, #1
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f af51 	beq.w	80056ca <_printf_float+0xc2>
 8005828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582c:	429a      	cmp	r2, r3
 800582e:	db02      	blt.n	8005836 <_printf_float+0x22e>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	07d8      	lsls	r0, r3, #31
 8005834:	d510      	bpl.n	8005858 <_printf_float+0x250>
 8005836:	ee18 3a10 	vmov	r3, s16
 800583a:	4652      	mov	r2, sl
 800583c:	4631      	mov	r1, r6
 800583e:	4628      	mov	r0, r5
 8005840:	47b8      	blx	r7
 8005842:	3001      	adds	r0, #1
 8005844:	f43f af41 	beq.w	80056ca <_printf_float+0xc2>
 8005848:	f04f 0800 	mov.w	r8, #0
 800584c:	f104 091a 	add.w	r9, r4, #26
 8005850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005852:	3b01      	subs	r3, #1
 8005854:	4543      	cmp	r3, r8
 8005856:	dc09      	bgt.n	800586c <_printf_float+0x264>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	079b      	lsls	r3, r3, #30
 800585c:	f100 8105 	bmi.w	8005a6a <_printf_float+0x462>
 8005860:	68e0      	ldr	r0, [r4, #12]
 8005862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005864:	4298      	cmp	r0, r3
 8005866:	bfb8      	it	lt
 8005868:	4618      	movlt	r0, r3
 800586a:	e730      	b.n	80056ce <_printf_float+0xc6>
 800586c:	2301      	movs	r3, #1
 800586e:	464a      	mov	r2, r9
 8005870:	4631      	mov	r1, r6
 8005872:	4628      	mov	r0, r5
 8005874:	47b8      	blx	r7
 8005876:	3001      	adds	r0, #1
 8005878:	f43f af27 	beq.w	80056ca <_printf_float+0xc2>
 800587c:	f108 0801 	add.w	r8, r8, #1
 8005880:	e7e6      	b.n	8005850 <_printf_float+0x248>
 8005882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	dc39      	bgt.n	80058fc <_printf_float+0x2f4>
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <_printf_float+0x2f0>)
 800588a:	2301      	movs	r3, #1
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af19 	beq.w	80056ca <_printf_float+0xc2>
 8005898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800589c:	4313      	orrs	r3, r2
 800589e:	d102      	bne.n	80058a6 <_printf_float+0x29e>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07d9      	lsls	r1, r3, #31
 80058a4:	d5d8      	bpl.n	8005858 <_printf_float+0x250>
 80058a6:	ee18 3a10 	vmov	r3, s16
 80058aa:	4652      	mov	r2, sl
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f af09 	beq.w	80056ca <_printf_float+0xc2>
 80058b8:	f04f 0900 	mov.w	r9, #0
 80058bc:	f104 0a1a 	add.w	sl, r4, #26
 80058c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c2:	425b      	negs	r3, r3
 80058c4:	454b      	cmp	r3, r9
 80058c6:	dc01      	bgt.n	80058cc <_printf_float+0x2c4>
 80058c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ca:	e792      	b.n	80057f2 <_printf_float+0x1ea>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4652      	mov	r2, sl
 80058d0:	4631      	mov	r1, r6
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	f43f aef7 	beq.w	80056ca <_printf_float+0xc2>
 80058dc:	f109 0901 	add.w	r9, r9, #1
 80058e0:	e7ee      	b.n	80058c0 <_printf_float+0x2b8>
 80058e2:	bf00      	nop
 80058e4:	7fefffff 	.word	0x7fefffff
 80058e8:	08008194 	.word	0x08008194
 80058ec:	08008198 	.word	0x08008198
 80058f0:	080081a0 	.word	0x080081a0
 80058f4:	0800819c 	.word	0x0800819c
 80058f8:	080081a4 	.word	0x080081a4
 80058fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005900:	429a      	cmp	r2, r3
 8005902:	bfa8      	it	ge
 8005904:	461a      	movge	r2, r3
 8005906:	2a00      	cmp	r2, #0
 8005908:	4691      	mov	r9, r2
 800590a:	dc37      	bgt.n	800597c <_printf_float+0x374>
 800590c:	f04f 0b00 	mov.w	fp, #0
 8005910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005914:	f104 021a 	add.w	r2, r4, #26
 8005918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800591a:	9305      	str	r3, [sp, #20]
 800591c:	eba3 0309 	sub.w	r3, r3, r9
 8005920:	455b      	cmp	r3, fp
 8005922:	dc33      	bgt.n	800598c <_printf_float+0x384>
 8005924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005928:	429a      	cmp	r2, r3
 800592a:	db3b      	blt.n	80059a4 <_printf_float+0x39c>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	07da      	lsls	r2, r3, #31
 8005930:	d438      	bmi.n	80059a4 <_printf_float+0x39c>
 8005932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005934:	9b05      	ldr	r3, [sp, #20]
 8005936:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	eba2 0901 	sub.w	r9, r2, r1
 800593e:	4599      	cmp	r9, r3
 8005940:	bfa8      	it	ge
 8005942:	4699      	movge	r9, r3
 8005944:	f1b9 0f00 	cmp.w	r9, #0
 8005948:	dc35      	bgt.n	80059b6 <_printf_float+0x3ae>
 800594a:	f04f 0800 	mov.w	r8, #0
 800594e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005952:	f104 0a1a 	add.w	sl, r4, #26
 8005956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800595a:	1a9b      	subs	r3, r3, r2
 800595c:	eba3 0309 	sub.w	r3, r3, r9
 8005960:	4543      	cmp	r3, r8
 8005962:	f77f af79 	ble.w	8005858 <_printf_float+0x250>
 8005966:	2301      	movs	r3, #1
 8005968:	4652      	mov	r2, sl
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f aeaa 	beq.w	80056ca <_printf_float+0xc2>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	e7ec      	b.n	8005956 <_printf_float+0x34e>
 800597c:	4613      	mov	r3, r2
 800597e:	4631      	mov	r1, r6
 8005980:	4642      	mov	r2, r8
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	d1c0      	bne.n	800590c <_printf_float+0x304>
 800598a:	e69e      	b.n	80056ca <_printf_float+0xc2>
 800598c:	2301      	movs	r3, #1
 800598e:	4631      	mov	r1, r6
 8005990:	4628      	mov	r0, r5
 8005992:	9205      	str	r2, [sp, #20]
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f ae97 	beq.w	80056ca <_printf_float+0xc2>
 800599c:	9a05      	ldr	r2, [sp, #20]
 800599e:	f10b 0b01 	add.w	fp, fp, #1
 80059a2:	e7b9      	b.n	8005918 <_printf_float+0x310>
 80059a4:	ee18 3a10 	vmov	r3, s16
 80059a8:	4652      	mov	r2, sl
 80059aa:	4631      	mov	r1, r6
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b8      	blx	r7
 80059b0:	3001      	adds	r0, #1
 80059b2:	d1be      	bne.n	8005932 <_printf_float+0x32a>
 80059b4:	e689      	b.n	80056ca <_printf_float+0xc2>
 80059b6:	9a05      	ldr	r2, [sp, #20]
 80059b8:	464b      	mov	r3, r9
 80059ba:	4442      	add	r2, r8
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	d1c1      	bne.n	800594a <_printf_float+0x342>
 80059c6:	e680      	b.n	80056ca <_printf_float+0xc2>
 80059c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ca:	2a01      	cmp	r2, #1
 80059cc:	dc01      	bgt.n	80059d2 <_printf_float+0x3ca>
 80059ce:	07db      	lsls	r3, r3, #31
 80059d0:	d538      	bpl.n	8005a44 <_printf_float+0x43c>
 80059d2:	2301      	movs	r3, #1
 80059d4:	4642      	mov	r2, r8
 80059d6:	4631      	mov	r1, r6
 80059d8:	4628      	mov	r0, r5
 80059da:	47b8      	blx	r7
 80059dc:	3001      	adds	r0, #1
 80059de:	f43f ae74 	beq.w	80056ca <_printf_float+0xc2>
 80059e2:	ee18 3a10 	vmov	r3, s16
 80059e6:	4652      	mov	r2, sl
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f ae6b 	beq.w	80056ca <_printf_float+0xc2>
 80059f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059f8:	2200      	movs	r2, #0
 80059fa:	2300      	movs	r3, #0
 80059fc:	f7fb f87c 	bl	8000af8 <__aeabi_dcmpeq>
 8005a00:	b9d8      	cbnz	r0, 8005a3a <_printf_float+0x432>
 8005a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a04:	f108 0201 	add.w	r2, r8, #1
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	d10e      	bne.n	8005a32 <_printf_float+0x42a>
 8005a14:	e659      	b.n	80056ca <_printf_float+0xc2>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	f43f ae52 	beq.w	80056ca <_printf_float+0xc2>
 8005a26:	f108 0801 	add.w	r8, r8, #1
 8005a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	4543      	cmp	r3, r8
 8005a30:	dcf1      	bgt.n	8005a16 <_printf_float+0x40e>
 8005a32:	464b      	mov	r3, r9
 8005a34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a38:	e6dc      	b.n	80057f4 <_printf_float+0x1ec>
 8005a3a:	f04f 0800 	mov.w	r8, #0
 8005a3e:	f104 0a1a 	add.w	sl, r4, #26
 8005a42:	e7f2      	b.n	8005a2a <_printf_float+0x422>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4642      	mov	r2, r8
 8005a48:	e7df      	b.n	8005a0a <_printf_float+0x402>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	464a      	mov	r2, r9
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	f43f ae38 	beq.w	80056ca <_printf_float+0xc2>
 8005a5a:	f108 0801 	add.w	r8, r8, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	4543      	cmp	r3, r8
 8005a66:	dcf0      	bgt.n	8005a4a <_printf_float+0x442>
 8005a68:	e6fa      	b.n	8005860 <_printf_float+0x258>
 8005a6a:	f04f 0800 	mov.w	r8, #0
 8005a6e:	f104 0919 	add.w	r9, r4, #25
 8005a72:	e7f4      	b.n	8005a5e <_printf_float+0x456>

08005a74 <_printf_common>:
 8005a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	4616      	mov	r6, r2
 8005a7a:	4699      	mov	r9, r3
 8005a7c:	688a      	ldr	r2, [r1, #8]
 8005a7e:	690b      	ldr	r3, [r1, #16]
 8005a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	bfb8      	it	lt
 8005a88:	4613      	movlt	r3, r2
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a90:	4607      	mov	r7, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	b10a      	cbz	r2, 8005a9a <_printf_common+0x26>
 8005a96:	3301      	adds	r3, #1
 8005a98:	6033      	str	r3, [r6, #0]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	0699      	lsls	r1, r3, #26
 8005a9e:	bf42      	ittt	mi
 8005aa0:	6833      	ldrmi	r3, [r6, #0]
 8005aa2:	3302      	addmi	r3, #2
 8005aa4:	6033      	strmi	r3, [r6, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	f015 0506 	ands.w	r5, r5, #6
 8005aac:	d106      	bne.n	8005abc <_printf_common+0x48>
 8005aae:	f104 0a19 	add.w	sl, r4, #25
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	6832      	ldr	r2, [r6, #0]
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dc26      	bgt.n	8005b0a <_printf_common+0x96>
 8005abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac0:	1e13      	subs	r3, r2, #0
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	bf18      	it	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	0692      	lsls	r2, r2, #26
 8005aca:	d42b      	bmi.n	8005b24 <_printf_common+0xb0>
 8005acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	47c0      	blx	r8
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d01e      	beq.n	8005b18 <_printf_common+0xa4>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	68e5      	ldr	r5, [r4, #12]
 8005ade:	6832      	ldr	r2, [r6, #0]
 8005ae0:	f003 0306 	and.w	r3, r3, #6
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	bf08      	it	eq
 8005ae8:	1aad      	subeq	r5, r5, r2
 8005aea:	68a3      	ldr	r3, [r4, #8]
 8005aec:	6922      	ldr	r2, [r4, #16]
 8005aee:	bf0c      	ite	eq
 8005af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af4:	2500      	movne	r5, #0
 8005af6:	4293      	cmp	r3, r2
 8005af8:	bfc4      	itt	gt
 8005afa:	1a9b      	subgt	r3, r3, r2
 8005afc:	18ed      	addgt	r5, r5, r3
 8005afe:	2600      	movs	r6, #0
 8005b00:	341a      	adds	r4, #26
 8005b02:	42b5      	cmp	r5, r6
 8005b04:	d11a      	bne.n	8005b3c <_printf_common+0xc8>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e008      	b.n	8005b1c <_printf_common+0xa8>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4638      	mov	r0, r7
 8005b12:	47c0      	blx	r8
 8005b14:	3001      	adds	r0, #1
 8005b16:	d103      	bne.n	8005b20 <_printf_common+0xac>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b20:	3501      	adds	r5, #1
 8005b22:	e7c6      	b.n	8005ab2 <_printf_common+0x3e>
 8005b24:	18e1      	adds	r1, r4, r3
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	2030      	movs	r0, #48	; 0x30
 8005b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b2e:	4422      	add	r2, r4
 8005b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b38:	3302      	adds	r3, #2
 8005b3a:	e7c7      	b.n	8005acc <_printf_common+0x58>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4622      	mov	r2, r4
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d0e6      	beq.n	8005b18 <_printf_common+0xa4>
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7d9      	b.n	8005b02 <_printf_common+0x8e>
	...

08005b50 <_printf_i>:
 8005b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	460c      	mov	r4, r1
 8005b56:	4691      	mov	r9, r2
 8005b58:	7e27      	ldrb	r7, [r4, #24]
 8005b5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b5c:	2f78      	cmp	r7, #120	; 0x78
 8005b5e:	4680      	mov	r8, r0
 8005b60:	469a      	mov	sl, r3
 8005b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b66:	d807      	bhi.n	8005b78 <_printf_i+0x28>
 8005b68:	2f62      	cmp	r7, #98	; 0x62
 8005b6a:	d80a      	bhi.n	8005b82 <_printf_i+0x32>
 8005b6c:	2f00      	cmp	r7, #0
 8005b6e:	f000 80d8 	beq.w	8005d22 <_printf_i+0x1d2>
 8005b72:	2f58      	cmp	r7, #88	; 0x58
 8005b74:	f000 80a3 	beq.w	8005cbe <_printf_i+0x16e>
 8005b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b80:	e03a      	b.n	8005bf8 <_printf_i+0xa8>
 8005b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b86:	2b15      	cmp	r3, #21
 8005b88:	d8f6      	bhi.n	8005b78 <_printf_i+0x28>
 8005b8a:	a001      	add	r0, pc, #4	; (adr r0, 8005b90 <_printf_i+0x40>)
 8005b8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bfd 	.word	0x08005bfd
 8005b98:	08005b79 	.word	0x08005b79
 8005b9c:	08005b79 	.word	0x08005b79
 8005ba0:	08005b79 	.word	0x08005b79
 8005ba4:	08005b79 	.word	0x08005b79
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005b79 	.word	0x08005b79
 8005bb0:	08005b79 	.word	0x08005b79
 8005bb4:	08005b79 	.word	0x08005b79
 8005bb8:	08005b79 	.word	0x08005b79
 8005bbc:	08005d09 	.word	0x08005d09
 8005bc0:	08005c2d 	.word	0x08005c2d
 8005bc4:	08005ceb 	.word	0x08005ceb
 8005bc8:	08005b79 	.word	0x08005b79
 8005bcc:	08005b79 	.word	0x08005b79
 8005bd0:	08005d2b 	.word	0x08005d2b
 8005bd4:	08005b79 	.word	0x08005b79
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005b79 	.word	0x08005b79
 8005be0:	08005b79 	.word	0x08005b79
 8005be4:	08005cf3 	.word	0x08005cf3
 8005be8:	680b      	ldr	r3, [r1, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	600a      	str	r2, [r1, #0]
 8005bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0a3      	b.n	8005d44 <_printf_i+0x1f4>
 8005bfc:	6825      	ldr	r5, [r4, #0]
 8005bfe:	6808      	ldr	r0, [r1, #0]
 8005c00:	062e      	lsls	r6, r5, #24
 8005c02:	f100 0304 	add.w	r3, r0, #4
 8005c06:	d50a      	bpl.n	8005c1e <_printf_i+0xce>
 8005c08:	6805      	ldr	r5, [r0, #0]
 8005c0a:	600b      	str	r3, [r1, #0]
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	da03      	bge.n	8005c18 <_printf_i+0xc8>
 8005c10:	232d      	movs	r3, #45	; 0x2d
 8005c12:	426d      	negs	r5, r5
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c18:	485e      	ldr	r0, [pc, #376]	; (8005d94 <_printf_i+0x244>)
 8005c1a:	230a      	movs	r3, #10
 8005c1c:	e019      	b.n	8005c52 <_printf_i+0x102>
 8005c1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c22:	6805      	ldr	r5, [r0, #0]
 8005c24:	600b      	str	r3, [r1, #0]
 8005c26:	bf18      	it	ne
 8005c28:	b22d      	sxthne	r5, r5
 8005c2a:	e7ef      	b.n	8005c0c <_printf_i+0xbc>
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	6825      	ldr	r5, [r4, #0]
 8005c30:	1d18      	adds	r0, r3, #4
 8005c32:	6008      	str	r0, [r1, #0]
 8005c34:	0628      	lsls	r0, r5, #24
 8005c36:	d501      	bpl.n	8005c3c <_printf_i+0xec>
 8005c38:	681d      	ldr	r5, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <_printf_i+0xf2>
 8005c3c:	0669      	lsls	r1, r5, #25
 8005c3e:	d5fb      	bpl.n	8005c38 <_printf_i+0xe8>
 8005c40:	881d      	ldrh	r5, [r3, #0]
 8005c42:	4854      	ldr	r0, [pc, #336]	; (8005d94 <_printf_i+0x244>)
 8005c44:	2f6f      	cmp	r7, #111	; 0x6f
 8005c46:	bf0c      	ite	eq
 8005c48:	2308      	moveq	r3, #8
 8005c4a:	230a      	movne	r3, #10
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c52:	6866      	ldr	r6, [r4, #4]
 8005c54:	60a6      	str	r6, [r4, #8]
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	bfa2      	ittt	ge
 8005c5a:	6821      	ldrge	r1, [r4, #0]
 8005c5c:	f021 0104 	bicge.w	r1, r1, #4
 8005c60:	6021      	strge	r1, [r4, #0]
 8005c62:	b90d      	cbnz	r5, 8005c68 <_printf_i+0x118>
 8005c64:	2e00      	cmp	r6, #0
 8005c66:	d04d      	beq.n	8005d04 <_printf_i+0x1b4>
 8005c68:	4616      	mov	r6, r2
 8005c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c72:	5dc7      	ldrb	r7, [r0, r7]
 8005c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c78:	462f      	mov	r7, r5
 8005c7a:	42bb      	cmp	r3, r7
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	d9f4      	bls.n	8005c6a <_printf_i+0x11a>
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d10b      	bne.n	8005c9c <_printf_i+0x14c>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	07df      	lsls	r7, r3, #31
 8005c88:	d508      	bpl.n	8005c9c <_printf_i+0x14c>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	6861      	ldr	r1, [r4, #4]
 8005c8e:	4299      	cmp	r1, r3
 8005c90:	bfde      	ittt	le
 8005c92:	2330      	movle	r3, #48	; 0x30
 8005c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c9c:	1b92      	subs	r2, r2, r6
 8005c9e:	6122      	str	r2, [r4, #16]
 8005ca0:	f8cd a000 	str.w	sl, [sp]
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	aa03      	add	r2, sp, #12
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4640      	mov	r0, r8
 8005cac:	f7ff fee2 	bl	8005a74 <_printf_common>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d14c      	bne.n	8005d4e <_printf_i+0x1fe>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	b004      	add	sp, #16
 8005cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbe:	4835      	ldr	r0, [pc, #212]	; (8005d94 <_printf_i+0x244>)
 8005cc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	680e      	ldr	r6, [r1, #0]
 8005cc8:	061f      	lsls	r7, r3, #24
 8005cca:	f856 5b04 	ldr.w	r5, [r6], #4
 8005cce:	600e      	str	r6, [r1, #0]
 8005cd0:	d514      	bpl.n	8005cfc <_printf_i+0x1ac>
 8005cd2:	07d9      	lsls	r1, r3, #31
 8005cd4:	bf44      	itt	mi
 8005cd6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cda:	6023      	strmi	r3, [r4, #0]
 8005cdc:	b91d      	cbnz	r5, 8005ce6 <_printf_i+0x196>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	f023 0320 	bic.w	r3, r3, #32
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	2310      	movs	r3, #16
 8005ce8:	e7b0      	b.n	8005c4c <_printf_i+0xfc>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	f043 0320 	orr.w	r3, r3, #32
 8005cf0:	6023      	str	r3, [r4, #0]
 8005cf2:	2378      	movs	r3, #120	; 0x78
 8005cf4:	4828      	ldr	r0, [pc, #160]	; (8005d98 <_printf_i+0x248>)
 8005cf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cfa:	e7e3      	b.n	8005cc4 <_printf_i+0x174>
 8005cfc:	065e      	lsls	r6, r3, #25
 8005cfe:	bf48      	it	mi
 8005d00:	b2ad      	uxthmi	r5, r5
 8005d02:	e7e6      	b.n	8005cd2 <_printf_i+0x182>
 8005d04:	4616      	mov	r6, r2
 8005d06:	e7bb      	b.n	8005c80 <_printf_i+0x130>
 8005d08:	680b      	ldr	r3, [r1, #0]
 8005d0a:	6826      	ldr	r6, [r4, #0]
 8005d0c:	6960      	ldr	r0, [r4, #20]
 8005d0e:	1d1d      	adds	r5, r3, #4
 8005d10:	600d      	str	r5, [r1, #0]
 8005d12:	0635      	lsls	r5, r6, #24
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	d501      	bpl.n	8005d1c <_printf_i+0x1cc>
 8005d18:	6018      	str	r0, [r3, #0]
 8005d1a:	e002      	b.n	8005d22 <_printf_i+0x1d2>
 8005d1c:	0671      	lsls	r1, r6, #25
 8005d1e:	d5fb      	bpl.n	8005d18 <_printf_i+0x1c8>
 8005d20:	8018      	strh	r0, [r3, #0]
 8005d22:	2300      	movs	r3, #0
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	4616      	mov	r6, r2
 8005d28:	e7ba      	b.n	8005ca0 <_printf_i+0x150>
 8005d2a:	680b      	ldr	r3, [r1, #0]
 8005d2c:	1d1a      	adds	r2, r3, #4
 8005d2e:	600a      	str	r2, [r1, #0]
 8005d30:	681e      	ldr	r6, [r3, #0]
 8005d32:	6862      	ldr	r2, [r4, #4]
 8005d34:	2100      	movs	r1, #0
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7fa fa6a 	bl	8000210 <memchr>
 8005d3c:	b108      	cbz	r0, 8005d42 <_printf_i+0x1f2>
 8005d3e:	1b80      	subs	r0, r0, r6
 8005d40:	6060      	str	r0, [r4, #4]
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	2300      	movs	r3, #0
 8005d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4c:	e7a8      	b.n	8005ca0 <_printf_i+0x150>
 8005d4e:	6923      	ldr	r3, [r4, #16]
 8005d50:	4632      	mov	r2, r6
 8005d52:	4649      	mov	r1, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	47d0      	blx	sl
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d0ab      	beq.n	8005cb4 <_printf_i+0x164>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	079b      	lsls	r3, r3, #30
 8005d60:	d413      	bmi.n	8005d8a <_printf_i+0x23a>
 8005d62:	68e0      	ldr	r0, [r4, #12]
 8005d64:	9b03      	ldr	r3, [sp, #12]
 8005d66:	4298      	cmp	r0, r3
 8005d68:	bfb8      	it	lt
 8005d6a:	4618      	movlt	r0, r3
 8005d6c:	e7a4      	b.n	8005cb8 <_printf_i+0x168>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4632      	mov	r2, r6
 8005d72:	4649      	mov	r1, r9
 8005d74:	4640      	mov	r0, r8
 8005d76:	47d0      	blx	sl
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d09b      	beq.n	8005cb4 <_printf_i+0x164>
 8005d7c:	3501      	adds	r5, #1
 8005d7e:	68e3      	ldr	r3, [r4, #12]
 8005d80:	9903      	ldr	r1, [sp, #12]
 8005d82:	1a5b      	subs	r3, r3, r1
 8005d84:	42ab      	cmp	r3, r5
 8005d86:	dcf2      	bgt.n	8005d6e <_printf_i+0x21e>
 8005d88:	e7eb      	b.n	8005d62 <_printf_i+0x212>
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	f104 0619 	add.w	r6, r4, #25
 8005d90:	e7f5      	b.n	8005d7e <_printf_i+0x22e>
 8005d92:	bf00      	nop
 8005d94:	080081a6 	.word	0x080081a6
 8005d98:	080081b7 	.word	0x080081b7

08005d9c <iprintf>:
 8005d9c:	b40f      	push	{r0, r1, r2, r3}
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <iprintf+0x2c>)
 8005da0:	b513      	push	{r0, r1, r4, lr}
 8005da2:	681c      	ldr	r4, [r3, #0]
 8005da4:	b124      	cbz	r4, 8005db0 <iprintf+0x14>
 8005da6:	69a3      	ldr	r3, [r4, #24]
 8005da8:	b913      	cbnz	r3, 8005db0 <iprintf+0x14>
 8005daa:	4620      	mov	r0, r4
 8005dac:	f001 f8d6 	bl	8006f5c <__sinit>
 8005db0:	ab05      	add	r3, sp, #20
 8005db2:	9a04      	ldr	r2, [sp, #16]
 8005db4:	68a1      	ldr	r1, [r4, #8]
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	4620      	mov	r0, r4
 8005dba:	f001 fe51 	bl	8007a60 <_vfiprintf_r>
 8005dbe:	b002      	add	sp, #8
 8005dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc4:	b004      	add	sp, #16
 8005dc6:	4770      	bx	lr
 8005dc8:	2000000c 	.word	0x2000000c

08005dcc <_puts_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	b118      	cbz	r0, 8005ddc <_puts_r+0x10>
 8005dd4:	6983      	ldr	r3, [r0, #24]
 8005dd6:	b90b      	cbnz	r3, 8005ddc <_puts_r+0x10>
 8005dd8:	f001 f8c0 	bl	8006f5c <__sinit>
 8005ddc:	69ab      	ldr	r3, [r5, #24]
 8005dde:	68ac      	ldr	r4, [r5, #8]
 8005de0:	b913      	cbnz	r3, 8005de8 <_puts_r+0x1c>
 8005de2:	4628      	mov	r0, r5
 8005de4:	f001 f8ba 	bl	8006f5c <__sinit>
 8005de8:	4b2c      	ldr	r3, [pc, #176]	; (8005e9c <_puts_r+0xd0>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d120      	bne.n	8005e30 <_puts_r+0x64>
 8005dee:	686c      	ldr	r4, [r5, #4]
 8005df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005df2:	07db      	lsls	r3, r3, #31
 8005df4:	d405      	bmi.n	8005e02 <_puts_r+0x36>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	0598      	lsls	r0, r3, #22
 8005dfa:	d402      	bmi.n	8005e02 <_puts_r+0x36>
 8005dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dfe:	f001 f950 	bl	80070a2 <__retarget_lock_acquire_recursive>
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	0719      	lsls	r1, r3, #28
 8005e06:	d51d      	bpl.n	8005e44 <_puts_r+0x78>
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	b1db      	cbz	r3, 8005e44 <_puts_r+0x78>
 8005e0c:	3e01      	subs	r6, #1
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e14:	3b01      	subs	r3, #1
 8005e16:	60a3      	str	r3, [r4, #8]
 8005e18:	bb39      	cbnz	r1, 8005e6a <_puts_r+0x9e>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da38      	bge.n	8005e90 <_puts_r+0xc4>
 8005e1e:	4622      	mov	r2, r4
 8005e20:	210a      	movs	r1, #10
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 f848 	bl	8005eb8 <__swbuf_r>
 8005e28:	3001      	adds	r0, #1
 8005e2a:	d011      	beq.n	8005e50 <_puts_r+0x84>
 8005e2c:	250a      	movs	r5, #10
 8005e2e:	e011      	b.n	8005e54 <_puts_r+0x88>
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <_puts_r+0xd4>)
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d101      	bne.n	8005e3a <_puts_r+0x6e>
 8005e36:	68ac      	ldr	r4, [r5, #8]
 8005e38:	e7da      	b.n	8005df0 <_puts_r+0x24>
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <_puts_r+0xd8>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	bf08      	it	eq
 8005e40:	68ec      	ldreq	r4, [r5, #12]
 8005e42:	e7d5      	b.n	8005df0 <_puts_r+0x24>
 8005e44:	4621      	mov	r1, r4
 8005e46:	4628      	mov	r0, r5
 8005e48:	f000 f888 	bl	8005f5c <__swsetup_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	d0dd      	beq.n	8005e0c <_puts_r+0x40>
 8005e50:	f04f 35ff 	mov.w	r5, #4294967295
 8005e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e56:	07da      	lsls	r2, r3, #31
 8005e58:	d405      	bmi.n	8005e66 <_puts_r+0x9a>
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	d402      	bmi.n	8005e66 <_puts_r+0x9a>
 8005e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e62:	f001 f91f 	bl	80070a4 <__retarget_lock_release_recursive>
 8005e66:	4628      	mov	r0, r5
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da04      	bge.n	8005e78 <_puts_r+0xac>
 8005e6e:	69a2      	ldr	r2, [r4, #24]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	dc06      	bgt.n	8005e82 <_puts_r+0xb6>
 8005e74:	290a      	cmp	r1, #10
 8005e76:	d004      	beq.n	8005e82 <_puts_r+0xb6>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	7019      	strb	r1, [r3, #0]
 8005e80:	e7c5      	b.n	8005e0e <_puts_r+0x42>
 8005e82:	4622      	mov	r2, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 f817 	bl	8005eb8 <__swbuf_r>
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d1bf      	bne.n	8005e0e <_puts_r+0x42>
 8005e8e:	e7df      	b.n	8005e50 <_puts_r+0x84>
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	250a      	movs	r5, #10
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	701d      	strb	r5, [r3, #0]
 8005e9a:	e7db      	b.n	8005e54 <_puts_r+0x88>
 8005e9c:	0800827c 	.word	0x0800827c
 8005ea0:	0800829c 	.word	0x0800829c
 8005ea4:	0800825c 	.word	0x0800825c

08005ea8 <puts>:
 8005ea8:	4b02      	ldr	r3, [pc, #8]	; (8005eb4 <puts+0xc>)
 8005eaa:	4601      	mov	r1, r0
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f7ff bf8d 	b.w	8005dcc <_puts_r>
 8005eb2:	bf00      	nop
 8005eb4:	2000000c 	.word	0x2000000c

08005eb8 <__swbuf_r>:
 8005eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eba:	460e      	mov	r6, r1
 8005ebc:	4614      	mov	r4, r2
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	b118      	cbz	r0, 8005eca <__swbuf_r+0x12>
 8005ec2:	6983      	ldr	r3, [r0, #24]
 8005ec4:	b90b      	cbnz	r3, 8005eca <__swbuf_r+0x12>
 8005ec6:	f001 f849 	bl	8006f5c <__sinit>
 8005eca:	4b21      	ldr	r3, [pc, #132]	; (8005f50 <__swbuf_r+0x98>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d12b      	bne.n	8005f28 <__swbuf_r+0x70>
 8005ed0:	686c      	ldr	r4, [r5, #4]
 8005ed2:	69a3      	ldr	r3, [r4, #24]
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	071a      	lsls	r2, r3, #28
 8005eda:	d52f      	bpl.n	8005f3c <__swbuf_r+0x84>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	b36b      	cbz	r3, 8005f3c <__swbuf_r+0x84>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	1ac0      	subs	r0, r0, r3
 8005ee6:	6963      	ldr	r3, [r4, #20]
 8005ee8:	b2f6      	uxtb	r6, r6
 8005eea:	4283      	cmp	r3, r0
 8005eec:	4637      	mov	r7, r6
 8005eee:	dc04      	bgt.n	8005efa <__swbuf_r+0x42>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 ff9e 	bl	8006e34 <_fflush_r>
 8005ef8:	bb30      	cbnz	r0, 8005f48 <__swbuf_r+0x90>
 8005efa:	68a3      	ldr	r3, [r4, #8]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	60a3      	str	r3, [r4, #8]
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	6022      	str	r2, [r4, #0]
 8005f06:	701e      	strb	r6, [r3, #0]
 8005f08:	6963      	ldr	r3, [r4, #20]
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	4283      	cmp	r3, r0
 8005f0e:	d004      	beq.n	8005f1a <__swbuf_r+0x62>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	07db      	lsls	r3, r3, #31
 8005f14:	d506      	bpl.n	8005f24 <__swbuf_r+0x6c>
 8005f16:	2e0a      	cmp	r6, #10
 8005f18:	d104      	bne.n	8005f24 <__swbuf_r+0x6c>
 8005f1a:	4621      	mov	r1, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 ff89 	bl	8006e34 <_fflush_r>
 8005f22:	b988      	cbnz	r0, 8005f48 <__swbuf_r+0x90>
 8005f24:	4638      	mov	r0, r7
 8005f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <__swbuf_r+0x9c>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d101      	bne.n	8005f32 <__swbuf_r+0x7a>
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	e7cf      	b.n	8005ed2 <__swbuf_r+0x1a>
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <__swbuf_r+0xa0>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	bf08      	it	eq
 8005f38:	68ec      	ldreq	r4, [r5, #12]
 8005f3a:	e7ca      	b.n	8005ed2 <__swbuf_r+0x1a>
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f80c 	bl	8005f5c <__swsetup_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d0cb      	beq.n	8005ee0 <__swbuf_r+0x28>
 8005f48:	f04f 37ff 	mov.w	r7, #4294967295
 8005f4c:	e7ea      	b.n	8005f24 <__swbuf_r+0x6c>
 8005f4e:	bf00      	nop
 8005f50:	0800827c 	.word	0x0800827c
 8005f54:	0800829c 	.word	0x0800829c
 8005f58:	0800825c 	.word	0x0800825c

08005f5c <__swsetup_r>:
 8005f5c:	4b32      	ldr	r3, [pc, #200]	; (8006028 <__swsetup_r+0xcc>)
 8005f5e:	b570      	push	{r4, r5, r6, lr}
 8005f60:	681d      	ldr	r5, [r3, #0]
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	b125      	cbz	r5, 8005f72 <__swsetup_r+0x16>
 8005f68:	69ab      	ldr	r3, [r5, #24]
 8005f6a:	b913      	cbnz	r3, 8005f72 <__swsetup_r+0x16>
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 fff5 	bl	8006f5c <__sinit>
 8005f72:	4b2e      	ldr	r3, [pc, #184]	; (800602c <__swsetup_r+0xd0>)
 8005f74:	429c      	cmp	r4, r3
 8005f76:	d10f      	bne.n	8005f98 <__swsetup_r+0x3c>
 8005f78:	686c      	ldr	r4, [r5, #4]
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f80:	0719      	lsls	r1, r3, #28
 8005f82:	d42c      	bmi.n	8005fde <__swsetup_r+0x82>
 8005f84:	06dd      	lsls	r5, r3, #27
 8005f86:	d411      	bmi.n	8005fac <__swsetup_r+0x50>
 8005f88:	2309      	movs	r3, #9
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	e03e      	b.n	8006016 <__swsetup_r+0xba>
 8005f98:	4b25      	ldr	r3, [pc, #148]	; (8006030 <__swsetup_r+0xd4>)
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d101      	bne.n	8005fa2 <__swsetup_r+0x46>
 8005f9e:	68ac      	ldr	r4, [r5, #8]
 8005fa0:	e7eb      	b.n	8005f7a <__swsetup_r+0x1e>
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <__swsetup_r+0xd8>)
 8005fa4:	429c      	cmp	r4, r3
 8005fa6:	bf08      	it	eq
 8005fa8:	68ec      	ldreq	r4, [r5, #12]
 8005faa:	e7e6      	b.n	8005f7a <__swsetup_r+0x1e>
 8005fac:	0758      	lsls	r0, r3, #29
 8005fae:	d512      	bpl.n	8005fd6 <__swsetup_r+0x7a>
 8005fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb2:	b141      	cbz	r1, 8005fc6 <__swsetup_r+0x6a>
 8005fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	d002      	beq.n	8005fc2 <__swsetup_r+0x66>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f001 fc7b 	bl	80078b8 <_free_r>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6063      	str	r3, [r4, #4]
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	b94b      	cbnz	r3, 8005ff6 <__swsetup_r+0x9a>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fec:	d003      	beq.n	8005ff6 <__swsetup_r+0x9a>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f001 f87d 	bl	80070f0 <__smakebuf_r>
 8005ff6:	89a0      	ldrh	r0, [r4, #12]
 8005ff8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ffc:	f010 0301 	ands.w	r3, r0, #1
 8006000:	d00a      	beq.n	8006018 <__swsetup_r+0xbc>
 8006002:	2300      	movs	r3, #0
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	6963      	ldr	r3, [r4, #20]
 8006008:	425b      	negs	r3, r3
 800600a:	61a3      	str	r3, [r4, #24]
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	b943      	cbnz	r3, 8006022 <__swsetup_r+0xc6>
 8006010:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006014:	d1ba      	bne.n	8005f8c <__swsetup_r+0x30>
 8006016:	bd70      	pop	{r4, r5, r6, pc}
 8006018:	0781      	lsls	r1, r0, #30
 800601a:	bf58      	it	pl
 800601c:	6963      	ldrpl	r3, [r4, #20]
 800601e:	60a3      	str	r3, [r4, #8]
 8006020:	e7f4      	b.n	800600c <__swsetup_r+0xb0>
 8006022:	2000      	movs	r0, #0
 8006024:	e7f7      	b.n	8006016 <__swsetup_r+0xba>
 8006026:	bf00      	nop
 8006028:	2000000c 	.word	0x2000000c
 800602c:	0800827c 	.word	0x0800827c
 8006030:	0800829c 	.word	0x0800829c
 8006034:	0800825c 	.word	0x0800825c

08006038 <quorem>:
 8006038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	6903      	ldr	r3, [r0, #16]
 800603e:	690c      	ldr	r4, [r1, #16]
 8006040:	42a3      	cmp	r3, r4
 8006042:	4607      	mov	r7, r0
 8006044:	f2c0 8081 	blt.w	800614a <quorem+0x112>
 8006048:	3c01      	subs	r4, #1
 800604a:	f101 0814 	add.w	r8, r1, #20
 800604e:	f100 0514 	add.w	r5, r0, #20
 8006052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800605c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006060:	3301      	adds	r3, #1
 8006062:	429a      	cmp	r2, r3
 8006064:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006068:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800606c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006070:	d331      	bcc.n	80060d6 <quorem+0x9e>
 8006072:	f04f 0e00 	mov.w	lr, #0
 8006076:	4640      	mov	r0, r8
 8006078:	46ac      	mov	ip, r5
 800607a:	46f2      	mov	sl, lr
 800607c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006080:	b293      	uxth	r3, r2
 8006082:	fb06 e303 	mla	r3, r6, r3, lr
 8006086:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800608a:	b29b      	uxth	r3, r3
 800608c:	ebaa 0303 	sub.w	r3, sl, r3
 8006090:	0c12      	lsrs	r2, r2, #16
 8006092:	f8dc a000 	ldr.w	sl, [ip]
 8006096:	fb06 e202 	mla	r2, r6, r2, lr
 800609a:	fa13 f38a 	uxtah	r3, r3, sl
 800609e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060a2:	fa1f fa82 	uxth.w	sl, r2
 80060a6:	f8dc 2000 	ldr.w	r2, [ip]
 80060aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b8:	4581      	cmp	r9, r0
 80060ba:	f84c 3b04 	str.w	r3, [ip], #4
 80060be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060c2:	d2db      	bcs.n	800607c <quorem+0x44>
 80060c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80060c8:	b92b      	cbnz	r3, 80060d6 <quorem+0x9e>
 80060ca:	9b01      	ldr	r3, [sp, #4]
 80060cc:	3b04      	subs	r3, #4
 80060ce:	429d      	cmp	r5, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	d32e      	bcc.n	8006132 <quorem+0xfa>
 80060d4:	613c      	str	r4, [r7, #16]
 80060d6:	4638      	mov	r0, r7
 80060d8:	f001 fade 	bl	8007698 <__mcmp>
 80060dc:	2800      	cmp	r0, #0
 80060de:	db24      	blt.n	800612a <quorem+0xf2>
 80060e0:	3601      	adds	r6, #1
 80060e2:	4628      	mov	r0, r5
 80060e4:	f04f 0c00 	mov.w	ip, #0
 80060e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ec:	f8d0 e000 	ldr.w	lr, [r0]
 80060f0:	b293      	uxth	r3, r2
 80060f2:	ebac 0303 	sub.w	r3, ip, r3
 80060f6:	0c12      	lsrs	r2, r2, #16
 80060f8:	fa13 f38e 	uxtah	r3, r3, lr
 80060fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006104:	b29b      	uxth	r3, r3
 8006106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800610a:	45c1      	cmp	r9, r8
 800610c:	f840 3b04 	str.w	r3, [r0], #4
 8006110:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006114:	d2e8      	bcs.n	80060e8 <quorem+0xb0>
 8006116:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800611a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800611e:	b922      	cbnz	r2, 800612a <quorem+0xf2>
 8006120:	3b04      	subs	r3, #4
 8006122:	429d      	cmp	r5, r3
 8006124:	461a      	mov	r2, r3
 8006126:	d30a      	bcc.n	800613e <quorem+0x106>
 8006128:	613c      	str	r4, [r7, #16]
 800612a:	4630      	mov	r0, r6
 800612c:	b003      	add	sp, #12
 800612e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	3b04      	subs	r3, #4
 8006136:	2a00      	cmp	r2, #0
 8006138:	d1cc      	bne.n	80060d4 <quorem+0x9c>
 800613a:	3c01      	subs	r4, #1
 800613c:	e7c7      	b.n	80060ce <quorem+0x96>
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	3b04      	subs	r3, #4
 8006142:	2a00      	cmp	r2, #0
 8006144:	d1f0      	bne.n	8006128 <quorem+0xf0>
 8006146:	3c01      	subs	r4, #1
 8006148:	e7eb      	b.n	8006122 <quorem+0xea>
 800614a:	2000      	movs	r0, #0
 800614c:	e7ee      	b.n	800612c <quorem+0xf4>
	...

08006150 <_dtoa_r>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	ed2d 8b02 	vpush	{d8}
 8006158:	ec57 6b10 	vmov	r6, r7, d0
 800615c:	b095      	sub	sp, #84	; 0x54
 800615e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006160:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006164:	9105      	str	r1, [sp, #20]
 8006166:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800616a:	4604      	mov	r4, r0
 800616c:	9209      	str	r2, [sp, #36]	; 0x24
 800616e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006170:	b975      	cbnz	r5, 8006190 <_dtoa_r+0x40>
 8006172:	2010      	movs	r0, #16
 8006174:	f000 fffc 	bl	8007170 <malloc>
 8006178:	4602      	mov	r2, r0
 800617a:	6260      	str	r0, [r4, #36]	; 0x24
 800617c:	b920      	cbnz	r0, 8006188 <_dtoa_r+0x38>
 800617e:	4bb2      	ldr	r3, [pc, #712]	; (8006448 <_dtoa_r+0x2f8>)
 8006180:	21ea      	movs	r1, #234	; 0xea
 8006182:	48b2      	ldr	r0, [pc, #712]	; (800644c <_dtoa_r+0x2fc>)
 8006184:	f001 fe02 	bl	8007d8c <__assert_func>
 8006188:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800618c:	6005      	str	r5, [r0, #0]
 800618e:	60c5      	str	r5, [r0, #12]
 8006190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	b151      	cbz	r1, 80061ac <_dtoa_r+0x5c>
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	604a      	str	r2, [r1, #4]
 800619a:	2301      	movs	r3, #1
 800619c:	4093      	lsls	r3, r2
 800619e:	608b      	str	r3, [r1, #8]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f001 f83b 	bl	800721c <_Bfree>
 80061a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	1e3b      	subs	r3, r7, #0
 80061ae:	bfb9      	ittee	lt
 80061b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061b4:	9303      	strlt	r3, [sp, #12]
 80061b6:	2300      	movge	r3, #0
 80061b8:	f8c8 3000 	strge.w	r3, [r8]
 80061bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061c0:	4ba3      	ldr	r3, [pc, #652]	; (8006450 <_dtoa_r+0x300>)
 80061c2:	bfbc      	itt	lt
 80061c4:	2201      	movlt	r2, #1
 80061c6:	f8c8 2000 	strlt.w	r2, [r8]
 80061ca:	ea33 0309 	bics.w	r3, r3, r9
 80061ce:	d11b      	bne.n	8006208 <_dtoa_r+0xb8>
 80061d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061dc:	4333      	orrs	r3, r6
 80061de:	f000 857a 	beq.w	8006cd6 <_dtoa_r+0xb86>
 80061e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061e4:	b963      	cbnz	r3, 8006200 <_dtoa_r+0xb0>
 80061e6:	4b9b      	ldr	r3, [pc, #620]	; (8006454 <_dtoa_r+0x304>)
 80061e8:	e024      	b.n	8006234 <_dtoa_r+0xe4>
 80061ea:	4b9b      	ldr	r3, [pc, #620]	; (8006458 <_dtoa_r+0x308>)
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	9800      	ldr	r0, [sp, #0]
 80061f6:	b015      	add	sp, #84	; 0x54
 80061f8:	ecbd 8b02 	vpop	{d8}
 80061fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006200:	4b94      	ldr	r3, [pc, #592]	; (8006454 <_dtoa_r+0x304>)
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	3303      	adds	r3, #3
 8006206:	e7f3      	b.n	80061f0 <_dtoa_r+0xa0>
 8006208:	ed9d 7b02 	vldr	d7, [sp, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	ec51 0b17 	vmov	r0, r1, d7
 8006212:	2300      	movs	r3, #0
 8006214:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006218:	f7fa fc6e 	bl	8000af8 <__aeabi_dcmpeq>
 800621c:	4680      	mov	r8, r0
 800621e:	b158      	cbz	r0, 8006238 <_dtoa_r+0xe8>
 8006220:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006222:	2301      	movs	r3, #1
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8551 	beq.w	8006cd0 <_dtoa_r+0xb80>
 800622e:	488b      	ldr	r0, [pc, #556]	; (800645c <_dtoa_r+0x30c>)
 8006230:	6018      	str	r0, [r3, #0]
 8006232:	1e43      	subs	r3, r0, #1
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	e7dd      	b.n	80061f4 <_dtoa_r+0xa4>
 8006238:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800623c:	aa12      	add	r2, sp, #72	; 0x48
 800623e:	a913      	add	r1, sp, #76	; 0x4c
 8006240:	4620      	mov	r0, r4
 8006242:	f001 facd 	bl	80077e0 <__d2b>
 8006246:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800624a:	4683      	mov	fp, r0
 800624c:	2d00      	cmp	r5, #0
 800624e:	d07c      	beq.n	800634a <_dtoa_r+0x1fa>
 8006250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006252:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006256:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800625a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800625e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800626a:	4b7d      	ldr	r3, [pc, #500]	; (8006460 <_dtoa_r+0x310>)
 800626c:	2200      	movs	r2, #0
 800626e:	4630      	mov	r0, r6
 8006270:	4639      	mov	r1, r7
 8006272:	f7fa f821 	bl	80002b8 <__aeabi_dsub>
 8006276:	a36e      	add	r3, pc, #440	; (adr r3, 8006430 <_dtoa_r+0x2e0>)
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9d4 	bl	8000628 <__aeabi_dmul>
 8006280:	a36d      	add	r3, pc, #436	; (adr r3, 8006438 <_dtoa_r+0x2e8>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7fa f819 	bl	80002bc <__adddf3>
 800628a:	4606      	mov	r6, r0
 800628c:	4628      	mov	r0, r5
 800628e:	460f      	mov	r7, r1
 8006290:	f7fa f960 	bl	8000554 <__aeabi_i2d>
 8006294:	a36a      	add	r3, pc, #424	; (adr r3, 8006440 <_dtoa_r+0x2f0>)
 8006296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629a:	f7fa f9c5 	bl	8000628 <__aeabi_dmul>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4630      	mov	r0, r6
 80062a4:	4639      	mov	r1, r7
 80062a6:	f7fa f809 	bl	80002bc <__adddf3>
 80062aa:	4606      	mov	r6, r0
 80062ac:	460f      	mov	r7, r1
 80062ae:	f7fa fc6b 	bl	8000b88 <__aeabi_d2iz>
 80062b2:	2200      	movs	r2, #0
 80062b4:	4682      	mov	sl, r0
 80062b6:	2300      	movs	r3, #0
 80062b8:	4630      	mov	r0, r6
 80062ba:	4639      	mov	r1, r7
 80062bc:	f7fa fc26 	bl	8000b0c <__aeabi_dcmplt>
 80062c0:	b148      	cbz	r0, 80062d6 <_dtoa_r+0x186>
 80062c2:	4650      	mov	r0, sl
 80062c4:	f7fa f946 	bl	8000554 <__aeabi_i2d>
 80062c8:	4632      	mov	r2, r6
 80062ca:	463b      	mov	r3, r7
 80062cc:	f7fa fc14 	bl	8000af8 <__aeabi_dcmpeq>
 80062d0:	b908      	cbnz	r0, 80062d6 <_dtoa_r+0x186>
 80062d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062d6:	f1ba 0f16 	cmp.w	sl, #22
 80062da:	d854      	bhi.n	8006386 <_dtoa_r+0x236>
 80062dc:	4b61      	ldr	r3, [pc, #388]	; (8006464 <_dtoa_r+0x314>)
 80062de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062ea:	f7fa fc0f 	bl	8000b0c <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d04b      	beq.n	800638a <_dtoa_r+0x23a>
 80062f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062f6:	2300      	movs	r3, #0
 80062f8:	930e      	str	r3, [sp, #56]	; 0x38
 80062fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062fc:	1b5d      	subs	r5, r3, r5
 80062fe:	1e6b      	subs	r3, r5, #1
 8006300:	9304      	str	r3, [sp, #16]
 8006302:	bf43      	ittte	mi
 8006304:	2300      	movmi	r3, #0
 8006306:	f1c5 0801 	rsbmi	r8, r5, #1
 800630a:	9304      	strmi	r3, [sp, #16]
 800630c:	f04f 0800 	movpl.w	r8, #0
 8006310:	f1ba 0f00 	cmp.w	sl, #0
 8006314:	db3b      	blt.n	800638e <_dtoa_r+0x23e>
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800631c:	4453      	add	r3, sl
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	2300      	movs	r3, #0
 8006322:	9306      	str	r3, [sp, #24]
 8006324:	9b05      	ldr	r3, [sp, #20]
 8006326:	2b09      	cmp	r3, #9
 8006328:	d869      	bhi.n	80063fe <_dtoa_r+0x2ae>
 800632a:	2b05      	cmp	r3, #5
 800632c:	bfc4      	itt	gt
 800632e:	3b04      	subgt	r3, #4
 8006330:	9305      	strgt	r3, [sp, #20]
 8006332:	9b05      	ldr	r3, [sp, #20]
 8006334:	f1a3 0302 	sub.w	r3, r3, #2
 8006338:	bfcc      	ite	gt
 800633a:	2500      	movgt	r5, #0
 800633c:	2501      	movle	r5, #1
 800633e:	2b03      	cmp	r3, #3
 8006340:	d869      	bhi.n	8006416 <_dtoa_r+0x2c6>
 8006342:	e8df f003 	tbb	[pc, r3]
 8006346:	4e2c      	.short	0x4e2c
 8006348:	5a4c      	.short	0x5a4c
 800634a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800634e:	441d      	add	r5, r3
 8006350:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006354:	2b20      	cmp	r3, #32
 8006356:	bfc1      	itttt	gt
 8006358:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800635c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006360:	fa09 f303 	lslgt.w	r3, r9, r3
 8006364:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006368:	bfda      	itte	le
 800636a:	f1c3 0320 	rsble	r3, r3, #32
 800636e:	fa06 f003 	lslle.w	r0, r6, r3
 8006372:	4318      	orrgt	r0, r3
 8006374:	f7fa f8de 	bl	8000534 <__aeabi_ui2d>
 8006378:	2301      	movs	r3, #1
 800637a:	4606      	mov	r6, r0
 800637c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006380:	3d01      	subs	r5, #1
 8006382:	9310      	str	r3, [sp, #64]	; 0x40
 8006384:	e771      	b.n	800626a <_dtoa_r+0x11a>
 8006386:	2301      	movs	r3, #1
 8006388:	e7b6      	b.n	80062f8 <_dtoa_r+0x1a8>
 800638a:	900e      	str	r0, [sp, #56]	; 0x38
 800638c:	e7b5      	b.n	80062fa <_dtoa_r+0x1aa>
 800638e:	f1ca 0300 	rsb	r3, sl, #0
 8006392:	9306      	str	r3, [sp, #24]
 8006394:	2300      	movs	r3, #0
 8006396:	eba8 080a 	sub.w	r8, r8, sl
 800639a:	930d      	str	r3, [sp, #52]	; 0x34
 800639c:	e7c2      	b.n	8006324 <_dtoa_r+0x1d4>
 800639e:	2300      	movs	r3, #0
 80063a0:	9308      	str	r3, [sp, #32]
 80063a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc39      	bgt.n	800641c <_dtoa_r+0x2cc>
 80063a8:	f04f 0901 	mov.w	r9, #1
 80063ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80063b0:	464b      	mov	r3, r9
 80063b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063b8:	2200      	movs	r2, #0
 80063ba:	6042      	str	r2, [r0, #4]
 80063bc:	2204      	movs	r2, #4
 80063be:	f102 0614 	add.w	r6, r2, #20
 80063c2:	429e      	cmp	r6, r3
 80063c4:	6841      	ldr	r1, [r0, #4]
 80063c6:	d92f      	bls.n	8006428 <_dtoa_r+0x2d8>
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fee7 	bl	800719c <_Balloc>
 80063ce:	9000      	str	r0, [sp, #0]
 80063d0:	2800      	cmp	r0, #0
 80063d2:	d14b      	bne.n	800646c <_dtoa_r+0x31c>
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <_dtoa_r+0x318>)
 80063d6:	4602      	mov	r2, r0
 80063d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063dc:	e6d1      	b.n	8006182 <_dtoa_r+0x32>
 80063de:	2301      	movs	r3, #1
 80063e0:	e7de      	b.n	80063a0 <_dtoa_r+0x250>
 80063e2:	2300      	movs	r3, #0
 80063e4:	9308      	str	r3, [sp, #32]
 80063e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063e8:	eb0a 0903 	add.w	r9, sl, r3
 80063ec:	f109 0301 	add.w	r3, r9, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	bfb8      	it	lt
 80063f6:	2301      	movlt	r3, #1
 80063f8:	e7dd      	b.n	80063b6 <_dtoa_r+0x266>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7f2      	b.n	80063e4 <_dtoa_r+0x294>
 80063fe:	2501      	movs	r5, #1
 8006400:	2300      	movs	r3, #0
 8006402:	9305      	str	r3, [sp, #20]
 8006404:	9508      	str	r5, [sp, #32]
 8006406:	f04f 39ff 	mov.w	r9, #4294967295
 800640a:	2200      	movs	r2, #0
 800640c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006410:	2312      	movs	r3, #18
 8006412:	9209      	str	r2, [sp, #36]	; 0x24
 8006414:	e7cf      	b.n	80063b6 <_dtoa_r+0x266>
 8006416:	2301      	movs	r3, #1
 8006418:	9308      	str	r3, [sp, #32]
 800641a:	e7f4      	b.n	8006406 <_dtoa_r+0x2b6>
 800641c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006420:	f8cd 9004 	str.w	r9, [sp, #4]
 8006424:	464b      	mov	r3, r9
 8006426:	e7c6      	b.n	80063b6 <_dtoa_r+0x266>
 8006428:	3101      	adds	r1, #1
 800642a:	6041      	str	r1, [r0, #4]
 800642c:	0052      	lsls	r2, r2, #1
 800642e:	e7c6      	b.n	80063be <_dtoa_r+0x26e>
 8006430:	636f4361 	.word	0x636f4361
 8006434:	3fd287a7 	.word	0x3fd287a7
 8006438:	8b60c8b3 	.word	0x8b60c8b3
 800643c:	3fc68a28 	.word	0x3fc68a28
 8006440:	509f79fb 	.word	0x509f79fb
 8006444:	3fd34413 	.word	0x3fd34413
 8006448:	080081d5 	.word	0x080081d5
 800644c:	080081ec 	.word	0x080081ec
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	080081d1 	.word	0x080081d1
 8006458:	080081c8 	.word	0x080081c8
 800645c:	080081a5 	.word	0x080081a5
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	08008348 	.word	0x08008348
 8006468:	0800824b 	.word	0x0800824b
 800646c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800646e:	9a00      	ldr	r2, [sp, #0]
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	2b0e      	cmp	r3, #14
 8006476:	f200 80ad 	bhi.w	80065d4 <_dtoa_r+0x484>
 800647a:	2d00      	cmp	r5, #0
 800647c:	f000 80aa 	beq.w	80065d4 <_dtoa_r+0x484>
 8006480:	f1ba 0f00 	cmp.w	sl, #0
 8006484:	dd36      	ble.n	80064f4 <_dtoa_r+0x3a4>
 8006486:	4ac3      	ldr	r2, [pc, #780]	; (8006794 <_dtoa_r+0x644>)
 8006488:	f00a 030f 	and.w	r3, sl, #15
 800648c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006490:	ed93 7b00 	vldr	d7, [r3]
 8006494:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006498:	ea4f 172a 	mov.w	r7, sl, asr #4
 800649c:	eeb0 8a47 	vmov.f32	s16, s14
 80064a0:	eef0 8a67 	vmov.f32	s17, s15
 80064a4:	d016      	beq.n	80064d4 <_dtoa_r+0x384>
 80064a6:	4bbc      	ldr	r3, [pc, #752]	; (8006798 <_dtoa_r+0x648>)
 80064a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80064ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064b0:	f7fa f9e4 	bl	800087c <__aeabi_ddiv>
 80064b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b8:	f007 070f 	and.w	r7, r7, #15
 80064bc:	2503      	movs	r5, #3
 80064be:	4eb6      	ldr	r6, [pc, #728]	; (8006798 <_dtoa_r+0x648>)
 80064c0:	b957      	cbnz	r7, 80064d8 <_dtoa_r+0x388>
 80064c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c6:	ec53 2b18 	vmov	r2, r3, d8
 80064ca:	f7fa f9d7 	bl	800087c <__aeabi_ddiv>
 80064ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d2:	e029      	b.n	8006528 <_dtoa_r+0x3d8>
 80064d4:	2502      	movs	r5, #2
 80064d6:	e7f2      	b.n	80064be <_dtoa_r+0x36e>
 80064d8:	07f9      	lsls	r1, r7, #31
 80064da:	d508      	bpl.n	80064ee <_dtoa_r+0x39e>
 80064dc:	ec51 0b18 	vmov	r0, r1, d8
 80064e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064e4:	f7fa f8a0 	bl	8000628 <__aeabi_dmul>
 80064e8:	ec41 0b18 	vmov	d8, r0, r1
 80064ec:	3501      	adds	r5, #1
 80064ee:	107f      	asrs	r7, r7, #1
 80064f0:	3608      	adds	r6, #8
 80064f2:	e7e5      	b.n	80064c0 <_dtoa_r+0x370>
 80064f4:	f000 80a6 	beq.w	8006644 <_dtoa_r+0x4f4>
 80064f8:	f1ca 0600 	rsb	r6, sl, #0
 80064fc:	4ba5      	ldr	r3, [pc, #660]	; (8006794 <_dtoa_r+0x644>)
 80064fe:	4fa6      	ldr	r7, [pc, #664]	; (8006798 <_dtoa_r+0x648>)
 8006500:	f006 020f 	and.w	r2, r6, #15
 8006504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006510:	f7fa f88a 	bl	8000628 <__aeabi_dmul>
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	1136      	asrs	r6, r6, #4
 800651a:	2300      	movs	r3, #0
 800651c:	2502      	movs	r5, #2
 800651e:	2e00      	cmp	r6, #0
 8006520:	f040 8085 	bne.w	800662e <_dtoa_r+0x4de>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1d2      	bne.n	80064ce <_dtoa_r+0x37e>
 8006528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 808c 	beq.w	8006648 <_dtoa_r+0x4f8>
 8006530:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006534:	4b99      	ldr	r3, [pc, #612]	; (800679c <_dtoa_r+0x64c>)
 8006536:	2200      	movs	r2, #0
 8006538:	4630      	mov	r0, r6
 800653a:	4639      	mov	r1, r7
 800653c:	f7fa fae6 	bl	8000b0c <__aeabi_dcmplt>
 8006540:	2800      	cmp	r0, #0
 8006542:	f000 8081 	beq.w	8006648 <_dtoa_r+0x4f8>
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d07d      	beq.n	8006648 <_dtoa_r+0x4f8>
 800654c:	f1b9 0f00 	cmp.w	r9, #0
 8006550:	dd3c      	ble.n	80065cc <_dtoa_r+0x47c>
 8006552:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006556:	9307      	str	r3, [sp, #28]
 8006558:	2200      	movs	r2, #0
 800655a:	4b91      	ldr	r3, [pc, #580]	; (80067a0 <_dtoa_r+0x650>)
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7fa f862 	bl	8000628 <__aeabi_dmul>
 8006564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006568:	3501      	adds	r5, #1
 800656a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800656e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006572:	4628      	mov	r0, r5
 8006574:	f7f9 ffee 	bl	8000554 <__aeabi_i2d>
 8006578:	4632      	mov	r2, r6
 800657a:	463b      	mov	r3, r7
 800657c:	f7fa f854 	bl	8000628 <__aeabi_dmul>
 8006580:	4b88      	ldr	r3, [pc, #544]	; (80067a4 <_dtoa_r+0x654>)
 8006582:	2200      	movs	r2, #0
 8006584:	f7f9 fe9a 	bl	80002bc <__adddf3>
 8006588:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800658c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006590:	9303      	str	r3, [sp, #12]
 8006592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006594:	2b00      	cmp	r3, #0
 8006596:	d15c      	bne.n	8006652 <_dtoa_r+0x502>
 8006598:	4b83      	ldr	r3, [pc, #524]	; (80067a8 <_dtoa_r+0x658>)
 800659a:	2200      	movs	r2, #0
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7f9 fe8a 	bl	80002b8 <__aeabi_dsub>
 80065a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065a8:	4606      	mov	r6, r0
 80065aa:	460f      	mov	r7, r1
 80065ac:	f7fa facc 	bl	8000b48 <__aeabi_dcmpgt>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	f040 8296 	bne.w	8006ae2 <_dtoa_r+0x992>
 80065b6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80065ba:	4630      	mov	r0, r6
 80065bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7fa faa3 	bl	8000b0c <__aeabi_dcmplt>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f040 8288 	bne.w	8006adc <_dtoa_r+0x98c>
 80065cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f2c0 8158 	blt.w	800688c <_dtoa_r+0x73c>
 80065dc:	f1ba 0f0e 	cmp.w	sl, #14
 80065e0:	f300 8154 	bgt.w	800688c <_dtoa_r+0x73c>
 80065e4:	4b6b      	ldr	r3, [pc, #428]	; (8006794 <_dtoa_r+0x644>)
 80065e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80065ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f280 80e3 	bge.w	80067bc <_dtoa_r+0x66c>
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f300 80df 	bgt.w	80067bc <_dtoa_r+0x66c>
 80065fe:	f040 826d 	bne.w	8006adc <_dtoa_r+0x98c>
 8006602:	4b69      	ldr	r3, [pc, #420]	; (80067a8 <_dtoa_r+0x658>)
 8006604:	2200      	movs	r2, #0
 8006606:	4640      	mov	r0, r8
 8006608:	4649      	mov	r1, r9
 800660a:	f7fa f80d 	bl	8000628 <__aeabi_dmul>
 800660e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006612:	f7fa fa8f 	bl	8000b34 <__aeabi_dcmpge>
 8006616:	9e01      	ldr	r6, [sp, #4]
 8006618:	4637      	mov	r7, r6
 800661a:	2800      	cmp	r0, #0
 800661c:	f040 8243 	bne.w	8006aa6 <_dtoa_r+0x956>
 8006620:	9d00      	ldr	r5, [sp, #0]
 8006622:	2331      	movs	r3, #49	; 0x31
 8006624:	f805 3b01 	strb.w	r3, [r5], #1
 8006628:	f10a 0a01 	add.w	sl, sl, #1
 800662c:	e23f      	b.n	8006aae <_dtoa_r+0x95e>
 800662e:	07f2      	lsls	r2, r6, #31
 8006630:	d505      	bpl.n	800663e <_dtoa_r+0x4ee>
 8006632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006636:	f7f9 fff7 	bl	8000628 <__aeabi_dmul>
 800663a:	3501      	adds	r5, #1
 800663c:	2301      	movs	r3, #1
 800663e:	1076      	asrs	r6, r6, #1
 8006640:	3708      	adds	r7, #8
 8006642:	e76c      	b.n	800651e <_dtoa_r+0x3ce>
 8006644:	2502      	movs	r5, #2
 8006646:	e76f      	b.n	8006528 <_dtoa_r+0x3d8>
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	f8cd a01c 	str.w	sl, [sp, #28]
 800664e:	930c      	str	r3, [sp, #48]	; 0x30
 8006650:	e78d      	b.n	800656e <_dtoa_r+0x41e>
 8006652:	9900      	ldr	r1, [sp, #0]
 8006654:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006658:	4b4e      	ldr	r3, [pc, #312]	; (8006794 <_dtoa_r+0x644>)
 800665a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800665e:	4401      	add	r1, r0
 8006660:	9102      	str	r1, [sp, #8]
 8006662:	9908      	ldr	r1, [sp, #32]
 8006664:	eeb0 8a47 	vmov.f32	s16, s14
 8006668:	eef0 8a67 	vmov.f32	s17, s15
 800666c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006674:	2900      	cmp	r1, #0
 8006676:	d045      	beq.n	8006704 <_dtoa_r+0x5b4>
 8006678:	494c      	ldr	r1, [pc, #304]	; (80067ac <_dtoa_r+0x65c>)
 800667a:	2000      	movs	r0, #0
 800667c:	f7fa f8fe 	bl	800087c <__aeabi_ddiv>
 8006680:	ec53 2b18 	vmov	r2, r3, d8
 8006684:	f7f9 fe18 	bl	80002b8 <__aeabi_dsub>
 8006688:	9d00      	ldr	r5, [sp, #0]
 800668a:	ec41 0b18 	vmov	d8, r0, r1
 800668e:	4639      	mov	r1, r7
 8006690:	4630      	mov	r0, r6
 8006692:	f7fa fa79 	bl	8000b88 <__aeabi_d2iz>
 8006696:	900c      	str	r0, [sp, #48]	; 0x30
 8006698:	f7f9 ff5c 	bl	8000554 <__aeabi_i2d>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7f9 fe08 	bl	80002b8 <__aeabi_dsub>
 80066a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066aa:	3330      	adds	r3, #48	; 0x30
 80066ac:	f805 3b01 	strb.w	r3, [r5], #1
 80066b0:	ec53 2b18 	vmov	r2, r3, d8
 80066b4:	4606      	mov	r6, r0
 80066b6:	460f      	mov	r7, r1
 80066b8:	f7fa fa28 	bl	8000b0c <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d165      	bne.n	800678c <_dtoa_r+0x63c>
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	4935      	ldr	r1, [pc, #212]	; (800679c <_dtoa_r+0x64c>)
 80066c6:	2000      	movs	r0, #0
 80066c8:	f7f9 fdf6 	bl	80002b8 <__aeabi_dsub>
 80066cc:	ec53 2b18 	vmov	r2, r3, d8
 80066d0:	f7fa fa1c 	bl	8000b0c <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	f040 80b9 	bne.w	800684c <_dtoa_r+0x6fc>
 80066da:	9b02      	ldr	r3, [sp, #8]
 80066dc:	429d      	cmp	r5, r3
 80066de:	f43f af75 	beq.w	80065cc <_dtoa_r+0x47c>
 80066e2:	4b2f      	ldr	r3, [pc, #188]	; (80067a0 <_dtoa_r+0x650>)
 80066e4:	ec51 0b18 	vmov	r0, r1, d8
 80066e8:	2200      	movs	r2, #0
 80066ea:	f7f9 ff9d 	bl	8000628 <__aeabi_dmul>
 80066ee:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <_dtoa_r+0x650>)
 80066f0:	ec41 0b18 	vmov	d8, r0, r1
 80066f4:	2200      	movs	r2, #0
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7f9 ff95 	bl	8000628 <__aeabi_dmul>
 80066fe:	4606      	mov	r6, r0
 8006700:	460f      	mov	r7, r1
 8006702:	e7c4      	b.n	800668e <_dtoa_r+0x53e>
 8006704:	ec51 0b17 	vmov	r0, r1, d7
 8006708:	f7f9 ff8e 	bl	8000628 <__aeabi_dmul>
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	9d00      	ldr	r5, [sp, #0]
 8006710:	930c      	str	r3, [sp, #48]	; 0x30
 8006712:	ec41 0b18 	vmov	d8, r0, r1
 8006716:	4639      	mov	r1, r7
 8006718:	4630      	mov	r0, r6
 800671a:	f7fa fa35 	bl	8000b88 <__aeabi_d2iz>
 800671e:	9011      	str	r0, [sp, #68]	; 0x44
 8006720:	f7f9 ff18 	bl	8000554 <__aeabi_i2d>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4630      	mov	r0, r6
 800672a:	4639      	mov	r1, r7
 800672c:	f7f9 fdc4 	bl	80002b8 <__aeabi_dsub>
 8006730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006732:	3330      	adds	r3, #48	; 0x30
 8006734:	f805 3b01 	strb.w	r3, [r5], #1
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	429d      	cmp	r5, r3
 800673c:	4606      	mov	r6, r0
 800673e:	460f      	mov	r7, r1
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	d134      	bne.n	80067b0 <_dtoa_r+0x660>
 8006746:	4b19      	ldr	r3, [pc, #100]	; (80067ac <_dtoa_r+0x65c>)
 8006748:	ec51 0b18 	vmov	r0, r1, d8
 800674c:	f7f9 fdb6 	bl	80002bc <__adddf3>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4630      	mov	r0, r6
 8006756:	4639      	mov	r1, r7
 8006758:	f7fa f9f6 	bl	8000b48 <__aeabi_dcmpgt>
 800675c:	2800      	cmp	r0, #0
 800675e:	d175      	bne.n	800684c <_dtoa_r+0x6fc>
 8006760:	ec53 2b18 	vmov	r2, r3, d8
 8006764:	4911      	ldr	r1, [pc, #68]	; (80067ac <_dtoa_r+0x65c>)
 8006766:	2000      	movs	r0, #0
 8006768:	f7f9 fda6 	bl	80002b8 <__aeabi_dsub>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f7fa f9ca 	bl	8000b0c <__aeabi_dcmplt>
 8006778:	2800      	cmp	r0, #0
 800677a:	f43f af27 	beq.w	80065cc <_dtoa_r+0x47c>
 800677e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006780:	1e6b      	subs	r3, r5, #1
 8006782:	930c      	str	r3, [sp, #48]	; 0x30
 8006784:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006788:	2b30      	cmp	r3, #48	; 0x30
 800678a:	d0f8      	beq.n	800677e <_dtoa_r+0x62e>
 800678c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006790:	e04a      	b.n	8006828 <_dtoa_r+0x6d8>
 8006792:	bf00      	nop
 8006794:	08008348 	.word	0x08008348
 8006798:	08008320 	.word	0x08008320
 800679c:	3ff00000 	.word	0x3ff00000
 80067a0:	40240000 	.word	0x40240000
 80067a4:	401c0000 	.word	0x401c0000
 80067a8:	40140000 	.word	0x40140000
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	4baf      	ldr	r3, [pc, #700]	; (8006a70 <_dtoa_r+0x920>)
 80067b2:	f7f9 ff39 	bl	8000628 <__aeabi_dmul>
 80067b6:	4606      	mov	r6, r0
 80067b8:	460f      	mov	r7, r1
 80067ba:	e7ac      	b.n	8006716 <_dtoa_r+0x5c6>
 80067bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067c0:	9d00      	ldr	r5, [sp, #0]
 80067c2:	4642      	mov	r2, r8
 80067c4:	464b      	mov	r3, r9
 80067c6:	4630      	mov	r0, r6
 80067c8:	4639      	mov	r1, r7
 80067ca:	f7fa f857 	bl	800087c <__aeabi_ddiv>
 80067ce:	f7fa f9db 	bl	8000b88 <__aeabi_d2iz>
 80067d2:	9002      	str	r0, [sp, #8]
 80067d4:	f7f9 febe 	bl	8000554 <__aeabi_i2d>
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	f7f9 ff24 	bl	8000628 <__aeabi_dmul>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4630      	mov	r0, r6
 80067e6:	4639      	mov	r1, r7
 80067e8:	f7f9 fd66 	bl	80002b8 <__aeabi_dsub>
 80067ec:	9e02      	ldr	r6, [sp, #8]
 80067ee:	9f01      	ldr	r7, [sp, #4]
 80067f0:	3630      	adds	r6, #48	; 0x30
 80067f2:	f805 6b01 	strb.w	r6, [r5], #1
 80067f6:	9e00      	ldr	r6, [sp, #0]
 80067f8:	1bae      	subs	r6, r5, r6
 80067fa:	42b7      	cmp	r7, r6
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	d137      	bne.n	8006872 <_dtoa_r+0x722>
 8006802:	f7f9 fd5b 	bl	80002bc <__adddf3>
 8006806:	4642      	mov	r2, r8
 8006808:	464b      	mov	r3, r9
 800680a:	4606      	mov	r6, r0
 800680c:	460f      	mov	r7, r1
 800680e:	f7fa f99b 	bl	8000b48 <__aeabi_dcmpgt>
 8006812:	b9c8      	cbnz	r0, 8006848 <_dtoa_r+0x6f8>
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	4630      	mov	r0, r6
 800681a:	4639      	mov	r1, r7
 800681c:	f7fa f96c 	bl	8000af8 <__aeabi_dcmpeq>
 8006820:	b110      	cbz	r0, 8006828 <_dtoa_r+0x6d8>
 8006822:	9b02      	ldr	r3, [sp, #8]
 8006824:	07d9      	lsls	r1, r3, #31
 8006826:	d40f      	bmi.n	8006848 <_dtoa_r+0x6f8>
 8006828:	4620      	mov	r0, r4
 800682a:	4659      	mov	r1, fp
 800682c:	f000 fcf6 	bl	800721c <_Bfree>
 8006830:	2300      	movs	r3, #0
 8006832:	702b      	strb	r3, [r5, #0]
 8006834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006836:	f10a 0001 	add.w	r0, sl, #1
 800683a:	6018      	str	r0, [r3, #0]
 800683c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800683e:	2b00      	cmp	r3, #0
 8006840:	f43f acd8 	beq.w	80061f4 <_dtoa_r+0xa4>
 8006844:	601d      	str	r5, [r3, #0]
 8006846:	e4d5      	b.n	80061f4 <_dtoa_r+0xa4>
 8006848:	f8cd a01c 	str.w	sl, [sp, #28]
 800684c:	462b      	mov	r3, r5
 800684e:	461d      	mov	r5, r3
 8006850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006854:	2a39      	cmp	r2, #57	; 0x39
 8006856:	d108      	bne.n	800686a <_dtoa_r+0x71a>
 8006858:	9a00      	ldr	r2, [sp, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d1f7      	bne.n	800684e <_dtoa_r+0x6fe>
 800685e:	9a07      	ldr	r2, [sp, #28]
 8006860:	9900      	ldr	r1, [sp, #0]
 8006862:	3201      	adds	r2, #1
 8006864:	9207      	str	r2, [sp, #28]
 8006866:	2230      	movs	r2, #48	; 0x30
 8006868:	700a      	strb	r2, [r1, #0]
 800686a:	781a      	ldrb	r2, [r3, #0]
 800686c:	3201      	adds	r2, #1
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e78c      	b.n	800678c <_dtoa_r+0x63c>
 8006872:	4b7f      	ldr	r3, [pc, #508]	; (8006a70 <_dtoa_r+0x920>)
 8006874:	2200      	movs	r2, #0
 8006876:	f7f9 fed7 	bl	8000628 <__aeabi_dmul>
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	4606      	mov	r6, r0
 8006880:	460f      	mov	r7, r1
 8006882:	f7fa f939 	bl	8000af8 <__aeabi_dcmpeq>
 8006886:	2800      	cmp	r0, #0
 8006888:	d09b      	beq.n	80067c2 <_dtoa_r+0x672>
 800688a:	e7cd      	b.n	8006828 <_dtoa_r+0x6d8>
 800688c:	9a08      	ldr	r2, [sp, #32]
 800688e:	2a00      	cmp	r2, #0
 8006890:	f000 80c4 	beq.w	8006a1c <_dtoa_r+0x8cc>
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	2a01      	cmp	r2, #1
 8006898:	f300 80a8 	bgt.w	80069ec <_dtoa_r+0x89c>
 800689c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800689e:	2a00      	cmp	r2, #0
 80068a0:	f000 80a0 	beq.w	80069e4 <_dtoa_r+0x894>
 80068a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068a8:	9e06      	ldr	r6, [sp, #24]
 80068aa:	4645      	mov	r5, r8
 80068ac:	9a04      	ldr	r2, [sp, #16]
 80068ae:	2101      	movs	r1, #1
 80068b0:	441a      	add	r2, r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	4498      	add	r8, r3
 80068b6:	9204      	str	r2, [sp, #16]
 80068b8:	f000 fd6c 	bl	8007394 <__i2b>
 80068bc:	4607      	mov	r7, r0
 80068be:	2d00      	cmp	r5, #0
 80068c0:	dd0b      	ble.n	80068da <_dtoa_r+0x78a>
 80068c2:	9b04      	ldr	r3, [sp, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dd08      	ble.n	80068da <_dtoa_r+0x78a>
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	bfa8      	it	ge
 80068ce:	462b      	movge	r3, r5
 80068d0:	eba8 0803 	sub.w	r8, r8, r3
 80068d4:	1aed      	subs	r5, r5, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	9304      	str	r3, [sp, #16]
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	b1fb      	cbz	r3, 800691e <_dtoa_r+0x7ce>
 80068de:	9b08      	ldr	r3, [sp, #32]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 809f 	beq.w	8006a24 <_dtoa_r+0x8d4>
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	dd11      	ble.n	800690e <_dtoa_r+0x7be>
 80068ea:	4639      	mov	r1, r7
 80068ec:	4632      	mov	r2, r6
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fe0c 	bl	800750c <__pow5mult>
 80068f4:	465a      	mov	r2, fp
 80068f6:	4601      	mov	r1, r0
 80068f8:	4607      	mov	r7, r0
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 fd60 	bl	80073c0 <__multiply>
 8006900:	4659      	mov	r1, fp
 8006902:	9007      	str	r0, [sp, #28]
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fc89 	bl	800721c <_Bfree>
 800690a:	9b07      	ldr	r3, [sp, #28]
 800690c:	469b      	mov	fp, r3
 800690e:	9b06      	ldr	r3, [sp, #24]
 8006910:	1b9a      	subs	r2, r3, r6
 8006912:	d004      	beq.n	800691e <_dtoa_r+0x7ce>
 8006914:	4659      	mov	r1, fp
 8006916:	4620      	mov	r0, r4
 8006918:	f000 fdf8 	bl	800750c <__pow5mult>
 800691c:	4683      	mov	fp, r0
 800691e:	2101      	movs	r1, #1
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fd37 	bl	8007394 <__i2b>
 8006926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006928:	2b00      	cmp	r3, #0
 800692a:	4606      	mov	r6, r0
 800692c:	dd7c      	ble.n	8006a28 <_dtoa_r+0x8d8>
 800692e:	461a      	mov	r2, r3
 8006930:	4601      	mov	r1, r0
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fdea 	bl	800750c <__pow5mult>
 8006938:	9b05      	ldr	r3, [sp, #20]
 800693a:	2b01      	cmp	r3, #1
 800693c:	4606      	mov	r6, r0
 800693e:	dd76      	ble.n	8006a2e <_dtoa_r+0x8de>
 8006940:	2300      	movs	r3, #0
 8006942:	9306      	str	r3, [sp, #24]
 8006944:	6933      	ldr	r3, [r6, #16]
 8006946:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800694a:	6918      	ldr	r0, [r3, #16]
 800694c:	f000 fcd2 	bl	80072f4 <__hi0bits>
 8006950:	f1c0 0020 	rsb	r0, r0, #32
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	4418      	add	r0, r3
 8006958:	f010 001f 	ands.w	r0, r0, #31
 800695c:	f000 8086 	beq.w	8006a6c <_dtoa_r+0x91c>
 8006960:	f1c0 0320 	rsb	r3, r0, #32
 8006964:	2b04      	cmp	r3, #4
 8006966:	dd7f      	ble.n	8006a68 <_dtoa_r+0x918>
 8006968:	f1c0 001c 	rsb	r0, r0, #28
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	4403      	add	r3, r0
 8006970:	4480      	add	r8, r0
 8006972:	4405      	add	r5, r0
 8006974:	9304      	str	r3, [sp, #16]
 8006976:	f1b8 0f00 	cmp.w	r8, #0
 800697a:	dd05      	ble.n	8006988 <_dtoa_r+0x838>
 800697c:	4659      	mov	r1, fp
 800697e:	4642      	mov	r2, r8
 8006980:	4620      	mov	r0, r4
 8006982:	f000 fe1d 	bl	80075c0 <__lshift>
 8006986:	4683      	mov	fp, r0
 8006988:	9b04      	ldr	r3, [sp, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dd05      	ble.n	800699a <_dtoa_r+0x84a>
 800698e:	4631      	mov	r1, r6
 8006990:	461a      	mov	r2, r3
 8006992:	4620      	mov	r0, r4
 8006994:	f000 fe14 	bl	80075c0 <__lshift>
 8006998:	4606      	mov	r6, r0
 800699a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d069      	beq.n	8006a74 <_dtoa_r+0x924>
 80069a0:	4631      	mov	r1, r6
 80069a2:	4658      	mov	r0, fp
 80069a4:	f000 fe78 	bl	8007698 <__mcmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	da63      	bge.n	8006a74 <_dtoa_r+0x924>
 80069ac:	2300      	movs	r3, #0
 80069ae:	4659      	mov	r1, fp
 80069b0:	220a      	movs	r2, #10
 80069b2:	4620      	mov	r0, r4
 80069b4:	f000 fc54 	bl	8007260 <__multadd>
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069be:	4683      	mov	fp, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 818f 	beq.w	8006ce4 <_dtoa_r+0xb94>
 80069c6:	4639      	mov	r1, r7
 80069c8:	2300      	movs	r3, #0
 80069ca:	220a      	movs	r2, #10
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fc47 	bl	8007260 <__multadd>
 80069d2:	f1b9 0f00 	cmp.w	r9, #0
 80069d6:	4607      	mov	r7, r0
 80069d8:	f300 808e 	bgt.w	8006af8 <_dtoa_r+0x9a8>
 80069dc:	9b05      	ldr	r3, [sp, #20]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	dc50      	bgt.n	8006a84 <_dtoa_r+0x934>
 80069e2:	e089      	b.n	8006af8 <_dtoa_r+0x9a8>
 80069e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069ea:	e75d      	b.n	80068a8 <_dtoa_r+0x758>
 80069ec:	9b01      	ldr	r3, [sp, #4]
 80069ee:	1e5e      	subs	r6, r3, #1
 80069f0:	9b06      	ldr	r3, [sp, #24]
 80069f2:	42b3      	cmp	r3, r6
 80069f4:	bfbf      	itttt	lt
 80069f6:	9b06      	ldrlt	r3, [sp, #24]
 80069f8:	9606      	strlt	r6, [sp, #24]
 80069fa:	1af2      	sublt	r2, r6, r3
 80069fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80069fe:	bfb6      	itet	lt
 8006a00:	189b      	addlt	r3, r3, r2
 8006a02:	1b9e      	subge	r6, r3, r6
 8006a04:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	bfb8      	it	lt
 8006a0a:	2600      	movlt	r6, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bfb5      	itete	lt
 8006a10:	eba8 0503 	sublt.w	r5, r8, r3
 8006a14:	9b01      	ldrge	r3, [sp, #4]
 8006a16:	2300      	movlt	r3, #0
 8006a18:	4645      	movge	r5, r8
 8006a1a:	e747      	b.n	80068ac <_dtoa_r+0x75c>
 8006a1c:	9e06      	ldr	r6, [sp, #24]
 8006a1e:	9f08      	ldr	r7, [sp, #32]
 8006a20:	4645      	mov	r5, r8
 8006a22:	e74c      	b.n	80068be <_dtoa_r+0x76e>
 8006a24:	9a06      	ldr	r2, [sp, #24]
 8006a26:	e775      	b.n	8006914 <_dtoa_r+0x7c4>
 8006a28:	9b05      	ldr	r3, [sp, #20]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	dc18      	bgt.n	8006a60 <_dtoa_r+0x910>
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	b9b3      	cbnz	r3, 8006a60 <_dtoa_r+0x910>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a38:	b9a3      	cbnz	r3, 8006a64 <_dtoa_r+0x914>
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	0d1b      	lsrs	r3, r3, #20
 8006a42:	051b      	lsls	r3, r3, #20
 8006a44:	b12b      	cbz	r3, 8006a52 <_dtoa_r+0x902>
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	f108 0801 	add.w	r8, r8, #1
 8006a50:	2301      	movs	r3, #1
 8006a52:	9306      	str	r3, [sp, #24]
 8006a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f47f af74 	bne.w	8006944 <_dtoa_r+0x7f4>
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	e779      	b.n	8006954 <_dtoa_r+0x804>
 8006a60:	2300      	movs	r3, #0
 8006a62:	e7f6      	b.n	8006a52 <_dtoa_r+0x902>
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	e7f4      	b.n	8006a52 <_dtoa_r+0x902>
 8006a68:	d085      	beq.n	8006976 <_dtoa_r+0x826>
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	301c      	adds	r0, #28
 8006a6e:	e77d      	b.n	800696c <_dtoa_r+0x81c>
 8006a70:	40240000 	.word	0x40240000
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	dc38      	bgt.n	8006aec <_dtoa_r+0x99c>
 8006a7a:	9b05      	ldr	r3, [sp, #20]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	dd35      	ble.n	8006aec <_dtoa_r+0x99c>
 8006a80:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006a84:	f1b9 0f00 	cmp.w	r9, #0
 8006a88:	d10d      	bne.n	8006aa6 <_dtoa_r+0x956>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	2205      	movs	r2, #5
 8006a90:	4620      	mov	r0, r4
 8006a92:	f000 fbe5 	bl	8007260 <__multadd>
 8006a96:	4601      	mov	r1, r0
 8006a98:	4606      	mov	r6, r0
 8006a9a:	4658      	mov	r0, fp
 8006a9c:	f000 fdfc 	bl	8007698 <__mcmp>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	f73f adbd 	bgt.w	8006620 <_dtoa_r+0x4d0>
 8006aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa8:	9d00      	ldr	r5, [sp, #0]
 8006aaa:	ea6f 0a03 	mvn.w	sl, r3
 8006aae:	f04f 0800 	mov.w	r8, #0
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fbb1 	bl	800721c <_Bfree>
 8006aba:	2f00      	cmp	r7, #0
 8006abc:	f43f aeb4 	beq.w	8006828 <_dtoa_r+0x6d8>
 8006ac0:	f1b8 0f00 	cmp.w	r8, #0
 8006ac4:	d005      	beq.n	8006ad2 <_dtoa_r+0x982>
 8006ac6:	45b8      	cmp	r8, r7
 8006ac8:	d003      	beq.n	8006ad2 <_dtoa_r+0x982>
 8006aca:	4641      	mov	r1, r8
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 fba5 	bl	800721c <_Bfree>
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 fba1 	bl	800721c <_Bfree>
 8006ada:	e6a5      	b.n	8006828 <_dtoa_r+0x6d8>
 8006adc:	2600      	movs	r6, #0
 8006ade:	4637      	mov	r7, r6
 8006ae0:	e7e1      	b.n	8006aa6 <_dtoa_r+0x956>
 8006ae2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006ae4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ae8:	4637      	mov	r7, r6
 8006aea:	e599      	b.n	8006620 <_dtoa_r+0x4d0>
 8006aec:	9b08      	ldr	r3, [sp, #32]
 8006aee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80fd 	beq.w	8006cf2 <_dtoa_r+0xba2>
 8006af8:	2d00      	cmp	r5, #0
 8006afa:	dd05      	ble.n	8006b08 <_dtoa_r+0x9b8>
 8006afc:	4639      	mov	r1, r7
 8006afe:	462a      	mov	r2, r5
 8006b00:	4620      	mov	r0, r4
 8006b02:	f000 fd5d 	bl	80075c0 <__lshift>
 8006b06:	4607      	mov	r7, r0
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d05c      	beq.n	8006bc8 <_dtoa_r+0xa78>
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fb43 	bl	800719c <_Balloc>
 8006b16:	4605      	mov	r5, r0
 8006b18:	b928      	cbnz	r0, 8006b26 <_dtoa_r+0x9d6>
 8006b1a:	4b80      	ldr	r3, [pc, #512]	; (8006d1c <_dtoa_r+0xbcc>)
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b22:	f7ff bb2e 	b.w	8006182 <_dtoa_r+0x32>
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	3202      	adds	r2, #2
 8006b2a:	0092      	lsls	r2, r2, #2
 8006b2c:	f107 010c 	add.w	r1, r7, #12
 8006b30:	300c      	adds	r0, #12
 8006b32:	f000 fb25 	bl	8007180 <memcpy>
 8006b36:	2201      	movs	r2, #1
 8006b38:	4629      	mov	r1, r5
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 fd40 	bl	80075c0 <__lshift>
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	444b      	add	r3, r9
 8006b4a:	9307      	str	r3, [sp, #28]
 8006b4c:	9b02      	ldr	r3, [sp, #8]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	46b8      	mov	r8, r7
 8006b54:	9306      	str	r3, [sp, #24]
 8006b56:	4607      	mov	r7, r0
 8006b58:	9b01      	ldr	r3, [sp, #4]
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4658      	mov	r0, fp
 8006b60:	9302      	str	r3, [sp, #8]
 8006b62:	f7ff fa69 	bl	8006038 <quorem>
 8006b66:	4603      	mov	r3, r0
 8006b68:	3330      	adds	r3, #48	; 0x30
 8006b6a:	9004      	str	r0, [sp, #16]
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	4658      	mov	r0, fp
 8006b70:	9308      	str	r3, [sp, #32]
 8006b72:	f000 fd91 	bl	8007698 <__mcmp>
 8006b76:	463a      	mov	r2, r7
 8006b78:	4681      	mov	r9, r0
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f000 fda7 	bl	80076d0 <__mdiff>
 8006b82:	68c2      	ldr	r2, [r0, #12]
 8006b84:	9b08      	ldr	r3, [sp, #32]
 8006b86:	4605      	mov	r5, r0
 8006b88:	bb02      	cbnz	r2, 8006bcc <_dtoa_r+0xa7c>
 8006b8a:	4601      	mov	r1, r0
 8006b8c:	4658      	mov	r0, fp
 8006b8e:	f000 fd83 	bl	8007698 <__mcmp>
 8006b92:	9b08      	ldr	r3, [sp, #32]
 8006b94:	4602      	mov	r2, r0
 8006b96:	4629      	mov	r1, r5
 8006b98:	4620      	mov	r0, r4
 8006b9a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006b9e:	f000 fb3d 	bl	800721c <_Bfree>
 8006ba2:	9b05      	ldr	r3, [sp, #20]
 8006ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba6:	9d01      	ldr	r5, [sp, #4]
 8006ba8:	ea43 0102 	orr.w	r1, r3, r2
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	d10d      	bne.n	8006bd0 <_dtoa_r+0xa80>
 8006bb4:	2b39      	cmp	r3, #57	; 0x39
 8006bb6:	d029      	beq.n	8006c0c <_dtoa_r+0xabc>
 8006bb8:	f1b9 0f00 	cmp.w	r9, #0
 8006bbc:	dd01      	ble.n	8006bc2 <_dtoa_r+0xa72>
 8006bbe:	9b04      	ldr	r3, [sp, #16]
 8006bc0:	3331      	adds	r3, #49	; 0x31
 8006bc2:	9a02      	ldr	r2, [sp, #8]
 8006bc4:	7013      	strb	r3, [r2, #0]
 8006bc6:	e774      	b.n	8006ab2 <_dtoa_r+0x962>
 8006bc8:	4638      	mov	r0, r7
 8006bca:	e7b9      	b.n	8006b40 <_dtoa_r+0x9f0>
 8006bcc:	2201      	movs	r2, #1
 8006bce:	e7e2      	b.n	8006b96 <_dtoa_r+0xa46>
 8006bd0:	f1b9 0f00 	cmp.w	r9, #0
 8006bd4:	db06      	blt.n	8006be4 <_dtoa_r+0xa94>
 8006bd6:	9905      	ldr	r1, [sp, #20]
 8006bd8:	ea41 0909 	orr.w	r9, r1, r9
 8006bdc:	9906      	ldr	r1, [sp, #24]
 8006bde:	ea59 0101 	orrs.w	r1, r9, r1
 8006be2:	d120      	bne.n	8006c26 <_dtoa_r+0xad6>
 8006be4:	2a00      	cmp	r2, #0
 8006be6:	ddec      	ble.n	8006bc2 <_dtoa_r+0xa72>
 8006be8:	4659      	mov	r1, fp
 8006bea:	2201      	movs	r2, #1
 8006bec:	4620      	mov	r0, r4
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	f000 fce6 	bl	80075c0 <__lshift>
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4683      	mov	fp, r0
 8006bf8:	f000 fd4e 	bl	8007698 <__mcmp>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	dc02      	bgt.n	8006c08 <_dtoa_r+0xab8>
 8006c02:	d1de      	bne.n	8006bc2 <_dtoa_r+0xa72>
 8006c04:	07da      	lsls	r2, r3, #31
 8006c06:	d5dc      	bpl.n	8006bc2 <_dtoa_r+0xa72>
 8006c08:	2b39      	cmp	r3, #57	; 0x39
 8006c0a:	d1d8      	bne.n	8006bbe <_dtoa_r+0xa6e>
 8006c0c:	9a02      	ldr	r2, [sp, #8]
 8006c0e:	2339      	movs	r3, #57	; 0x39
 8006c10:	7013      	strb	r3, [r2, #0]
 8006c12:	462b      	mov	r3, r5
 8006c14:	461d      	mov	r5, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006c1c:	2a39      	cmp	r2, #57	; 0x39
 8006c1e:	d050      	beq.n	8006cc2 <_dtoa_r+0xb72>
 8006c20:	3201      	adds	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	e745      	b.n	8006ab2 <_dtoa_r+0x962>
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	dd03      	ble.n	8006c32 <_dtoa_r+0xae2>
 8006c2a:	2b39      	cmp	r3, #57	; 0x39
 8006c2c:	d0ee      	beq.n	8006c0c <_dtoa_r+0xabc>
 8006c2e:	3301      	adds	r3, #1
 8006c30:	e7c7      	b.n	8006bc2 <_dtoa_r+0xa72>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	9907      	ldr	r1, [sp, #28]
 8006c36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c3a:	428a      	cmp	r2, r1
 8006c3c:	d02a      	beq.n	8006c94 <_dtoa_r+0xb44>
 8006c3e:	4659      	mov	r1, fp
 8006c40:	2300      	movs	r3, #0
 8006c42:	220a      	movs	r2, #10
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fb0b 	bl	8007260 <__multadd>
 8006c4a:	45b8      	cmp	r8, r7
 8006c4c:	4683      	mov	fp, r0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	f04f 020a 	mov.w	r2, #10
 8006c56:	4641      	mov	r1, r8
 8006c58:	4620      	mov	r0, r4
 8006c5a:	d107      	bne.n	8006c6c <_dtoa_r+0xb1c>
 8006c5c:	f000 fb00 	bl	8007260 <__multadd>
 8006c60:	4680      	mov	r8, r0
 8006c62:	4607      	mov	r7, r0
 8006c64:	9b01      	ldr	r3, [sp, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	9301      	str	r3, [sp, #4]
 8006c6a:	e775      	b.n	8006b58 <_dtoa_r+0xa08>
 8006c6c:	f000 faf8 	bl	8007260 <__multadd>
 8006c70:	4639      	mov	r1, r7
 8006c72:	4680      	mov	r8, r0
 8006c74:	2300      	movs	r3, #0
 8006c76:	220a      	movs	r2, #10
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 faf1 	bl	8007260 <__multadd>
 8006c7e:	4607      	mov	r7, r0
 8006c80:	e7f0      	b.n	8006c64 <_dtoa_r+0xb14>
 8006c82:	f1b9 0f00 	cmp.w	r9, #0
 8006c86:	9a00      	ldr	r2, [sp, #0]
 8006c88:	bfcc      	ite	gt
 8006c8a:	464d      	movgt	r5, r9
 8006c8c:	2501      	movle	r5, #1
 8006c8e:	4415      	add	r5, r2
 8006c90:	f04f 0800 	mov.w	r8, #0
 8006c94:	4659      	mov	r1, fp
 8006c96:	2201      	movs	r2, #1
 8006c98:	4620      	mov	r0, r4
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	f000 fc90 	bl	80075c0 <__lshift>
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4683      	mov	fp, r0
 8006ca4:	f000 fcf8 	bl	8007698 <__mcmp>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	dcb2      	bgt.n	8006c12 <_dtoa_r+0xac2>
 8006cac:	d102      	bne.n	8006cb4 <_dtoa_r+0xb64>
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	07db      	lsls	r3, r3, #31
 8006cb2:	d4ae      	bmi.n	8006c12 <_dtoa_r+0xac2>
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbc:	2a30      	cmp	r2, #48	; 0x30
 8006cbe:	d0fa      	beq.n	8006cb6 <_dtoa_r+0xb66>
 8006cc0:	e6f7      	b.n	8006ab2 <_dtoa_r+0x962>
 8006cc2:	9a00      	ldr	r2, [sp, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d1a5      	bne.n	8006c14 <_dtoa_r+0xac4>
 8006cc8:	f10a 0a01 	add.w	sl, sl, #1
 8006ccc:	2331      	movs	r3, #49	; 0x31
 8006cce:	e779      	b.n	8006bc4 <_dtoa_r+0xa74>
 8006cd0:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <_dtoa_r+0xbd0>)
 8006cd2:	f7ff baaf 	b.w	8006234 <_dtoa_r+0xe4>
 8006cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f aa86 	bne.w	80061ea <_dtoa_r+0x9a>
 8006cde:	4b11      	ldr	r3, [pc, #68]	; (8006d24 <_dtoa_r+0xbd4>)
 8006ce0:	f7ff baa8 	b.w	8006234 <_dtoa_r+0xe4>
 8006ce4:	f1b9 0f00 	cmp.w	r9, #0
 8006ce8:	dc03      	bgt.n	8006cf2 <_dtoa_r+0xba2>
 8006cea:	9b05      	ldr	r3, [sp, #20]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f73f aec9 	bgt.w	8006a84 <_dtoa_r+0x934>
 8006cf2:	9d00      	ldr	r5, [sp, #0]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4658      	mov	r0, fp
 8006cf8:	f7ff f99e 	bl	8006038 <quorem>
 8006cfc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d00:	f805 3b01 	strb.w	r3, [r5], #1
 8006d04:	9a00      	ldr	r2, [sp, #0]
 8006d06:	1aaa      	subs	r2, r5, r2
 8006d08:	4591      	cmp	r9, r2
 8006d0a:	ddba      	ble.n	8006c82 <_dtoa_r+0xb32>
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	2300      	movs	r3, #0
 8006d10:	220a      	movs	r2, #10
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 faa4 	bl	8007260 <__multadd>
 8006d18:	4683      	mov	fp, r0
 8006d1a:	e7eb      	b.n	8006cf4 <_dtoa_r+0xba4>
 8006d1c:	0800824b 	.word	0x0800824b
 8006d20:	080081a4 	.word	0x080081a4
 8006d24:	080081c8 	.word	0x080081c8

08006d28 <__sflush_r>:
 8006d28:	898a      	ldrh	r2, [r1, #12]
 8006d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2e:	4605      	mov	r5, r0
 8006d30:	0710      	lsls	r0, r2, #28
 8006d32:	460c      	mov	r4, r1
 8006d34:	d458      	bmi.n	8006de8 <__sflush_r+0xc0>
 8006d36:	684b      	ldr	r3, [r1, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dc05      	bgt.n	8006d48 <__sflush_r+0x20>
 8006d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	dc02      	bgt.n	8006d48 <__sflush_r+0x20>
 8006d42:	2000      	movs	r0, #0
 8006d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	d0f9      	beq.n	8006d42 <__sflush_r+0x1a>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d54:	682f      	ldr	r7, [r5, #0]
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	d032      	beq.n	8006dc0 <__sflush_r+0x98>
 8006d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	075a      	lsls	r2, r3, #29
 8006d60:	d505      	bpl.n	8006d6e <__sflush_r+0x46>
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	1ac0      	subs	r0, r0, r3
 8006d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d68:	b10b      	cbz	r3, 8006d6e <__sflush_r+0x46>
 8006d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d6c:	1ac0      	subs	r0, r0, r3
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4602      	mov	r2, r0
 8006d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d74:	6a21      	ldr	r1, [r4, #32]
 8006d76:	4628      	mov	r0, r5
 8006d78:	47b0      	blx	r6
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	d106      	bne.n	8006d8e <__sflush_r+0x66>
 8006d80:	6829      	ldr	r1, [r5, #0]
 8006d82:	291d      	cmp	r1, #29
 8006d84:	d82c      	bhi.n	8006de0 <__sflush_r+0xb8>
 8006d86:	4a2a      	ldr	r2, [pc, #168]	; (8006e30 <__sflush_r+0x108>)
 8006d88:	40ca      	lsrs	r2, r1
 8006d8a:	07d6      	lsls	r6, r2, #31
 8006d8c:	d528      	bpl.n	8006de0 <__sflush_r+0xb8>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	6062      	str	r2, [r4, #4]
 8006d92:	04d9      	lsls	r1, r3, #19
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	6022      	str	r2, [r4, #0]
 8006d98:	d504      	bpl.n	8006da4 <__sflush_r+0x7c>
 8006d9a:	1c42      	adds	r2, r0, #1
 8006d9c:	d101      	bne.n	8006da2 <__sflush_r+0x7a>
 8006d9e:	682b      	ldr	r3, [r5, #0]
 8006da0:	b903      	cbnz	r3, 8006da4 <__sflush_r+0x7c>
 8006da2:	6560      	str	r0, [r4, #84]	; 0x54
 8006da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da6:	602f      	str	r7, [r5, #0]
 8006da8:	2900      	cmp	r1, #0
 8006daa:	d0ca      	beq.n	8006d42 <__sflush_r+0x1a>
 8006dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006db0:	4299      	cmp	r1, r3
 8006db2:	d002      	beq.n	8006dba <__sflush_r+0x92>
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 fd7f 	bl	80078b8 <_free_r>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8006dbe:	e7c1      	b.n	8006d44 <__sflush_r+0x1c>
 8006dc0:	6a21      	ldr	r1, [r4, #32]
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b0      	blx	r6
 8006dc8:	1c41      	adds	r1, r0, #1
 8006dca:	d1c7      	bne.n	8006d5c <__sflush_r+0x34>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0c4      	beq.n	8006d5c <__sflush_r+0x34>
 8006dd2:	2b1d      	cmp	r3, #29
 8006dd4:	d001      	beq.n	8006dda <__sflush_r+0xb2>
 8006dd6:	2b16      	cmp	r3, #22
 8006dd8:	d101      	bne.n	8006dde <__sflush_r+0xb6>
 8006dda:	602f      	str	r7, [r5, #0]
 8006ddc:	e7b1      	b.n	8006d42 <__sflush_r+0x1a>
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	e7ad      	b.n	8006d44 <__sflush_r+0x1c>
 8006de8:	690f      	ldr	r7, [r1, #16]
 8006dea:	2f00      	cmp	r7, #0
 8006dec:	d0a9      	beq.n	8006d42 <__sflush_r+0x1a>
 8006dee:	0793      	lsls	r3, r2, #30
 8006df0:	680e      	ldr	r6, [r1, #0]
 8006df2:	bf08      	it	eq
 8006df4:	694b      	ldreq	r3, [r1, #20]
 8006df6:	600f      	str	r7, [r1, #0]
 8006df8:	bf18      	it	ne
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	eba6 0807 	sub.w	r8, r6, r7
 8006e00:	608b      	str	r3, [r1, #8]
 8006e02:	f1b8 0f00 	cmp.w	r8, #0
 8006e06:	dd9c      	ble.n	8006d42 <__sflush_r+0x1a>
 8006e08:	6a21      	ldr	r1, [r4, #32]
 8006e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e0c:	4643      	mov	r3, r8
 8006e0e:	463a      	mov	r2, r7
 8006e10:	4628      	mov	r0, r5
 8006e12:	47b0      	blx	r6
 8006e14:	2800      	cmp	r0, #0
 8006e16:	dc06      	bgt.n	8006e26 <__sflush_r+0xfe>
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1e:	81a3      	strh	r3, [r4, #12]
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	e78e      	b.n	8006d44 <__sflush_r+0x1c>
 8006e26:	4407      	add	r7, r0
 8006e28:	eba8 0800 	sub.w	r8, r8, r0
 8006e2c:	e7e9      	b.n	8006e02 <__sflush_r+0xda>
 8006e2e:	bf00      	nop
 8006e30:	20400001 	.word	0x20400001

08006e34 <_fflush_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	690b      	ldr	r3, [r1, #16]
 8006e38:	4605      	mov	r5, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b913      	cbnz	r3, 8006e44 <_fflush_r+0x10>
 8006e3e:	2500      	movs	r5, #0
 8006e40:	4628      	mov	r0, r5
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	b118      	cbz	r0, 8006e4e <_fflush_r+0x1a>
 8006e46:	6983      	ldr	r3, [r0, #24]
 8006e48:	b90b      	cbnz	r3, 8006e4e <_fflush_r+0x1a>
 8006e4a:	f000 f887 	bl	8006f5c <__sinit>
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <_fflush_r+0x6c>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	d11b      	bne.n	8006e8c <_fflush_r+0x58>
 8006e54:	686c      	ldr	r4, [r5, #4]
 8006e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d0ef      	beq.n	8006e3e <_fflush_r+0xa>
 8006e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e60:	07d0      	lsls	r0, r2, #31
 8006e62:	d404      	bmi.n	8006e6e <_fflush_r+0x3a>
 8006e64:	0599      	lsls	r1, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_fflush_r+0x3a>
 8006e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e6a:	f000 f91a 	bl	80070a2 <__retarget_lock_acquire_recursive>
 8006e6e:	4628      	mov	r0, r5
 8006e70:	4621      	mov	r1, r4
 8006e72:	f7ff ff59 	bl	8006d28 <__sflush_r>
 8006e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e78:	07da      	lsls	r2, r3, #31
 8006e7a:	4605      	mov	r5, r0
 8006e7c:	d4e0      	bmi.n	8006e40 <_fflush_r+0xc>
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	059b      	lsls	r3, r3, #22
 8006e82:	d4dd      	bmi.n	8006e40 <_fflush_r+0xc>
 8006e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e86:	f000 f90d 	bl	80070a4 <__retarget_lock_release_recursive>
 8006e8a:	e7d9      	b.n	8006e40 <_fflush_r+0xc>
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <_fflush_r+0x70>)
 8006e8e:	429c      	cmp	r4, r3
 8006e90:	d101      	bne.n	8006e96 <_fflush_r+0x62>
 8006e92:	68ac      	ldr	r4, [r5, #8]
 8006e94:	e7df      	b.n	8006e56 <_fflush_r+0x22>
 8006e96:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <_fflush_r+0x74>)
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	bf08      	it	eq
 8006e9c:	68ec      	ldreq	r4, [r5, #12]
 8006e9e:	e7da      	b.n	8006e56 <_fflush_r+0x22>
 8006ea0:	0800827c 	.word	0x0800827c
 8006ea4:	0800829c 	.word	0x0800829c
 8006ea8:	0800825c 	.word	0x0800825c

08006eac <std>:
 8006eac:	2300      	movs	r3, #0
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eba:	6083      	str	r3, [r0, #8]
 8006ebc:	8181      	strh	r1, [r0, #12]
 8006ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8006ec0:	81c2      	strh	r2, [r0, #14]
 8006ec2:	6183      	str	r3, [r0, #24]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	305c      	adds	r0, #92	; 0x5c
 8006eca:	f7fe faf5 	bl	80054b8 <memset>
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <std+0x38>)
 8006ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <std+0x3c>)
 8006ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <std+0x40>)
 8006ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <std+0x44>)
 8006edc:	6224      	str	r4, [r4, #32]
 8006ede:	6323      	str	r3, [r4, #48]	; 0x30
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	bf00      	nop
 8006ee4:	08007ce1 	.word	0x08007ce1
 8006ee8:	08007d03 	.word	0x08007d03
 8006eec:	08007d3b 	.word	0x08007d3b
 8006ef0:	08007d5f 	.word	0x08007d5f

08006ef4 <_cleanup_r>:
 8006ef4:	4901      	ldr	r1, [pc, #4]	; (8006efc <_cleanup_r+0x8>)
 8006ef6:	f000 b8af 	b.w	8007058 <_fwalk_reent>
 8006efa:	bf00      	nop
 8006efc:	08006e35 	.word	0x08006e35

08006f00 <__sfmoreglue>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	1e4a      	subs	r2, r1, #1
 8006f04:	2568      	movs	r5, #104	; 0x68
 8006f06:	4355      	muls	r5, r2
 8006f08:	460e      	mov	r6, r1
 8006f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f0e:	f000 fd23 	bl	8007958 <_malloc_r>
 8006f12:	4604      	mov	r4, r0
 8006f14:	b140      	cbz	r0, 8006f28 <__sfmoreglue+0x28>
 8006f16:	2100      	movs	r1, #0
 8006f18:	e9c0 1600 	strd	r1, r6, [r0]
 8006f1c:	300c      	adds	r0, #12
 8006f1e:	60a0      	str	r0, [r4, #8]
 8006f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f24:	f7fe fac8 	bl	80054b8 <memset>
 8006f28:	4620      	mov	r0, r4
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}

08006f2c <__sfp_lock_acquire>:
 8006f2c:	4801      	ldr	r0, [pc, #4]	; (8006f34 <__sfp_lock_acquire+0x8>)
 8006f2e:	f000 b8b8 	b.w	80070a2 <__retarget_lock_acquire_recursive>
 8006f32:	bf00      	nop
 8006f34:	200002f8 	.word	0x200002f8

08006f38 <__sfp_lock_release>:
 8006f38:	4801      	ldr	r0, [pc, #4]	; (8006f40 <__sfp_lock_release+0x8>)
 8006f3a:	f000 b8b3 	b.w	80070a4 <__retarget_lock_release_recursive>
 8006f3e:	bf00      	nop
 8006f40:	200002f8 	.word	0x200002f8

08006f44 <__sinit_lock_acquire>:
 8006f44:	4801      	ldr	r0, [pc, #4]	; (8006f4c <__sinit_lock_acquire+0x8>)
 8006f46:	f000 b8ac 	b.w	80070a2 <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	200002f3 	.word	0x200002f3

08006f50 <__sinit_lock_release>:
 8006f50:	4801      	ldr	r0, [pc, #4]	; (8006f58 <__sinit_lock_release+0x8>)
 8006f52:	f000 b8a7 	b.w	80070a4 <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	200002f3 	.word	0x200002f3

08006f5c <__sinit>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4604      	mov	r4, r0
 8006f60:	f7ff fff0 	bl	8006f44 <__sinit_lock_acquire>
 8006f64:	69a3      	ldr	r3, [r4, #24]
 8006f66:	b11b      	cbz	r3, 8006f70 <__sinit+0x14>
 8006f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6c:	f7ff bff0 	b.w	8006f50 <__sinit_lock_release>
 8006f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f74:	6523      	str	r3, [r4, #80]	; 0x50
 8006f76:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <__sinit+0x68>)
 8006f78:	4a13      	ldr	r2, [pc, #76]	; (8006fc8 <__sinit+0x6c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	bf04      	itt	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	61a3      	streq	r3, [r4, #24]
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 f820 	bl	8006fcc <__sfp>
 8006f8c:	6060      	str	r0, [r4, #4]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f000 f81c 	bl	8006fcc <__sfp>
 8006f94:	60a0      	str	r0, [r4, #8]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 f818 	bl	8006fcc <__sfp>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	60e0      	str	r0, [r4, #12]
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	6860      	ldr	r0, [r4, #4]
 8006fa4:	f7ff ff82 	bl	8006eac <std>
 8006fa8:	68a0      	ldr	r0, [r4, #8]
 8006faa:	2201      	movs	r2, #1
 8006fac:	2109      	movs	r1, #9
 8006fae:	f7ff ff7d 	bl	8006eac <std>
 8006fb2:	68e0      	ldr	r0, [r4, #12]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	2112      	movs	r1, #18
 8006fb8:	f7ff ff78 	bl	8006eac <std>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	61a3      	str	r3, [r4, #24]
 8006fc0:	e7d2      	b.n	8006f68 <__sinit+0xc>
 8006fc2:	bf00      	nop
 8006fc4:	08008190 	.word	0x08008190
 8006fc8:	08006ef5 	.word	0x08006ef5

08006fcc <__sfp>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	4607      	mov	r7, r0
 8006fd0:	f7ff ffac 	bl	8006f2c <__sfp_lock_acquire>
 8006fd4:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <__sfp+0x84>)
 8006fd6:	681e      	ldr	r6, [r3, #0]
 8006fd8:	69b3      	ldr	r3, [r6, #24]
 8006fda:	b913      	cbnz	r3, 8006fe2 <__sfp+0x16>
 8006fdc:	4630      	mov	r0, r6
 8006fde:	f7ff ffbd 	bl	8006f5c <__sinit>
 8006fe2:	3648      	adds	r6, #72	; 0x48
 8006fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	d503      	bpl.n	8006ff4 <__sfp+0x28>
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	b30b      	cbz	r3, 8007034 <__sfp+0x68>
 8006ff0:	6836      	ldr	r6, [r6, #0]
 8006ff2:	e7f7      	b.n	8006fe4 <__sfp+0x18>
 8006ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ff8:	b9d5      	cbnz	r5, 8007030 <__sfp+0x64>
 8006ffa:	4b16      	ldr	r3, [pc, #88]	; (8007054 <__sfp+0x88>)
 8006ffc:	60e3      	str	r3, [r4, #12]
 8006ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007002:	6665      	str	r5, [r4, #100]	; 0x64
 8007004:	f000 f84c 	bl	80070a0 <__retarget_lock_init_recursive>
 8007008:	f7ff ff96 	bl	8006f38 <__sfp_lock_release>
 800700c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007014:	6025      	str	r5, [r4, #0]
 8007016:	61a5      	str	r5, [r4, #24]
 8007018:	2208      	movs	r2, #8
 800701a:	4629      	mov	r1, r5
 800701c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007020:	f7fe fa4a 	bl	80054b8 <memset>
 8007024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800702c:	4620      	mov	r0, r4
 800702e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007030:	3468      	adds	r4, #104	; 0x68
 8007032:	e7d9      	b.n	8006fe8 <__sfp+0x1c>
 8007034:	2104      	movs	r1, #4
 8007036:	4638      	mov	r0, r7
 8007038:	f7ff ff62 	bl	8006f00 <__sfmoreglue>
 800703c:	4604      	mov	r4, r0
 800703e:	6030      	str	r0, [r6, #0]
 8007040:	2800      	cmp	r0, #0
 8007042:	d1d5      	bne.n	8006ff0 <__sfp+0x24>
 8007044:	f7ff ff78 	bl	8006f38 <__sfp_lock_release>
 8007048:	230c      	movs	r3, #12
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	e7ee      	b.n	800702c <__sfp+0x60>
 800704e:	bf00      	nop
 8007050:	08008190 	.word	0x08008190
 8007054:	ffff0001 	.word	0xffff0001

08007058 <_fwalk_reent>:
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	4606      	mov	r6, r0
 800705e:	4688      	mov	r8, r1
 8007060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007064:	2700      	movs	r7, #0
 8007066:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800706a:	f1b9 0901 	subs.w	r9, r9, #1
 800706e:	d505      	bpl.n	800707c <_fwalk_reent+0x24>
 8007070:	6824      	ldr	r4, [r4, #0]
 8007072:	2c00      	cmp	r4, #0
 8007074:	d1f7      	bne.n	8007066 <_fwalk_reent+0xe>
 8007076:	4638      	mov	r0, r7
 8007078:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800707c:	89ab      	ldrh	r3, [r5, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d907      	bls.n	8007092 <_fwalk_reent+0x3a>
 8007082:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007086:	3301      	adds	r3, #1
 8007088:	d003      	beq.n	8007092 <_fwalk_reent+0x3a>
 800708a:	4629      	mov	r1, r5
 800708c:	4630      	mov	r0, r6
 800708e:	47c0      	blx	r8
 8007090:	4307      	orrs	r7, r0
 8007092:	3568      	adds	r5, #104	; 0x68
 8007094:	e7e9      	b.n	800706a <_fwalk_reent+0x12>
	...

08007098 <_localeconv_r>:
 8007098:	4800      	ldr	r0, [pc, #0]	; (800709c <_localeconv_r+0x4>)
 800709a:	4770      	bx	lr
 800709c:	20000160 	.word	0x20000160

080070a0 <__retarget_lock_init_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__retarget_lock_acquire_recursive>:
 80070a2:	4770      	bx	lr

080070a4 <__retarget_lock_release_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__swhatbuf_r>:
 80070a6:	b570      	push	{r4, r5, r6, lr}
 80070a8:	460e      	mov	r6, r1
 80070aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ae:	2900      	cmp	r1, #0
 80070b0:	b096      	sub	sp, #88	; 0x58
 80070b2:	4614      	mov	r4, r2
 80070b4:	461d      	mov	r5, r3
 80070b6:	da07      	bge.n	80070c8 <__swhatbuf_r+0x22>
 80070b8:	2300      	movs	r3, #0
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	89b3      	ldrh	r3, [r6, #12]
 80070be:	061a      	lsls	r2, r3, #24
 80070c0:	d410      	bmi.n	80070e4 <__swhatbuf_r+0x3e>
 80070c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c6:	e00e      	b.n	80070e6 <__swhatbuf_r+0x40>
 80070c8:	466a      	mov	r2, sp
 80070ca:	f000 fe9f 	bl	8007e0c <_fstat_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	dbf2      	blt.n	80070b8 <__swhatbuf_r+0x12>
 80070d2:	9a01      	ldr	r2, [sp, #4]
 80070d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070dc:	425a      	negs	r2, r3
 80070de:	415a      	adcs	r2, r3
 80070e0:	602a      	str	r2, [r5, #0]
 80070e2:	e7ee      	b.n	80070c2 <__swhatbuf_r+0x1c>
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	2000      	movs	r0, #0
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	b016      	add	sp, #88	; 0x58
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080070f0 <__smakebuf_r>:
 80070f0:	898b      	ldrh	r3, [r1, #12]
 80070f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f4:	079d      	lsls	r5, r3, #30
 80070f6:	4606      	mov	r6, r0
 80070f8:	460c      	mov	r4, r1
 80070fa:	d507      	bpl.n	800710c <__smakebuf_r+0x1c>
 80070fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	2301      	movs	r3, #1
 8007106:	6163      	str	r3, [r4, #20]
 8007108:	b002      	add	sp, #8
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	ab01      	add	r3, sp, #4
 800710e:	466a      	mov	r2, sp
 8007110:	f7ff ffc9 	bl	80070a6 <__swhatbuf_r>
 8007114:	9900      	ldr	r1, [sp, #0]
 8007116:	4605      	mov	r5, r0
 8007118:	4630      	mov	r0, r6
 800711a:	f000 fc1d 	bl	8007958 <_malloc_r>
 800711e:	b948      	cbnz	r0, 8007134 <__smakebuf_r+0x44>
 8007120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007124:	059a      	lsls	r2, r3, #22
 8007126:	d4ef      	bmi.n	8007108 <__smakebuf_r+0x18>
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	f043 0302 	orr.w	r3, r3, #2
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	e7e3      	b.n	80070fc <__smakebuf_r+0xc>
 8007134:	4b0d      	ldr	r3, [pc, #52]	; (800716c <__smakebuf_r+0x7c>)
 8007136:	62b3      	str	r3, [r6, #40]	; 0x28
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	6020      	str	r0, [r4, #0]
 800713c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	9b00      	ldr	r3, [sp, #0]
 8007144:	6163      	str	r3, [r4, #20]
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	6120      	str	r0, [r4, #16]
 800714a:	b15b      	cbz	r3, 8007164 <__smakebuf_r+0x74>
 800714c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007150:	4630      	mov	r0, r6
 8007152:	f000 fe6d 	bl	8007e30 <_isatty_r>
 8007156:	b128      	cbz	r0, 8007164 <__smakebuf_r+0x74>
 8007158:	89a3      	ldrh	r3, [r4, #12]
 800715a:	f023 0303 	bic.w	r3, r3, #3
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	81a3      	strh	r3, [r4, #12]
 8007164:	89a0      	ldrh	r0, [r4, #12]
 8007166:	4305      	orrs	r5, r0
 8007168:	81a5      	strh	r5, [r4, #12]
 800716a:	e7cd      	b.n	8007108 <__smakebuf_r+0x18>
 800716c:	08006ef5 	.word	0x08006ef5

08007170 <malloc>:
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <malloc+0xc>)
 8007172:	4601      	mov	r1, r0
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f000 bbef 	b.w	8007958 <_malloc_r>
 800717a:	bf00      	nop
 800717c:	2000000c 	.word	0x2000000c

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007196:	4291      	cmp	r1, r2
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <_Balloc>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071a0:	4604      	mov	r4, r0
 80071a2:	460d      	mov	r5, r1
 80071a4:	b976      	cbnz	r6, 80071c4 <_Balloc+0x28>
 80071a6:	2010      	movs	r0, #16
 80071a8:	f7ff ffe2 	bl	8007170 <malloc>
 80071ac:	4602      	mov	r2, r0
 80071ae:	6260      	str	r0, [r4, #36]	; 0x24
 80071b0:	b920      	cbnz	r0, 80071bc <_Balloc+0x20>
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <_Balloc+0x78>)
 80071b4:	4818      	ldr	r0, [pc, #96]	; (8007218 <_Balloc+0x7c>)
 80071b6:	2166      	movs	r1, #102	; 0x66
 80071b8:	f000 fde8 	bl	8007d8c <__assert_func>
 80071bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c0:	6006      	str	r6, [r0, #0]
 80071c2:	60c6      	str	r6, [r0, #12]
 80071c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071c6:	68f3      	ldr	r3, [r6, #12]
 80071c8:	b183      	cbz	r3, 80071ec <_Balloc+0x50>
 80071ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071d2:	b9b8      	cbnz	r0, 8007204 <_Balloc+0x68>
 80071d4:	2101      	movs	r1, #1
 80071d6:	fa01 f605 	lsl.w	r6, r1, r5
 80071da:	1d72      	adds	r2, r6, #5
 80071dc:	0092      	lsls	r2, r2, #2
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 fb5a 	bl	8007898 <_calloc_r>
 80071e4:	b160      	cbz	r0, 8007200 <_Balloc+0x64>
 80071e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ea:	e00e      	b.n	800720a <_Balloc+0x6e>
 80071ec:	2221      	movs	r2, #33	; 0x21
 80071ee:	2104      	movs	r1, #4
 80071f0:	4620      	mov	r0, r4
 80071f2:	f000 fb51 	bl	8007898 <_calloc_r>
 80071f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f8:	60f0      	str	r0, [r6, #12]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e4      	bne.n	80071ca <_Balloc+0x2e>
 8007200:	2000      	movs	r0, #0
 8007202:	bd70      	pop	{r4, r5, r6, pc}
 8007204:	6802      	ldr	r2, [r0, #0]
 8007206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800720a:	2300      	movs	r3, #0
 800720c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007210:	e7f7      	b.n	8007202 <_Balloc+0x66>
 8007212:	bf00      	nop
 8007214:	080081d5 	.word	0x080081d5
 8007218:	080082bc 	.word	0x080082bc

0800721c <_Bfree>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007220:	4605      	mov	r5, r0
 8007222:	460c      	mov	r4, r1
 8007224:	b976      	cbnz	r6, 8007244 <_Bfree+0x28>
 8007226:	2010      	movs	r0, #16
 8007228:	f7ff ffa2 	bl	8007170 <malloc>
 800722c:	4602      	mov	r2, r0
 800722e:	6268      	str	r0, [r5, #36]	; 0x24
 8007230:	b920      	cbnz	r0, 800723c <_Bfree+0x20>
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <_Bfree+0x3c>)
 8007234:	4809      	ldr	r0, [pc, #36]	; (800725c <_Bfree+0x40>)
 8007236:	218a      	movs	r1, #138	; 0x8a
 8007238:	f000 fda8 	bl	8007d8c <__assert_func>
 800723c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007240:	6006      	str	r6, [r0, #0]
 8007242:	60c6      	str	r6, [r0, #12]
 8007244:	b13c      	cbz	r4, 8007256 <_Bfree+0x3a>
 8007246:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007248:	6862      	ldr	r2, [r4, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007250:	6021      	str	r1, [r4, #0]
 8007252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007256:	bd70      	pop	{r4, r5, r6, pc}
 8007258:	080081d5 	.word	0x080081d5
 800725c:	080082bc 	.word	0x080082bc

08007260 <__multadd>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	690e      	ldr	r6, [r1, #16]
 8007266:	4607      	mov	r7, r0
 8007268:	4698      	mov	r8, r3
 800726a:	460c      	mov	r4, r1
 800726c:	f101 0014 	add.w	r0, r1, #20
 8007270:	2300      	movs	r3, #0
 8007272:	6805      	ldr	r5, [r0, #0]
 8007274:	b2a9      	uxth	r1, r5
 8007276:	fb02 8101 	mla	r1, r2, r1, r8
 800727a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800727e:	0c2d      	lsrs	r5, r5, #16
 8007280:	fb02 c505 	mla	r5, r2, r5, ip
 8007284:	b289      	uxth	r1, r1
 8007286:	3301      	adds	r3, #1
 8007288:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800728c:	429e      	cmp	r6, r3
 800728e:	f840 1b04 	str.w	r1, [r0], #4
 8007292:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007296:	dcec      	bgt.n	8007272 <__multadd+0x12>
 8007298:	f1b8 0f00 	cmp.w	r8, #0
 800729c:	d022      	beq.n	80072e4 <__multadd+0x84>
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	42b3      	cmp	r3, r6
 80072a2:	dc19      	bgt.n	80072d8 <__multadd+0x78>
 80072a4:	6861      	ldr	r1, [r4, #4]
 80072a6:	4638      	mov	r0, r7
 80072a8:	3101      	adds	r1, #1
 80072aa:	f7ff ff77 	bl	800719c <_Balloc>
 80072ae:	4605      	mov	r5, r0
 80072b0:	b928      	cbnz	r0, 80072be <__multadd+0x5e>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <__multadd+0x8c>)
 80072b6:	480e      	ldr	r0, [pc, #56]	; (80072f0 <__multadd+0x90>)
 80072b8:	21b5      	movs	r1, #181	; 0xb5
 80072ba:	f000 fd67 	bl	8007d8c <__assert_func>
 80072be:	6922      	ldr	r2, [r4, #16]
 80072c0:	3202      	adds	r2, #2
 80072c2:	f104 010c 	add.w	r1, r4, #12
 80072c6:	0092      	lsls	r2, r2, #2
 80072c8:	300c      	adds	r0, #12
 80072ca:	f7ff ff59 	bl	8007180 <memcpy>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7ff ffa3 	bl	800721c <_Bfree>
 80072d6:	462c      	mov	r4, r5
 80072d8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072dc:	3601      	adds	r6, #1
 80072de:	f8c3 8014 	str.w	r8, [r3, #20]
 80072e2:	6126      	str	r6, [r4, #16]
 80072e4:	4620      	mov	r0, r4
 80072e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ea:	bf00      	nop
 80072ec:	0800824b 	.word	0x0800824b
 80072f0:	080082bc 	.word	0x080082bc

080072f4 <__hi0bits>:
 80072f4:	0c03      	lsrs	r3, r0, #16
 80072f6:	041b      	lsls	r3, r3, #16
 80072f8:	b9d3      	cbnz	r3, 8007330 <__hi0bits+0x3c>
 80072fa:	0400      	lsls	r0, r0, #16
 80072fc:	2310      	movs	r3, #16
 80072fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007302:	bf04      	itt	eq
 8007304:	0200      	lsleq	r0, r0, #8
 8007306:	3308      	addeq	r3, #8
 8007308:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800730c:	bf04      	itt	eq
 800730e:	0100      	lsleq	r0, r0, #4
 8007310:	3304      	addeq	r3, #4
 8007312:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007316:	bf04      	itt	eq
 8007318:	0080      	lsleq	r0, r0, #2
 800731a:	3302      	addeq	r3, #2
 800731c:	2800      	cmp	r0, #0
 800731e:	db05      	blt.n	800732c <__hi0bits+0x38>
 8007320:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007324:	f103 0301 	add.w	r3, r3, #1
 8007328:	bf08      	it	eq
 800732a:	2320      	moveq	r3, #32
 800732c:	4618      	mov	r0, r3
 800732e:	4770      	bx	lr
 8007330:	2300      	movs	r3, #0
 8007332:	e7e4      	b.n	80072fe <__hi0bits+0xa>

08007334 <__lo0bits>:
 8007334:	6803      	ldr	r3, [r0, #0]
 8007336:	f013 0207 	ands.w	r2, r3, #7
 800733a:	4601      	mov	r1, r0
 800733c:	d00b      	beq.n	8007356 <__lo0bits+0x22>
 800733e:	07da      	lsls	r2, r3, #31
 8007340:	d424      	bmi.n	800738c <__lo0bits+0x58>
 8007342:	0798      	lsls	r0, r3, #30
 8007344:	bf49      	itett	mi
 8007346:	085b      	lsrmi	r3, r3, #1
 8007348:	089b      	lsrpl	r3, r3, #2
 800734a:	2001      	movmi	r0, #1
 800734c:	600b      	strmi	r3, [r1, #0]
 800734e:	bf5c      	itt	pl
 8007350:	600b      	strpl	r3, [r1, #0]
 8007352:	2002      	movpl	r0, #2
 8007354:	4770      	bx	lr
 8007356:	b298      	uxth	r0, r3
 8007358:	b9b0      	cbnz	r0, 8007388 <__lo0bits+0x54>
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	2010      	movs	r0, #16
 800735e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007362:	bf04      	itt	eq
 8007364:	0a1b      	lsreq	r3, r3, #8
 8007366:	3008      	addeq	r0, #8
 8007368:	071a      	lsls	r2, r3, #28
 800736a:	bf04      	itt	eq
 800736c:	091b      	lsreq	r3, r3, #4
 800736e:	3004      	addeq	r0, #4
 8007370:	079a      	lsls	r2, r3, #30
 8007372:	bf04      	itt	eq
 8007374:	089b      	lsreq	r3, r3, #2
 8007376:	3002      	addeq	r0, #2
 8007378:	07da      	lsls	r2, r3, #31
 800737a:	d403      	bmi.n	8007384 <__lo0bits+0x50>
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	f100 0001 	add.w	r0, r0, #1
 8007382:	d005      	beq.n	8007390 <__lo0bits+0x5c>
 8007384:	600b      	str	r3, [r1, #0]
 8007386:	4770      	bx	lr
 8007388:	4610      	mov	r0, r2
 800738a:	e7e8      	b.n	800735e <__lo0bits+0x2a>
 800738c:	2000      	movs	r0, #0
 800738e:	4770      	bx	lr
 8007390:	2020      	movs	r0, #32
 8007392:	4770      	bx	lr

08007394 <__i2b>:
 8007394:	b510      	push	{r4, lr}
 8007396:	460c      	mov	r4, r1
 8007398:	2101      	movs	r1, #1
 800739a:	f7ff feff 	bl	800719c <_Balloc>
 800739e:	4602      	mov	r2, r0
 80073a0:	b928      	cbnz	r0, 80073ae <__i2b+0x1a>
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <__i2b+0x24>)
 80073a4:	4805      	ldr	r0, [pc, #20]	; (80073bc <__i2b+0x28>)
 80073a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073aa:	f000 fcef 	bl	8007d8c <__assert_func>
 80073ae:	2301      	movs	r3, #1
 80073b0:	6144      	str	r4, [r0, #20]
 80073b2:	6103      	str	r3, [r0, #16]
 80073b4:	bd10      	pop	{r4, pc}
 80073b6:	bf00      	nop
 80073b8:	0800824b 	.word	0x0800824b
 80073bc:	080082bc 	.word	0x080082bc

080073c0 <__multiply>:
 80073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c4:	4614      	mov	r4, r2
 80073c6:	690a      	ldr	r2, [r1, #16]
 80073c8:	6923      	ldr	r3, [r4, #16]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	bfb8      	it	lt
 80073ce:	460b      	movlt	r3, r1
 80073d0:	460d      	mov	r5, r1
 80073d2:	bfbc      	itt	lt
 80073d4:	4625      	movlt	r5, r4
 80073d6:	461c      	movlt	r4, r3
 80073d8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073e0:	68ab      	ldr	r3, [r5, #8]
 80073e2:	6869      	ldr	r1, [r5, #4]
 80073e4:	eb0a 0709 	add.w	r7, sl, r9
 80073e8:	42bb      	cmp	r3, r7
 80073ea:	b085      	sub	sp, #20
 80073ec:	bfb8      	it	lt
 80073ee:	3101      	addlt	r1, #1
 80073f0:	f7ff fed4 	bl	800719c <_Balloc>
 80073f4:	b930      	cbnz	r0, 8007404 <__multiply+0x44>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b42      	ldr	r3, [pc, #264]	; (8007504 <__multiply+0x144>)
 80073fa:	4843      	ldr	r0, [pc, #268]	; (8007508 <__multiply+0x148>)
 80073fc:	f240 115d 	movw	r1, #349	; 0x15d
 8007400:	f000 fcc4 	bl	8007d8c <__assert_func>
 8007404:	f100 0614 	add.w	r6, r0, #20
 8007408:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800740c:	4633      	mov	r3, r6
 800740e:	2200      	movs	r2, #0
 8007410:	4543      	cmp	r3, r8
 8007412:	d31e      	bcc.n	8007452 <__multiply+0x92>
 8007414:	f105 0c14 	add.w	ip, r5, #20
 8007418:	f104 0314 	add.w	r3, r4, #20
 800741c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007420:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007424:	9202      	str	r2, [sp, #8]
 8007426:	ebac 0205 	sub.w	r2, ip, r5
 800742a:	3a15      	subs	r2, #21
 800742c:	f022 0203 	bic.w	r2, r2, #3
 8007430:	3204      	adds	r2, #4
 8007432:	f105 0115 	add.w	r1, r5, #21
 8007436:	458c      	cmp	ip, r1
 8007438:	bf38      	it	cc
 800743a:	2204      	movcc	r2, #4
 800743c:	9201      	str	r2, [sp, #4]
 800743e:	9a02      	ldr	r2, [sp, #8]
 8007440:	9303      	str	r3, [sp, #12]
 8007442:	429a      	cmp	r2, r3
 8007444:	d808      	bhi.n	8007458 <__multiply+0x98>
 8007446:	2f00      	cmp	r7, #0
 8007448:	dc55      	bgt.n	80074f6 <__multiply+0x136>
 800744a:	6107      	str	r7, [r0, #16]
 800744c:	b005      	add	sp, #20
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	f843 2b04 	str.w	r2, [r3], #4
 8007456:	e7db      	b.n	8007410 <__multiply+0x50>
 8007458:	f8b3 a000 	ldrh.w	sl, [r3]
 800745c:	f1ba 0f00 	cmp.w	sl, #0
 8007460:	d020      	beq.n	80074a4 <__multiply+0xe4>
 8007462:	f105 0e14 	add.w	lr, r5, #20
 8007466:	46b1      	mov	r9, r6
 8007468:	2200      	movs	r2, #0
 800746a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800746e:	f8d9 b000 	ldr.w	fp, [r9]
 8007472:	b2a1      	uxth	r1, r4
 8007474:	fa1f fb8b 	uxth.w	fp, fp
 8007478:	fb0a b101 	mla	r1, sl, r1, fp
 800747c:	4411      	add	r1, r2
 800747e:	f8d9 2000 	ldr.w	r2, [r9]
 8007482:	0c24      	lsrs	r4, r4, #16
 8007484:	0c12      	lsrs	r2, r2, #16
 8007486:	fb0a 2404 	mla	r4, sl, r4, r2
 800748a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800748e:	b289      	uxth	r1, r1
 8007490:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007494:	45f4      	cmp	ip, lr
 8007496:	f849 1b04 	str.w	r1, [r9], #4
 800749a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800749e:	d8e4      	bhi.n	800746a <__multiply+0xaa>
 80074a0:	9901      	ldr	r1, [sp, #4]
 80074a2:	5072      	str	r2, [r6, r1]
 80074a4:	9a03      	ldr	r2, [sp, #12]
 80074a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074aa:	3304      	adds	r3, #4
 80074ac:	f1b9 0f00 	cmp.w	r9, #0
 80074b0:	d01f      	beq.n	80074f2 <__multiply+0x132>
 80074b2:	6834      	ldr	r4, [r6, #0]
 80074b4:	f105 0114 	add.w	r1, r5, #20
 80074b8:	46b6      	mov	lr, r6
 80074ba:	f04f 0a00 	mov.w	sl, #0
 80074be:	880a      	ldrh	r2, [r1, #0]
 80074c0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80074c4:	fb09 b202 	mla	r2, r9, r2, fp
 80074c8:	4492      	add	sl, r2
 80074ca:	b2a4      	uxth	r4, r4
 80074cc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80074d0:	f84e 4b04 	str.w	r4, [lr], #4
 80074d4:	f851 4b04 	ldr.w	r4, [r1], #4
 80074d8:	f8be 2000 	ldrh.w	r2, [lr]
 80074dc:	0c24      	lsrs	r4, r4, #16
 80074de:	fb09 2404 	mla	r4, r9, r4, r2
 80074e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074e6:	458c      	cmp	ip, r1
 80074e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074ec:	d8e7      	bhi.n	80074be <__multiply+0xfe>
 80074ee:	9a01      	ldr	r2, [sp, #4]
 80074f0:	50b4      	str	r4, [r6, r2]
 80074f2:	3604      	adds	r6, #4
 80074f4:	e7a3      	b.n	800743e <__multiply+0x7e>
 80074f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1a5      	bne.n	800744a <__multiply+0x8a>
 80074fe:	3f01      	subs	r7, #1
 8007500:	e7a1      	b.n	8007446 <__multiply+0x86>
 8007502:	bf00      	nop
 8007504:	0800824b 	.word	0x0800824b
 8007508:	080082bc 	.word	0x080082bc

0800750c <__pow5mult>:
 800750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007510:	4615      	mov	r5, r2
 8007512:	f012 0203 	ands.w	r2, r2, #3
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	d007      	beq.n	800752c <__pow5mult+0x20>
 800751c:	4c25      	ldr	r4, [pc, #148]	; (80075b4 <__pow5mult+0xa8>)
 800751e:	3a01      	subs	r2, #1
 8007520:	2300      	movs	r3, #0
 8007522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007526:	f7ff fe9b 	bl	8007260 <__multadd>
 800752a:	4607      	mov	r7, r0
 800752c:	10ad      	asrs	r5, r5, #2
 800752e:	d03d      	beq.n	80075ac <__pow5mult+0xa0>
 8007530:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007532:	b97c      	cbnz	r4, 8007554 <__pow5mult+0x48>
 8007534:	2010      	movs	r0, #16
 8007536:	f7ff fe1b 	bl	8007170 <malloc>
 800753a:	4602      	mov	r2, r0
 800753c:	6270      	str	r0, [r6, #36]	; 0x24
 800753e:	b928      	cbnz	r0, 800754c <__pow5mult+0x40>
 8007540:	4b1d      	ldr	r3, [pc, #116]	; (80075b8 <__pow5mult+0xac>)
 8007542:	481e      	ldr	r0, [pc, #120]	; (80075bc <__pow5mult+0xb0>)
 8007544:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007548:	f000 fc20 	bl	8007d8c <__assert_func>
 800754c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007550:	6004      	str	r4, [r0, #0]
 8007552:	60c4      	str	r4, [r0, #12]
 8007554:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800755c:	b94c      	cbnz	r4, 8007572 <__pow5mult+0x66>
 800755e:	f240 2171 	movw	r1, #625	; 0x271
 8007562:	4630      	mov	r0, r6
 8007564:	f7ff ff16 	bl	8007394 <__i2b>
 8007568:	2300      	movs	r3, #0
 800756a:	f8c8 0008 	str.w	r0, [r8, #8]
 800756e:	4604      	mov	r4, r0
 8007570:	6003      	str	r3, [r0, #0]
 8007572:	f04f 0900 	mov.w	r9, #0
 8007576:	07eb      	lsls	r3, r5, #31
 8007578:	d50a      	bpl.n	8007590 <__pow5mult+0x84>
 800757a:	4639      	mov	r1, r7
 800757c:	4622      	mov	r2, r4
 800757e:	4630      	mov	r0, r6
 8007580:	f7ff ff1e 	bl	80073c0 <__multiply>
 8007584:	4639      	mov	r1, r7
 8007586:	4680      	mov	r8, r0
 8007588:	4630      	mov	r0, r6
 800758a:	f7ff fe47 	bl	800721c <_Bfree>
 800758e:	4647      	mov	r7, r8
 8007590:	106d      	asrs	r5, r5, #1
 8007592:	d00b      	beq.n	80075ac <__pow5mult+0xa0>
 8007594:	6820      	ldr	r0, [r4, #0]
 8007596:	b938      	cbnz	r0, 80075a8 <__pow5mult+0x9c>
 8007598:	4622      	mov	r2, r4
 800759a:	4621      	mov	r1, r4
 800759c:	4630      	mov	r0, r6
 800759e:	f7ff ff0f 	bl	80073c0 <__multiply>
 80075a2:	6020      	str	r0, [r4, #0]
 80075a4:	f8c0 9000 	str.w	r9, [r0]
 80075a8:	4604      	mov	r4, r0
 80075aa:	e7e4      	b.n	8007576 <__pow5mult+0x6a>
 80075ac:	4638      	mov	r0, r7
 80075ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b2:	bf00      	nop
 80075b4:	08008410 	.word	0x08008410
 80075b8:	080081d5 	.word	0x080081d5
 80075bc:	080082bc 	.word	0x080082bc

080075c0 <__lshift>:
 80075c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	460c      	mov	r4, r1
 80075c6:	6849      	ldr	r1, [r1, #4]
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ce:	68a3      	ldr	r3, [r4, #8]
 80075d0:	4607      	mov	r7, r0
 80075d2:	4691      	mov	r9, r2
 80075d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075d8:	f108 0601 	add.w	r6, r8, #1
 80075dc:	42b3      	cmp	r3, r6
 80075de:	db0b      	blt.n	80075f8 <__lshift+0x38>
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7ff fddb 	bl	800719c <_Balloc>
 80075e6:	4605      	mov	r5, r0
 80075e8:	b948      	cbnz	r0, 80075fe <__lshift+0x3e>
 80075ea:	4602      	mov	r2, r0
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <__lshift+0xd0>)
 80075ee:	4829      	ldr	r0, [pc, #164]	; (8007694 <__lshift+0xd4>)
 80075f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075f4:	f000 fbca 	bl	8007d8c <__assert_func>
 80075f8:	3101      	adds	r1, #1
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	e7ee      	b.n	80075dc <__lshift+0x1c>
 80075fe:	2300      	movs	r3, #0
 8007600:	f100 0114 	add.w	r1, r0, #20
 8007604:	f100 0210 	add.w	r2, r0, #16
 8007608:	4618      	mov	r0, r3
 800760a:	4553      	cmp	r3, sl
 800760c:	db33      	blt.n	8007676 <__lshift+0xb6>
 800760e:	6920      	ldr	r0, [r4, #16]
 8007610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007614:	f104 0314 	add.w	r3, r4, #20
 8007618:	f019 091f 	ands.w	r9, r9, #31
 800761c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007624:	d02b      	beq.n	800767e <__lshift+0xbe>
 8007626:	f1c9 0e20 	rsb	lr, r9, #32
 800762a:	468a      	mov	sl, r1
 800762c:	2200      	movs	r2, #0
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	fa00 f009 	lsl.w	r0, r0, r9
 8007634:	4302      	orrs	r2, r0
 8007636:	f84a 2b04 	str.w	r2, [sl], #4
 800763a:	f853 2b04 	ldr.w	r2, [r3], #4
 800763e:	459c      	cmp	ip, r3
 8007640:	fa22 f20e 	lsr.w	r2, r2, lr
 8007644:	d8f3      	bhi.n	800762e <__lshift+0x6e>
 8007646:	ebac 0304 	sub.w	r3, ip, r4
 800764a:	3b15      	subs	r3, #21
 800764c:	f023 0303 	bic.w	r3, r3, #3
 8007650:	3304      	adds	r3, #4
 8007652:	f104 0015 	add.w	r0, r4, #21
 8007656:	4584      	cmp	ip, r0
 8007658:	bf38      	it	cc
 800765a:	2304      	movcc	r3, #4
 800765c:	50ca      	str	r2, [r1, r3]
 800765e:	b10a      	cbz	r2, 8007664 <__lshift+0xa4>
 8007660:	f108 0602 	add.w	r6, r8, #2
 8007664:	3e01      	subs	r6, #1
 8007666:	4638      	mov	r0, r7
 8007668:	612e      	str	r6, [r5, #16]
 800766a:	4621      	mov	r1, r4
 800766c:	f7ff fdd6 	bl	800721c <_Bfree>
 8007670:	4628      	mov	r0, r5
 8007672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007676:	f842 0f04 	str.w	r0, [r2, #4]!
 800767a:	3301      	adds	r3, #1
 800767c:	e7c5      	b.n	800760a <__lshift+0x4a>
 800767e:	3904      	subs	r1, #4
 8007680:	f853 2b04 	ldr.w	r2, [r3], #4
 8007684:	f841 2f04 	str.w	r2, [r1, #4]!
 8007688:	459c      	cmp	ip, r3
 800768a:	d8f9      	bhi.n	8007680 <__lshift+0xc0>
 800768c:	e7ea      	b.n	8007664 <__lshift+0xa4>
 800768e:	bf00      	nop
 8007690:	0800824b 	.word	0x0800824b
 8007694:	080082bc 	.word	0x080082bc

08007698 <__mcmp>:
 8007698:	b530      	push	{r4, r5, lr}
 800769a:	6902      	ldr	r2, [r0, #16]
 800769c:	690c      	ldr	r4, [r1, #16]
 800769e:	1b12      	subs	r2, r2, r4
 80076a0:	d10e      	bne.n	80076c0 <__mcmp+0x28>
 80076a2:	f100 0314 	add.w	r3, r0, #20
 80076a6:	3114      	adds	r1, #20
 80076a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076b8:	42a5      	cmp	r5, r4
 80076ba:	d003      	beq.n	80076c4 <__mcmp+0x2c>
 80076bc:	d305      	bcc.n	80076ca <__mcmp+0x32>
 80076be:	2201      	movs	r2, #1
 80076c0:	4610      	mov	r0, r2
 80076c2:	bd30      	pop	{r4, r5, pc}
 80076c4:	4283      	cmp	r3, r0
 80076c6:	d3f3      	bcc.n	80076b0 <__mcmp+0x18>
 80076c8:	e7fa      	b.n	80076c0 <__mcmp+0x28>
 80076ca:	f04f 32ff 	mov.w	r2, #4294967295
 80076ce:	e7f7      	b.n	80076c0 <__mcmp+0x28>

080076d0 <__mdiff>:
 80076d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	460c      	mov	r4, r1
 80076d6:	4606      	mov	r6, r0
 80076d8:	4611      	mov	r1, r2
 80076da:	4620      	mov	r0, r4
 80076dc:	4617      	mov	r7, r2
 80076de:	f7ff ffdb 	bl	8007698 <__mcmp>
 80076e2:	1e05      	subs	r5, r0, #0
 80076e4:	d110      	bne.n	8007708 <__mdiff+0x38>
 80076e6:	4629      	mov	r1, r5
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7ff fd57 	bl	800719c <_Balloc>
 80076ee:	b930      	cbnz	r0, 80076fe <__mdiff+0x2e>
 80076f0:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <__mdiff+0x108>)
 80076f2:	4602      	mov	r2, r0
 80076f4:	f240 2132 	movw	r1, #562	; 0x232
 80076f8:	4838      	ldr	r0, [pc, #224]	; (80077dc <__mdiff+0x10c>)
 80076fa:	f000 fb47 	bl	8007d8c <__assert_func>
 80076fe:	2301      	movs	r3, #1
 8007700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	bfa4      	itt	ge
 800770a:	463b      	movge	r3, r7
 800770c:	4627      	movge	r7, r4
 800770e:	4630      	mov	r0, r6
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	bfa6      	itte	ge
 8007714:	461c      	movge	r4, r3
 8007716:	2500      	movge	r5, #0
 8007718:	2501      	movlt	r5, #1
 800771a:	f7ff fd3f 	bl	800719c <_Balloc>
 800771e:	b920      	cbnz	r0, 800772a <__mdiff+0x5a>
 8007720:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <__mdiff+0x108>)
 8007722:	4602      	mov	r2, r0
 8007724:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007728:	e7e6      	b.n	80076f8 <__mdiff+0x28>
 800772a:	693e      	ldr	r6, [r7, #16]
 800772c:	60c5      	str	r5, [r0, #12]
 800772e:	6925      	ldr	r5, [r4, #16]
 8007730:	f107 0114 	add.w	r1, r7, #20
 8007734:	f104 0914 	add.w	r9, r4, #20
 8007738:	f100 0e14 	add.w	lr, r0, #20
 800773c:	f107 0210 	add.w	r2, r7, #16
 8007740:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007744:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007748:	46f2      	mov	sl, lr
 800774a:	2700      	movs	r7, #0
 800774c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007750:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007754:	fa1f f883 	uxth.w	r8, r3
 8007758:	fa17 f78b 	uxtah	r7, r7, fp
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	eba7 0808 	sub.w	r8, r7, r8
 8007762:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007766:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800776a:	fa1f f888 	uxth.w	r8, r8
 800776e:	141f      	asrs	r7, r3, #16
 8007770:	454d      	cmp	r5, r9
 8007772:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007776:	f84a 3b04 	str.w	r3, [sl], #4
 800777a:	d8e7      	bhi.n	800774c <__mdiff+0x7c>
 800777c:	1b2b      	subs	r3, r5, r4
 800777e:	3b15      	subs	r3, #21
 8007780:	f023 0303 	bic.w	r3, r3, #3
 8007784:	3304      	adds	r3, #4
 8007786:	3415      	adds	r4, #21
 8007788:	42a5      	cmp	r5, r4
 800778a:	bf38      	it	cc
 800778c:	2304      	movcc	r3, #4
 800778e:	4419      	add	r1, r3
 8007790:	4473      	add	r3, lr
 8007792:	469e      	mov	lr, r3
 8007794:	460d      	mov	r5, r1
 8007796:	4565      	cmp	r5, ip
 8007798:	d30e      	bcc.n	80077b8 <__mdiff+0xe8>
 800779a:	f10c 0203 	add.w	r2, ip, #3
 800779e:	1a52      	subs	r2, r2, r1
 80077a0:	f022 0203 	bic.w	r2, r2, #3
 80077a4:	3903      	subs	r1, #3
 80077a6:	458c      	cmp	ip, r1
 80077a8:	bf38      	it	cc
 80077aa:	2200      	movcc	r2, #0
 80077ac:	441a      	add	r2, r3
 80077ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077b2:	b17b      	cbz	r3, 80077d4 <__mdiff+0x104>
 80077b4:	6106      	str	r6, [r0, #16]
 80077b6:	e7a5      	b.n	8007704 <__mdiff+0x34>
 80077b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80077bc:	fa17 f488 	uxtah	r4, r7, r8
 80077c0:	1422      	asrs	r2, r4, #16
 80077c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80077c6:	b2a4      	uxth	r4, r4
 80077c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80077cc:	f84e 4b04 	str.w	r4, [lr], #4
 80077d0:	1417      	asrs	r7, r2, #16
 80077d2:	e7e0      	b.n	8007796 <__mdiff+0xc6>
 80077d4:	3e01      	subs	r6, #1
 80077d6:	e7ea      	b.n	80077ae <__mdiff+0xde>
 80077d8:	0800824b 	.word	0x0800824b
 80077dc:	080082bc 	.word	0x080082bc

080077e0 <__d2b>:
 80077e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077e4:	4689      	mov	r9, r1
 80077e6:	2101      	movs	r1, #1
 80077e8:	ec57 6b10 	vmov	r6, r7, d0
 80077ec:	4690      	mov	r8, r2
 80077ee:	f7ff fcd5 	bl	800719c <_Balloc>
 80077f2:	4604      	mov	r4, r0
 80077f4:	b930      	cbnz	r0, 8007804 <__d2b+0x24>
 80077f6:	4602      	mov	r2, r0
 80077f8:	4b25      	ldr	r3, [pc, #148]	; (8007890 <__d2b+0xb0>)
 80077fa:	4826      	ldr	r0, [pc, #152]	; (8007894 <__d2b+0xb4>)
 80077fc:	f240 310a 	movw	r1, #778	; 0x30a
 8007800:	f000 fac4 	bl	8007d8c <__assert_func>
 8007804:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007808:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800780c:	bb35      	cbnz	r5, 800785c <__d2b+0x7c>
 800780e:	2e00      	cmp	r6, #0
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	d028      	beq.n	8007866 <__d2b+0x86>
 8007814:	4668      	mov	r0, sp
 8007816:	9600      	str	r6, [sp, #0]
 8007818:	f7ff fd8c 	bl	8007334 <__lo0bits>
 800781c:	9900      	ldr	r1, [sp, #0]
 800781e:	b300      	cbz	r0, 8007862 <__d2b+0x82>
 8007820:	9a01      	ldr	r2, [sp, #4]
 8007822:	f1c0 0320 	rsb	r3, r0, #32
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	430b      	orrs	r3, r1
 800782c:	40c2      	lsrs	r2, r0
 800782e:	6163      	str	r3, [r4, #20]
 8007830:	9201      	str	r2, [sp, #4]
 8007832:	9b01      	ldr	r3, [sp, #4]
 8007834:	61a3      	str	r3, [r4, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	bf14      	ite	ne
 800783a:	2202      	movne	r2, #2
 800783c:	2201      	moveq	r2, #1
 800783e:	6122      	str	r2, [r4, #16]
 8007840:	b1d5      	cbz	r5, 8007878 <__d2b+0x98>
 8007842:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007846:	4405      	add	r5, r0
 8007848:	f8c9 5000 	str.w	r5, [r9]
 800784c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007850:	f8c8 0000 	str.w	r0, [r8]
 8007854:	4620      	mov	r0, r4
 8007856:	b003      	add	sp, #12
 8007858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800785c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007860:	e7d5      	b.n	800780e <__d2b+0x2e>
 8007862:	6161      	str	r1, [r4, #20]
 8007864:	e7e5      	b.n	8007832 <__d2b+0x52>
 8007866:	a801      	add	r0, sp, #4
 8007868:	f7ff fd64 	bl	8007334 <__lo0bits>
 800786c:	9b01      	ldr	r3, [sp, #4]
 800786e:	6163      	str	r3, [r4, #20]
 8007870:	2201      	movs	r2, #1
 8007872:	6122      	str	r2, [r4, #16]
 8007874:	3020      	adds	r0, #32
 8007876:	e7e3      	b.n	8007840 <__d2b+0x60>
 8007878:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800787c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007880:	f8c9 0000 	str.w	r0, [r9]
 8007884:	6918      	ldr	r0, [r3, #16]
 8007886:	f7ff fd35 	bl	80072f4 <__hi0bits>
 800788a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800788e:	e7df      	b.n	8007850 <__d2b+0x70>
 8007890:	0800824b 	.word	0x0800824b
 8007894:	080082bc 	.word	0x080082bc

08007898 <_calloc_r>:
 8007898:	b513      	push	{r0, r1, r4, lr}
 800789a:	434a      	muls	r2, r1
 800789c:	4611      	mov	r1, r2
 800789e:	9201      	str	r2, [sp, #4]
 80078a0:	f000 f85a 	bl	8007958 <_malloc_r>
 80078a4:	4604      	mov	r4, r0
 80078a6:	b118      	cbz	r0, 80078b0 <_calloc_r+0x18>
 80078a8:	9a01      	ldr	r2, [sp, #4]
 80078aa:	2100      	movs	r1, #0
 80078ac:	f7fd fe04 	bl	80054b8 <memset>
 80078b0:	4620      	mov	r0, r4
 80078b2:	b002      	add	sp, #8
 80078b4:	bd10      	pop	{r4, pc}
	...

080078b8 <_free_r>:
 80078b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ba:	2900      	cmp	r1, #0
 80078bc:	d048      	beq.n	8007950 <_free_r+0x98>
 80078be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c2:	9001      	str	r0, [sp, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f1a1 0404 	sub.w	r4, r1, #4
 80078ca:	bfb8      	it	lt
 80078cc:	18e4      	addlt	r4, r4, r3
 80078ce:	f000 fae3 	bl	8007e98 <__malloc_lock>
 80078d2:	4a20      	ldr	r2, [pc, #128]	; (8007954 <_free_r+0x9c>)
 80078d4:	9801      	ldr	r0, [sp, #4]
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	4615      	mov	r5, r2
 80078da:	b933      	cbnz	r3, 80078ea <_free_r+0x32>
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	6014      	str	r4, [r2, #0]
 80078e0:	b003      	add	sp, #12
 80078e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078e6:	f000 badd 	b.w	8007ea4 <__malloc_unlock>
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	d90b      	bls.n	8007906 <_free_r+0x4e>
 80078ee:	6821      	ldr	r1, [r4, #0]
 80078f0:	1862      	adds	r2, r4, r1
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bf04      	itt	eq
 80078f6:	681a      	ldreq	r2, [r3, #0]
 80078f8:	685b      	ldreq	r3, [r3, #4]
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	bf04      	itt	eq
 80078fe:	1852      	addeq	r2, r2, r1
 8007900:	6022      	streq	r2, [r4, #0]
 8007902:	602c      	str	r4, [r5, #0]
 8007904:	e7ec      	b.n	80078e0 <_free_r+0x28>
 8007906:	461a      	mov	r2, r3
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b10b      	cbz	r3, 8007910 <_free_r+0x58>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d9fa      	bls.n	8007906 <_free_r+0x4e>
 8007910:	6811      	ldr	r1, [r2, #0]
 8007912:	1855      	adds	r5, r2, r1
 8007914:	42a5      	cmp	r5, r4
 8007916:	d10b      	bne.n	8007930 <_free_r+0x78>
 8007918:	6824      	ldr	r4, [r4, #0]
 800791a:	4421      	add	r1, r4
 800791c:	1854      	adds	r4, r2, r1
 800791e:	42a3      	cmp	r3, r4
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	d1dd      	bne.n	80078e0 <_free_r+0x28>
 8007924:	681c      	ldr	r4, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	6053      	str	r3, [r2, #4]
 800792a:	4421      	add	r1, r4
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	e7d7      	b.n	80078e0 <_free_r+0x28>
 8007930:	d902      	bls.n	8007938 <_free_r+0x80>
 8007932:	230c      	movs	r3, #12
 8007934:	6003      	str	r3, [r0, #0]
 8007936:	e7d3      	b.n	80078e0 <_free_r+0x28>
 8007938:	6825      	ldr	r5, [r4, #0]
 800793a:	1961      	adds	r1, r4, r5
 800793c:	428b      	cmp	r3, r1
 800793e:	bf04      	itt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	6063      	str	r3, [r4, #4]
 8007946:	bf04      	itt	eq
 8007948:	1949      	addeq	r1, r1, r5
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	6054      	str	r4, [r2, #4]
 800794e:	e7c7      	b.n	80078e0 <_free_r+0x28>
 8007950:	b003      	add	sp, #12
 8007952:	bd30      	pop	{r4, r5, pc}
 8007954:	20000208 	.word	0x20000208

08007958 <_malloc_r>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	1ccd      	adds	r5, r1, #3
 800795c:	f025 0503 	bic.w	r5, r5, #3
 8007960:	3508      	adds	r5, #8
 8007962:	2d0c      	cmp	r5, #12
 8007964:	bf38      	it	cc
 8007966:	250c      	movcc	r5, #12
 8007968:	2d00      	cmp	r5, #0
 800796a:	4606      	mov	r6, r0
 800796c:	db01      	blt.n	8007972 <_malloc_r+0x1a>
 800796e:	42a9      	cmp	r1, r5
 8007970:	d903      	bls.n	800797a <_malloc_r+0x22>
 8007972:	230c      	movs	r3, #12
 8007974:	6033      	str	r3, [r6, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797a:	f000 fa8d 	bl	8007e98 <__malloc_lock>
 800797e:	4921      	ldr	r1, [pc, #132]	; (8007a04 <_malloc_r+0xac>)
 8007980:	680a      	ldr	r2, [r1, #0]
 8007982:	4614      	mov	r4, r2
 8007984:	b99c      	cbnz	r4, 80079ae <_malloc_r+0x56>
 8007986:	4f20      	ldr	r7, [pc, #128]	; (8007a08 <_malloc_r+0xb0>)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	b923      	cbnz	r3, 8007996 <_malloc_r+0x3e>
 800798c:	4621      	mov	r1, r4
 800798e:	4630      	mov	r0, r6
 8007990:	f000 f996 	bl	8007cc0 <_sbrk_r>
 8007994:	6038      	str	r0, [r7, #0]
 8007996:	4629      	mov	r1, r5
 8007998:	4630      	mov	r0, r6
 800799a:	f000 f991 	bl	8007cc0 <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d123      	bne.n	80079ea <_malloc_r+0x92>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 fa7c 	bl	8007ea4 <__malloc_unlock>
 80079ac:	e7e3      	b.n	8007976 <_malloc_r+0x1e>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1b5b      	subs	r3, r3, r5
 80079b2:	d417      	bmi.n	80079e4 <_malloc_r+0x8c>
 80079b4:	2b0b      	cmp	r3, #11
 80079b6:	d903      	bls.n	80079c0 <_malloc_r+0x68>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	441c      	add	r4, r3
 80079bc:	6025      	str	r5, [r4, #0]
 80079be:	e004      	b.n	80079ca <_malloc_r+0x72>
 80079c0:	6863      	ldr	r3, [r4, #4]
 80079c2:	42a2      	cmp	r2, r4
 80079c4:	bf0c      	ite	eq
 80079c6:	600b      	streq	r3, [r1, #0]
 80079c8:	6053      	strne	r3, [r2, #4]
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 fa6a 	bl	8007ea4 <__malloc_unlock>
 80079d0:	f104 000b 	add.w	r0, r4, #11
 80079d4:	1d23      	adds	r3, r4, #4
 80079d6:	f020 0007 	bic.w	r0, r0, #7
 80079da:	1ac2      	subs	r2, r0, r3
 80079dc:	d0cc      	beq.n	8007978 <_malloc_r+0x20>
 80079de:	1a1b      	subs	r3, r3, r0
 80079e0:	50a3      	str	r3, [r4, r2]
 80079e2:	e7c9      	b.n	8007978 <_malloc_r+0x20>
 80079e4:	4622      	mov	r2, r4
 80079e6:	6864      	ldr	r4, [r4, #4]
 80079e8:	e7cc      	b.n	8007984 <_malloc_r+0x2c>
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d0e3      	beq.n	80079bc <_malloc_r+0x64>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 f962 	bl	8007cc0 <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d1dd      	bne.n	80079bc <_malloc_r+0x64>
 8007a00:	e7cf      	b.n	80079a2 <_malloc_r+0x4a>
 8007a02:	bf00      	nop
 8007a04:	20000208 	.word	0x20000208
 8007a08:	2000020c 	.word	0x2000020c

08007a0c <__sfputc_r>:
 8007a0c:	6893      	ldr	r3, [r2, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	b410      	push	{r4}
 8007a14:	6093      	str	r3, [r2, #8]
 8007a16:	da08      	bge.n	8007a2a <__sfputc_r+0x1e>
 8007a18:	6994      	ldr	r4, [r2, #24]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	db01      	blt.n	8007a22 <__sfputc_r+0x16>
 8007a1e:	290a      	cmp	r1, #10
 8007a20:	d103      	bne.n	8007a2a <__sfputc_r+0x1e>
 8007a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a26:	f7fe ba47 	b.w	8005eb8 <__swbuf_r>
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	1c58      	adds	r0, r3, #1
 8007a2e:	6010      	str	r0, [r2, #0]
 8007a30:	7019      	strb	r1, [r3, #0]
 8007a32:	4608      	mov	r0, r1
 8007a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <__sfputs_r>:
 8007a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	18d5      	adds	r5, r2, r3
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	d101      	bne.n	8007a4c <__sfputs_r+0x12>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e007      	b.n	8007a5c <__sfputs_r+0x22>
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	463a      	mov	r2, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ffda 	bl	8007a0c <__sfputc_r>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d1f3      	bne.n	8007a44 <__sfputs_r+0xa>
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a60 <_vfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460d      	mov	r5, r1
 8007a66:	b09d      	sub	sp, #116	; 0x74
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4698      	mov	r8, r3
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	b118      	cbz	r0, 8007a78 <_vfiprintf_r+0x18>
 8007a70:	6983      	ldr	r3, [r0, #24]
 8007a72:	b90b      	cbnz	r3, 8007a78 <_vfiprintf_r+0x18>
 8007a74:	f7ff fa72 	bl	8006f5c <__sinit>
 8007a78:	4b89      	ldr	r3, [pc, #548]	; (8007ca0 <_vfiprintf_r+0x240>)
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	d11b      	bne.n	8007ab6 <_vfiprintf_r+0x56>
 8007a7e:	6875      	ldr	r5, [r6, #4]
 8007a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8e:	f7ff fb08 	bl	80070a2 <__retarget_lock_acquire_recursive>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	071b      	lsls	r3, r3, #28
 8007a96:	d501      	bpl.n	8007a9c <_vfiprintf_r+0x3c>
 8007a98:	692b      	ldr	r3, [r5, #16]
 8007a9a:	b9eb      	cbnz	r3, 8007ad8 <_vfiprintf_r+0x78>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7fe fa5c 	bl	8005f5c <__swsetup_r>
 8007aa4:	b1c0      	cbz	r0, 8007ad8 <_vfiprintf_r+0x78>
 8007aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aa8:	07dc      	lsls	r4, r3, #31
 8007aaa:	d50e      	bpl.n	8007aca <_vfiprintf_r+0x6a>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b01d      	add	sp, #116	; 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	4b7b      	ldr	r3, [pc, #492]	; (8007ca4 <_vfiprintf_r+0x244>)
 8007ab8:	429d      	cmp	r5, r3
 8007aba:	d101      	bne.n	8007ac0 <_vfiprintf_r+0x60>
 8007abc:	68b5      	ldr	r5, [r6, #8]
 8007abe:	e7df      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007ac0:	4b79      	ldr	r3, [pc, #484]	; (8007ca8 <_vfiprintf_r+0x248>)
 8007ac2:	429d      	cmp	r5, r3
 8007ac4:	bf08      	it	eq
 8007ac6:	68f5      	ldreq	r5, [r6, #12]
 8007ac8:	e7da      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	0598      	lsls	r0, r3, #22
 8007ace:	d4ed      	bmi.n	8007aac <_vfiprintf_r+0x4c>
 8007ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad2:	f7ff fae7 	bl	80070a4 <__retarget_lock_release_recursive>
 8007ad6:	e7e9      	b.n	8007aac <_vfiprintf_r+0x4c>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	2320      	movs	r3, #32
 8007ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae6:	2330      	movs	r3, #48	; 0x30
 8007ae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cac <_vfiprintf_r+0x24c>
 8007aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af0:	f04f 0901 	mov.w	r9, #1
 8007af4:	4623      	mov	r3, r4
 8007af6:	469a      	mov	sl, r3
 8007af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afc:	b10a      	cbz	r2, 8007b02 <_vfiprintf_r+0xa2>
 8007afe:	2a25      	cmp	r2, #37	; 0x25
 8007b00:	d1f9      	bne.n	8007af6 <_vfiprintf_r+0x96>
 8007b02:	ebba 0b04 	subs.w	fp, sl, r4
 8007b06:	d00b      	beq.n	8007b20 <_vfiprintf_r+0xc0>
 8007b08:	465b      	mov	r3, fp
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ff93 	bl	8007a3a <__sfputs_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	f000 80aa 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b1c:	445a      	add	r2, fp
 8007b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b20:	f89a 3000 	ldrb.w	r3, [sl]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80a2 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b34:	f10a 0a01 	add.w	sl, sl, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b40:	931a      	str	r3, [sp, #104]	; 0x68
 8007b42:	4654      	mov	r4, sl
 8007b44:	2205      	movs	r2, #5
 8007b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4a:	4858      	ldr	r0, [pc, #352]	; (8007cac <_vfiprintf_r+0x24c>)
 8007b4c:	f7f8 fb60 	bl	8000210 <memchr>
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	b9d8      	cbnz	r0, 8007b8c <_vfiprintf_r+0x12c>
 8007b54:	06d1      	lsls	r1, r2, #27
 8007b56:	bf44      	itt	mi
 8007b58:	2320      	movmi	r3, #32
 8007b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5e:	0713      	lsls	r3, r2, #28
 8007b60:	bf44      	itt	mi
 8007b62:	232b      	movmi	r3, #43	; 0x2b
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b68:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6e:	d015      	beq.n	8007b9c <_vfiprintf_r+0x13c>
 8007b70:	9a07      	ldr	r2, [sp, #28]
 8007b72:	4654      	mov	r4, sl
 8007b74:	2000      	movs	r0, #0
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d94e      	bls.n	8007c24 <_vfiprintf_r+0x1c4>
 8007b86:	b1b0      	cbz	r0, 8007bb6 <_vfiprintf_r+0x156>
 8007b88:	9207      	str	r2, [sp, #28]
 8007b8a:	e014      	b.n	8007bb6 <_vfiprintf_r+0x156>
 8007b8c:	eba0 0308 	sub.w	r3, r0, r8
 8007b90:	fa09 f303 	lsl.w	r3, r9, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	46a2      	mov	sl, r4
 8007b9a:	e7d2      	b.n	8007b42 <_vfiprintf_r+0xe2>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1d19      	adds	r1, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfbb      	ittet	lt
 8007ba8:	425b      	neglt	r3, r3
 8007baa:	f042 0202 	orrlt.w	r2, r2, #2
 8007bae:	9307      	strge	r3, [sp, #28]
 8007bb0:	9307      	strlt	r3, [sp, #28]
 8007bb2:	bfb8      	it	lt
 8007bb4:	9204      	strlt	r2, [sp, #16]
 8007bb6:	7823      	ldrb	r3, [r4, #0]
 8007bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bba:	d10c      	bne.n	8007bd6 <_vfiprintf_r+0x176>
 8007bbc:	7863      	ldrb	r3, [r4, #1]
 8007bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc0:	d135      	bne.n	8007c2e <_vfiprintf_r+0x1ce>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	1d1a      	adds	r2, r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	9203      	str	r2, [sp, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfb8      	it	lt
 8007bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd2:	3402      	adds	r4, #2
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cbc <_vfiprintf_r+0x25c>
 8007bda:	7821      	ldrb	r1, [r4, #0]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	4650      	mov	r0, sl
 8007be0:	f7f8 fb16 	bl	8000210 <memchr>
 8007be4:	b140      	cbz	r0, 8007bf8 <_vfiprintf_r+0x198>
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	eba0 000a 	sub.w	r0, r0, sl
 8007bec:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	4303      	orrs	r3, r0
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	482c      	ldr	r0, [pc, #176]	; (8007cb0 <_vfiprintf_r+0x250>)
 8007bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c02:	2206      	movs	r2, #6
 8007c04:	f7f8 fb04 	bl	8000210 <memchr>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d03f      	beq.n	8007c8c <_vfiprintf_r+0x22c>
 8007c0c:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <_vfiprintf_r+0x254>)
 8007c0e:	bb1b      	cbnz	r3, 8007c58 <_vfiprintf_r+0x1f8>
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	3307      	adds	r3, #7
 8007c14:	f023 0307 	bic.w	r3, r3, #7
 8007c18:	3308      	adds	r3, #8
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1e:	443b      	add	r3, r7
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	e767      	b.n	8007af4 <_vfiprintf_r+0x94>
 8007c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c28:	460c      	mov	r4, r1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7a5      	b.n	8007b7a <_vfiprintf_r+0x11a>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	3401      	adds	r4, #1
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	4619      	mov	r1, r3
 8007c36:	f04f 0c0a 	mov.w	ip, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c40:	3a30      	subs	r2, #48	; 0x30
 8007c42:	2a09      	cmp	r2, #9
 8007c44:	d903      	bls.n	8007c4e <_vfiprintf_r+0x1ee>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0c5      	beq.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4a:	9105      	str	r1, [sp, #20]
 8007c4c:	e7c3      	b.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c52:	4604      	mov	r4, r0
 8007c54:	2301      	movs	r3, #1
 8007c56:	e7f0      	b.n	8007c3a <_vfiprintf_r+0x1da>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7fd fcd0 	bl	8005608 <_printf_float>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	1c78      	adds	r0, r7, #1
 8007c6c:	d1d6      	bne.n	8007c1c <_vfiprintf_r+0x1bc>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07d9      	lsls	r1, r3, #31
 8007c72:	d405      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c74:	89ab      	ldrh	r3, [r5, #12]
 8007c76:	059a      	lsls	r2, r3, #22
 8007c78:	d402      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c7c:	f7ff fa12 	bl	80070a4 <__retarget_lock_release_recursive>
 8007c80:	89ab      	ldrh	r3, [r5, #12]
 8007c82:	065b      	lsls	r3, r3, #25
 8007c84:	f53f af12 	bmi.w	8007aac <_vfiprintf_r+0x4c>
 8007c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c8a:	e711      	b.n	8007ab0 <_vfiprintf_r+0x50>
 8007c8c:	ab03      	add	r3, sp, #12
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c94:	a904      	add	r1, sp, #16
 8007c96:	4630      	mov	r0, r6
 8007c98:	f7fd ff5a 	bl	8005b50 <_printf_i>
 8007c9c:	e7e4      	b.n	8007c68 <_vfiprintf_r+0x208>
 8007c9e:	bf00      	nop
 8007ca0:	0800827c 	.word	0x0800827c
 8007ca4:	0800829c 	.word	0x0800829c
 8007ca8:	0800825c 	.word	0x0800825c
 8007cac:	0800841c 	.word	0x0800841c
 8007cb0:	08008426 	.word	0x08008426
 8007cb4:	08005609 	.word	0x08005609
 8007cb8:	08007a3b 	.word	0x08007a3b
 8007cbc:	08008422 	.word	0x08008422

08007cc0 <_sbrk_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d06      	ldr	r5, [pc, #24]	; (8007cdc <_sbrk_r+0x1c>)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7f9 ff7e 	bl	8001bcc <_sbrk>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_sbrk_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_sbrk_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	200002fc 	.word	0x200002fc

08007ce0 <__sread>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	f000 f8e2 	bl	8007eb0 <_read_r>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	bfab      	itete	ge
 8007cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cf4:	181b      	addge	r3, r3, r0
 8007cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cfa:	bfac      	ite	ge
 8007cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cfe:	81a3      	strhlt	r3, [r4, #12]
 8007d00:	bd10      	pop	{r4, pc}

08007d02 <__swrite>:
 8007d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	461f      	mov	r7, r3
 8007d08:	898b      	ldrh	r3, [r1, #12]
 8007d0a:	05db      	lsls	r3, r3, #23
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4616      	mov	r6, r2
 8007d12:	d505      	bpl.n	8007d20 <__swrite+0x1e>
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	2302      	movs	r3, #2
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f000 f898 	bl	8007e50 <_lseek_r>
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d2a:	81a3      	strh	r3, [r4, #12]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	4628      	mov	r0, r5
 8007d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_write_r>

08007d3a <__sseek>:
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d42:	f000 f885 	bl	8007e50 <_lseek_r>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	bf15      	itete	ne
 8007d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d56:	81a3      	strheq	r3, [r4, #12]
 8007d58:	bf18      	it	ne
 8007d5a:	81a3      	strhne	r3, [r4, #12]
 8007d5c:	bd10      	pop	{r4, pc}

08007d5e <__sclose>:
 8007d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d62:	f000 b831 	b.w	8007dc8 <_close_r>
	...

08007d68 <_write_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_write_r+0x20>)
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4608      	mov	r0, r1
 8007d70:	4611      	mov	r1, r2
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f7f9 fed7 	bl	8001b2a <_write>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_write_r+0x1e>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_write_r+0x1e>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	200002fc 	.word	0x200002fc

08007d8c <__assert_func>:
 8007d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d8e:	4614      	mov	r4, r2
 8007d90:	461a      	mov	r2, r3
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <__assert_func+0x2c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4605      	mov	r5, r0
 8007d98:	68d8      	ldr	r0, [r3, #12]
 8007d9a:	b14c      	cbz	r4, 8007db0 <__assert_func+0x24>
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <__assert_func+0x30>)
 8007d9e:	9100      	str	r1, [sp, #0]
 8007da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007da4:	4906      	ldr	r1, [pc, #24]	; (8007dc0 <__assert_func+0x34>)
 8007da6:	462b      	mov	r3, r5
 8007da8:	f000 f81e 	bl	8007de8 <fiprintf>
 8007dac:	f000 f89f 	bl	8007eee <abort>
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <__assert_func+0x38>)
 8007db2:	461c      	mov	r4, r3
 8007db4:	e7f3      	b.n	8007d9e <__assert_func+0x12>
 8007db6:	bf00      	nop
 8007db8:	2000000c 	.word	0x2000000c
 8007dbc:	0800842d 	.word	0x0800842d
 8007dc0:	0800843a 	.word	0x0800843a
 8007dc4:	08008468 	.word	0x08008468

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	; (8007de4 <_close_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7f9 fec5 	bl	8001b62 <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	200002fc 	.word	0x200002fc

08007de8 <fiprintf>:
 8007de8:	b40e      	push	{r1, r2, r3}
 8007dea:	b503      	push	{r0, r1, lr}
 8007dec:	4601      	mov	r1, r0
 8007dee:	ab03      	add	r3, sp, #12
 8007df0:	4805      	ldr	r0, [pc, #20]	; (8007e08 <fiprintf+0x20>)
 8007df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df6:	6800      	ldr	r0, [r0, #0]
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	f7ff fe31 	bl	8007a60 <_vfiprintf_r>
 8007dfe:	b002      	add	sp, #8
 8007e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e04:	b003      	add	sp, #12
 8007e06:	4770      	bx	lr
 8007e08:	2000000c 	.word	0x2000000c

08007e0c <_fstat_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d07      	ldr	r5, [pc, #28]	; (8007e2c <_fstat_r+0x20>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	4611      	mov	r1, r2
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	f7f9 feae 	bl	8001b7a <_fstat>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d102      	bne.n	8007e28 <_fstat_r+0x1c>
 8007e22:	682b      	ldr	r3, [r5, #0]
 8007e24:	b103      	cbz	r3, 8007e28 <_fstat_r+0x1c>
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	bd38      	pop	{r3, r4, r5, pc}
 8007e2a:	bf00      	nop
 8007e2c:	200002fc 	.word	0x200002fc

08007e30 <_isatty_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d06      	ldr	r5, [pc, #24]	; (8007e4c <_isatty_r+0x1c>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	f7f9 fead 	bl	8001b9a <_isatty>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_isatty_r+0x1a>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_isatty_r+0x1a>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	200002fc 	.word	0x200002fc

08007e50 <_lseek_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d07      	ldr	r5, [pc, #28]	; (8007e70 <_lseek_r+0x20>)
 8007e54:	4604      	mov	r4, r0
 8007e56:	4608      	mov	r0, r1
 8007e58:	4611      	mov	r1, r2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7f9 fea6 	bl	8001bb0 <_lseek>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_lseek_r+0x1e>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_lseek_r+0x1e>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	200002fc 	.word	0x200002fc

08007e74 <__ascii_mbtowc>:
 8007e74:	b082      	sub	sp, #8
 8007e76:	b901      	cbnz	r1, 8007e7a <__ascii_mbtowc+0x6>
 8007e78:	a901      	add	r1, sp, #4
 8007e7a:	b142      	cbz	r2, 8007e8e <__ascii_mbtowc+0x1a>
 8007e7c:	b14b      	cbz	r3, 8007e92 <__ascii_mbtowc+0x1e>
 8007e7e:	7813      	ldrb	r3, [r2, #0]
 8007e80:	600b      	str	r3, [r1, #0]
 8007e82:	7812      	ldrb	r2, [r2, #0]
 8007e84:	1e10      	subs	r0, r2, #0
 8007e86:	bf18      	it	ne
 8007e88:	2001      	movne	r0, #1
 8007e8a:	b002      	add	sp, #8
 8007e8c:	4770      	bx	lr
 8007e8e:	4610      	mov	r0, r2
 8007e90:	e7fb      	b.n	8007e8a <__ascii_mbtowc+0x16>
 8007e92:	f06f 0001 	mvn.w	r0, #1
 8007e96:	e7f8      	b.n	8007e8a <__ascii_mbtowc+0x16>

08007e98 <__malloc_lock>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__malloc_lock+0x8>)
 8007e9a:	f7ff b902 	b.w	80070a2 <__retarget_lock_acquire_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	200002f4 	.word	0x200002f4

08007ea4 <__malloc_unlock>:
 8007ea4:	4801      	ldr	r0, [pc, #4]	; (8007eac <__malloc_unlock+0x8>)
 8007ea6:	f7ff b8fd 	b.w	80070a4 <__retarget_lock_release_recursive>
 8007eaa:	bf00      	nop
 8007eac:	200002f4 	.word	0x200002f4

08007eb0 <_read_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d07      	ldr	r5, [pc, #28]	; (8007ed0 <_read_r+0x20>)
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4611      	mov	r1, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f7f9 fe16 	bl	8001af0 <_read>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_read_r+0x1e>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_read_r+0x1e>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	200002fc 	.word	0x200002fc

08007ed4 <__ascii_wctomb>:
 8007ed4:	b149      	cbz	r1, 8007eea <__ascii_wctomb+0x16>
 8007ed6:	2aff      	cmp	r2, #255	; 0xff
 8007ed8:	bf85      	ittet	hi
 8007eda:	238a      	movhi	r3, #138	; 0x8a
 8007edc:	6003      	strhi	r3, [r0, #0]
 8007ede:	700a      	strbls	r2, [r1, #0]
 8007ee0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ee4:	bf98      	it	ls
 8007ee6:	2001      	movls	r0, #1
 8007ee8:	4770      	bx	lr
 8007eea:	4608      	mov	r0, r1
 8007eec:	4770      	bx	lr

08007eee <abort>:
 8007eee:	b508      	push	{r3, lr}
 8007ef0:	2006      	movs	r0, #6
 8007ef2:	f000 f82b 	bl	8007f4c <raise>
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f7f9 fdf0 	bl	8001adc <_exit>

08007efc <_raise_r>:
 8007efc:	291f      	cmp	r1, #31
 8007efe:	b538      	push	{r3, r4, r5, lr}
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	d904      	bls.n	8007f10 <_raise_r+0x14>
 8007f06:	2316      	movs	r3, #22
 8007f08:	6003      	str	r3, [r0, #0]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f12:	b112      	cbz	r2, 8007f1a <_raise_r+0x1e>
 8007f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f18:	b94b      	cbnz	r3, 8007f2e <_raise_r+0x32>
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 f830 	bl	8007f80 <_getpid_r>
 8007f20:	462a      	mov	r2, r5
 8007f22:	4601      	mov	r1, r0
 8007f24:	4620      	mov	r0, r4
 8007f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f2a:	f000 b817 	b.w	8007f5c <_kill_r>
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d00a      	beq.n	8007f48 <_raise_r+0x4c>
 8007f32:	1c59      	adds	r1, r3, #1
 8007f34:	d103      	bne.n	8007f3e <_raise_r+0x42>
 8007f36:	2316      	movs	r3, #22
 8007f38:	6003      	str	r3, [r0, #0]
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e7e7      	b.n	8007f0e <_raise_r+0x12>
 8007f3e:	2400      	movs	r4, #0
 8007f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f44:	4628      	mov	r0, r5
 8007f46:	4798      	blx	r3
 8007f48:	2000      	movs	r0, #0
 8007f4a:	e7e0      	b.n	8007f0e <_raise_r+0x12>

08007f4c <raise>:
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <raise+0xc>)
 8007f4e:	4601      	mov	r1, r0
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f7ff bfd3 	b.w	8007efc <_raise_r>
 8007f56:	bf00      	nop
 8007f58:	2000000c 	.word	0x2000000c

08007f5c <_kill_r>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	4d07      	ldr	r5, [pc, #28]	; (8007f7c <_kill_r+0x20>)
 8007f60:	2300      	movs	r3, #0
 8007f62:	4604      	mov	r4, r0
 8007f64:	4608      	mov	r0, r1
 8007f66:	4611      	mov	r1, r2
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	f7f9 fda7 	bl	8001abc <_kill>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d102      	bne.n	8007f78 <_kill_r+0x1c>
 8007f72:	682b      	ldr	r3, [r5, #0]
 8007f74:	b103      	cbz	r3, 8007f78 <_kill_r+0x1c>
 8007f76:	6023      	str	r3, [r4, #0]
 8007f78:	bd38      	pop	{r3, r4, r5, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200002fc 	.word	0x200002fc

08007f80 <_getpid_r>:
 8007f80:	f7f9 bd94 	b.w	8001aac <_getpid>

08007f84 <_init>:
 8007f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f86:	bf00      	nop
 8007f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	469e      	mov	lr, r3
 8007f8e:	4770      	bx	lr

08007f90 <_fini>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	bf00      	nop
 8007f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f96:	bc08      	pop	{r3}
 8007f98:	469e      	mov	lr, r3
 8007f9a:	4770      	bx	lr
