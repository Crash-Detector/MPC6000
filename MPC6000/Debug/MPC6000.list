
MPC6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  0800ad28  0800ad28  0001ad28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd98  0800bd98  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd98  0800bd98  0001bd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bda0  0800bda0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bda0  0800bda0  0001bda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bda4  0800bda4  0001bda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bda8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  200001dc  0800bf84  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  0800bf84  00020c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6d9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbc  00000000  00000000  0003d8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000408a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  00041d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4eb  00000000  00000000  00043110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001913e  00000000  00000000  0006f5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d12f  00000000  00000000  00088739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195868  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b58  00000000  00000000  001958bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ad0c 	.word	0x0800ad0c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800ad0c 	.word	0x0800ad0c

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <print_char>:
const HAL_GPIO_t pwr_pin = { GPIOE, GPIO_PIN_9 };
const HAL_GPIO_t rst_pin = { GPIOF, GPIO_PIN_13 };

// Prints characters \r and \n in a way that doesn't case issues.
void print_char( const char ch )
    {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	char buff[5];
	if ( ch == '\n' )
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b0a      	cmp	r3, #10
 8000f9e:	d106      	bne.n	8000fae <print_char+0x1e>
		sprintf( buff, "<LR>" );
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4910      	ldr	r1, [pc, #64]	; (8000fe8 <print_char+0x58>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f007 feba 	bl	8008d20 <siprintf>
 8000fac:	e010      	b.n	8000fd0 <print_char+0x40>
	else if ( ch == '\r' )
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b0d      	cmp	r3, #13
 8000fb2:	d106      	bne.n	8000fc2 <print_char+0x32>
		sprintf( buff, "<CR>" );
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <print_char+0x5c>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 feb0 	bl	8008d20 <siprintf>
 8000fc0:	e006      	b.n	8000fd0 <print_char+0x40>
	else
		sprintf( buff, "%c", ch );
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <print_char+0x60>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 fea8 	bl	8008d20 <siprintf>
	printf( "%s 0x%x D:%d\n\r", buff, ch, ch );
 8000fd0:	79fa      	ldrb	r2, [r7, #7]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f107 0108 	add.w	r1, r7, #8
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <print_char+0x64>)
 8000fda:	f007 fe03 	bl	8008be4 <iprintf>
    } // end print_char
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	0800ad2c 	.word	0x0800ad2c
 8000fec:	0800ad34 	.word	0x0800ad34
 8000ff0:	0800ad3c 	.word	0x0800ad3c
 8000ff4:	0800ad40 	.word	0x0800ad40

08000ff8 <GPIO_Write>:

void GPIO_Write( HAL_GPIO_t const * const gpio_ptr, const GPIO_PinState pin_state )
    {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin( gpio_ptr->GPIOx, gpio_ptr->GPIO_Pin, pin_state );
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	889b      	ldrh	r3, [r3, #4]
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	4619      	mov	r1, r3
 8001010:	f002 fce4 	bl	80039dc <HAL_GPIO_WritePin>
    } // GPIO_Write( )
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <power_on_cell>:

void power_on_cell( )
    {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    printf( "Powering On Cell\n\r" );
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <power_on_cell+0x28>)
 8001022:	f007 fddf 	bl	8008be4 <iprintf>
    GPIO_Write( &pwr_pin, GPIO_PIN_RESET );
 8001026:	2100      	movs	r1, #0
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <power_on_cell+0x2c>)
 800102a:	f7ff ffe5 	bl	8000ff8 <GPIO_Write>
	  HAL_Delay( 1100 ); // At least 1s
 800102e:	f240 404c 	movw	r0, #1100	; 0x44c
 8001032:	f002 fa0b 	bl	800344c <HAL_Delay>
    GPIO_Write( &pwr_pin, GPIO_PIN_SET );
 8001036:	2101      	movs	r1, #1
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <power_on_cell+0x2c>)
 800103a:	f7ff ffdd 	bl	8000ff8 <GPIO_Write>
    } // end power_on( )
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	0800ad50 	.word	0x0800ad50
 8001048:	0800b91c 	.word	0x0800b91c

0800104c <reset_cell>:

void reset_cell( )
    {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    printf( "Resetting Cell\n\r" );
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <reset_cell+0x24>)
 8001052:	f007 fdc7 	bl	8008be4 <iprintf>
    GPIO_Write( &rst_pin, GPIO_PIN_RESET );
 8001056:	2100      	movs	r1, #0
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <reset_cell+0x28>)
 800105a:	f7ff ffcd 	bl	8000ff8 <GPIO_Write>
    HAL_Delay( 100 ); // At least 1s
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f002 f9f4 	bl	800344c <HAL_Delay>
    GPIO_Write( &rst_pin, GPIO_PIN_SET );
 8001064:	2101      	movs	r1, #1
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <reset_cell+0x28>)
 8001068:	f7ff ffc6 	bl	8000ff8 <GPIO_Write>
    } // reset_cell( )
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	0800ad64 	.word	0x0800ad64
 8001074:	0800b924 	.word	0x0800b924

08001078 <begin>:
 * 
 * Responses:
 *  <CR><LF><response><CR><LF>
*/
bool begin( Cellular_module_t * const cell_ptr )
    {
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af02      	add	r7, sp, #8
 800107e:	6078      	str	r0, [r7, #4]
	power_on_cell( );
 8001080:	f7ff ffcc 	bl	800101c <power_on_cell>
    reset_cell( );
 8001084:	f7ff ffe2 	bl	800104c <reset_cell>
    if ( cell_ptr->uart_ptr )
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 808e 	beq.w	80011ae <begin+0x136>
        {
        printf( "Attempting to open comm with ATs\n\r" );
 8001092:	4849      	ldr	r0, [pc, #292]	; (80011b8 <begin+0x140>)
 8001094:	f007 fda6 	bl	8008be4 <iprintf>

        int16_t timeout = 14000;
 8001098:	f243 63b0 	movw	r3, #14000	; 0x36b0
 800109c:	85fb      	strh	r3, [r7, #46]	; 0x2e

        while( timeout > 0 )
 800109e:	e028      	b.n	80010f2 <begin+0x7a>
            {
            flushInput( cell_ptr->uart_ptr );
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f9c7 	bl	8001438 <flushInput>
            if ( send_check_reply( cell_ptr, "AT", ok_reply_c, fona_def_timeout_ms_c ) )
 80010aa:	4a44      	ldr	r2, [pc, #272]	; (80011bc <begin+0x144>)
 80010ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4943      	ldr	r1, [pc, #268]	; (80011c0 <begin+0x148>)
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f897 	bl	80011e8 <send_check_reply>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d11d      	bne.n	80010fc <begin+0x84>
                break;
            //printf( "Failed \n\r\n\r" );
            flushInput( cell_ptr->uart_ptr );
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f9b7 	bl	8001438 <flushInput>

            if ( send_check_reply( cell_ptr, "AT", "AT", fona_def_timeout_ms_c ) )
 80010ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <begin+0x148>)
 80010d2:	493b      	ldr	r1, [pc, #236]	; (80011c0 <begin+0x148>)
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f887 	bl	80011e8 <send_check_reply>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10f      	bne.n	8001100 <begin+0x88>
                break;
            // printf( "Failed \n\r\n\r" );
            HAL_Delay( 500 );
 80010e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010e4:	f002 f9b2 	bl	800344c <HAL_Delay>
            timeout -= 500;
 80010e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010ea:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        while( timeout > 0 )
 80010f2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	dcd2      	bgt.n	80010a0 <begin+0x28>
 80010fa:	e002      	b.n	8001102 <begin+0x8a>
                break;
 80010fc:	bf00      	nop
 80010fe:	e000      	b.n	8001102 <begin+0x8a>
                break;
 8001100:	bf00      	nop
            } // end while
        
        if( timeout <= 0 )
 8001102:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001106:	2b00      	cmp	r3, #0
 8001108:	dc04      	bgt.n	8001114 <begin+0x9c>
            {
            printf( "Timed out!\n\r" );
 800110a:	482e      	ldr	r0, [pc, #184]	; (80011c4 <begin+0x14c>)
 800110c:	f007 fd6a 	bl	8008be4 <iprintf>
            return false;
 8001110:	2300      	movs	r3, #0
 8001112:	e04d      	b.n	80011b0 <begin+0x138>
            } // end if


        // Turn off Echo
        send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c );
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <begin+0x144>)
 8001116:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800111a:	b29b      	uxth	r3, r3
 800111c:	492a      	ldr	r1, [pc, #168]	; (80011c8 <begin+0x150>)
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f862 	bl	80011e8 <send_check_reply>
        HAL_Delay( 100 );
 8001124:	2064      	movs	r0, #100	; 0x64
 8001126:	f002 f991 	bl	800344c <HAL_Delay>

        if ( send_check_reply( cell_ptr, "ATE0", ok_reply_c, fona_def_timeout_ms_c ) )
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <begin+0x144>)
 800112c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001130:	b29b      	uxth	r3, r3
 8001132:	4925      	ldr	r1, [pc, #148]	; (80011c8 <begin+0x150>)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f857 	bl	80011e8 <send_check_reply>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d036      	beq.n	80011ae <begin+0x136>
            {
            HAL_Delay( 100 );
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f002 f983 	bl	800344c <HAL_Delay>
            flushInput( cell_ptr->uart_ptr );
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f974 	bl	8001438 <flushInput>
            
            printf( "\t---> AT+GMR\n" );
 8001150:	481e      	ldr	r0, [pc, #120]	; (80011cc <begin+0x154>)
 8001152:	f007 fdcd 	bl	8008cf0 <puts>

            transmit( cell_ptr,  "AT+GMR" , timeout );
 8001156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001158:	461a      	mov	r2, r3
 800115a:	491d      	ldr	r1, [pc, #116]	; (80011d0 <begin+0x158>)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f869 	bl	8001234 <transmit>

            printf( "\t<--- %s\n", cell_ptr->reply_buffer );
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	4619      	mov	r1, r3
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <begin+0x15c>)
 800116a:	f007 fd3b 	bl	8008be4 <iprintf>
            
            // Nucleo confirms operating with right Cell Module.
            if ( strstr( cell_ptr->reply_buffer, "SIM7000A" ) != NULL )
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <begin+0x160>)
 8001174:	4618      	mov	r0, r3
 8001176:	f007 fdf3 	bl	8008d60 <strstr>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <begin+0x130>
                {
                char buffer[ 32 ];
                sprintf( buffer,  "AT+CPMS=%s,%s,%s", "\"SM\"", "\"SM\"", "\"SM\"" );
 8001180:	f107 000c 	add.w	r0, r7, #12
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <begin+0x164>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <begin+0x164>)
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <begin+0x164>)
 800118c:	4914      	ldr	r1, [pc, #80]	; (80011e0 <begin+0x168>)
 800118e:	f007 fdc7 	bl	8008d20 <siprintf>
                send_check_reply( cell_ptr, buffer, ok_reply_c, fona_def_timeout_ms_c );
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <begin+0x144>)
 8001194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001198:	b29b      	uxth	r3, r3
 800119a:	f107 010c 	add.w	r1, r7, #12
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f822 	bl	80011e8 <send_check_reply>
                return true;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e003      	b.n	80011b0 <begin+0x138>
                } // end if
            else 
                printf( "Couldn't find right revision!\n");
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <begin+0x16c>)
 80011aa:	f007 fda1 	bl	8008cf0 <puts>
            } // end if
        } // end if
    	return false;
 80011ae:	2300      	movs	r3, #0
    } // end begin( )
 80011b0:	4618      	mov	r0, r3
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	0800ad78 	.word	0x0800ad78
 80011bc:	0800ad28 	.word	0x0800ad28
 80011c0:	0800ad9c 	.word	0x0800ad9c
 80011c4:	0800ada0 	.word	0x0800ada0
 80011c8:	0800adb0 	.word	0x0800adb0
 80011cc:	0800adb8 	.word	0x0800adb8
 80011d0:	0800adc8 	.word	0x0800adc8
 80011d4:	0800add0 	.word	0x0800add0
 80011d8:	0800addc 	.word	0x0800addc
 80011dc:	0800ade8 	.word	0x0800ade8
 80011e0:	0800adf0 	.word	0x0800adf0
 80011e4:	0800ae04 	.word	0x0800ae04

080011e8 <send_check_reply>:


bool send_check_reply( Cellular_module_t * const cell_ptr, char const * const send, 
                        char const * const reply, const uint16_t timeout )
    {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	807b      	strh	r3, [r7, #2]

    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	461a      	mov	r2, r3
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 f819 	bl	8001234 <transmit>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	429a      	cmp	r2, r3
 800120c:	d00a      	beq.n	8001224 <send_check_reply+0x3c>
           !strcmp( cell_ptr->reply_buffer, reply );
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3304      	adds	r3, #4
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe fff3 	bl	8000200 <strcmp>
 800121a:	4603      	mov	r3, r0
    return transmit( cell_ptr, send, timeout ) != reply_buff_size_c &&
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <send_check_reply+0x3c>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <send_check_reply+0x3e>
 8001224:	2300      	movs	r3, #0
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2db      	uxtb	r3, r3
    } // end send_check_reply( )
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <transmit>:

uint8_t transmit( Cellular_module_t * const cell_ptr, char const * const send, uint16_t timeout )
    {
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 800123a:	af00      	add	r7, sp, #0
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	6018      	str	r0, [r3, #0]
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	6019      	str	r1, [r3, #0]
 8001248:	1dbb      	adds	r3, r7, #6
 800124a:	801a      	strh	r2, [r3, #0]
	*cell_ptr->reply_buffer = '\0';
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	711a      	strb	r2, [r3, #4]
    char send_buff[1024];
    uint8_t idx;
    if ( sprintf( send_buff, "%s\r", send ) < 0 ) // At in <CR><LR>
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	f107 0014 	add.w	r0, r7, #20
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4928      	ldr	r1, [pc, #160]	; (8001304 <transmit+0xd0>)
 8001262:	f007 fd5d 	bl	8008d20 <siprintf>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	da06      	bge.n	800127a <transmit+0x46>
        {
        printf( "Failed to put into sprintf\n\r" );
 800126c:	4826      	ldr	r0, [pc, #152]	; (8001308 <transmit+0xd4>)
 800126e:	f007 fcb9 	bl	8008be4 <iprintf>
        return reply_buff_size_c;
 8001272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001276:	b2db      	uxtb	r3, r3
 8001278:	e03e      	b.n	80012f8 <transmit+0xc4>
        } // end if
    
    flushInput( cell_ptr->uart_ptr );
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f8d8 	bl	8001438 <flushInput>

#ifdef DEBUG_CELL
    printf( "\t---> %s\n\r", send );
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <transmit+0xd8>)
 8001290:	f007 fca8 	bl	8008be4 <iprintf>
#endif


    if ( HAL_UART_Transmit( cell_ptr->uart_ptr, ( uint8_t *) send_buff, strlen( send_buff ), timeout ) == HAL_OK )
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681c      	ldr	r4, [r3, #0]
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7fe ffb7 	bl	8000214 <strlen>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	f107 0114 	add.w	r1, r7, #20
 80012b2:	4620      	mov	r0, r4
 80012b4:	f005 febe 	bl	8007034 <HAL_UART_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d113      	bne.n	80012e6 <transmit+0xb2>
        {
        idx = readline( cell_ptr, timeout, false );
 80012be:	1dbb      	adds	r3, r7, #6
 80012c0:	8819      	ldrh	r1, [r3, #0]
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	2200      	movs	r2, #0
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	f000 f825 	bl	8001318 <readline>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
#ifdef DEBUG_CELL
        printf( "Got: %s\n\r", cell_ptr->reply_buffer );
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3304      	adds	r3, #4
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	; (8001310 <transmit+0xdc>)
 80012e0:	f007 fc80 	bl	8008be4 <iprintf>
 80012e4:	e006      	b.n	80012f4 <transmit+0xc0>
#endif
        } // end if
    else
        {
#ifdef DEBUG_CELL
        printf( "Failed Transmit\n\r" );
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <transmit+0xe0>)
 80012e8:	f007 fc7c 	bl	8008be4 <iprintf>
#endif
        idx = reply_buff_size_c;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
        } // end else

    return idx;
 80012f4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
    } // transmit( )
 80012f8:	4618      	mov	r0, r3
 80012fa:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	bf00      	nop
 8001304:	0800ae24 	.word	0x0800ae24
 8001308:	0800ae28 	.word	0x0800ae28
 800130c:	0800ae48 	.word	0x0800ae48
 8001310:	0800ae54 	.word	0x0800ae54
 8001314:	0800ae60 	.word	0x0800ae60

08001318 <readline>:
 * MODIFIES: Cellular_module_t::replay_buffer (where reply exists)
 *  EFFECTS: Receives characters from UARTS Rx pin (from the Nucleo board's perspective)
 *           up to the first (if multiline == false, else second) \r\n and places it into the reply_buffer.
*/
uint8_t readline( Cellular_module_t * const cell_ptr, const uint16_t timeout, const bool multiline )
    {
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
    static char receive_buff[ 1024 ];
    static char const * const buff_end_c = receive_buff + sizeof( receive_buff );

    char *buff_ptr = receive_buff;  //! buff_ptr will eventually point to the end of the bytes received.
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <readline+0x110>)
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char *reply_ptr = cell_ptr->reply_buffer; // Points to the reply_buffer
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3304      	adds	r3, #4
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t newlines_seen;
    newlines_seen = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Multiline ensures that we check newline twice
    const uint8_t iter_c = multiline ? 2 : 1;
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <readline+0x2a>
 800133e:	2302      	movs	r3, #2
 8001340:	e000      	b.n	8001344 <readline+0x2c>
 8001342:	2301      	movs	r3, #1
 8001344:	76fb      	strb	r3, [r7, #27]

    // Receive everything until we time out OR run out of space
    while( buff_ptr != buff_end_c && HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr ), 1, timeout ) == HAL_OK )
 8001346:	e002      	b.n	800134e <readline+0x36>
        {
        ++buff_ptr;    // Increment pointer
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	3301      	adds	r3, #1
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while( buff_ptr != buff_end_c && HAL_UART_Receive( cell_ptr->uart_ptr, (uint8_t *)( buff_ptr ), 1, timeout ) == HAL_OK )
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <readline+0x114>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001354:	429a      	cmp	r2, r3
 8001356:	d009      	beq.n	800136c <readline+0x54>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	2201      	movs	r2, #1
 8001360:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001362:	f005 fefe 	bl	8007162 <HAL_UART_Receive>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0ed      	beq.n	8001348 <readline+0x30>
        } // end while
#ifdef DEBUG_CELL
    for ( char const *ptr = receive_buff, * const end_ptr = buff_ptr; ptr != end_ptr; ++ptr )
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <readline+0x110>)
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e007      	b.n	8001386 <readline+0x6e>
    	print_char( *ptr );
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fe08 	bl	8000f90 <print_char>
    for ( char const *ptr = receive_buff, * const end_ptr = buff_ptr; ptr != end_ptr; ++ptr )
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	3301      	adds	r3, #1
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	429a      	cmp	r2, r3
 800138c:	d1f3      	bne.n	8001376 <readline+0x5e>
    if ( buff_ptr == buff_end_c )
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <readline+0x114>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001394:	429a      	cmp	r2, r3
 8001396:	d102      	bne.n	800139e <readline+0x86>
        printf( "Ran out of space in receive_buff\n\r" );
 8001398:	4825      	ldr	r0, [pc, #148]	; (8001430 <readline+0x118>)
 800139a:	f007 fc23 	bl	8008be4 <iprintf>
#endif

    for ( char const *ptr = receive_buff, *const end_ptr = buff_ptr;
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <readline+0x110>)
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	e01b      	b.n	80013e0 <readline+0xc8>
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
        {
        const char c_in = *ptr;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	73fb      	strb	r3, [r7, #15]
        // Used to skip the first <CR><LR> in a response.
        if ( c_in != '\r' ) // Skip the carrage return character (This is present in responses).
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	2b0d      	cmp	r3, #13
 80013b2:	d012      	beq.n	80013da <readline+0xc2>
            {
            if ( c_in == '\n' )  // Don't insert the <LR> into the return buffer.
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b0a      	cmp	r3, #10
 80013b8:	d10a      	bne.n	80013d0 <readline+0xb8>
                {
                if ( reply_ptr != cell_ptr->reply_buffer )
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d00a      	beq.n	80013da <readline+0xc2>
                    ++newlines_seen;
 80013c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c8:	3301      	adds	r3, #1
 80013ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013ce:	e004      	b.n	80013da <readline+0xc2>
                //Else Don't count first <LR> seen (before anything's been inserted)
                } // end if
            else
                {
                *reply_ptr++ = c_in; // Dereferences, assigns, and then post_increment.
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	62ba      	str	r2, [r7, #40]	; 0x28
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	701a      	strb	r2, [r3, #0]
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
    for ( char const *ptr = receive_buff, *const end_ptr = buff_ptr;
 80013e0:	69fa      	ldr	r2, [r7, #28]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d004      	beq.n	80013f2 <readline+0xda>
        ptr != end_ptr && newlines_seen < iter_c; ++ptr )
 80013e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013ec:	7efb      	ldrb	r3, [r7, #27]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3da      	bcc.n	80013a8 <readline+0x90>
                } // end else
            } // end if
        } // end for
    if ( reply_ptr == cell_ptr->reply_buffer + sizeof( cell_ptr->reply_buffer ) )
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80013fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d106      	bne.n	800140e <readline+0xf6>
        {
        printf( "Reply exceeded buffer size!\n\r" );
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <readline+0x11c>)
 8001402:	f007 fbef 	bl	8008be4 <iprintf>
        reply_ptr = cell_ptr->reply_buffer + sizeof( cell_ptr->reply_buffer ) - 1; // To prevent out of bounds indexing.
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3304      	adds	r3, #4
 800140a:	33ff      	adds	r3, #255	; 0xff
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
        } // end if
    *reply_ptr = '\0'; // Null-terminate
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
    return ( uint8_t)( reply_ptr - cell_ptr->reply_buffer );
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b2db      	uxtb	r3, r3
    } // end readline( )
 800141e:	4618      	mov	r0, r3
 8001420:	3730      	adds	r7, #48	; 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200001f8 	.word	0x200001f8
 800142c:	0800b92c 	.word	0x0800b92c
 8001430:	0800ae74 	.word	0x0800ae74
 8001434:	0800ae98 	.word	0x0800ae98

08001438 <flushInput>:
//
//------------------------------------------------------------------------------------------------

// Clear everything W/O reading it in.
void flushInput( UART_HandleTypeDef * const uart_ptr )
    {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    char c_in;
#ifdef DEBUG_CELL
    printf( "Flushing Input\n\r" );
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <flushInput+0x38>)
 8001442:	f007 fbcf 	bl	8008be4 <iprintf>
#endif
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8001446:	e003      	b.n	8001450 <flushInput+0x18>
        {
#ifdef DEBUG_CELL
        print_char( c_in );
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fda0 	bl	8000f90 <print_char>
    while( HAL_UART_Receive( uart_ptr, (uint8_t *)&c_in, 1, 100 ) == HAL_OK )
 8001450:	f107 010f 	add.w	r1, r7, #15
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	2201      	movs	r2, #1
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f005 fe82 	bl	8007162 <HAL_UART_Receive>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f1      	beq.n	8001448 <flushInput+0x10>
#endif
        } // end while
    } // end flush_Input
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	0800aeb8 	.word	0x0800aeb8

08001474 <setNetworkSettings>:
//
//                                  Network Settings
//
//------------------------------------------------------------------------------------------------

bool setNetworkSettings(Cellular_module_t * const cell_ptr) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

	//if ( send_check_reply( cell_ptr, "AT+CGDCONT=1,\"IP\",\"hologram"", ok_reply_c, 10000 ) )
	flushInput( cell_ptr->uart_ptr );
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ffd9 	bl	8001438 <flushInput>
	if ( send_check_reply( cell_ptr, "AT+CGDCONT=1,\"IP\",\"hologram\"", ok_reply_c, 10000 ) ){
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <setNetworkSettings+0x34>)
 8001488:	f242 7310 	movw	r3, #10000	; 0x2710
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <setNetworkSettings+0x38>)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff feaa 	bl	80011e8 <send_check_reply>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <setNetworkSettings+0x2a>
		return true;
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <setNetworkSettings+0x2c>
	}
	return false;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	0800ad28 	.word	0x0800ad28
 80014ac:	0800aecc 	.word	0x0800aecc

080014b0 <config_gpio>:
//enum IO { IN, OUT };

// direction 1 (input), direction 0, output
// Configure the gpio to be either In or out (as well as enabling the clock if not already enabled).
void config_gpio( const char port, const int pin_num, const enum IO direction )
    {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	6039      	str	r1, [r7, #0]
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
    // Invariants
    assert( port >= 'A' && port <= 'F' ); 
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b40      	cmp	r3, #64	; 0x40
 80014c4:	d902      	bls.n	80014cc <config_gpio+0x1c>
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b46      	cmp	r3, #70	; 0x46
 80014ca:	d905      	bls.n	80014d8 <config_gpio+0x28>
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <config_gpio+0xd0>)
 80014ce:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <config_gpio+0xd4>)
 80014d0:	211c      	movs	r1, #28
 80014d2:	482d      	ldr	r0, [pc, #180]	; (8001588 <config_gpio+0xd8>)
 80014d4:	f006 fc9a 	bl	8007e0c <__assert_func>
    assert( pin_num >= 0 && pin_num <= 15 );
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db02      	blt.n	80014e4 <config_gpio+0x34>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	dd05      	ble.n	80014f0 <config_gpio+0x40>
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <config_gpio+0xdc>)
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <config_gpio+0xd4>)
 80014e8:	211d      	movs	r1, #29
 80014ea:	4827      	ldr	r0, [pc, #156]	; (8001588 <config_gpio+0xd8>)
 80014ec:	f006 fc8e 	bl	8007e0c <__assert_func>
    assert( direction == IN || direction == OUT );
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d008      	beq.n	8001508 <config_gpio+0x58>
 80014f6:	79bb      	ldrb	r3, [r7, #6]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d005      	beq.n	8001508 <config_gpio+0x58>
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <config_gpio+0xe0>)
 80014fe:	4a21      	ldr	r2, [pc, #132]	; (8001584 <config_gpio+0xd4>)
 8001500:	211e      	movs	r1, #30
 8001502:	4821      	ldr	r0, [pc, #132]	; (8001588 <config_gpio+0xd8>)
 8001504:	f006 fc82 	bl	8007e0c <__assert_func>

    // Port index: A == 0, B == 1, etc.
    const uint32_t port_idx = port - 'A';
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	61fb      	str	r3, [r7, #28]

    // Ensure that rcc_ahb2 for the port is enabled
    uint32_t * const rcc_ahb2enr = ( uint32_t * )( RCC_ADDR + RCC_AHB2ENR_OFFSET );
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <config_gpio+0xe4>)
 8001510:	61bb      	str	r3, [r7, #24]
    *rcc_ahb2enr |= ( uint32_t ) ( 1 << port_idx ); // Shift one into the index of the port (turning on the clock if not already on).
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2101      	movs	r1, #1
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	431a      	orrs	r2, r3
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	601a      	str	r2, [r3, #0]

    // Port address differ by 0x400 bytes
    const uint32_t port_offset = ( uint32_t )port_idx * 0x400;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	617b      	str	r3, [r7, #20]

    uint32_t io_mode = direction == IN ? 0b00 : 0b01;
 800152a:	79bb      	ldrb	r3, [r7, #6]
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	613b      	str	r3, [r7, #16]
    uint32_t mask = 0b11;
 8001538:	2303      	movs	r3, #3
 800153a:	60fb      	str	r3, [r7, #12]

    // Shift to the pin_num's relevant bits9 (in moder register).
    io_mode <<= ( pin_num << 1 ); // Shift by 2*pin_num
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	613b      	str	r3, [r7, #16]
    mask    <<= ( pin_num << 1 );
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	60fb      	str	r3, [r7, #12]

    uint32_t * const gpio_moder = (uint32_t * )( GPIO_ADDR_BASE + port_offset + GPIO_MODER_OFFSET );
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 800155a:	60bb      	str	r3, [r7, #8]

    *gpio_moder &= ~mask; // Clear the mode bits
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	601a      	str	r2, [r3, #0]
    *gpio_moder |=  io_mode; // Write to it
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	431a      	orrs	r2, r3
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	601a      	str	r2, [r3, #0]
    } // end config_gpio( )
 8001576:	bf00      	nop
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	0800af7c 	.word	0x0800af7c
 8001584:	0800b930 	.word	0x0800b930
 8001588:	0800af98 	.word	0x0800af98
 800158c:	0800afb0 	.word	0x0800afb0
 8001590:	0800afd0 	.word	0x0800afd0
 8001594:	4002104c 	.word	0x4002104c

08001598 <set_pin_mode>:
    {
    return read_gpio_state( gpio->port, gpio->pin_num );
    } // end read_gpio_t_state( )

void set_pin_mode( struct GPIO * const gpio, const enum IO direction )
    {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
    gpio->pin_mode = direction == IN ? GPIO_INPUT : GPIO_OUTPUT;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	701a      	strb	r2, [r3, #0]
    config_gpio( gpio->port, gpio->pin_num, direction );
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	7858      	ldrb	r0, [r3, #1]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	4619      	mov	r1, r3
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f7ff ff74 	bl	80014b0 <config_gpio>
    } // end set_pin_mode( )
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <bio_sensor_init>:
//                                 SparkFun_Bio_Sensor Member Function Definitions
//
//------------------------------------------------------------------------------------------------

void bio_sensor_init( struct SparkFun_Bio_Sensor * const bio_ssor, I2C_HandleTypeDef * const i2c_h, const uint8_t addr, const GPIO_t rst_pin, const GPIO_t mfio_pin, const uint8_t sample_rate, const uint8_t user_sel_mode )
    {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	71fb      	strb	r3, [r7, #7]
    bio_ssor->_reset_pin = rst_pin;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3304      	adds	r3, #4
 80015e4:	463a      	mov	r2, r7
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4611      	mov	r1, r2
 80015ea:	8019      	strh	r1, [r3, #0]
 80015ec:	3302      	adds	r3, #2
 80015ee:	0c12      	lsrs	r2, r2, #16
 80015f0:	701a      	strb	r2, [r3, #0]
    bio_ssor->_mfio_pin = mfio_pin;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3307      	adds	r3, #7
 80015f6:	f107 0218 	add.w	r2, r7, #24
 80015fa:	8811      	ldrh	r1, [r2, #0]
 80015fc:	7892      	ldrb	r2, [r2, #2]
 80015fe:	8019      	strh	r1, [r3, #0]
 8001600:	709a      	strb	r2, [r3, #2]
    bio_ssor->_addr = addr;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	79fa      	ldrb	r2, [r7, #7]
 8001606:	729a      	strb	r2, [r3, #10]
    bio_ssor->_sampleRate = sample_rate;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	7f3a      	ldrb	r2, [r7, #28]
 800160c:	731a      	strb	r2, [r3, #12]
    bio_ssor->_userSelectedMode = user_sel_mode;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001614:	72da      	strb	r2, [r3, #11]
    bio_ssor->_i2c_h = i2c_h;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	68ba      	ldr	r2, [r7, #8]
 800161a:	601a      	str	r2, [r3, #0]
    switch( user_sel_mode )
 800161c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <bio_sensor_init+0x60>
 8001624:	2b08      	cmp	r3, #8
 8001626:	d005      	beq.n	8001634 <bio_sensor_init+0x64>
        break;
    case( APP_MODE ):
        // Call function...
        break;
    default:
        bio_ssor->_userSelectedMode = DISABLE; // Disable the sensor (erronous to use any functions)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2200      	movs	r2, #0
 800162c:	72da      	strb	r2, [r3, #11]
        break;
 800162e:	e002      	b.n	8001636 <bio_sensor_init+0x66>
        break;
 8001630:	bf00      	nop
 8001632:	e000      	b.n	8001636 <bio_sensor_init+0x66>
        break;
 8001634:	bf00      	nop
    } // end switch

    // Begin with mfio_pin and rst_pin in output mode.
    set_pin_mode( &( bio_ssor->_reset_pin ), OUT );
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3304      	adds	r3, #4
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ffab 	bl	8001598 <set_pin_mode>
    set_pin_mode( &( bio_ssor->_mfio_pin ),  OUT );
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3307      	adds	r3, #7
 8001646:	2101      	movs	r1, #1
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffa5 	bl	8001598 <set_pin_mode>
    return;
 800164e:	bf00      	nop
    } // end bio_sensor_init( )
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db12      	blt.n	80016cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	490a      	ldr	r1, [pc, #40]	; (80016d8 <__NVIC_DisableIRQ+0x44>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	3320      	adds	r3, #32
 80016bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016c0:	f3bf 8f4f 	dsb	sy
}
 80016c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016c6:	f3bf 8f6f 	isb	sy
}
 80016ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100

080016dc <readMPU>:
#define MPU_SAD_R 0b11010001 // The last bit corresponds to R
#define MPU_SAD_W 0b11010000

#define MPU_SAD 0b1101000
uint8_t MPUbuf[10] = {0};
void readMPU(uint8_t* val, uint8_t reg_addr, size_t len){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	460b      	mov	r3, r1
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef ret;
      MPUbuf[0] = reg_addr;
 80016ea:	4a20      	ldr	r2, [pc, #128]	; (800176c <readMPU+0x90>)
 80016ec:	7afb      	ldrb	r3, [r7, #11]
 80016ee:	7013      	strb	r3, [r2, #0]
      ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 1, 1000);
 80016f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	4a1c      	ldr	r2, [pc, #112]	; (800176c <readMPU+0x90>)
 80016fa:	21d0      	movs	r1, #208	; 0xd0
 80016fc:	481c      	ldr	r0, [pc, #112]	; (8001770 <readMPU+0x94>)
 80016fe:	f002 fa37 	bl	8003b70 <HAL_I2C_Master_Transmit>
 8001702:	4603      	mov	r3, r0
 8001704:	74fb      	strb	r3, [r7, #19]
      if (ret != HAL_OK) {
 8001706:	7cfb      	ldrb	r3, [r7, #19]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <readMPU+0x3c>
          printf("Error reading Data from MPU reg: %d \n", reg_addr);
 800170c:	7afb      	ldrb	r3, [r7, #11]
 800170e:	4619      	mov	r1, r3
 8001710:	4818      	ldr	r0, [pc, #96]	; (8001774 <readMPU+0x98>)
 8001712:	f007 fa67 	bl	8008be4 <iprintf>
          return;
 8001716:	e026      	b.n	8001766 <readMPU+0x8a>
      }
      ret = HAL_I2C_Master_Receive(&hi2c3, MPU_SAD_R, &MPUbuf[0], len, 1000);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	b29b      	uxth	r3, r3
 800171c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <readMPU+0x90>)
 8001724:	21d1      	movs	r1, #209	; 0xd1
 8001726:	4812      	ldr	r0, [pc, #72]	; (8001770 <readMPU+0x94>)
 8001728:	f002 fb16 	bl	8003d58 <HAL_I2C_Master_Receive>
 800172c:	4603      	mov	r3, r0
 800172e:	74fb      	strb	r3, [r7, #19]
      if (ret != HAL_OK) printf("Error reading Data from MPU reg: %d size: %d\n", reg_addr, len);
 8001730:	7cfb      	ldrb	r3, [r7, #19]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <readMPU+0x66>
 8001736:	7afb      	ldrb	r3, [r7, #11]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4619      	mov	r1, r3
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <readMPU+0x9c>)
 800173e:	f007 fa51 	bl	8008be4 <iprintf>
      for(size_t i=0; i<len; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e00a      	b.n	800175e <readMPU+0x82>
          val[i] = MPUbuf[i];
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	4413      	add	r3, r2
 800174e:	4907      	ldr	r1, [pc, #28]	; (800176c <readMPU+0x90>)
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	440a      	add	r2, r1
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	701a      	strb	r2, [r3, #0]
      for(size_t i=0; i<len; i++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3f0      	bcc.n	8001748 <readMPU+0x6c>
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200005fc 	.word	0x200005fc
 8001770:	20000618 	.word	0x20000618
 8001774:	0800b444 	.word	0x0800b444
 8001778:	0800b46c 	.word	0x0800b46c

0800177c <writeMPU>:

void writeMPU(uint8_t val, uint8_t reg_addr){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af02      	add	r7, sp, #8
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef ret;
    MPUbuf[0] = reg_addr;
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <writeMPU+0x4c>)
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	7013      	strb	r3, [r2, #0]
    MPUbuf[1] = val;
 8001792:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <writeMPU+0x4c>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7053      	strb	r3, [r2, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c3, MPU_SAD_W, &MPUbuf[0], 2, 1000);
 8001798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2302      	movs	r3, #2
 80017a0:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <writeMPU+0x4c>)
 80017a2:	21d0      	movs	r1, #208	; 0xd0
 80017a4:	4809      	ldr	r0, [pc, #36]	; (80017cc <writeMPU+0x50>)
 80017a6:	f002 f9e3 	bl	8003b70 <HAL_I2C_Master_Transmit>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) printf("Error writing to MPU reg: %d = %d\n", reg_addr, val);
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <writeMPU+0x44>
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <writeMPU+0x54>)
 80017bc:	f007 fa12 	bl	8008be4 <iprintf>
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200005fc 	.word	0x200005fc
 80017cc:	20000618 	.word	0x20000618
 80017d0:	0800b49c 	.word	0x0800b49c

080017d4 <SetupMPU>:
#define MPU_ACC_X_OUT           0x3b
#define MPU_GYRO_X_OUT          0x43

#define MPU_OUTPUT_RATE         8000 // default output rate in Hz

void SetupMPU(){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
      uint8_t mpu_id;
      readMPU(&mpu_id, MPU_WHO_AM_I, 1);
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2201      	movs	r2, #1
 80017de:	2175      	movs	r1, #117	; 0x75
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff7b 	bl	80016dc <readMPU>
      printf("Setting up MPU Device on I2C3...\n");
 80017e6:	483a      	ldr	r0, [pc, #232]	; (80018d0 <SetupMPU+0xfc>)
 80017e8:	f007 fa82 	bl	8008cf0 <puts>
      if (mpu_id != 104) {
 80017ec:	793b      	ldrb	r3, [r7, #4]
 80017ee:	2b68      	cmp	r3, #104	; 0x68
 80017f0:	d005      	beq.n	80017fe <SetupMPU+0x2a>
          printf("[ERROR] MPU Device Setup Failed!!!\n");
 80017f2:	4838      	ldr	r0, [pc, #224]	; (80018d4 <SetupMPU+0x100>)
 80017f4:	f007 fa7c 	bl	8008cf0 <puts>
          exit(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f006 fb2b 	bl	8007e54 <exit>
      }
      // reset and wait up from sleep
      uint8_t mpu_pwr_1= 0b10000000;
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	216b      	movs	r1, #107	; 0x6b
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ffb8 	bl	800177c <writeMPU>
      HAL_Delay(100);
 800180c:	2064      	movs	r0, #100	; 0x64
 800180e:	f001 fe1d 	bl	800344c <HAL_Delay>
      mpu_pwr_1 = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	216b      	movs	r1, #107	; 0x6b
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ffae 	bl	800177c <writeMPU>

      // config sampling rate
      uint8_t mpu_sample_div = MPU_OUTPUT_RATE / MPU_SampleRate;
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	71bb      	strb	r3, [r7, #6]
      writeMPU(mpu_sample_div, MPU_SMPRT_DIV);
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	2119      	movs	r1, #25
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffa7 	bl	800177c <writeMPU>

      // config reg
      uint8_t mpu_config_reg;
      mpu_config_reg = 0b001 << 3;
 800182e:	2308      	movs	r3, #8
 8001830:	717b      	strb	r3, [r7, #5]
      writeMPU(mpu_config_reg, MPU_CONFIG_REG);
 8001832:	797b      	ldrb	r3, [r7, #5]
 8001834:	211a      	movs	r1, #26
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ffa0 	bl	800177c <writeMPU>


      // gyro config
      uint8_t mpu_gyro_config = 0b11 << 3;
 800183c:	2318      	movs	r3, #24
 800183e:	70fb      	strb	r3, [r7, #3]
      writeMPU(mpu_gyro_config, MPU_GYRO_CONFIG);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	211b      	movs	r1, #27
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff99 	bl	800177c <writeMPU>
      readMPU(&mpu_gyro_config, MPU_GYRO_CONFIG, 1);
 800184a:	1cfb      	adds	r3, r7, #3
 800184c:	2201      	movs	r2, #1
 800184e:	211b      	movs	r1, #27
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff43 	bl	80016dc <readMPU>
      if (mpu_gyro_config != 0b11 << 3) {
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	2b18      	cmp	r3, #24
 800185a:	d005      	beq.n	8001868 <SetupMPU+0x94>
          printf("[ERROR] MPU GyroMeter Setup Failed!!!");
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <SetupMPU+0x104>)
 800185e:	f007 f9c1 	bl	8008be4 <iprintf>
          exit(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f006 faf6 	bl	8007e54 <exit>
      }

      // Acc config
      uint8_t mpu_acc_config;
      mpu_acc_config = 0b11 << 3;
 8001868:	2318      	movs	r3, #24
 800186a:	70bb      	strb	r3, [r7, #2]
      writeMPU(mpu_acc_config, MPU_ACC_CONFIG);
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	211c      	movs	r1, #28
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff83 	bl	800177c <writeMPU>
      readMPU(&mpu_acc_config, MPU_ACC_CONFIG, 1);
 8001876:	1cbb      	adds	r3, r7, #2
 8001878:	2201      	movs	r2, #1
 800187a:	211c      	movs	r1, #28
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff2d 	bl	80016dc <readMPU>
      if (mpu_acc_config != 0b11 << 3) {
 8001882:	78bb      	ldrb	r3, [r7, #2]
 8001884:	2b18      	cmp	r3, #24
 8001886:	d005      	beq.n	8001894 <SetupMPU+0xc0>
          printf("[ERROR] MPU Acc Setup Failed!!!\n");
 8001888:	4814      	ldr	r0, [pc, #80]	; (80018dc <SetupMPU+0x108>)
 800188a:	f007 fa31 	bl	8008cf0 <puts>
          exit(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f006 fae0 	bl	8007e54 <exit>
      }

      // Generate interrupt at each data ready
      // set DATA_RDY_EN = 1
      uint8_t mpu_int_enable;
      mpu_int_enable = 0b1;
 8001894:	2301      	movs	r3, #1
 8001896:	707b      	strb	r3, [r7, #1]
      writeMPU(mpu_int_enable, MPU_INT_ENABLE);
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2138      	movs	r1, #56	; 0x38
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff6d 	bl	800177c <writeMPU>
      readMPU(&mpu_int_enable, MPU_INT_ENABLE, 1);
 80018a2:	1c7b      	adds	r3, r7, #1
 80018a4:	2201      	movs	r2, #1
 80018a6:	2138      	movs	r1, #56	; 0x38
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff17 	bl	80016dc <readMPU>
      if (mpu_int_enable != 1) {
 80018ae:	787b      	ldrb	r3, [r7, #1]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d005      	beq.n	80018c0 <SetupMPU+0xec>
          printf("[ERROR] MPU interrupt Setup Failed!!!\n");
 80018b4:	480a      	ldr	r0, [pc, #40]	; (80018e0 <SetupMPU+0x10c>)
 80018b6:	f007 fa1b 	bl	8008cf0 <puts>
          exit(1);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f006 faca 	bl	8007e54 <exit>
      }

      printf("...MPU Setup Success\n");
 80018c0:	4808      	ldr	r0, [pc, #32]	; (80018e4 <SetupMPU+0x110>)
 80018c2:	f007 fa15 	bl	8008cf0 <puts>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	0800b4c0 	.word	0x0800b4c0
 80018d4:	0800b4e4 	.word	0x0800b4e4
 80018d8:	0800b508 	.word	0x0800b508
 80018dc:	0800b530 	.word	0x0800b530
 80018e0:	0800b550 	.word	0x0800b550
 80018e4:	0800b578 	.word	0x0800b578

080018e8 <MPUSleep>:

void MPUSleep(){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
    uint8_t mpu_pwr_1 = 1 << 6;
 80018ee:	2340      	movs	r3, #64	; 0x40
 80018f0:	71fb      	strb	r3, [r7, #7]
      writeMPU(mpu_pwr_1, MPU_PWR_MGMT_1);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	216b      	movs	r1, #107	; 0x6b
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff40 	bl	800177c <writeMPU>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	0000      	movs	r0, r0
	...

08001908 <getMPU>:
    float Gyrx;
    float Gyry;
    float Gyrz;
}MPU_measure;

MPU_measure getMPU(){
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b090      	sub	sp, #64	; 0x40
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    MPU_measure rt;
    // Read from x-axis:
      uint8_t raw_acc[6];
      readMPU(raw_acc, MPU_ACC_X_OUT, 6);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2206      	movs	r2, #6
 8001916:	213b      	movs	r1, #59	; 0x3b
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fedf 	bl	80016dc <readMPU>
      int16_t raw_x, raw_y, raw_z;
      raw_x = raw_acc[0] << 8 | raw_acc[1];
 800191e:	7d3b      	ldrb	r3, [r7, #20]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	7d7b      	ldrb	r3, [r7, #21]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      raw_y = raw_acc[2] << 8 | raw_acc[3];
 800192c:	7dbb      	ldrb	r3, [r7, #22]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	87bb      	strh	r3, [r7, #60]	; 0x3c
      raw_z = raw_acc[4] << 8 | raw_acc[5];
 800193a:	7e3b      	ldrb	r3, [r7, #24]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21a      	sxth	r2, r3
 8001940:	7e7b      	ldrb	r3, [r7, #25]
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	877b      	strh	r3, [r7, #58]	; 0x3a
      rt.Accx = (float)(raw_x)/2048.0;
 8001948:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001a78 <getMPU+0x170>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	edc7 7a07 	vstr	s15, [r7, #28]
      rt.Accy = (float)(raw_y)/2048.0;
 8001960:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001a78 <getMPU+0x170>
 8001970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001974:	edc7 7a08 	vstr	s15, [r7, #32]
      rt.Accz = (float)(raw_z)/2048.0;
 8001978:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001984:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001a78 <getMPU+0x170>
 8001988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800198c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
//    printf("Acc X: %f Gs Y: %f Gs Z: %f Gs \n", Accx, Accy, Accz);
      uint8_t raw_gyro[6];
      readMPU(raw_gyro, MPU_GYRO_X_OUT, 6);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2206      	movs	r2, #6
 8001996:	2143      	movs	r1, #67	; 0x43
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe9f 	bl	80016dc <readMPU>
      int16_t raw_x_g, raw_y_g, raw_z_g;
      raw_x_g = raw_gyro[0] << 8 | raw_gyro[1];
 800199e:	7b3b      	ldrb	r3, [r7, #12]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	873b      	strh	r3, [r7, #56]	; 0x38
      raw_y_g = raw_gyro[2] << 8 | raw_gyro[3];
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	86fb      	strh	r3, [r7, #54]	; 0x36
      raw_z_g = raw_gyro[4] << 8 | raw_gyro[5];
 80019ba:	7c3b      	ldrb	r3, [r7, #16]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	b21a      	sxth	r2, r3
 80019c0:	7c7b      	ldrb	r3, [r7, #17]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	86bb      	strh	r3, [r7, #52]	; 0x34
      rt.Gyrx = (float)(raw_x_g)/65.532;
 80019c8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ee17 0a90 	vmov	r0, s15
 80019d8:	f7fe fdde 	bl	8000598 <__aeabi_f2d>
 80019dc:	a324      	add	r3, pc, #144	; (adr r3, 8001a70 <getMPU+0x168>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe ff5b 	bl	800089c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f903 	bl	8000bf8 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
      rt.Gyry = (float)(raw_y_g)/65.532;
 80019f6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a02:	ee17 0a90 	vmov	r0, s15
 8001a06:	f7fe fdc7 	bl	8000598 <__aeabi_f2d>
 8001a0a:	a319      	add	r3, pc, #100	; (adr r3, 8001a70 <getMPU+0x168>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff44 	bl	800089c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f8ec 	bl	8000bf8 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
      rt.Gyrz = (float)(raw_z_g)/65.532;
 8001a24:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7fe fdb0 	bl	8000598 <__aeabi_f2d>
 8001a38:	a30d      	add	r3, pc, #52	; (adr r3, 8001a70 <getMPU+0x168>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe ff2d 	bl	800089c <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7ff f8d5 	bl	8000bf8 <__aeabi_d2f>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
//    printf("Gyro X: %f deg/s Y: %f deg/s Z: %f deg/s\n", Gx, Gy, Gz);
      return rt;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	461d      	mov	r5, r3
 8001a56:	f107 041c 	add.w	r4, r7, #28
 8001a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a62:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	3740      	adds	r7, #64	; 0x40
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	49ba5e35 	.word	0x49ba5e35
 8001a74:	4050620c 	.word	0x4050620c
 8001a78:	45000000 	.word	0x45000000
 8001a7c:	00000000 	.word	0x00000000

08001a80 <detect_fall>:
unsigned int fall_window=0;


/* pushes MPU data to usb */

void detect_fall(MPU_measure m){
 8001a80:	b084      	sub	sp, #16
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	f107 0c10 	add.w	ip, r7, #16
 8001a8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    float accsq;
    accsq = m.Accx * m.Accx + m.Accy * m.Accy + m.Accz * m.Accz;
 8001a90:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001aa0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aac:	edd7 6a06 	vldr	s13, [r7, #24]
 8001ab0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	edc7 7a01 	vstr	s15, [r7, #4]
    if (accsq <= ACC_LFT_SQ && !fall_window)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	a32c      	add	r3, pc, #176	; (adr r3, 8001b78 <detect_fall+0xf8>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7ff f838 	bl	8000b40 <__aeabi_dcmple>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <detect_fall+0x64>
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <detect_fall+0xf0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <detect_fall+0x64>
        fall_window = FALL_DETECT_SAMPLES;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <detect_fall+0xf0>)
 8001ae0:	2228      	movs	r2, #40	; 0x28
 8001ae2:	601a      	str	r2, [r3, #0]
    if (!fall_window) return;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <detect_fall+0xf0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d032      	beq.n	8001b52 <detect_fall+0xd2>
    fall_window--;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <detect_fall+0xf0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <detect_fall+0xf0>)
 8001af4:	6013      	str	r3, [r2, #0]
    if (accsq < ACC_UFT_SQ) return;
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7fe fd4e 	bl	8000598 <__aeabi_f2d>
 8001afc:	a31a      	add	r3, pc, #104	; (adr r3, 8001b68 <detect_fall+0xe8>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7ff f813 	bl	8000b2c <__aeabi_dcmplt>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d124      	bne.n	8001b56 <detect_fall+0xd6>
    float gyrsq;
    gyrsq = m.Gyrx * m.Gyrx + m.Gyry * m.Gyry + m.Gyrz * m.Gyrz;
 8001b0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	edd7 6a08 	vldr	s13, [r7, #32]
 8001b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b28:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a00 	vstr	s15, [r7]
    if (gyrsq < GYR_UFT_SQ) return;
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	d407      	bmi.n	8001b5a <detect_fall+0xda>
    fall_detected = 1;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <detect_fall+0xf4>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e004      	b.n	8001b5c <detect_fall+0xdc>
    if (!fall_window) return;
 8001b52:	bf00      	nop
 8001b54:	e002      	b.n	8001b5c <detect_fall+0xdc>
    if (accsq < ACC_UFT_SQ) return;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <detect_fall+0xdc>
    if (gyrsq < GYR_UFT_SQ) return;
 8001b5a:	bf00      	nop
}
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b64:	b004      	add	sp, #16
 8001b66:	4770      	bx	lr
 8001b68:	7ae147ae 	.word	0x7ae147ae
 8001b6c:	401eae14 	.word	0x401eae14
 8001b70:	20000608 	.word	0x20000608
 8001b74:	200005f8 	.word	0x200005f8
 8001b78:	70a3d70a 	.word	0x70a3d70a
 8001b7c:	3ff70a3d 	.word	0x3ff70a3d

08001b80 <push_MPU_data>:
void push_MPU_data(MPU_measure m){
 8001b80:	b084      	sub	sp, #16
 8001b82:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b86:	b090      	sub	sp, #64	; 0x40
 8001b88:	af0c      	add	r7, sp, #48	; 0x30
 8001b8a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001b8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("%f,%f,%f,%f,%f,%f,%d,%d\n", m.Accx, m.Accy, m.Accz, m.Gyrx, m.Gyry, m.Gyrz, fall_window, fall_detected);
 8001b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcff 	bl	8000598 <__aeabi_f2d>
 8001b9a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcf9 	bl	8000598 <__aeabi_f2d>
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	460d      	mov	r5, r1
 8001baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fcf3 	bl	8000598 <__aeabi_f2d>
 8001bb2:	4680      	mov	r8, r0
 8001bb4:	4689      	mov	r9, r1
 8001bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fced 	bl	8000598 <__aeabi_f2d>
 8001bbe:	4682      	mov	sl, r0
 8001bc0:	468b      	mov	fp, r1
 8001bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fce7 	bl	8000598 <__aeabi_f2d>
 8001bca:	e9c7 0100 	strd	r0, r1, [r7]
 8001bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fce1 	bl	8000598 <__aeabi_f2d>
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <push_MPU_data+0x94>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <push_MPU_data+0x98>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	930b      	str	r3, [sp, #44]	; 0x2c
 8001be0:	920a      	str	r2, [sp, #40]	; 0x28
 8001be2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001be6:	ed97 7b00 	vldr	d7, [r7]
 8001bea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001bf2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001bf6:	e9cd 4500 	strd	r4, r5, [sp]
 8001bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <push_MPU_data+0x9c>)
 8001c00:	f006 fff0 	bl	8008be4 <iprintf>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c0e:	b004      	add	sp, #16
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000608 	.word	0x20000608
 8001c18:	200005f8 	.word	0x200005f8
 8001c1c:	0800b590 	.word	0x0800b590

08001c20 <MPU_Interrupt>:

void MPU_Interrupt(){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af02      	add	r7, sp, #8
    /* read MPU */
    MPU_measure mpu_data = getMPU();
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fe6c 	bl	8001908 <getMPU>
    push_MPU_data(mpu_data);
 8001c30:	466a      	mov	r2, sp
 8001c32:	f107 0318 	add.w	r3, r7, #24
 8001c36:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c3a:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c44:	f7ff ff9c 	bl	8001b80 <push_MPU_data>
    detect_fall(mpu_data);
 8001c48:	466a      	mov	r2, sp
 8001c4a:	f107 0318 	add.w	r3, r7, #24
 8001c4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c52:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	f7ff ff10 	bl	8001a80 <detect_fall>

    /* clear interrupt*/
    uint8_t mpu_int_status;
    readMPU(&mpu_int_status, MPU_INT_STATUS, 1);
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	2201      	movs	r2, #1
 8001c64:	213a      	movs	r1, #58	; 0x3a
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd38 	bl	80016dc <readMPU>
    if ((mpu_int_status & 0b1) != 1) {
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <MPU_Interrupt+0x62>
        printf("[ERROR] MPU interrupt Clear Failed!!!!\n");
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MPU_Interrupt+0x6c>)
 8001c78:	f007 f83a 	bl	8008cf0 <puts>
        exit(1);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f006 f8e9 	bl	8007e54 <exit>
    }
}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800b5ac 	.word	0x0800b5ac

08001c90 <Beep_sos>:


void Beep_sos(){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
    TIM4->ARR = 2000;
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <Beep_sos+0xb8>)
 8001c98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    for(int j=0; j<5; j++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	e048      	b.n	8001d36 <Beep_sos+0xa6>
    for (int i=0; i<3; i++){
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	e00f      	b.n	8001cca <Beep_sos+0x3a>
    TIM4->CCR2 = 1000;
 8001caa:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <Beep_sos+0xb8>)
 8001cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(90);
 8001cb2:	205a      	movs	r0, #90	; 0x5a
 8001cb4:	f001 fbca 	bl	800344c <HAL_Delay>
    TIM4->CCR2 = 0;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <Beep_sos+0xb8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(90);
 8001cbe:	205a      	movs	r0, #90	; 0x5a
 8001cc0:	f001 fbc4 	bl	800344c <HAL_Delay>
    for (int i=0; i<3; i++){
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	ddec      	ble.n	8001caa <Beep_sos+0x1a>
    }
    for (int i=0; i<3; i++){
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	e00f      	b.n	8001cf6 <Beep_sos+0x66>
        TIM4->CCR2 = 1000;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <Beep_sos+0xb8>)
 8001cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(180);
 8001cde:	20b4      	movs	r0, #180	; 0xb4
 8001ce0:	f001 fbb4 	bl	800344c <HAL_Delay>
        TIM4->CCR2 = 0;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <Beep_sos+0xb8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8001cea:	205a      	movs	r0, #90	; 0x5a
 8001cec:	f001 fbae 	bl	800344c <HAL_Delay>
    for (int i=0; i<3; i++){
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	ddec      	ble.n	8001cd6 <Beep_sos+0x46>
        }
    for (int i=0; i<3; i++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	e00f      	b.n	8001d22 <Beep_sos+0x92>
        TIM4->CCR2 = 1000;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <Beep_sos+0xb8>)
 8001d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8001d0a:	205a      	movs	r0, #90	; 0x5a
 8001d0c:	f001 fb9e 	bl	800344c <HAL_Delay>
        TIM4->CCR2 = 0;
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <Beep_sos+0xb8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(90);
 8001d16:	205a      	movs	r0, #90	; 0x5a
 8001d18:	f001 fb98 	bl	800344c <HAL_Delay>
    for (int i=0; i<3; i++){
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	ddec      	ble.n	8001d02 <Beep_sos+0x72>
    }
    HAL_Delay(300);
 8001d28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d2c:	f001 fb8e 	bl	800344c <HAL_Delay>
    for(int j=0; j<5; j++){
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	ddb3      	ble.n	8001ca4 <Beep_sos+0x14>
    }

}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40000800 	.word	0x40000800

08001d4c <Beep_sendmsg_warning>:

void Beep_sendmsg_warning(){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
    for (int i=0; i<6; i++){
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	e018      	b.n	8001d8a <Beep_sendmsg_warning+0x3e>
        TIM4->ARR = 3000;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <Beep_sendmsg_warning+0x54>)
 8001d5a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM4->CCR2 = 1500;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <Beep_sendmsg_warning+0x54>)
 8001d62:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(150);
 8001d68:	2096      	movs	r0, #150	; 0x96
 8001d6a:	f001 fb6f 	bl	800344c <HAL_Delay>
        TIM4->ARR = 2000;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <Beep_sendmsg_warning+0x54>)
 8001d70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d74:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM4->CCR2 = 1000;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <Beep_sendmsg_warning+0x54>)
 8001d78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(150);
 8001d7e:	2096      	movs	r0, #150	; 0x96
 8001d80:	f001 fb64 	bl	800344c <HAL_Delay>
    for (int i=0; i<6; i++){
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3301      	adds	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	dde3      	ble.n	8001d58 <Beep_sendmsg_warning+0xc>
    }
    TIM4->CCR2 =0;
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <Beep_sendmsg_warning+0x54>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	639a      	str	r2, [r3, #56]	; 0x38

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40000800 	.word	0x40000800

08001da4 <Beep_reset>:

void Beep_reset(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
    TIM4->ARR = 2000;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <Beep_reset+0x40>)
 8001daa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCR2 = 1000;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <Beep_reset+0x40>)
 8001db2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);
 8001db8:	2014      	movs	r0, #20
 8001dba:	f001 fb47 	bl	800344c <HAL_Delay>
    TIM4->ARR = 4000;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <Beep_reset+0x40>)
 8001dc0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CCR2 = 2000;
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <Beep_reset+0x40>)
 8001dc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_Delay(20);
 8001dce:	2014      	movs	r0, #20
 8001dd0:	f001 fb3c 	bl	800344c <HAL_Delay>
    TIM4->CCR2 =0;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <Beep_reset+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
    printf( "Reset beeper!\n\r" );
 8001dda:	4803      	ldr	r0, [pc, #12]	; (8001de8 <Beep_reset+0x44>)
 8001ddc:	f006 ff02 	bl	8008be4 <iprintf>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40000800 	.word	0x40000800
 8001de8:	0800b5d4 	.word	0x0800b5d4

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001df0:	b0da      	sub	sp, #360	; 0x168
 8001df2:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  Cellular_module_t cell;
  SparkFun_Bio_Sensor_t sensor;

  NVIC_DisableIRQ(EXTI4_IRQn);
 8001df4:	200a      	movs	r0, #10
 8001df6:	f7ff fc4d 	bl	8001694 <__NVIC_DisableIRQ>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dfa:	f001 fab2 	bl	8003362 <HAL_Init>

  /* USER CODE BEGIN Init */
  cell.uart_ptr = &huart3;
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <main+0x88>)
 8001e04:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e06:	f000 fb47 	bl	8002498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0a:	f000 fd17 	bl	800283c <MX_GPIO_Init>
  MX_I2C3_Init();
 8001e0e:	f000 fbc7 	bl	80025a0 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001e12:	f000 fc03 	bl	800261c <MX_LPUART1_UART_Init>
  MX_TIM4_Init();
 8001e16:	f000 fc99 	bl	800274c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001e1a:	f000 fc4b 	bl	80026b4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001e1e:	f000 fb81 	bl	8002524 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n");
 8001e22:	4815      	ldr	r0, [pc, #84]	; (8001e78 <main+0x8c>)
 8001e24:	f006 ff64 	bl	8008cf0 <puts>

  printf( "Initializing!\n\r" );
 8001e28:	4814      	ldr	r0, [pc, #80]	; (8001e7c <main+0x90>)
 8001e2a:	f006 fedb 	bl	8008be4 <iprintf>
  if ( !begin( &cell ) )
 8001e2e:	f107 0320 	add.w	r3, r7, #32
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f920 	bl	8001078 <begin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f083 0301 	eor.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <main+0x62>
    {
    printf( "Failed initialization\n\r" );
 8001e44:	480e      	ldr	r0, [pc, #56]	; (8001e80 <main+0x94>)
 8001e46:	f006 fecd 	bl	8008be4 <iprintf>
    return 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e304      	b.n	8002458 <main+0x66c>
    }
  else
    {
    printf( "Found SIM7000 using hardware serial\n\r" );
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <main+0x98>)
 8001e50:	f006 fec8 	bl	8008be4 <iprintf>
    }

  if ( !setNetworkSettings( &cell ) )
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fb0b 	bl	8001474 <setNetworkSettings>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f083 0301 	eor.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <main+0xa0>
    {
    printf( "Network settings NOT set\n\r" );
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <main+0x9c>)
 8001e6c:	f006 feba 	bl	8008be4 <iprintf>
    return 1;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e2f1      	b.n	8002458 <main+0x66c>
 8001e74:	200006b0 	.word	0x200006b0
 8001e78:	0800b5e4 	.word	0x0800b5e4
 8001e7c:	0800b5e8 	.word	0x0800b5e8
 8001e80:	0800b5f8 	.word	0x0800b5f8
 8001e84:	0800b610 	.word	0x0800b610
 8001e88:	0800b638 	.word	0x0800b638
    }
  else
    {
    printf( "Network settings set\n\r" );
 8001e8c:	48d6      	ldr	r0, [pc, #856]	; (80021e8 <main+0x3fc>)
 8001e8e:	f006 fea9 	bl	8008be4 <iprintf>

  /*biometric sensor setup*/
  /*--------------begin------------------*/
	  HAL_StatusTypeDef ret;
	  uint8_t buf[10];
	  int HM_samples = 0x1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  	  bio_sensor_init( &sensor, &hi2c1, HM_ADDR, rst_pin_c, mfio_pin_c, def_sample_rate, DISABLE );
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	49d4      	ldr	r1, [pc, #848]	; (80021ec <main+0x400>)
 8001e9c:	f107 0010 	add.w	r0, r7, #16
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	9202      	str	r2, [sp, #8]
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	4ad2      	ldr	r2, [pc, #840]	; (80021f0 <main+0x404>)
 8001ea8:	466b      	mov	r3, sp
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	4614      	mov	r4, r2
 8001eae:	801c      	strh	r4, [r3, #0]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	0c12      	lsrs	r2, r2, #16
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	680b      	ldr	r3, [r1, #0]
 8001eb8:	2255      	movs	r2, #85	; 0x55
 8001eba:	49ce      	ldr	r1, [pc, #824]	; (80021f4 <main+0x408>)
 8001ebc:	f7ff fb88 	bl	80015d0 <bio_sensor_init>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0); // Reset pin
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	48cc      	ldr	r0, [pc, #816]	; (80021f8 <main+0x40c>)
 8001ec6:	f001 fd89 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  1); // MFIO pin
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2102      	movs	r1, #2
 8001ece:	48ca      	ldr	r0, [pc, #808]	; (80021f8 <main+0x40c>)
 8001ed0:	f001 fd84 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f001 fab9 	bl	800344c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1); // Reset is pulled
 8001eda:	2201      	movs	r2, #1
 8001edc:	2101      	movs	r1, #1
 8001ede:	48c6      	ldr	r0, [pc, #792]	; (80021f8 <main+0x40c>)
 8001ee0:	f001 fd7c 	bl	80039dc <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001ee4:	2032      	movs	r0, #50	; 0x32
 8001ee6:	f001 fab1 	bl	800344c <HAL_Delay>
	  HAL_Delay(1000);
 8001eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eee:	f001 faad 	bl	800344c <HAL_Delay>

	  buf[0] = 0x02;
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	701a      	strb	r2, [r3, #0]
	  buf[1] = 0x00;
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001efe:	1d3a      	adds	r2, r7, #4
 8001f00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2302      	movs	r3, #2
 8001f08:	21aa      	movs	r1, #170	; 0xaa
 8001f0a:	48ba      	ldr	r0, [pc, #744]	; (80021f4 <main+0x408>)
 8001f0c:	f001 fe30 	bl	8003b70 <HAL_I2C_Master_Transmit>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	  HAL_Delay(6);
 8001f16:	2006      	movs	r0, #6
 8001f18:	f001 fa98 	bl	800344c <HAL_Delay>
	  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001f1c:	1d3a      	adds	r2, r7, #4
 8001f1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2302      	movs	r3, #2
 8001f26:	21ab      	movs	r1, #171	; 0xab
 8001f28:	48b2      	ldr	r0, [pc, #712]	; (80021f4 <main+0x408>)
 8001f2a:	f001 ff15 	bl	8003d58 <HAL_I2C_Master_Receive>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	  printf("error code: %x application mode: %x\n\r", buf[0],buf[1]);
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	48ae      	ldr	r0, [pc, #696]	; (80021fc <main+0x410>)
 8001f42:	f006 fe4f 	bl	8008be4 <iprintf>
	  set_pin_mode( &sensor._mfio_pin, IN );
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	3307      	adds	r3, #7
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb22 	bl	8001598 <set_pin_mode>

	  /*set our mode to MODE 1*/
	    buf[0] = 0x10;
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2210      	movs	r2, #16
 8001f58:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x00;
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x02;
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2202      	movs	r2, #2
 8001f64:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8001f66:	1d3a      	adds	r2, r7, #4
 8001f68:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2303      	movs	r3, #3
 8001f70:	21aa      	movs	r1, #170	; 0xaa
 8001f72:	48a0      	ldr	r0, [pc, #640]	; (80021f4 <main+0x408>)
 8001f74:	f001 fdfc 	bl	8003b70 <HAL_I2C_Master_Transmit>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	    HAL_Delay(6);
 8001f7e:	2006      	movs	r0, #6
 8001f80:	f001 fa64 	bl	800344c <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001f84:	1d3a      	adds	r2, r7, #4
 8001f86:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	21ab      	movs	r1, #171	; 0xab
 8001f90:	4898      	ldr	r0, [pc, #608]	; (80021f4 <main+0x408>)
 8001f92:	f001 fee1 	bl	8003d58 <HAL_I2C_Master_Receive>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <main+0x1c0>
 8001fa4:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <main+0x1cc>
	        printf("Error setting mode: code %x\n\r", buf[0]);
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4893      	ldr	r0, [pc, #588]	; (8002200 <main+0x414>)
 8001fb4:	f006 fe16 	bl	8008be4 <iprintf>
	    }
	    printf("mode set to raw and algo\n");
 8001fb8:	4892      	ldr	r0, [pc, #584]	; (8002204 <main+0x418>)
 8001fba:	f006 fe99 	bl	8008cf0 <puts>

	    /*Set FIFO threshold as almost full at 0x0F*/
	    buf[0] = 0x10;
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x01;
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x1;
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2201      	movs	r2, #1
 8001fce:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8001fd0:	1d3a      	adds	r2, r7, #4
 8001fd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2303      	movs	r3, #3
 8001fda:	21aa      	movs	r1, #170	; 0xaa
 8001fdc:	4885      	ldr	r0, [pc, #532]	; (80021f4 <main+0x408>)
 8001fde:	f001 fdc7 	bl	8003b70 <HAL_I2C_Master_Transmit>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	    HAL_Delay(6);
 8001fe8:	2006      	movs	r0, #6
 8001fea:	f001 fa2f 	bl	800344c <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001fee:	1d3a      	adds	r2, r7, #4
 8001ff0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	21ab      	movs	r1, #171	; 0xab
 8001ffa:	487e      	ldr	r0, [pc, #504]	; (80021f4 <main+0x408>)
 8001ffc:	f001 feac 	bl	8003d58 <HAL_I2C_Master_Receive>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	      if(buf[0] != 0x00 || ret != HAL_OK ){
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d103      	bne.n	8002016 <main+0x22a>
 800200e:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <main+0x236>
	        printf("Error setting FIFO threshold code: %x\n\r", buf[0]);
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	487a      	ldr	r0, [pc, #488]	; (8002208 <main+0x41c>)
 800201e:	f006 fde1 	bl	8008be4 <iprintf>
	      }
	    printf("fifo set\n");
 8002022:	487a      	ldr	r0, [pc, #488]	; (800220c <main+0x420>)
 8002024:	f006 fe64 	bl	8008cf0 <puts>
	    /*disable AGC*/
	    buf[0] = 0x52;
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2252      	movs	r2, #82	; 0x52
 800202c:	701a      	strb	r2, [r3, #0]
	      buf[1] = 0x00;
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	705a      	strb	r2, [r3, #1]
	      buf[2] = 0x1;
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	2201      	movs	r2, #1
 8002038:	709a      	strb	r2, [r3, #2]
	      ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800203a:	1d3a      	adds	r2, r7, #4
 800203c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2303      	movs	r3, #3
 8002044:	21aa      	movs	r1, #170	; 0xaa
 8002046:	486b      	ldr	r0, [pc, #428]	; (80021f4 <main+0x408>)
 8002048:	f001 fd92 	bl	8003b70 <HAL_I2C_Master_Transmit>
 800204c:	4603      	mov	r3, r0
 800204e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	      HAL_Delay(25);
 8002052:	2019      	movs	r0, #25
 8002054:	f001 f9fa 	bl	800344c <HAL_Delay>
	      ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002058:	1d3a      	adds	r2, r7, #4
 800205a:	f241 3388 	movw	r3, #5000	; 0x1388
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2301      	movs	r3, #1
 8002062:	21ab      	movs	r1, #171	; 0xab
 8002064:	4863      	ldr	r0, [pc, #396]	; (80021f4 <main+0x408>)
 8002066:	f001 fe77 	bl	8003d58 <HAL_I2C_Master_Receive>
 800206a:	4603      	mov	r3, r0
 800206c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	        if(buf[0] != 0x00 || ret != HAL_OK ){
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <main+0x294>
 8002078:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <main+0x2a0>
	          printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	4862      	ldr	r0, [pc, #392]	; (8002210 <main+0x424>)
 8002088:	f006 fdac 	bl	8008be4 <iprintf>
	        }
	       printf("enable AGC \n");
 800208c:	4861      	ldr	r0, [pc, #388]	; (8002214 <main+0x428>)
 800208e:	f006 fe2f 	bl	8008cf0 <puts>



	    /*Disable the sensor*/
	    buf[0] = 0x44;
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2244      	movs	r2, #68	; 0x44
 8002096:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x03;
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2203      	movs	r2, #3
 800209c:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x1;
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2201      	movs	r2, #1
 80020a2:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80020a4:	1d3a      	adds	r2, r7, #4
 80020a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2303      	movs	r3, #3
 80020ae:	21aa      	movs	r1, #170	; 0xaa
 80020b0:	4850      	ldr	r0, [pc, #320]	; (80021f4 <main+0x408>)
 80020b2:	f001 fd5d 	bl	8003b70 <HAL_I2C_Master_Transmit>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	    HAL_Delay(45);
 80020bc:	202d      	movs	r0, #45	; 0x2d
 80020be:	f001 f9c5 	bl	800344c <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80020c2:	1d3a      	adds	r2, r7, #4
 80020c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2301      	movs	r3, #1
 80020cc:	21ab      	movs	r1, #171	; 0xab
 80020ce:	4849      	ldr	r0, [pc, #292]	; (80021f4 <main+0x408>)
 80020d0:	f001 fe42 	bl	8003d58 <HAL_I2C_Master_Receive>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	      if(buf[0] != 0x00 || ret != HAL_OK ){
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <main+0x2fe>
 80020e2:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <main+0x30a>
	        printf("Error enabling sensor code: %x\n\r", buf[0]);
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4849      	ldr	r0, [pc, #292]	; (8002218 <main+0x42c>)
 80020f2:	f006 fd77 	bl	8008be4 <iprintf>
	      }
	      printf("sensor set\n");
 80020f6:	4849      	ldr	r0, [pc, #292]	; (800221c <main+0x430>)
 80020f8:	f006 fdfa 	bl	8008cf0 <puts>


	    /*Disable the algorithm*/

	      HAL_Delay(500);
 80020fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002100:	f001 f9a4 	bl	800344c <HAL_Delay>
	    buf[0] = 0x52;
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2252      	movs	r2, #82	; 0x52
 8002108:	701a      	strb	r2, [r3, #0]
	    buf[1] = 0x02;
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2202      	movs	r2, #2
 800210e:	705a      	strb	r2, [r3, #1]
	    buf[2] = 0x1;
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2201      	movs	r2, #1
 8002114:	709a      	strb	r2, [r3, #2]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8002116:	1d3a      	adds	r2, r7, #4
 8002118:	f241 3388 	movw	r3, #5000	; 0x1388
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2303      	movs	r3, #3
 8002120:	21aa      	movs	r1, #170	; 0xaa
 8002122:	4834      	ldr	r0, [pc, #208]	; (80021f4 <main+0x408>)
 8002124:	f001 fd24 	bl	8003b70 <HAL_I2C_Master_Transmit>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	    HAL_Delay(45);
 800212e:	202d      	movs	r0, #45	; 0x2d
 8002130:	f001 f98c 	bl	800344c <HAL_Delay>
	    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002134:	1d3a      	adds	r2, r7, #4
 8002136:	f241 3388 	movw	r3, #5000	; 0x1388
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2301      	movs	r3, #1
 800213e:	21ab      	movs	r1, #171	; 0xab
 8002140:	482c      	ldr	r0, [pc, #176]	; (80021f4 <main+0x408>)
 8002142:	f001 fe09 	bl	8003d58 <HAL_I2C_Master_Receive>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b

	      if(buf[0] != 0x00 || ret != HAL_OK ){
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <main+0x370>
 8002154:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <main+0x37c>
	        printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	482b      	ldr	r0, [pc, #172]	; (8002210 <main+0x424>)
 8002164:	f006 fd3e 	bl	8008be4 <iprintf>
	      }
	      printf("enable algorithm \n");
 8002168:	482d      	ldr	r0, [pc, #180]	; (8002220 <main+0x434>)
 800216a:	f006 fdc1 	bl	8008cf0 <puts>




	    HAL_Delay(1000);
 800216e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002172:	f001 f96b 	bl	800344c <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  fall_detected = 0;
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <main+0x438>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
  Beep_reset(); // Ok to enable interrupts now
 800217c:	f7ff fe12 	bl	8001da4 <Beep_reset>
  SetupMPU();
 8002180:	f7ff fb28 	bl	80017d4 <SetupMPU>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002184:	2104      	movs	r1, #4
 8002186:	4828      	ldr	r0, [pc, #160]	; (8002228 <main+0x43c>)
 8002188:	f003 ff68 	bl	800605c <HAL_TIM_PWM_Start>
  TIM4->CCR2 = 0;
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <main+0x440>)
 800218e:	2200      	movs	r2, #0
 8002190:	639a      	str	r2, [r3, #56]	; 0x38

  NVIC_EnableIRQ(EXTI4_IRQn);
 8002192:	200a      	movs	r0, #10
 8002194:	f7ff fa60 	bl	8001658 <__NVIC_EnableIRQ>
    while(1)
        {
        if (fall_detected)
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <main+0x438>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0fb      	beq.n	8002198 <main+0x3ac>
            {
            MPUSleep(); /* turn off MPU */
 80021a0:	f7ff fba2 	bl	80018e8 <MPUSleep>
            Beep_sos(); /* 30 sec */
 80021a4:	f7ff fd74 	bl	8001c90 <Beep_sos>
            Beep_sendmsg_warning(); /* 3 sec */
 80021a8:	f7ff fdd0 	bl	8001d4c <Beep_sendmsg_warning>



            /*Enable the sensor*/
            					/*enable AGC*/
								buf[0] = 0x52;
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2252      	movs	r2, #82	; 0x52
 80021b0:	701a      	strb	r2, [r3, #0]
								buf[1] = 0x00;
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	2200      	movs	r2, #0
 80021b6:	705a      	strb	r2, [r3, #1]
								buf[2] = 0x01;
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2201      	movs	r2, #1
 80021bc:	709a      	strb	r2, [r3, #2]
								ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80021be:	1d3a      	adds	r2, r7, #4
 80021c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2303      	movs	r3, #3
 80021c8:	21aa      	movs	r1, #170	; 0xaa
 80021ca:	480a      	ldr	r0, [pc, #40]	; (80021f4 <main+0x408>)
 80021cc:	f001 fcd0 	bl	8003b70 <HAL_I2C_Master_Transmit>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
								HAL_Delay(25);
 80021d6:	2019      	movs	r0, #25
 80021d8:	f001 f938 	bl	800344c <HAL_Delay>
								ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80021dc:	1d3a      	adds	r2, r7, #4
 80021de:	f241 3388 	movw	r3, #5000	; 0x1388
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	e024      	b.n	8002230 <main+0x444>
 80021e6:	bf00      	nop
 80021e8:	0800b654 	.word	0x0800b654
 80021ec:	0800b93c 	.word	0x0800b93c
 80021f0:	0800b940 	.word	0x0800b940
 80021f4:	20000740 	.word	0x20000740
 80021f8:	48000c00 	.word	0x48000c00
 80021fc:	0800b66c 	.word	0x0800b66c
 8002200:	0800b694 	.word	0x0800b694
 8002204:	0800b6b4 	.word	0x0800b6b4
 8002208:	0800b6d0 	.word	0x0800b6d0
 800220c:	0800b6f8 	.word	0x0800b6f8
 8002210:	0800b704 	.word	0x0800b704
 8002214:	0800b728 	.word	0x0800b728
 8002218:	0800b734 	.word	0x0800b734
 800221c:	0800b758 	.word	0x0800b758
 8002220:	0800b764 	.word	0x0800b764
 8002224:	200005f8 	.word	0x200005f8
 8002228:	20000664 	.word	0x20000664
 800222c:	40000800 	.word	0x40000800
 8002230:	2301      	movs	r3, #1
 8002232:	21ab      	movs	r1, #171	; 0xab
 8002234:	488b      	ldr	r0, [pc, #556]	; (8002464 <main+0x678>)
 8002236:	f001 fd8f 	bl	8003d58 <HAL_I2C_Master_Receive>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
								if(buf[0] != 0x00 || ret != HAL_OK ){
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <main+0x464>
 8002248:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <main+0x470>
									printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4884      	ldr	r0, [pc, #528]	; (8002468 <main+0x67c>)
 8002258:	f006 fcc4 	bl	8008be4 <iprintf>
								}
								printf("enable AGC \n");
 800225c:	4883      	ldr	r0, [pc, #524]	; (800246c <main+0x680>)
 800225e:	f006 fd47 	bl	8008cf0 <puts>




            // read biometric sensor
            buf[0] = 0x12;
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2212      	movs	r2, #18
 8002266:	701a      	strb	r2, [r3, #0]
            buf[1] = 0x01;
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	2201      	movs	r2, #1
 800226c:	705a      	strb	r2, [r3, #1]
            int heart_rate = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
            float blood_oxygen = 0;
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
            int status = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
            for(int i = 0; i < 40; ++i){
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002288:	e086      	b.n	8002398 <main+0x5ac>
            	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 800228a:	1d3a      	adds	r2, r7, #4
 800228c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2302      	movs	r3, #2
 8002294:	21aa      	movs	r1, #170	; 0xaa
 8002296:	4873      	ldr	r0, [pc, #460]	; (8002464 <main+0x678>)
 8002298:	f001 fc6a 	bl	8003b70 <HAL_I2C_Master_Transmit>
 800229c:	4603      	mov	r3, r0
 800229e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
				HAL_Delay(6);
 80022a2:	2006      	movs	r0, #6
 80022a4:	f001 f8d2 	bl	800344c <HAL_Delay>
				ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 10, 5000);
 80022a8:	1d3a      	adds	r2, r7, #4
 80022aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	230a      	movs	r3, #10
 80022b2:	21ab      	movs	r1, #171	; 0xab
 80022b4:	486b      	ldr	r0, [pc, #428]	; (8002464 <main+0x678>)
 80022b6:	f001 fd4f 	bl	8003d58 <HAL_I2C_Master_Receive>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
				printf("code: %d ", buf[0]);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	486a      	ldr	r0, [pc, #424]	; (8002470 <main+0x684>)
 80022c8:	f006 fc8c 	bl	8008be4 <iprintf>
				int heartRate = ((buf[1]) << 8);
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	785b      	ldrb	r3, [r3, #1]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				printf("%d %d %d %d\n", buf[1], buf[2], buf[3], buf[6]);
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	785b      	ldrb	r3, [r3, #1]
 80022da:	4619      	mov	r1, r3
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	789b      	ldrb	r3, [r3, #2]
 80022e0:	461a      	mov	r2, r3
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	78db      	ldrb	r3, [r3, #3]
 80022e6:	4618      	mov	r0, r3
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	799b      	ldrb	r3, [r3, #6]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4603      	mov	r3, r0
 80022f0:	4860      	ldr	r0, [pc, #384]	; (8002474 <main+0x688>)
 80022f2:	f006 fc77 	bl	8008be4 <iprintf>
				heartRate |= (buf[2]);
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	789b      	ldrb	r3, [r3, #2]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				heartRate = heartRate/10;
 8002306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <main+0x68c>)
 800230c:	fb82 1203 	smull	r1, r2, r2, r3
 8002310:	1092      	asrs	r2, r2, #2
 8002312:	17db      	asrs	r3, r3, #31
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				heart_rate = heartRate;
 800231a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800231e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
				// Confidence formatting
				int confidence = buf[3];
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	78db      	ldrb	r3, [r3, #3]
 8002326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

				//Blood oxygen level formatting
				int oxygen = (buf[4]) << 8;
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				oxygen += buf[5];
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	795b      	ldrb	r3, [r3, #5]
 8002338:	461a      	mov	r2, r3
 800233a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800233e:	4413      	add	r3, r2
 8002340:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				blood_oxygen = oxygen/10.0;
 8002344:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8002348:	f7fe f914 	bl	8000574 <__aeabi_i2d>
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <main+0x690>)
 8002352:	f7fe faa3 	bl	800089c <__aeabi_ddiv>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fc4b 	bl	8000bf8 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
				// blood_oxygen = oxygen;

				//"Machine State" - has a finger been detected?

				status = buf[6];
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	799b      	ldrb	r3, [r3, #6]
 800236c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				printf( "heartrate: %d, status: %d, blood_oxygen %f, confidence: %d\n\r", heartRate, status, oxygen, confidence );
 8002370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800237a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800237e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002382:	483f      	ldr	r0, [pc, #252]	; (8002480 <main+0x694>)
 8002384:	f006 fc2e 	bl	8008be4 <iprintf>

					}

				}
				*/
				HAL_Delay(100);
 8002388:	2064      	movs	r0, #100	; 0x64
 800238a:	f001 f85f 	bl	800344c <HAL_Delay>
            for(int i = 0; i < 40; ++i){
 800238e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002392:	3301      	adds	r3, #1
 8002394:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002398:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800239c:	2b27      	cmp	r3, #39	; 0x27
 800239e:	f77f af74 	ble.w	800228a <main+0x49e>


            }

            //get GPS
            float latitude = 0;
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            float longitude= 0;
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130



            if(status != 3){
 80023b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d01f      	beq.n	80023fa <main+0x60e>
            	sprintf(message_buffer, "SOS! An athlete has fallen and been injured at %d latitude %d longitude. There finger is off the vitals sensor but we measured: heart rate: %d blood oxygen: %d", latitude, longitude, heart_rate, blood_oxygen);
 80023ba:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80023be:	f7fe f8eb 	bl	8000598 <__aeabi_f2d>
 80023c2:	4680      	mov	r8, r0
 80023c4:	4689      	mov	r9, r1
 80023c6:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80023ca:	f7fe f8e5 	bl	8000598 <__aeabi_f2d>
 80023ce:	4604      	mov	r4, r0
 80023d0:	460d      	mov	r5, r1
 80023d2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80023d6:	f7fe f8df 	bl	8000598 <__aeabi_f2d>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	e9cd 4500 	strd	r4, r5, [sp]
 80023ec:	4642      	mov	r2, r8
 80023ee:	464b      	mov	r3, r9
 80023f0:	4924      	ldr	r1, [pc, #144]	; (8002484 <main+0x698>)
 80023f2:	4825      	ldr	r0, [pc, #148]	; (8002488 <main+0x69c>)
 80023f4:	f006 fc94 	bl	8008d20 <siprintf>
 80023f8:	e01e      	b.n	8002438 <main+0x64c>
            }
            else{
            	sprintf(message_buffer, "SOS! An athlete has fallen and been injured at %d latitude %d longitude. The vitals sensor measured: heart rate: %d blood oxygen: %d", latitude, longitude, heart_rate, blood_oxygen);
 80023fa:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80023fe:	f7fe f8cb 	bl	8000598 <__aeabi_f2d>
 8002402:	4680      	mov	r8, r0
 8002404:	4689      	mov	r9, r1
 8002406:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800240a:	f7fe f8c5 	bl	8000598 <__aeabi_f2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8002416:	f7fe f8bf 	bl	8000598 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	e9cd 4500 	strd	r4, r5, [sp]
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	4916      	ldr	r1, [pc, #88]	; (800248c <main+0x6a0>)
 8002432:	4815      	ldr	r0, [pc, #84]	; (8002488 <main+0x69c>)
 8002434:	f006 fc74 	bl	8008d20 <siprintf>
            }


            // send out message
            printf( "Here's the sos message: %s\n\r", message_buffer );
 8002438:	4913      	ldr	r1, [pc, #76]	; (8002488 <main+0x69c>)
 800243a:	4815      	ldr	r0, [pc, #84]	; (8002490 <main+0x6a4>)
 800243c:	f006 fbd2 	bl	8008be4 <iprintf>
            HAL_Delay( 1000 );
 8002440:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002444:	f001 f802 	bl	800344c <HAL_Delay>
            //sendSMS( &cell, message_buffer );
            fall_detected = 0;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <main+0x6a8>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
            SetupMPU(); /* reset MPU */
 800244e:	f7ff f9c1 	bl	80017d4 <SetupMPU>
            Beep_reset();
 8002452:	f7ff fca7 	bl	8001da4 <Beep_reset>
        if (fall_detected)
 8002456:	e69f      	b.n	8002198 <main+0x3ac>
        } // end while
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002458:	4618      	mov	r0, r3
 800245a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800245e:	46bd      	mov	sp, r7
 8002460:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002464:	20000740 	.word	0x20000740
 8002468:	0800b704 	.word	0x0800b704
 800246c:	0800b728 	.word	0x0800b728
 8002470:	0800b778 	.word	0x0800b778
 8002474:	0800b784 	.word	0x0800b784
 8002478:	66666667 	.word	0x66666667
 800247c:	40240000 	.word	0x40240000
 8002480:	0800b794 	.word	0x0800b794
 8002484:	0800b7d4 	.word	0x0800b7d4
 8002488:	2000081c 	.word	0x2000081c
 800248c:	0800b874 	.word	0x0800b874
 8002490:	0800b8fc 	.word	0x0800b8fc
 8002494:	200005f8 	.word	0x200005f8

08002498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b096      	sub	sp, #88	; 0x58
 800249c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	2244      	movs	r2, #68	; 0x44
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 fd26 	bl	8007ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ac:	463b      	mov	r3, r7
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024be:	f002 f871 	bl	80045a4 <HAL_PWREx_ControlVoltageScaling>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80024c8:	f000 fc0a 	bl	8002ce0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80024cc:	2310      	movs	r3, #16
 80024ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024d8:	2360      	movs	r3, #96	; 0x60
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024dc:	2300      	movs	r3, #0
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 f911 	bl	800470c <HAL_RCC_OscConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80024f0:	f000 fbf6 	bl	8002ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f4:	230f      	movs	r3, #15
 80024f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002508:	463b      	mov	r3, r7
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fd23 	bl	8004f58 <HAL_RCC_ClockConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002518:	f000 fbe2 	bl	8002ce0 <Error_Handler>
  }
}
 800251c:	bf00      	nop
 800251e:	3758      	adds	r7, #88	; 0x58
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_I2C1_Init+0x74>)
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <MX_I2C1_Init+0x78>)
 800252c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <MX_I2C1_Init+0x74>)
 8002530:	f640 6214 	movw	r2, #3604	; 0xe14
 8002534:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <MX_I2C1_Init+0x74>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <MX_I2C1_Init+0x74>)
 800253e:	2201      	movs	r2, #1
 8002540:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <MX_I2C1_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <MX_I2C1_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_I2C1_Init+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <MX_I2C1_Init+0x74>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_I2C1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <MX_I2C1_Init+0x74>)
 8002562:	f001 fa76 	bl	8003a52 <HAL_I2C_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800256c:	f000 fbb8 	bl	8002ce0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002570:	2100      	movs	r1, #0
 8002572:	4809      	ldr	r0, [pc, #36]	; (8002598 <MX_I2C1_Init+0x74>)
 8002574:	f001 ff5e 	bl	8004434 <HAL_I2CEx_ConfigAnalogFilter>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800257e:	f000 fbaf 	bl	8002ce0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002582:	2100      	movs	r1, #0
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <MX_I2C1_Init+0x74>)
 8002586:	f001 ffa0 	bl	80044ca <HAL_I2CEx_ConfigDigitalFilter>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002590:	f000 fba6 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000740 	.word	0x20000740
 800259c:	40005400 	.word	0x40005400

080025a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <MX_I2C3_Init+0x74>)
 80025a6:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <MX_I2C3_Init+0x78>)
 80025a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_I2C3_Init+0x74>)
 80025ac:	f640 6214 	movw	r2, #3604	; 0xe14
 80025b0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_I2C3_Init+0x74>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_I2C3_Init+0x74>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_I2C3_Init+0x74>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <MX_I2C3_Init+0x74>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_I2C3_Init+0x74>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <MX_I2C3_Init+0x74>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_I2C3_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80025dc:	480d      	ldr	r0, [pc, #52]	; (8002614 <MX_I2C3_Init+0x74>)
 80025de:	f001 fa38 	bl	8003a52 <HAL_I2C_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80025e8:	f000 fb7a 	bl	8002ce0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025ec:	2100      	movs	r1, #0
 80025ee:	4809      	ldr	r0, [pc, #36]	; (8002614 <MX_I2C3_Init+0x74>)
 80025f0:	f001 ff20 	bl	8004434 <HAL_I2CEx_ConfigAnalogFilter>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80025fa:	f000 fb71 	bl	8002ce0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80025fe:	2100      	movs	r1, #0
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_I2C3_Init+0x74>)
 8002602:	f001 ff62 	bl	80044ca <HAL_I2CEx_ConfigDigitalFilter>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800260c:	f000 fb68 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000618 	.word	0x20000618
 8002618:	40005c00 	.word	0x40005c00

0800261c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002622:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <MX_LPUART1_UART_Init+0x94>)
 8002624:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002664:	4811      	ldr	r0, [pc, #68]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002666:	f004 fc95 	bl	8006f94 <HAL_UART_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002670:	f000 fb36 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 8002678:	f005 fafe 	bl	8007c78 <HAL_UARTEx_SetTxFifoThreshold>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002682:	f000 fb2d 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002686:	2100      	movs	r1, #0
 8002688:	4808      	ldr	r0, [pc, #32]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 800268a:	f005 fb33 	bl	8007cf4 <HAL_UARTEx_SetRxFifoThreshold>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002694:	f000 fb24 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002698:	4804      	ldr	r0, [pc, #16]	; (80026ac <MX_LPUART1_UART_Init+0x90>)
 800269a:	f005 fab4 	bl	8007c06 <HAL_UARTEx_DisableFifoMode>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026a4:	f000 fb1c 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000078c 	.word	0x2000078c
 80026b0:	40008000 	.word	0x40008000

080026b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026b8:	4b22      	ldr	r3, [pc, #136]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <MX_USART3_UART_Init+0x94>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026f0:	4b14      	ldr	r3, [pc, #80]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026fc:	4811      	ldr	r0, [pc, #68]	; (8002744 <MX_USART3_UART_Init+0x90>)
 80026fe:	f004 fc49 	bl	8006f94 <HAL_UART_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002708:	f000 faea 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800270c:	2100      	movs	r1, #0
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_USART3_UART_Init+0x90>)
 8002710:	f005 fab2 	bl	8007c78 <HAL_UARTEx_SetTxFifoThreshold>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800271a:	f000 fae1 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800271e:	2100      	movs	r1, #0
 8002720:	4808      	ldr	r0, [pc, #32]	; (8002744 <MX_USART3_UART_Init+0x90>)
 8002722:	f005 fae7 	bl	8007cf4 <HAL_UARTEx_SetRxFifoThreshold>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800272c:	f000 fad8 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_USART3_UART_Init+0x90>)
 8002732:	f005 fa68 	bl	8007c06 <HAL_UARTEx_DisableFifoMode>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800273c:	f000 fad0 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200006b0 	.word	0x200006b0
 8002748:	40004800 	.word	0x40004800

0800274c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800276c:	463b      	mov	r3, r7
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	615a      	str	r2, [r3, #20]
 800277c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <MX_TIM4_Init+0xe8>)
 8002780:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <MX_TIM4_Init+0xec>)
 8002782:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <MX_TIM4_Init+0xe8>)
 8002786:	2200      	movs	r2, #0
 8002788:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <MX_TIM4_Init+0xe8>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <MX_TIM4_Init+0xe8>)
 8002792:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002796:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <MX_TIM4_Init+0xe8>)
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <MX_TIM4_Init+0xe8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027a4:	4823      	ldr	r0, [pc, #140]	; (8002834 <MX_TIM4_Init+0xe8>)
 80027a6:	f003 fba1 	bl	8005eec <HAL_TIM_Base_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80027b0:	f000 fa96 	bl	8002ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80027ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027be:	4619      	mov	r1, r3
 80027c0:	481c      	ldr	r0, [pc, #112]	; (8002834 <MX_TIM4_Init+0xe8>)
 80027c2:	f003 fe65 	bl	8006490 <HAL_TIM_ConfigClockSource>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80027cc:	f000 fa88 	bl	8002ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027d0:	4818      	ldr	r0, [pc, #96]	; (8002834 <MX_TIM4_Init+0xe8>)
 80027d2:	f003 fbe2 	bl	8005f9a <HAL_TIM_PWM_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80027dc:	f000 fa80 	bl	8002ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4811      	ldr	r0, [pc, #68]	; (8002834 <MX_TIM4_Init+0xe8>)
 80027f0:	f004 fb48 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80027fa:	f000 fa71 	bl	8002ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027fe:	2360      	movs	r3, #96	; 0x60
 8002800:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002808:	2302      	movs	r3, #2
 800280a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002810:	463b      	mov	r3, r7
 8002812:	2204      	movs	r2, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4807      	ldr	r0, [pc, #28]	; (8002834 <MX_TIM4_Init+0xe8>)
 8002818:	f003 fd26 	bl	8006268 <HAL_TIM_PWM_ConfigChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002822:	f000 fa5d 	bl	8002ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002826:	4803      	ldr	r0, [pc, #12]	; (8002834 <MX_TIM4_Init+0xe8>)
 8002828:	f000 fc30 	bl	800308c <HAL_TIM_MspPostInit>

}
 800282c:	bf00      	nop
 800282e:	3738      	adds	r7, #56	; 0x38
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000664 	.word	0x20000664
 8002838:	40000800 	.word	0x40000800

0800283c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08e      	sub	sp, #56	; 0x38
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002852:	4bb3      	ldr	r3, [pc, #716]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4ab2      	ldr	r2, [pc, #712]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002858:	f043 0310 	orr.w	r3, r3, #16
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4bb0      	ldr	r3, [pc, #704]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	623b      	str	r3, [r7, #32]
 8002868:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	4bad      	ldr	r3, [pc, #692]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4aac      	ldr	r2, [pc, #688]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002876:	4baa      	ldr	r3, [pc, #680]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002882:	4ba7      	ldr	r3, [pc, #668]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4aa6      	ldr	r2, [pc, #664]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002888:	f043 0320 	orr.w	r3, r3, #32
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4ba4      	ldr	r3, [pc, #656]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800289a:	4ba1      	ldr	r3, [pc, #644]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4aa0      	ldr	r2, [pc, #640]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a6:	4b9e      	ldr	r3, [pc, #632]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b2:	4b9b      	ldr	r3, [pc, #620]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4a9a      	ldr	r2, [pc, #616]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028be:	4b98      	ldr	r3, [pc, #608]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	4b95      	ldr	r3, [pc, #596]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ce:	4a94      	ldr	r2, [pc, #592]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d6:	4b92      	ldr	r3, [pc, #584]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e2:	4b8f      	ldr	r3, [pc, #572]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a8e      	ldr	r2, [pc, #568]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ee:	4b8c      	ldr	r3, [pc, #560]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80028fa:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	4a88      	ldr	r2, [pc, #544]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002906:	4b86      	ldr	r3, [pc, #536]	; (8002b20 <MX_GPIO_Init+0x2e4>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002912:	f001 feeb 	bl	80046ec <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800291c:	4881      	ldr	r0, [pc, #516]	; (8002b24 <MX_GPIO_Init+0x2e8>)
 800291e:	f001 f85d 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002928:	487f      	ldr	r0, [pc, #508]	; (8002b28 <MX_GPIO_Init+0x2ec>)
 800292a:	f001 f857 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800292e:	2200      	movs	r2, #0
 8002930:	2103      	movs	r1, #3
 8002932:	487e      	ldr	r0, [pc, #504]	; (8002b2c <MX_GPIO_Init+0x2f0>)
 8002934:	f001 f852 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002938:	230c      	movs	r3, #12
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002948:	230d      	movs	r3, #13
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	4619      	mov	r1, r3
 8002952:	4875      	ldr	r0, [pc, #468]	; (8002b28 <MX_GPIO_Init+0x2ec>)
 8002954:	f000 feb0 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002958:	2307      	movs	r3, #7
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295c:	2312      	movs	r3, #18
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002968:	2304      	movs	r3, #4
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800296c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002970:	4619      	mov	r1, r3
 8002972:	486c      	ldr	r0, [pc, #432]	; (8002b24 <MX_GPIO_Init+0x2e8>)
 8002974:	f000 fea0 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297c:	2302      	movs	r3, #2
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002988:	230d      	movs	r3, #13
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	4864      	ldr	r0, [pc, #400]	; (8002b24 <MX_GPIO_Init+0x2e8>)
 8002994:	f000 fe90 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002998:	233c      	movs	r3, #60	; 0x3c
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800299c:	230b      	movs	r3, #11
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a8:	4619      	mov	r1, r3
 80029aa:	4861      	ldr	r0, [pc, #388]	; (8002b30 <MX_GPIO_Init+0x2f4>)
 80029ac:	f000 fe84 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029b0:	2301      	movs	r3, #1
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029bc:	2300      	movs	r3, #0
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c0:	2301      	movs	r3, #1
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c8:	4619      	mov	r1, r3
 80029ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ce:	f000 fe73 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80029d2:	230a      	movs	r3, #10
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80029d6:	230b      	movs	r3, #11
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e8:	f000 fe66 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029ec:	23f0      	movs	r3, #240	; 0xf0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029fc:	2305      	movs	r3, #5
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a04:	4619      	mov	r1, r3
 8002a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a0a:	f000 fe55 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a26:	4619      	mov	r1, r3
 8002a28:	4842      	ldr	r0, [pc, #264]	; (8002b34 <MX_GPIO_Init+0x2f8>)
 8002a2a:	f000 fe45 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a32:	230b      	movs	r3, #11
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3e:	4619      	mov	r1, r3
 8002a40:	483c      	ldr	r0, [pc, #240]	; (8002b34 <MX_GPIO_Init+0x2f8>)
 8002a42:	f000 fe39 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002a46:	2344      	movs	r3, #68	; 0x44
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	4836      	ldr	r0, [pc, #216]	; (8002b34 <MX_GPIO_Init+0x2f8>)
 8002a5a:	f000 fe2d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a64:	2301      	movs	r3, #1
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a74:	4619      	mov	r1, r3
 8002a76:	482b      	ldr	r0, [pc, #172]	; (8002b24 <MX_GPIO_Init+0x2e8>)
 8002a78:	f000 fe1e 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE11
                           PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
 8002a7c:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	4619      	mov	r1, r3
 8002a98:	4823      	ldr	r0, [pc, #140]	; (8002b28 <MX_GPIO_Init+0x2ec>)
 8002a9a:	f000 fe0d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	481c      	ldr	r0, [pc, #112]	; (8002b28 <MX_GPIO_Init+0x2ec>)
 8002ab8:	f000 fdfe 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002abc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4813      	ldr	r0, [pc, #76]	; (8002b28 <MX_GPIO_Init+0x2ec>)
 8002ada:	f000 fded 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002af0:	2301      	movs	r3, #1
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	480e      	ldr	r0, [pc, #56]	; (8002b34 <MX_GPIO_Init+0x2f8>)
 8002afc:	f000 fddc 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002b00:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002b12:	230d      	movs	r3, #13
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	e00c      	b.n	8002b38 <MX_GPIO_Init+0x2fc>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	48001400 	.word	0x48001400
 8002b28:	48001000 	.word	0x48001000
 8002b2c:	48000c00 	.word	0x48000c00
 8002b30:	48000800 	.word	0x48000800
 8002b34:	48000400 	.word	0x48000400
 8002b38:	485d      	ldr	r0, [pc, #372]	; (8002cb0 <MX_GPIO_Init+0x474>)
 8002b3a:	f000 fdbd 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002b50:	230e      	movs	r3, #14
 8002b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4855      	ldr	r0, [pc, #340]	; (8002cb0 <MX_GPIO_Init+0x474>)
 8002b5c:	f000 fdac 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b60:	2340      	movs	r3, #64	; 0x40
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8002b70:	230d      	movs	r3, #13
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	484e      	ldr	r0, [pc, #312]	; (8002cb4 <MX_GPIO_Init+0x478>)
 8002b7c:	f000 fd9c 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b90:	2302      	movs	r3, #2
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4846      	ldr	r0, [pc, #280]	; (8002cb4 <MX_GPIO_Init+0x478>)
 8002b9c:	f000 fd8c 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ba0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bba:	4619      	mov	r1, r3
 8002bbc:	483d      	ldr	r0, [pc, #244]	; (8002cb4 <MX_GPIO_Init+0x478>)
 8002bbe:	f000 fd7b 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002bc2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bd4:	230a      	movs	r3, #10
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be2:	f000 fd69 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfe:	f000 fd5b 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c02:	2303      	movs	r3, #3
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c06:	2301      	movs	r3, #1
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c16:	4619      	mov	r1, r3
 8002c18:	4827      	ldr	r0, [pc, #156]	; (8002cb8 <MX_GPIO_Init+0x47c>)
 8002c1a:	f000 fd4d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c2e:	230c      	movs	r3, #12
 8002c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c36:	4619      	mov	r1, r3
 8002c38:	481f      	ldr	r0, [pc, #124]	; (8002cb8 <MX_GPIO_Init+0x47c>)
 8002c3a:	f000 fd3d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8002c3e:	2368      	movs	r3, #104	; 0x68
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c4e:	2307      	movs	r3, #7
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	4619      	mov	r1, r3
 8002c58:	4817      	ldr	r0, [pc, #92]	; (8002cb8 <MX_GPIO_Init+0x47c>)
 8002c5a:	f000 fd2d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c5e:	2310      	movs	r3, #16
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	4811      	ldr	r0, [pc, #68]	; (8002cb8 <MX_GPIO_Init+0x47c>)
 8002c74:	f000 fd20 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c78:	2338      	movs	r3, #56	; 0x38
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c88:	2306      	movs	r3, #6
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	4807      	ldr	r0, [pc, #28]	; (8002cb0 <MX_GPIO_Init+0x474>)
 8002c94:	f000 fd10 	bl	80036b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	200a      	movs	r0, #10
 8002c9e:	f000 fcd4 	bl	800364a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ca2:	200a      	movs	r0, #10
 8002ca4:	f000 fced 	bl	8003682 <HAL_NVIC_EnableIRQ>

}
 8002ca8:	bf00      	nop
 8002caa:	3738      	adds	r7, #56	; 0x38
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	48000400 	.word	0x48000400
 8002cb4:	48000800 	.word	0x48000800
 8002cb8:	48000c00 	.word	0x48000c00

08002cbc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002cc4:	1d39      	adds	r1, r7, #4
 8002cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4803      	ldr	r0, [pc, #12]	; (8002cdc <__io_putchar+0x20>)
 8002cce:	f004 f9b1 	bl	8007034 <HAL_UART_Transmit>
  return ch;
 8002cd2:	687b      	ldr	r3, [r7, #4]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000078c 	.word	0x2000078c

08002ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce4:	b672      	cpsid	i
}
 8002ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <Error_Handler+0x8>
	...

08002cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_MspInit+0x44>)
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_MspInit+0x44>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_MspInit+0x44>)
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_MspInit+0x44>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <HAL_MspInit+0x44>)
 8002d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_MspInit+0x44>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b0b0      	sub	sp, #192	; 0xc0
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d4c:	f107 0318 	add.w	r3, r7, #24
 8002d50:	2294      	movs	r2, #148	; 0x94
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f005 f8cf 	bl	8007ef8 <memset>
  if(hi2c->Instance==I2C1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a42      	ldr	r2, [pc, #264]	; (8002e68 <HAL_I2C_MspInit+0x134>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d13c      	bne.n	8002dde <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d6c:	f107 0318 	add.w	r3, r7, #24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fba3 	bl	80054bc <HAL_RCCEx_PeriphCLKConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002d7c:	f7ff ffb0 	bl	8002ce0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002d86:	f043 0302 	orr.w	r3, r3, #2
 8002d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da0:	2312      	movs	r3, #18
 8002da2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002db2:	2304      	movs	r3, #4
 8002db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	482c      	ldr	r0, [pc, #176]	; (8002e70 <HAL_I2C_MspInit+0x13c>)
 8002dc0:	f000 fc7a 	bl	80036b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002dca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dce:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd0:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ddc:	e040      	b.n	8002e60 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <HAL_I2C_MspInit+0x140>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d13b      	bne.n	8002e60 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002dee:	2300      	movs	r3, #0
 8002df0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df2:	f107 0318 	add.w	r3, r7, #24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 fb60 	bl	80054bc <HAL_RCCEx_PeriphCLKConfig>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8002e02:	f7ff ff6d 	bl	8002ce0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e24:	2312      	movs	r3, #18
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e30:	2303      	movs	r3, #3
 8002e32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e36:	2304      	movs	r3, #4
 8002e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e40:	4619      	mov	r1, r3
 8002e42:	480d      	ldr	r0, [pc, #52]	; (8002e78 <HAL_I2C_MspInit+0x144>)
 8002e44:	f000 fc38 	bl	80036b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e52:	6593      	str	r3, [r2, #88]	; 0x58
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_I2C_MspInit+0x138>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
}
 8002e60:	bf00      	nop
 8002e62:	37c0      	adds	r7, #192	; 0xc0
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40005400 	.word	0x40005400
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	48000400 	.word	0x48000400
 8002e74:	40005c00 	.word	0x40005c00
 8002e78:	48000800 	.word	0x48000800

08002e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b0b0      	sub	sp, #192	; 0xc0
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	2294      	movs	r2, #148	; 0x94
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f005 f82b 	bl	8007ef8 <memset>
  if(huart->Instance==LPUART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_UART_MspInit+0x138>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d13e      	bne.n	8002f2a <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002eac:	2320      	movs	r3, #32
 8002eae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb4:	f107 0318 	add.w	r3, r7, #24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 faff 	bl	80054bc <HAL_RCCEx_PeriphCLKConfig>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ec4:	f7ff ff0c 	bl	8002ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	4a3a      	ldr	r2, [pc, #232]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee0:	4b35      	ldr	r3, [pc, #212]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee4:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eec:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8002ef8:	f001 fbf8 	bl	80046ec <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002efc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f04:	2302      	movs	r3, #2
 8002f06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002f16:	2308      	movs	r3, #8
 8002f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002f20:	4619      	mov	r1, r3
 8002f22:	4826      	ldr	r0, [pc, #152]	; (8002fbc <HAL_UART_MspInit+0x140>)
 8002f24:	f000 fbc8 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f28:	e040      	b.n	8002fac <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <HAL_UART_MspInit+0x144>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d13b      	bne.n	8002fac <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f34:	2304      	movs	r3, #4
 8002f36:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f3c:	f107 0318 	add.w	r3, r7, #24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f002 fabb 	bl	80054bc <HAL_RCCEx_PeriphCLKConfig>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002f4c:	f7ff fec8 	bl	8002ce0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	4a12      	ldr	r2, [pc, #72]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002f6e:	f043 0308 	orr.w	r3, r3, #8
 8002f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_UART_MspInit+0x13c>)
 8002f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f94:	2303      	movs	r3, #3
 8002f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4807      	ldr	r0, [pc, #28]	; (8002fc4 <HAL_UART_MspInit+0x148>)
 8002fa8:	f000 fb86 	bl	80036b8 <HAL_GPIO_Init>
}
 8002fac:	bf00      	nop
 8002fae:	37c0      	adds	r7, #192	; 0xc0
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40008000 	.word	0x40008000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	48001800 	.word	0x48001800
 8002fc0:	40004800 	.word	0x40004800
 8002fc4:	48000c00 	.word	0x48000c00

08002fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a25      	ldr	r2, [pc, #148]	; (800307c <HAL_TIM_Base_MspInit+0xb4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d144      	bne.n	8003074 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fea:	4b25      	ldr	r3, [pc, #148]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	4a24      	ldr	r2, [pc, #144]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4a18      	ldr	r2, [pc, #96]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8003020:	f043 0310 	orr.w	r3, r3, #16
 8003024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <HAL_TIM_Base_MspInit+0xb8>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    PE0     ------> TIM4_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003032:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003044:	2302      	movs	r3, #2
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	480d      	ldr	r0, [pc, #52]	; (8003084 <HAL_TIM_Base_MspInit+0xbc>)
 8003050:	f000 fb32 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003054:	2301      	movs	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	2300      	movs	r3, #0
 8003062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003064:	2302      	movs	r3, #2
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	4806      	ldr	r0, [pc, #24]	; (8003088 <HAL_TIM_Base_MspInit+0xc0>)
 8003070:	f000 fb22 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003074:	bf00      	nop
 8003076:	3728      	adds	r7, #40	; 0x28
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40000800 	.word	0x40000800
 8003080:	40021000 	.word	0x40021000
 8003084:	48000c00 	.word	0x48000c00
 8003088:	48001000 	.word	0x48001000

0800308c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 030c 	add.w	r3, r7, #12
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <HAL_TIM_MspPostInit+0x64>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d11b      	bne.n	80030e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_TIM_MspPostInit+0x68>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <HAL_TIM_MspPostInit+0x68>)
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_TIM_MspPostInit+0x68>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030d6:	2302      	movs	r3, #2
 80030d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	4619      	mov	r1, r3
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <HAL_TIM_MspPostInit+0x6c>)
 80030e2:	f000 fae9 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	48000400 	.word	0x48000400

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <NMI_Handler+0x4>

08003102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <HardFault_Handler+0x4>

08003108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <MemManage_Handler+0x4>

0800310e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <BusFault_Handler+0x4>

08003114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <UsageFault_Handler+0x4>

0800311a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003148:	f000 f960 	bl	800340c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}

08003150 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	MPU_Interrupt();
 8003154:	f7fe fd64 	bl	8001c20 <MPU_Interrupt>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003158:	2010      	movs	r0, #16
 800315a:	f000 fc57 	bl	8003a0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}

08003162 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
	return 1;
 8003166:	2301      	movs	r3, #1
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_kill>:

int _kill(int pid, int sig)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800317c:	f004 fe64 	bl	8007e48 <__errno>
 8003180:	4603      	mov	r3, r0
 8003182:	2216      	movs	r2, #22
 8003184:	601a      	str	r2, [r3, #0]
	return -1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <_exit>:

void _exit (int status)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800319a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffe7 	bl	8003172 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031a4:	e7fe      	b.n	80031a4 <_exit+0x12>

080031a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e00a      	b.n	80031ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031b8:	f3af 8000 	nop.w
 80031bc:	4601      	mov	r1, r0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	60ba      	str	r2, [r7, #8]
 80031c4:	b2ca      	uxtb	r2, r1
 80031c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3301      	adds	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	dbf0      	blt.n	80031b8 <_read+0x12>
	}

return len;
 80031d6:	687b      	ldr	r3, [r7, #4]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e009      	b.n	8003206 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	60ba      	str	r2, [r7, #8]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fd5e 	bl	8002cbc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	3301      	adds	r3, #1
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	dbf1      	blt.n	80031f2 <_write+0x12>
	}
	return len;
 800320e:	687b      	ldr	r3, [r7, #4]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <_close>:

int _close(int file)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	return -1;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003240:	605a      	str	r2, [r3, #4]
	return 0;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <_isatty>:

int _isatty(int file)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	return 1;
 8003258:	2301      	movs	r3, #1
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	return 0;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <_sbrk+0x5c>)
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <_sbrk+0x60>)
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <_sbrk+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <_sbrk+0x64>)
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <_sbrk+0x68>)
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <_sbrk+0x64>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d207      	bcs.n	80032c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b0:	f004 fdca 	bl	8007e48 <__errno>
 80032b4:	4603      	mov	r3, r0
 80032b6:	220c      	movs	r2, #12
 80032b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032be:	e009      	b.n	80032d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <_sbrk+0x64>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <_sbrk+0x64>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <_sbrk+0x64>)
 80032d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d2:	68fb      	ldr	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200a0000 	.word	0x200a0000
 80032e0:	00000400 	.word	0x00000400
 80032e4:	2000060c 	.word	0x2000060c
 80032e8:	20000c30 	.word	0x20000c30

080032ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <SystemInit+0x20>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	4a05      	ldr	r2, [pc, #20]	; (800330c <SystemInit+0x20>)
 80032f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003300:	bf00      	nop
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <Reset_Handler>:
 8003310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003348 <LoopForever+0x2>
 8003314:	f7ff ffea 	bl	80032ec <SystemInit>
 8003318:	480c      	ldr	r0, [pc, #48]	; (800334c <LoopForever+0x6>)
 800331a:	490d      	ldr	r1, [pc, #52]	; (8003350 <LoopForever+0xa>)
 800331c:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <LoopForever+0xe>)
 800331e:	2300      	movs	r3, #0
 8003320:	e002      	b.n	8003328 <LoopCopyDataInit>

08003322 <CopyDataInit>:
 8003322:	58d4      	ldr	r4, [r2, r3]
 8003324:	50c4      	str	r4, [r0, r3]
 8003326:	3304      	adds	r3, #4

08003328 <LoopCopyDataInit>:
 8003328:	18c4      	adds	r4, r0, r3
 800332a:	428c      	cmp	r4, r1
 800332c:	d3f9      	bcc.n	8003322 <CopyDataInit>
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <LoopForever+0x12>)
 8003330:	4c0a      	ldr	r4, [pc, #40]	; (800335c <LoopForever+0x16>)
 8003332:	2300      	movs	r3, #0
 8003334:	e001      	b.n	800333a <LoopFillZerobss>

08003336 <FillZerobss>:
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	3204      	adds	r2, #4

0800333a <LoopFillZerobss>:
 800333a:	42a2      	cmp	r2, r4
 800333c:	d3fb      	bcc.n	8003336 <FillZerobss>
 800333e:	f004 fdaf 	bl	8007ea0 <__libc_init_array>
 8003342:	f7fe fd53 	bl	8001dec <main>

08003346 <LoopForever>:
 8003346:	e7fe      	b.n	8003346 <LoopForever>
 8003348:	200a0000 	.word	0x200a0000
 800334c:	20000000 	.word	0x20000000
 8003350:	200001dc 	.word	0x200001dc
 8003354:	0800bda8 	.word	0x0800bda8
 8003358:	200001dc 	.word	0x200001dc
 800335c:	20000c30 	.word	0x20000c30

08003360 <ADC1_IRQHandler>:
 8003360:	e7fe      	b.n	8003360 <ADC1_IRQHandler>

08003362 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800336c:	2003      	movs	r0, #3
 800336e:	f000 f961 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003372:	2000      	movs	r0, #0
 8003374:	f000 f80e 	bl	8003394 <HAL_InitTick>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	e001      	b.n	8003388 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003384:	f7ff fcb2 	bl	8002cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003388:	79fb      	ldrb	r3, [r7, #7]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_InitTick+0x6c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033a8:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_InitTick+0x70>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_InitTick+0x6c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f96d 	bl	800369e <HAL_SYSTICK_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d809      	bhi.n	80033e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d0:	2200      	movs	r2, #0
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033d8:	f000 f937 	bl	800364a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_InitTick+0x74>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e007      	b.n	80033f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e004      	b.n	80033f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e001      	b.n	80033f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x20>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_IncTick+0x24>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4413      	add	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_IncTick+0x24>)
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	20000008 	.word	0x20000008
 8003430:	20000c1c 	.word	0x20000c1c

08003434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return uwTick;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_GetTick+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000c1c 	.word	0x20000c1c

0800344c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff ffee 	bl	8003434 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003464:	d005      	beq.n	8003472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_Delay+0x44>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003472:	bf00      	nop
 8003474:	f7ff ffde 	bl	8003434 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f7      	bhi.n	8003474 <HAL_Delay+0x28>
  {
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000008 	.word	0x20000008

08003494 <__NVIC_SetPriorityGrouping>:
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	; (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff29 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff3e 	bl	80034dc <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff8e 	bl	8003588 <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5d 	bl	8003534 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff31 	bl	80034f8 <__NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffa2 	bl	80035f0 <SysTick_Config>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	e166      	b.n	8003996 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8158 	beq.w	8003990 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d005      	beq.n	80036f8 <HAL_GPIO_Init+0x40>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d130      	bne.n	800375a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	2203      	movs	r2, #3
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800372e:	2201      	movs	r2, #1
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 0201 	and.w	r2, r3, #1
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b03      	cmp	r3, #3
 8003764:	d017      	beq.n	8003796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4013      	ands	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d123      	bne.n	80037ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80b2 	beq.w	8003990 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382c:	4b61      	ldr	r3, [pc, #388]	; (80039b4 <HAL_GPIO_Init+0x2fc>)
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	4a60      	ldr	r2, [pc, #384]	; (80039b4 <HAL_GPIO_Init+0x2fc>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6613      	str	r3, [r2, #96]	; 0x60
 8003838:	4b5e      	ldr	r3, [pc, #376]	; (80039b4 <HAL_GPIO_Init+0x2fc>)
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003844:	4a5c      	ldr	r2, [pc, #368]	; (80039b8 <HAL_GPIO_Init+0x300>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800386e:	d02b      	beq.n	80038c8 <HAL_GPIO_Init+0x210>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a52      	ldr	r2, [pc, #328]	; (80039bc <HAL_GPIO_Init+0x304>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d025      	beq.n	80038c4 <HAL_GPIO_Init+0x20c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_GPIO_Init+0x308>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d01f      	beq.n	80038c0 <HAL_GPIO_Init+0x208>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a50      	ldr	r2, [pc, #320]	; (80039c4 <HAL_GPIO_Init+0x30c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d019      	beq.n	80038bc <HAL_GPIO_Init+0x204>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a4f      	ldr	r2, [pc, #316]	; (80039c8 <HAL_GPIO_Init+0x310>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_GPIO_Init+0x200>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a4e      	ldr	r2, [pc, #312]	; (80039cc <HAL_GPIO_Init+0x314>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00d      	beq.n	80038b4 <HAL_GPIO_Init+0x1fc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_GPIO_Init+0x318>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <HAL_GPIO_Init+0x1f8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_GPIO_Init+0x31c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_GPIO_Init+0x1f4>
 80038a8:	2307      	movs	r3, #7
 80038aa:	e00e      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038ac:	2308      	movs	r3, #8
 80038ae:	e00c      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038b0:	2306      	movs	r3, #6
 80038b2:	e00a      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038b4:	2305      	movs	r3, #5
 80038b6:	e008      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038b8:	2304      	movs	r3, #4
 80038ba:	e006      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038bc:	2303      	movs	r3, #3
 80038be:	e004      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e002      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_GPIO_Init+0x212>
 80038c8:	2300      	movs	r3, #0
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	f002 0203 	and.w	r2, r2, #3
 80038d0:	0092      	lsls	r2, r2, #2
 80038d2:	4093      	lsls	r3, r2
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038da:	4937      	ldr	r1, [pc, #220]	; (80039b8 <HAL_GPIO_Init+0x300>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_GPIO_Init+0x320>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <HAL_GPIO_Init+0x320>)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_GPIO_Init+0x320>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003936:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_GPIO_Init+0x320>)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_GPIO_Init+0x320>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4013      	ands	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <HAL_GPIO_Init+0x320>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_GPIO_Init+0x320>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_GPIO_Init+0x320>)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	3301      	adds	r3, #1
 8003994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f ae91 	bne.w	80036c8 <HAL_GPIO_Init+0x10>
  }
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010000 	.word	0x40010000
 80039bc:	48000400 	.word	0x48000400
 80039c0:	48000800 	.word	0x48000800
 80039c4:	48000c00 	.word	0x48000c00
 80039c8:	48001000 	.word	0x48001000
 80039cc:	48001400 	.word	0x48001400
 80039d0:	48001800 	.word	0x48001800
 80039d4:	48001c00 	.word	0x48001c00
 80039d8:	40010400 	.word	0x40010400

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f8:	e002      	b.n	8003a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a22:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f806 	bl	8003a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40010400 	.word	0x40010400

08003a3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e081      	b.n	8003b68 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff f95b 	bl	8002d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	; 0x24
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aa2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	e006      	b.n	8003ada <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ad8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d104      	bne.n	8003aec <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69d9      	ldr	r1, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	817b      	strh	r3, [r7, #10]
 8003b80:	4613      	mov	r3, r2
 8003b82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	f040 80da 	bne.w	8003d46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_I2C_Master_Transmit+0x30>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e0d3      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1d8>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ba8:	f7ff fc44 	bl	8003434 <HAL_GetTick>
 8003bac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2319      	movs	r3, #25
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f9e6 	bl	8003f8c <I2C_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0be      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2221      	movs	r2, #33	; 0x21
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	893a      	ldrh	r2, [r7, #8]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2bff      	cmp	r3, #255	; 0xff
 8003bfa:	d90e      	bls.n	8003c1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	22ff      	movs	r2, #255	; 0xff
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	4b51      	ldr	r3, [pc, #324]	; (8003d50 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 fbdc 	bl	80043d0 <I2C_TransferConfig>
 8003c18:	e06c      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	8979      	ldrh	r1, [r7, #10]
 8003c2c:	4b48      	ldr	r3, [pc, #288]	; (8003d50 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fbcb 	bl	80043d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003c3a:	e05b      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	6a39      	ldr	r1, [r7, #32]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f9e3 	bl	800400c <I2C_WaitOnTXISFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e07b      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d034      	beq.n	8003cf4 <HAL_I2C_Master_Transmit+0x184>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d130      	bne.n	8003cf4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f975 	bl	8003f8c <I2C_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e04d      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2bff      	cmp	r3, #255	; 0xff
 8003cb4:	d90e      	bls.n	8003cd4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	22ff      	movs	r2, #255	; 0xff
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 fb7f 	bl	80043d0 <I2C_TransferConfig>
 8003cd2:	e00f      	b.n	8003cf4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	8979      	ldrh	r1, [r7, #10]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fb6e 	bl	80043d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d19e      	bne.n	8003c3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	6a39      	ldr	r1, [r7, #32]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f9c2 	bl	800408c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01a      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2220      	movs	r2, #32
 8003d18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_I2C_Master_Transmit+0x1e4>)
 8003d26:	400b      	ands	r3, r1
 8003d28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	80002000 	.word	0x80002000
 8003d54:	fe00e800 	.word	0xfe00e800

08003d58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	461a      	mov	r2, r3
 8003d64:	460b      	mov	r3, r1
 8003d66:	817b      	strh	r3, [r7, #10]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	f040 80db 	bne.w	8003f30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_I2C_Master_Receive+0x30>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e0d4      	b.n	8003f32 <HAL_I2C_Master_Receive+0x1da>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d90:	f7ff fb50 	bl	8003434 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2319      	movs	r3, #25
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8f2 	bl	8003f8c <I2C_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0bf      	b.n	8003f32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2222      	movs	r2, #34	; 0x22
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	893a      	ldrh	r2, [r7, #8]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2bff      	cmp	r3, #255	; 0xff
 8003de2:	d90e      	bls.n	8003e02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	22ff      	movs	r2, #255	; 0xff
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	8979      	ldrh	r1, [r7, #10]
 8003df2:	4b52      	ldr	r3, [pc, #328]	; (8003f3c <HAL_I2C_Master_Receive+0x1e4>)
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fae8 	bl	80043d0 <I2C_TransferConfig>
 8003e00:	e06d      	b.n	8003ede <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	8979      	ldrh	r1, [r7, #10]
 8003e14:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <HAL_I2C_Master_Receive+0x1e4>)
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fad7 	bl	80043d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003e22:	e05c      	b.n	8003ede <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	6a39      	ldr	r1, [r7, #32]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f96b 	bl	8004104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e07c      	b.n	8003f32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d034      	beq.n	8003ede <HAL_I2C_Master_Receive+0x186>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d130      	bne.n	8003ede <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f880 	bl	8003f8c <I2C_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e04d      	b.n	8003f32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2bff      	cmp	r3, #255	; 0xff
 8003e9e:	d90e      	bls.n	8003ebe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	22ff      	movs	r2, #255	; 0xff
 8003ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	8979      	ldrh	r1, [r7, #10]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fa8a 	bl	80043d0 <I2C_TransferConfig>
 8003ebc:	e00f      	b.n	8003ede <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	8979      	ldrh	r1, [r7, #10]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fa79 	bl	80043d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d19d      	bne.n	8003e24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	6a39      	ldr	r1, [r7, #32]
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 f8cd 	bl	800408c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e01a      	b.n	8003f32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2220      	movs	r2, #32
 8003f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_I2C_Master_Receive+0x1e8>)
 8003f10:	400b      	ands	r3, r1
 8003f12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	80002400 	.word	0x80002400
 8003f40:	fe00e800 	.word	0xfe00e800

08003f44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d103      	bne.n	8003f62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d007      	beq.n	8003f80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	619a      	str	r2, [r3, #24]
  }
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f9c:	e022      	b.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa4:	d01e      	beq.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7ff fa45 	bl	8003434 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d113      	bne.n	8003fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e00f      	b.n	8004004 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4013      	ands	r3, r2
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d0cd      	beq.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004018:	e02c      	b.n	8004074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f8ea 	bl	80041f8 <I2C_IsErrorOccurred>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e02a      	b.n	8004084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004034:	d01e      	beq.n	8004074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004036:	f7ff f9fd 	bl	8003434 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d113      	bne.n	8004074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	f043 0220 	orr.w	r2, r3, #32
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e007      	b.n	8004084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d1cb      	bne.n	800401a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004098:	e028      	b.n	80040ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f8aa 	bl	80041f8 <I2C_IsErrorOccurred>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e026      	b.n	80040fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7ff f9c1 	bl	8003434 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d113      	bne.n	80040ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e007      	b.n	80040fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d1cf      	bne.n	800409a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004110:	e064      	b.n	80041dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f86e 	bl	80041f8 <I2C_IsErrorOccurred>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e062      	b.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b20      	cmp	r3, #32
 8004132:	d138      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b04      	cmp	r3, #4
 8004140:	d105      	bne.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e04e      	b.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d107      	bne.n	800416c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2210      	movs	r2, #16
 8004162:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2204      	movs	r2, #4
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
 800416a:	e002      	b.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2220      	movs	r2, #32
 8004178:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b1b      	ldr	r3, [pc, #108]	; (80041f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004186:	400b      	ands	r3, r1
 8004188:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e022      	b.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7ff f945 	bl	8003434 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10f      	bne.n	80041dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e007      	b.n	80041ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d193      	bne.n	8004112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	fe00e800 	.word	0xfe00e800

080041f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	d075      	beq.n	8004310 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2210      	movs	r2, #16
 800422a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800422c:	e056      	b.n	80042dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004234:	d052      	beq.n	80042dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004236:	f7ff f8fd 	bl	8003434 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d302      	bcc.n	800424c <I2C_IsErrorOccurred+0x54>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d147      	bne.n	80042dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800425e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426e:	d12e      	bne.n	80042ce <I2C_IsErrorOccurred+0xd6>
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004276:	d02a      	beq.n	80042ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004278:	7cfb      	ldrb	r3, [r7, #19]
 800427a:	2b20      	cmp	r3, #32
 800427c:	d027      	beq.n	80042ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800428e:	f7ff f8d1 	bl	8003434 <HAL_GetTick>
 8004292:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004294:	e01b      	b.n	80042ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004296:	f7ff f8cd 	bl	8003434 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b19      	cmp	r3, #25
 80042a2:	d914      	bls.n	80042ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d1dc      	bne.n	8004296 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d003      	beq.n	80042f2 <I2C_IsErrorOccurred+0xfa>
 80042ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d09d      	beq.n	800422e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d103      	bne.n	8004302 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2220      	movs	r2, #32
 8004300:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f043 0304 	orr.w	r3, r3, #4
 8004308:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004332:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00b      	beq.n	800435c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f043 0308 	orr.w	r3, r3, #8
 800434a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f043 0302 	orr.w	r3, r3, #2
 800436c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004376:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800437e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01c      	beq.n	80043c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff fddc 	bl	8003f44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <I2C_IsErrorOccurred+0x1d4>)
 8004398:	400b      	ands	r3, r1
 800439a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	fe00e800 	.word	0xfe00e800

080043d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	817b      	strh	r3, [r7, #10]
 80043de:	4613      	mov	r3, r2
 80043e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043e8:	7a7b      	ldrb	r3, [r7, #9]
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	0d5b      	lsrs	r3, r3, #21
 800440a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <I2C_TransferConfig+0x60>)
 8004410:	430b      	orrs	r3, r1
 8004412:	43db      	mvns	r3, r3
 8004414:	ea02 0103 	and.w	r1, r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	03ff63ff 	.word	0x03ff63ff

08004434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b20      	cmp	r3, #32
 8004448:	d138      	bne.n	80044bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004454:	2302      	movs	r3, #2
 8004456:	e032      	b.n	80044be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d139      	bne.n	8004554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e033      	b.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2224      	movs	r2, #36	; 0x24
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800451c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004574:	d102      	bne.n	800457c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800457a:	e00b      	b.n	8004594 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800457c:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458a:	d102      	bne.n	8004592 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800458c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004590:	e000      	b.n	8004594 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004592:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40007000 	.word	0x40007000

080045a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d141      	bne.n	8004636 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045b2:	4b4b      	ldr	r3, [pc, #300]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045be:	d131      	bne.n	8004624 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80045c0:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045c6:	4a46      	ldr	r2, [pc, #280]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045d8:	4a41      	ldr	r2, [pc, #260]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80045e0:	4b40      	ldr	r3, [pc, #256]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2232      	movs	r2, #50	; 0x32
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	0c9b      	lsrs	r3, r3, #18
 80045f2:	3301      	adds	r3, #1
 80045f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f6:	e002      	b.n	80045fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045fe:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800460a:	d102      	bne.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f2      	bne.n	80045f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004612:	4b33      	ldr	r3, [pc, #204]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d158      	bne.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e057      	b.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462a:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004634:	e04d      	b.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463c:	d141      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800463e:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d131      	bne.n	80046b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800464c:	4b24      	ldr	r3, [pc, #144]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004652:	4a23      	ldr	r2, [pc, #140]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800466a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2232      	movs	r2, #50	; 0x32
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	4a1c      	ldr	r2, [pc, #112]	; (80046e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	0c9b      	lsrs	r3, r3, #18
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004682:	e002      	b.n	800468a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b01      	subs	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468a:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004696:	d102      	bne.n	800469e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f2      	bne.n	8004684 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046aa:	d112      	bne.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e011      	b.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c0:	e007      	b.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046ca:	4a05      	ldr	r2, [pc, #20]	; (80046e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40007000 	.word	0x40007000
 80046e4:	20000000 	.word	0x20000000
 80046e8:	431bde83 	.word	0x431bde83

080046ec <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_PWREx_EnableVddIO2+0x1c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a04      	ldr	r2, [pc, #16]	; (8004708 <HAL_PWREx_EnableVddIO2+0x1c>)
 80046f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fa:	6053      	str	r3, [r2, #4]
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40007000 	.word	0x40007000

0800470c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f000 bc16 	b.w	8004f4c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004720:	4ba0      	ldr	r3, [pc, #640]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 030c 	and.w	r3, r3, #12
 8004728:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800472a:	4b9e      	ldr	r3, [pc, #632]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80e4 	beq.w	800490a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_RCC_OscConfig+0x4c>
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	f040 808b 	bne.w	8004866 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b01      	cmp	r3, #1
 8004754:	f040 8087 	bne.w	8004866 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004758:	4b92      	ldr	r3, [pc, #584]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x64>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e3ed      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	4b8b      	ldr	r3, [pc, #556]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_RCC_OscConfig+0x7e>
 8004780:	4b88      	ldr	r3, [pc, #544]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004788:	e005      	b.n	8004796 <HAL_RCC_OscConfig+0x8a>
 800478a:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800478c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004790:	091b      	lsrs	r3, r3, #4
 8004792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004796:	4293      	cmp	r3, r2
 8004798:	d223      	bcs.n	80047e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fdca 	bl	8005338 <RCC_SetFlashLatencyFromMSIRange>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e3ce      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047ae:	4b7d      	ldr	r3, [pc, #500]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047b4:	f043 0308 	orr.w	r3, r3, #8
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	4b7a      	ldr	r3, [pc, #488]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4977      	ldr	r1, [pc, #476]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047cc:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	4972      	ldr	r1, [pc, #456]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	604b      	str	r3, [r1, #4]
 80047e0:	e025      	b.n	800482e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047e2:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a6f      	ldr	r2, [pc, #444]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	496a      	ldr	r1, [pc, #424]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004800:	4b68      	ldr	r3, [pc, #416]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	4965      	ldr	r1, [pc, #404]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fd8a 	bl	8005338 <RCC_SetFlashLatencyFromMSIRange>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e38e      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800482e:	f000 fcbf 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b5b      	ldr	r3, [pc, #364]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	495a      	ldr	r1, [pc, #360]	; (80049a8 <HAL_RCC_OscConfig+0x29c>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_RCC_OscConfig+0x2a0>)
 800484c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800484e:	4b58      	ldr	r3, [pc, #352]	; (80049b0 <HAL_RCC_OscConfig+0x2a4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fd9e 	bl	8003394 <HAL_InitTick>
 8004858:	4603      	mov	r3, r0
 800485a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800485c:	7bfb      	ldrb	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d052      	beq.n	8004908 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	e372      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d032      	beq.n	80048d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800486e:	4b4d      	ldr	r3, [pc, #308]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a4c      	ldr	r2, [pc, #304]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800487a:	f7fe fddb 	bl	8003434 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004882:	f7fe fdd7 	bl	8003434 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e35b      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004894:	4b43      	ldr	r3, [pc, #268]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a0:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048a6:	f043 0308 	orr.w	r3, r3, #8
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	493a      	ldr	r1, [pc, #232]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	4935      	ldr	r1, [pc, #212]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
 80048d2:	e01a      	b.n	800490a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048d4:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a32      	ldr	r2, [pc, #200]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e0:	f7fe fda8 	bl	8003434 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048e8:	f7fe fda4 	bl	8003434 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e328      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x1dc>
 8004906:	e000      	b.n	800490a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d073      	beq.n	80049fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x21c>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d10e      	bne.n	8004940 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d10b      	bne.n	8004940 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004928:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d063      	beq.n	80049fc <HAL_RCC_OscConfig+0x2f0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d15f      	bne.n	80049fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e305      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d106      	bne.n	8004958 <HAL_RCC_OscConfig+0x24c>
 800494a:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a15      	ldr	r2, [pc, #84]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e01d      	b.n	8004994 <HAL_RCC_OscConfig+0x288>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0x270>
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0x288>
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a08      	ldr	r2, [pc, #32]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 8004982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <HAL_RCC_OscConfig+0x298>)
 800498e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fe fd4a 	bl	8003434 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a2:	e010      	b.n	80049c6 <HAL_RCC_OscConfig+0x2ba>
 80049a4:	40021000 	.word	0x40021000
 80049a8:	0800b944 	.word	0x0800b944
 80049ac:	20000000 	.word	0x20000000
 80049b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fe fd3e 	bl	8003434 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e2c2      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	4baf      	ldr	r3, [pc, #700]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x2a8>
 80049d2:	e014      	b.n	80049fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fe fd2e 	bl	8003434 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7fe fd2a 	bl	8003434 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	; 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e2ae      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ee:	4ba5      	ldr	r3, [pc, #660]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x2d0>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d060      	beq.n	8004acc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_OscConfig+0x310>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d119      	bne.n	8004a4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d116      	bne.n	8004a4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a1c:	4b99      	ldr	r3, [pc, #612]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_RCC_OscConfig+0x328>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e28b      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b93      	ldr	r3, [pc, #588]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	4990      	ldr	r1, [pc, #576]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	e040      	b.n	8004acc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d023      	beq.n	8004a9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a52:	4b8c      	ldr	r3, [pc, #560]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a8b      	ldr	r2, [pc, #556]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fe fce9 	bl	8003434 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a66:	f7fe fce5 	bl	8003434 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e269      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a78:	4b82      	ldr	r3, [pc, #520]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a84:	4b7f      	ldr	r3, [pc, #508]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	497c      	ldr	r1, [pc, #496]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
 8004a98:	e018      	b.n	8004acc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a79      	ldr	r2, [pc, #484]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fe fcc5 	bl	8003434 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aae:	f7fe fcc1 	bl	8003434 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e245      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ac0:	4b70      	ldr	r3, [pc, #448]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d03c      	beq.n	8004b52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae0:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ae6:	4a67      	ldr	r2, [pc, #412]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fe fca0 	bl	8003434 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af8:	f7fe fc9c 	bl	8003434 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e220      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0ef      	beq.n	8004af8 <HAL_RCC_OscConfig+0x3ec>
 8004b18:	e01b      	b.n	8004b52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b20:	4a58      	ldr	r2, [pc, #352]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2a:	f7fe fc83 	bl	8003434 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b32:	f7fe fc7f 	bl	8003434 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e203      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b44:	4b4f      	ldr	r3, [pc, #316]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ef      	bne.n	8004b32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80a6 	beq.w	8004cac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b60:	2300      	movs	r3, #0
 8004b62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b64:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	4b44      	ldr	r3, [pc, #272]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b74:	4a43      	ldr	r2, [pc, #268]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b7c:	4b41      	ldr	r3, [pc, #260]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b8c:	4b3e      	ldr	r3, [pc, #248]	; (8004c88 <HAL_RCC_OscConfig+0x57c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d118      	bne.n	8004bca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b98:	4b3b      	ldr	r3, [pc, #236]	; (8004c88 <HAL_RCC_OscConfig+0x57c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3a      	ldr	r2, [pc, #232]	; (8004c88 <HAL_RCC_OscConfig+0x57c>)
 8004b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba4:	f7fe fc46 	bl	8003434 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bac:	f7fe fc42 	bl	8003434 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e1c6      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bbe:	4b32      	ldr	r3, [pc, #200]	; (8004c88 <HAL_RCC_OscConfig+0x57c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d108      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4d8>
 8004bd2:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be2:	e024      	b.n	8004c2e <HAL_RCC_OscConfig+0x522>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d110      	bne.n	8004c0e <HAL_RCC_OscConfig+0x502>
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf2:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c02:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c0c:	e00f      	b.n	8004c2e <HAL_RCC_OscConfig+0x522>
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c1e:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004c26:	f023 0304 	bic.w	r3, r3, #4
 8004c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7fe fbfd 	bl	8003434 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fe fbf9 	bl	8003434 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e17b      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_OscConfig+0x578>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0ed      	beq.n	8004c3e <HAL_RCC_OscConfig+0x532>
 8004c62:	e01a      	b.n	8004c9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fe fbe6 	bl	8003434 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c6a:	e00f      	b.n	8004c8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fe fbe2 	bl	8003434 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d906      	bls.n	8004c8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e164      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c8c:	4ba8      	ldr	r3, [pc, #672]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e8      	bne.n	8004c6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca0:	4ba3      	ldr	r3, [pc, #652]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	4aa2      	ldr	r2, [pc, #648]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d03c      	beq.n	8004d32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01c      	beq.n	8004cfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cc0:	4b9b      	ldr	r3, [pc, #620]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cc6:	4a9a      	ldr	r2, [pc, #616]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fe fbb0 	bl	8003434 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cd8:	f7fe fbac 	bl	8003434 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e130      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cea:	4b91      	ldr	r3, [pc, #580]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ef      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x5cc>
 8004cf8:	e01b      	b.n	8004d32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004cfa:	4b8d      	ldr	r3, [pc, #564]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d00:	4a8b      	ldr	r2, [pc, #556]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004d02:	f023 0301 	bic.w	r3, r3, #1
 8004d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0a:	f7fe fb93 	bl	8003434 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d12:	f7fe fb8f 	bl	8003434 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e113      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d24:	4b82      	ldr	r3, [pc, #520]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ef      	bne.n	8004d12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8107 	beq.w	8004f4a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	f040 80cb 	bne.w	8004edc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d46:	4b7a      	ldr	r3, [pc, #488]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f003 0203 	and.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d12c      	bne.n	8004db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	3b01      	subs	r3, #1
 8004d66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d123      	bne.n	8004db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d11b      	bne.n	8004db4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d113      	bne.n	8004db4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d109      	bne.n	8004db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	3b01      	subs	r3, #1
 8004dae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d06d      	beq.n	8004e90 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d068      	beq.n	8004e8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004dba:	4b5d      	ldr	r3, [pc, #372]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d105      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004dc6:	4b5a      	ldr	r3, [pc, #360]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0ba      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b56      	ldr	r3, [pc, #344]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a55      	ldr	r2, [pc, #340]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ddc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004de2:	f7fe fb27 	bl	8003434 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dea:	f7fe fb23 	bl	8003434 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0a7      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dfc:	4b4c      	ldr	r3, [pc, #304]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e08:	4b49      	ldr	r3, [pc, #292]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	4b49      	ldr	r3, [pc, #292]	; (8004f34 <HAL_RCC_OscConfig+0x828>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e18:	3a01      	subs	r2, #1
 8004e1a:	0112      	lsls	r2, r2, #4
 8004e1c:	4311      	orrs	r1, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e22:	0212      	lsls	r2, r2, #8
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e2a:	0852      	lsrs	r2, r2, #1
 8004e2c:	3a01      	subs	r2, #1
 8004e2e:	0552      	lsls	r2, r2, #21
 8004e30:	4311      	orrs	r1, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e36:	0852      	lsrs	r2, r2, #1
 8004e38:	3a01      	subs	r2, #1
 8004e3a:	0652      	lsls	r2, r2, #25
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e42:	06d2      	lsls	r2, r2, #27
 8004e44:	430a      	orrs	r2, r1
 8004e46:	493a      	ldr	r1, [pc, #232]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b38      	ldr	r3, [pc, #224]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a37      	ldr	r2, [pc, #220]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e58:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a34      	ldr	r2, [pc, #208]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e64:	f7fe fae6 	bl	8003434 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe fae2 	bl	8003434 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e066      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7e:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e8a:	e05e      	b.n	8004f4a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e05d      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d156      	bne.n	8004f4a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e9c:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ea8:	4b21      	ldr	r3, [pc, #132]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a20      	ldr	r2, [pc, #128]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004eb4:	f7fe fabe 	bl	8003434 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fe faba 	bl	8003434 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e03e      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x7b0>
 8004eda:	e036      	b.n	8004f4a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d031      	beq.n	8004f46 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a12      	ldr	r2, [pc, #72]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004eee:	4b10      	ldr	r3, [pc, #64]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004f00:	f023 0303 	bic.w	r3, r3, #3
 8004f04:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <HAL_RCC_OscConfig+0x824>)
 8004f0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f16:	f7fe fa8d 	bl	8003434 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f1c:	e00c      	b.n	8004f38 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fe fa89 	bl	8003434 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d905      	bls.n	8004f38 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e00d      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
 8004f30:	40021000 	.word	0x40021000
 8004f34:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f38:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <HAL_RCC_OscConfig+0x848>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1ec      	bne.n	8004f1e <HAL_RCC_OscConfig+0x812>
 8004f44:	e001      	b.n	8004f4a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e000      	b.n	8004f4c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40021000 	.word	0x40021000

08004f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e10f      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b89      	ldr	r3, [pc, #548]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b86      	ldr	r3, [pc, #536]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 020f 	bic.w	r2, r3, #15
 8004f86:	4984      	ldr	r1, [pc, #528]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b82      	ldr	r3, [pc, #520]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0f7      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8089 	beq.w	80050c0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d133      	bne.n	800501e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	4b79      	ldr	r3, [pc, #484]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0e4      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004fc6:	f000 fa11 	bl	80053ec <RCC_GetSysClockFreqFromPLLSource>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4a74      	ldr	r2, [pc, #464]	; (80051a0 <HAL_RCC_ClockConfig+0x248>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d955      	bls.n	800507e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004fd2:	4b72      	ldr	r3, [pc, #456]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fde:	4b6f      	ldr	r3, [pc, #444]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe6:	4a6d      	ldr	r2, [pc, #436]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8004fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e044      	b.n	800507e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d03e      	beq.n	800507e <HAL_RCC_ClockConfig+0x126>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d13a      	bne.n	800507e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005008:	4b64      	ldr	r3, [pc, #400]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005010:	4a62      	ldr	r2, [pc, #392]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005016:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e02f      	b.n	800507e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005026:	4b5d      	ldr	r3, [pc, #372]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d115      	bne.n	800505e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0ac      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800503e:	4b57      	ldr	r3, [pc, #348]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e0a0      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504e:	4b53      	ldr	r3, [pc, #332]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e098      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800505e:	f000 f8a7 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 8005062:	4603      	mov	r3, r0
 8005064:	4a4e      	ldr	r2, [pc, #312]	; (80051a0 <HAL_RCC_ClockConfig+0x248>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d909      	bls.n	800507e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800506a:	4b4c      	ldr	r3, [pc, #304]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005072:	4a4a      	ldr	r2, [pc, #296]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b47      	ldr	r3, [pc, #284]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4944      	ldr	r1, [pc, #272]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005090:	f7fe f9d0 	bl	8003434 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fe f9cc 	bl	8003434 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e070      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050cc:	4b33      	ldr	r3, [pc, #204]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4930      	ldr	r1, [pc, #192]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
 80050de:	e008      	b.n	80050f2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d105      	bne.n	80050f2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050e6:	4b2d      	ldr	r3, [pc, #180]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4a2c      	ldr	r2, [pc, #176]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 80050ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050f0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f2:	4b29      	ldr	r3, [pc, #164]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d210      	bcs.n	8005122 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005100:	4b25      	ldr	r3, [pc, #148]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f023 020f 	bic.w	r2, r3, #15
 8005108:	4923      	ldr	r1, [pc, #140]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005110:	4b21      	ldr	r3, [pc, #132]	; (8005198 <HAL_RCC_ClockConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d001      	beq.n	8005122 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e036      	b.n	8005190 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	4918      	ldr	r1, [pc, #96]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800514c:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4910      	ldr	r1, [pc, #64]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 800515c:	4313      	orrs	r3, r2
 800515e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005160:	f000 f826 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 8005164:	4602      	mov	r2, r0
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_RCC_ClockConfig+0x244>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	490c      	ldr	r1, [pc, #48]	; (80051a4 <HAL_RCC_ClockConfig+0x24c>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <HAL_RCC_ClockConfig+0x250>)
 800517e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <HAL_RCC_ClockConfig+0x254>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe f905 	bl	8003394 <HAL_InitTick>
 800518a:	4603      	mov	r3, r0
 800518c:	73fb      	strb	r3, [r7, #15]

  return status;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40022000 	.word	0x40022000
 800519c:	40021000 	.word	0x40021000
 80051a0:	04c4b400 	.word	0x04c4b400
 80051a4:	0800b944 	.word	0x0800b944
 80051a8:	20000000 	.word	0x20000000
 80051ac:	20000004 	.word	0x20000004

080051b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	; 0x24
 80051b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051be:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051c8:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_GetSysClockFreq+0x34>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d121      	bne.n	8005222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d11e      	bne.n	8005222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051e4:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051f0:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	e005      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800520c:	4a2b      	ldr	r2, [pc, #172]	; (80052bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10d      	bne.n	8005238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d102      	bne.n	800522e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005228:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e004      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b08      	cmp	r3, #8
 8005232:	d101      	bne.n	8005238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005234:	4b23      	ldr	r3, [pc, #140]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d134      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d003      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0xa6>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b03      	cmp	r3, #3
 8005252:	d003      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0xac>
 8005254:	e005      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005258:	617b      	str	r3, [r7, #20]
      break;
 800525a:	e005      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800525c:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800525e:	617b      	str	r3, [r7, #20]
      break;
 8005260:	e002      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	617b      	str	r3, [r7, #20]
      break;
 8005266:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	3301      	adds	r3, #1
 8005274:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	fb02 f203 	mul.w	r2, r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	0e5b      	lsrs	r3, r3, #25
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	3301      	adds	r3, #1
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052a8:	69bb      	ldr	r3, [r7, #24]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3724      	adds	r7, #36	; 0x24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800b95c 	.word	0x0800b95c
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	007a1200 	.word	0x007a1200

080052c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b03      	ldr	r3, [pc, #12]	; (80052dc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	20000000 	.word	0x20000000

080052e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052e4:	f7ff fff0 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	4904      	ldr	r1, [pc, #16]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	0800b954 	.word	0x0800b954

0800530c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005310:	f7ff ffda 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 8005314:	4602      	mov	r2, r0
 8005316:	4b06      	ldr	r3, [pc, #24]	; (8005330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	0adb      	lsrs	r3, r3, #11
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	4904      	ldr	r1, [pc, #16]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000
 8005334:	0800b954 	.word	0x0800b954

08005338 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005350:	f7ff f908 	bl	8004564 <HAL_PWREx_GetVoltageRange>
 8005354:	6178      	str	r0, [r7, #20]
 8005356:	e014      	b.n	8005382 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005358:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535c:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005362:	6593      	str	r3, [r2, #88]	; 0x58
 8005364:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005370:	f7ff f8f8 	bl	8004564 <HAL_PWREx_GetVoltageRange>
 8005374:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005376:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537a:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800537c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005380:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005388:	d10b      	bne.n	80053a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b80      	cmp	r3, #128	; 0x80
 800538e:	d913      	bls.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2ba0      	cmp	r3, #160	; 0xa0
 8005394:	d902      	bls.n	800539c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005396:	2302      	movs	r3, #2
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	e00d      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800539c:	2301      	movs	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e00a      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b7f      	cmp	r3, #127	; 0x7f
 80053a6:	d902      	bls.n	80053ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80053a8:	2302      	movs	r3, #2
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	e004      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b70      	cmp	r3, #112	; 0x70
 80053b2:	d101      	bne.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b4:	2301      	movs	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 020f 	bic.w	r2, r3, #15
 80053c0:	4909      	ldr	r1, [pc, #36]	; (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053c8:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d001      	beq.n	80053da <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40022000 	.word	0x40022000

080053ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80053f6:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d118      	bne.n	8005434 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005402:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d107      	bne.n	800541e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	e005      	b.n	800542a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800541e:	4b23      	ldr	r3, [pc, #140]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800542a:	4a21      	ldr	r2, [pc, #132]	; (80054b0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005432:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d003      	beq.n	800544c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d003      	beq.n	8005452 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800544a:	e005      	b.n	8005458 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800544c:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800544e:	613b      	str	r3, [r7, #16]
    break;
 8005450:	e005      	b.n	800545e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005452:	4b19      	ldr	r3, [pc, #100]	; (80054b8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005454:	613b      	str	r3, [r7, #16]
    break;
 8005456:	e002      	b.n	800545e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	613b      	str	r3, [r7, #16]
    break;
 800545c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	091b      	lsrs	r3, r3, #4
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	3301      	adds	r3, #1
 800546a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	fb02 f203 	mul.w	r2, r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	0e5b      	lsrs	r3, r3, #25
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	3301      	adds	r3, #1
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800549e:	683b      	ldr	r3, [r7, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	371c      	adds	r7, #28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	40021000 	.word	0x40021000
 80054b0:	0800b95c 	.word	0x0800b95c
 80054b4:	00f42400 	.word	0x00f42400
 80054b8:	007a1200 	.word	0x007a1200

080054bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054c4:	2300      	movs	r3, #0
 80054c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054c8:	2300      	movs	r3, #0
 80054ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d040      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d02a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	d825      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054e4:	2b60      	cmp	r3, #96	; 0x60
 80054e6:	d026      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054e8:	2b60      	cmp	r3, #96	; 0x60
 80054ea:	d821      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d006      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x42>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d81d      	bhi.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d009      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x50>
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d010      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80054fc:	e018      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054fe:	4b89      	ldr	r3, [pc, #548]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4a88      	ldr	r2, [pc, #544]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005508:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800550a:	e015      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	2100      	movs	r1, #0
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fb02 	bl	8005b1c <RCCEx_PLLSAI1_Config>
 8005518:	4603      	mov	r3, r0
 800551a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800551c:	e00c      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3320      	adds	r3, #32
 8005522:	2100      	movs	r1, #0
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fbed 	bl	8005d04 <RCCEx_PLLSAI2_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800552e:	e003      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	74fb      	strb	r3, [r7, #19]
      break;
 8005534:	e000      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800553e:	4b79      	ldr	r3, [pc, #484]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005544:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554c:	4975      	ldr	r1, [pc, #468]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005554:	e001      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005556:	7cfb      	ldrb	r3, [r7, #19]
 8005558:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d047      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800556e:	d030      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005574:	d82a      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800557a:	d02a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800557c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005580:	d824      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005586:	d008      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558c:	d81e      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005596:	d010      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005598:	e018      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800559a:	4b62      	ldr	r3, [pc, #392]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	4a61      	ldr	r2, [pc, #388]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055a6:	e015      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	2100      	movs	r1, #0
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fab4 	bl	8005b1c <RCCEx_PLLSAI1_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055b8:	e00c      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3320      	adds	r3, #32
 80055be:	2100      	movs	r1, #0
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fb9f 	bl	8005d04 <RCCEx_PLLSAI2_Config>
 80055c6:	4603      	mov	r3, r0
 80055c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80055ca:	e003      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	74fb      	strb	r3, [r7, #19]
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80055d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055da:	4b52      	ldr	r3, [pc, #328]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	494e      	ldr	r1, [pc, #312]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055f0:	e001      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	7cfb      	ldrb	r3, [r7, #19]
 80055f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 809f 	beq.w	8005742 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005604:	2300      	movs	r3, #0
 8005606:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005608:	4b46      	ldr	r3, [pc, #280]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	4b41      	ldr	r3, [pc, #260]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	4a40      	ldr	r2, [pc, #256]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6593      	str	r3, [r2, #88]	; 0x58
 800562a:	4b3e      	ldr	r3, [pc, #248]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005636:	2301      	movs	r3, #1
 8005638:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005646:	f7fd fef5 	bl	8003434 <HAL_GetTick>
 800564a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800564c:	e009      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fd fef1 	bl	8003434 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d902      	bls.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	74fb      	strb	r3, [r7, #19]
        break;
 8005660:	e005      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005662:	4b31      	ldr	r3, [pc, #196]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0ef      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800566e:	7cfb      	ldrb	r3, [r7, #19]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d15b      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005674:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01f      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	429a      	cmp	r2, r3
 8005690:	d019      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b4:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80056be:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fd feb0 	bl	8003434 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056d6:	e00b      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fd feac 	bl	8003434 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d902      	bls.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	74fb      	strb	r3, [r7, #19]
            break;
 80056ee:	e006      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ec      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10c      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	4903      	ldr	r1, [pc, #12]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800571c:	e008      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	74bb      	strb	r3, [r7, #18]
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005724:	40021000 	.word	0x40021000
 8005728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	7cfb      	ldrb	r3, [r7, #19]
 800572e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005730:	7c7b      	ldrb	r3, [r7, #17]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d105      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005736:	4ba0      	ldr	r3, [pc, #640]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573a:	4a9f      	ldr	r2, [pc, #636]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800573c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800574e:	4b9a      	ldr	r3, [pc, #616]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005754:	f023 0203 	bic.w	r2, r3, #3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	4996      	ldr	r1, [pc, #600]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005770:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 020c 	bic.w	r2, r3, #12
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	498e      	ldr	r1, [pc, #568]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005792:	4b89      	ldr	r3, [pc, #548]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a0:	4985      	ldr	r1, [pc, #532]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057b4:	4b80      	ldr	r3, [pc, #512]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c2:	497d      	ldr	r1, [pc, #500]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0310 	and.w	r3, r3, #16
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057d6:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e4:	4974      	ldr	r1, [pc, #464]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057f8:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005806:	496c      	ldr	r1, [pc, #432]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005828:	4963      	ldr	r1, [pc, #396]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800583c:	4b5e      	ldr	r3, [pc, #376]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800584a:	495b      	ldr	r1, [pc, #364]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800585e:	4b56      	ldr	r3, [pc, #344]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	4952      	ldr	r1, [pc, #328]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005880:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	494a      	ldr	r1, [pc, #296]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058a2:	4b45      	ldr	r3, [pc, #276]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b0:	4941      	ldr	r1, [pc, #260]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058c4:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ca:	f023 0203 	bic.w	r2, r3, #3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d2:	4939      	ldr	r1, [pc, #228]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d028      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058e6:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f4:	4930      	ldr	r1, [pc, #192]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005904:	d106      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005906:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4a2b      	ldr	r2, [pc, #172]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005910:	60d3      	str	r3, [r2, #12]
 8005912:	e011      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800591c:	d10c      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3304      	adds	r3, #4
 8005922:	2101      	movs	r1, #1
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f8f9 	bl	8005b1c <RCCEx_PLLSAI1_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800592e:	7cfb      	ldrb	r3, [r7, #19]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d04d      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594c:	d108      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800595a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800595e:	e012      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005960:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005966:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800597e:	490e      	ldr	r1, [pc, #56]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800598a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800598e:	d106      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005990:	4b09      	ldr	r3, [pc, #36]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800599a:	60d3      	str	r3, [r2, #12]
 800599c:	e020      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059a6:	d109      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059a8:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a02      	ldr	r2, [pc, #8]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b2:	60d3      	str	r3, [r2, #12]
 80059b4:	e014      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059c4:	d10c      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2101      	movs	r1, #1
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 f8a5 	bl	8005b1c <RCCEx_PLLSAI1_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d028      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059ec:	4b4a      	ldr	r3, [pc, #296]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fa:	4947      	ldr	r1, [pc, #284]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a0c:	4b42      	ldr	r3, [pc, #264]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4a41      	ldr	r2, [pc, #260]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a16:	60d3      	str	r3, [r2, #12]
 8005a18:	e011      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	2101      	movs	r1, #1
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f876 	bl	8005b1c <RCCEx_PLLSAI1_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01e      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a4a:	4b33      	ldr	r3, [pc, #204]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a5a:	492f      	ldr	r1, [pc, #188]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2102      	movs	r1, #2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 f851 	bl	8005b1c <RCCEx_PLLSAI1_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00b      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9a:	f023 0204 	bic.w	r2, r3, #4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	491c      	ldr	r1, [pc, #112]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00b      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005abe:	f023 0218 	bic.w	r2, r3, #24
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	4913      	ldr	r1, [pc, #76]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d017      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aec:	490a      	ldr	r1, [pc, #40]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005afe:	d105      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b00:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3718      	adds	r7, #24
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000

08005b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b2a:	4b72      	ldr	r3, [pc, #456]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00e      	beq.n	8005b54 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b36:	4b6f      	ldr	r3, [pc, #444]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0203 	and.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d103      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
       ||
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d142      	bne.n	8005bd4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	e03f      	b.n	8005bd4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d018      	beq.n	8005b8e <RCCEx_PLLSAI1_Config+0x72>
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d825      	bhi.n	8005bac <RCCEx_PLLSAI1_Config+0x90>
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d002      	beq.n	8005b6a <RCCEx_PLLSAI1_Config+0x4e>
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d009      	beq.n	8005b7c <RCCEx_PLLSAI1_Config+0x60>
 8005b68:	e020      	b.n	8005bac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b6a:	4b62      	ldr	r3, [pc, #392]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11d      	bne.n	8005bb2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b7a:	e01a      	b.n	8005bb2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b7c:	4b5d      	ldr	r3, [pc, #372]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d116      	bne.n	8005bb6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b8c:	e013      	b.n	8005bb6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b8e:	4b59      	ldr	r3, [pc, #356]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10f      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b9a:	4b56      	ldr	r3, [pc, #344]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005baa:	e006      	b.n	8005bba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb0:	e004      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e002      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bb6:	bf00      	nop
 8005bb8:	e000      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d108      	bne.n	8005bd4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005bc2:	4b4c      	ldr	r3, [pc, #304]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f023 0203 	bic.w	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4949      	ldr	r1, [pc, #292]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f040 8086 	bne.w	8005ce8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005bdc:	4b45      	ldr	r3, [pc, #276]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a44      	ldr	r2, [pc, #272]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be8:	f7fd fc24 	bl	8003434 <HAL_GetTick>
 8005bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bee:	e009      	b.n	8005c04 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf0:	f7fd fc20 	bl	8003434 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d902      	bls.n	8005c04 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	73fb      	strb	r3, [r7, #15]
        break;
 8005c02:	e005      	b.n	8005c10 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c04:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1ef      	bne.n	8005bf0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d168      	bne.n	8005ce8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d113      	bne.n	8005c44 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c1c:	4b35      	ldr	r3, [pc, #212]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	4b35      	ldr	r3, [pc, #212]	; (8005cf8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6892      	ldr	r2, [r2, #8]
 8005c28:	0211      	lsls	r1, r2, #8
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68d2      	ldr	r2, [r2, #12]
 8005c2e:	06d2      	lsls	r2, r2, #27
 8005c30:	4311      	orrs	r1, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6852      	ldr	r2, [r2, #4]
 8005c36:	3a01      	subs	r2, #1
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	492d      	ldr	r1, [pc, #180]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	610b      	str	r3, [r1, #16]
 8005c42:	e02d      	b.n	8005ca0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d115      	bne.n	8005c76 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c4a:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6892      	ldr	r2, [r2, #8]
 8005c56:	0211      	lsls	r1, r2, #8
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6912      	ldr	r2, [r2, #16]
 8005c5c:	0852      	lsrs	r2, r2, #1
 8005c5e:	3a01      	subs	r2, #1
 8005c60:	0552      	lsls	r2, r2, #21
 8005c62:	4311      	orrs	r1, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6852      	ldr	r2, [r2, #4]
 8005c68:	3a01      	subs	r2, #1
 8005c6a:	0112      	lsls	r2, r2, #4
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	4921      	ldr	r1, [pc, #132]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	610b      	str	r3, [r1, #16]
 8005c74:	e014      	b.n	8005ca0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c76:	4b1f      	ldr	r3, [pc, #124]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6892      	ldr	r2, [r2, #8]
 8005c82:	0211      	lsls	r1, r2, #8
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6952      	ldr	r2, [r2, #20]
 8005c88:	0852      	lsrs	r2, r2, #1
 8005c8a:	3a01      	subs	r2, #1
 8005c8c:	0652      	lsls	r2, r2, #25
 8005c8e:	4311      	orrs	r1, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6852      	ldr	r2, [r2, #4]
 8005c94:	3a01      	subs	r2, #1
 8005c96:	0112      	lsls	r2, r2, #4
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	4916      	ldr	r1, [pc, #88]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005caa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fd fbc2 	bl	8003434 <HAL_GetTick>
 8005cb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cb2:	e009      	b.n	8005cc8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cb4:	f7fd fbbe 	bl	8003434 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d902      	bls.n	8005cc8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005cc6:	e005      	b.n	8005cd4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ef      	beq.n	8005cb4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	4904      	ldr	r1, [pc, #16]	; (8005cf4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	07ff800f 	.word	0x07ff800f
 8005cfc:	ff9f800f 	.word	0xff9f800f
 8005d00:	f9ff800f 	.word	0xf9ff800f

08005d04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d12:	4b72      	ldr	r3, [pc, #456]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d1e:	4b6f      	ldr	r3, [pc, #444]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0203 	and.w	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d103      	bne.n	8005d36 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
       ||
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d142      	bne.n	8005dbc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e03f      	b.n	8005dbc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d018      	beq.n	8005d76 <RCCEx_PLLSAI2_Config+0x72>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d825      	bhi.n	8005d94 <RCCEx_PLLSAI2_Config+0x90>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <RCCEx_PLLSAI2_Config+0x4e>
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d009      	beq.n	8005d64 <RCCEx_PLLSAI2_Config+0x60>
 8005d50:	e020      	b.n	8005d94 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d52:	4b62      	ldr	r3, [pc, #392]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d62:	e01a      	b.n	8005d9a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b5d      	ldr	r3, [pc, #372]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d74:	e013      	b.n	8005d9e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d76:	4b59      	ldr	r3, [pc, #356]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d82:	4b56      	ldr	r3, [pc, #344]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d92:	e006      	b.n	8005da2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e004      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d108      	bne.n	8005dbc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005daa:	4b4c      	ldr	r3, [pc, #304]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f023 0203 	bic.w	r2, r3, #3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4949      	ldr	r1, [pc, #292]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 8086 	bne.w	8005ed0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dc4:	4b45      	ldr	r3, [pc, #276]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a44      	ldr	r2, [pc, #272]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd0:	f7fd fb30 	bl	8003434 <HAL_GetTick>
 8005dd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dd6:	e009      	b.n	8005dec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dd8:	f7fd fb2c 	bl	8003434 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d902      	bls.n	8005dec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	73fb      	strb	r3, [r7, #15]
        break;
 8005dea:	e005      	b.n	8005df8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dec:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1ef      	bne.n	8005dd8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d168      	bne.n	8005ed0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d113      	bne.n	8005e2c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e04:	4b35      	ldr	r3, [pc, #212]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	4b35      	ldr	r3, [pc, #212]	; (8005ee0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6892      	ldr	r2, [r2, #8]
 8005e10:	0211      	lsls	r1, r2, #8
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68d2      	ldr	r2, [r2, #12]
 8005e16:	06d2      	lsls	r2, r2, #27
 8005e18:	4311      	orrs	r1, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6852      	ldr	r2, [r2, #4]
 8005e1e:	3a01      	subs	r2, #1
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	430a      	orrs	r2, r1
 8005e24:	492d      	ldr	r1, [pc, #180]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	614b      	str	r3, [r1, #20]
 8005e2a:	e02d      	b.n	8005e88 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d115      	bne.n	8005e5e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e32:	4b2a      	ldr	r3, [pc, #168]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6892      	ldr	r2, [r2, #8]
 8005e3e:	0211      	lsls	r1, r2, #8
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6912      	ldr	r2, [r2, #16]
 8005e44:	0852      	lsrs	r2, r2, #1
 8005e46:	3a01      	subs	r2, #1
 8005e48:	0552      	lsls	r2, r2, #21
 8005e4a:	4311      	orrs	r1, r2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6852      	ldr	r2, [r2, #4]
 8005e50:	3a01      	subs	r2, #1
 8005e52:	0112      	lsls	r2, r2, #4
 8005e54:	430a      	orrs	r2, r1
 8005e56:	4921      	ldr	r1, [pc, #132]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	614b      	str	r3, [r1, #20]
 8005e5c:	e014      	b.n	8005e88 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	4b21      	ldr	r3, [pc, #132]	; (8005ee8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6892      	ldr	r2, [r2, #8]
 8005e6a:	0211      	lsls	r1, r2, #8
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6952      	ldr	r2, [r2, #20]
 8005e70:	0852      	lsrs	r2, r2, #1
 8005e72:	3a01      	subs	r2, #1
 8005e74:	0652      	lsls	r2, r2, #25
 8005e76:	4311      	orrs	r1, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6852      	ldr	r2, [r2, #4]
 8005e7c:	3a01      	subs	r2, #1
 8005e7e:	0112      	lsls	r2, r2, #4
 8005e80:	430a      	orrs	r2, r1
 8005e82:	4916      	ldr	r1, [pc, #88]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e88:	4b14      	ldr	r3, [pc, #80]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a13      	ldr	r2, [pc, #76]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e94:	f7fd face 	bl	8003434 <HAL_GetTick>
 8005e98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e9a:	e009      	b.n	8005eb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e9c:	f7fd faca 	bl	8003434 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d902      	bls.n	8005eb0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	73fb      	strb	r3, [r7, #15]
          break;
 8005eae:	e005      	b.n	8005ebc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0ef      	beq.n	8005e9c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec4:	695a      	ldr	r2, [r3, #20]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	4904      	ldr	r1, [pc, #16]	; (8005edc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	07ff800f 	.word	0x07ff800f
 8005ee4:	ff9f800f 	.word	0xff9f800f
 8005ee8:	f9ff800f 	.word	0xf9ff800f

08005eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e049      	b.n	8005f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fd f858 	bl	8002fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3304      	adds	r3, #4
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f000 fb7a 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e049      	b.n	8006040 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f841 	bl	8006048 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2202      	movs	r2, #2
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4610      	mov	r0, r2
 8005fda:	f000 fb23 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <HAL_TIM_PWM_Start+0x24>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e03c      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d109      	bne.n	800609a <HAL_TIM_PWM_Start+0x3e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	bf14      	ite	ne
 8006092:	2301      	movne	r3, #1
 8006094:	2300      	moveq	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	e02f      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d109      	bne.n	80060b4 <HAL_TIM_PWM_Start+0x58>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e022      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b0c      	cmp	r3, #12
 80060b8:	d109      	bne.n	80060ce <HAL_TIM_PWM_Start+0x72>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	bf14      	ite	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	2300      	moveq	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e015      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d109      	bne.n	80060e8 <HAL_TIM_PWM_Start+0x8c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e008      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e09c      	b.n	800623c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_TIM_PWM_Start+0xb6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006110:	e023      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d104      	bne.n	8006122 <HAL_TIM_PWM_Start+0xc6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006120:	e01b      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d104      	bne.n	8006132 <HAL_TIM_PWM_Start+0xd6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006130:	e013      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d104      	bne.n	8006142 <HAL_TIM_PWM_Start+0xe6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	e00b      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b10      	cmp	r3, #16
 8006146:	d104      	bne.n	8006152 <HAL_TIM_PWM_Start+0xf6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006150:	e003      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fe68 	bl	8006e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a35      	ldr	r2, [pc, #212]	; (8006244 <HAL_TIM_PWM_Start+0x1e8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <HAL_TIM_PWM_Start+0x13e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a34      	ldr	r2, [pc, #208]	; (8006248 <HAL_TIM_PWM_Start+0x1ec>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00e      	beq.n	800619a <HAL_TIM_PWM_Start+0x13e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a32      	ldr	r2, [pc, #200]	; (800624c <HAL_TIM_PWM_Start+0x1f0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d009      	beq.n	800619a <HAL_TIM_PWM_Start+0x13e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a31      	ldr	r2, [pc, #196]	; (8006250 <HAL_TIM_PWM_Start+0x1f4>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d004      	beq.n	800619a <HAL_TIM_PWM_Start+0x13e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a2f      	ldr	r2, [pc, #188]	; (8006254 <HAL_TIM_PWM_Start+0x1f8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d101      	bne.n	800619e <HAL_TIM_PWM_Start+0x142>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <HAL_TIM_PWM_Start+0x144>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a22      	ldr	r2, [pc, #136]	; (8006244 <HAL_TIM_PWM_Start+0x1e8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01d      	beq.n	80061fa <HAL_TIM_PWM_Start+0x19e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d018      	beq.n	80061fa <HAL_TIM_PWM_Start+0x19e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a22      	ldr	r2, [pc, #136]	; (8006258 <HAL_TIM_PWM_Start+0x1fc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <HAL_TIM_PWM_Start+0x19e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a21      	ldr	r2, [pc, #132]	; (800625c <HAL_TIM_PWM_Start+0x200>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00e      	beq.n	80061fa <HAL_TIM_PWM_Start+0x19e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <HAL_TIM_PWM_Start+0x204>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d009      	beq.n	80061fa <HAL_TIM_PWM_Start+0x19e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_TIM_PWM_Start+0x1ec>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIM_PWM_Start+0x19e>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a15      	ldr	r2, [pc, #84]	; (800624c <HAL_TIM_PWM_Start+0x1f0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d115      	bne.n	8006226 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	4b18      	ldr	r3, [pc, #96]	; (8006264 <HAL_TIM_PWM_Start+0x208>)
 8006202:	4013      	ands	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b06      	cmp	r3, #6
 800620a:	d015      	beq.n	8006238 <HAL_TIM_PWM_Start+0x1dc>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006212:	d011      	beq.n	8006238 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	e008      	b.n	8006238 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e000      	b.n	800623a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006238:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40013400 	.word	0x40013400
 800624c:	40014000 	.word	0x40014000
 8006250:	40014400 	.word	0x40014400
 8006254:	40014800 	.word	0x40014800
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	00010007 	.word	0x00010007

08006268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006282:	2302      	movs	r3, #2
 8006284:	e0ff      	b.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b14      	cmp	r3, #20
 8006292:	f200 80f0 	bhi.w	8006476 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	08006477 	.word	0x08006477
 80062a4:	08006477 	.word	0x08006477
 80062a8:	08006477 	.word	0x08006477
 80062ac:	08006331 	.word	0x08006331
 80062b0:	08006477 	.word	0x08006477
 80062b4:	08006477 	.word	0x08006477
 80062b8:	08006477 	.word	0x08006477
 80062bc:	08006373 	.word	0x08006373
 80062c0:	08006477 	.word	0x08006477
 80062c4:	08006477 	.word	0x08006477
 80062c8:	08006477 	.word	0x08006477
 80062cc:	080063b3 	.word	0x080063b3
 80062d0:	08006477 	.word	0x08006477
 80062d4:	08006477 	.word	0x08006477
 80062d8:	08006477 	.word	0x08006477
 80062dc:	080063f5 	.word	0x080063f5
 80062e0:	08006477 	.word	0x08006477
 80062e4:	08006477 	.word	0x08006477
 80062e8:	08006477 	.word	0x08006477
 80062ec:	08006435 	.word	0x08006435
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fa2e 	bl	8006758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0208 	orr.w	r2, r2, #8
 800630a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0204 	bic.w	r2, r2, #4
 800631a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6999      	ldr	r1, [r3, #24]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	619a      	str	r2, [r3, #24]
      break;
 800632e:	e0a5      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fa9e 	bl	8006878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6999      	ldr	r1, [r3, #24]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	021a      	lsls	r2, r3, #8
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	619a      	str	r2, [r3, #24]
      break;
 8006370:	e084      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fb07 	bl	800698c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0208 	orr.w	r2, r2, #8
 800638c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0204 	bic.w	r2, r2, #4
 800639c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69d9      	ldr	r1, [r3, #28]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	61da      	str	r2, [r3, #28]
      break;
 80063b0:	e064      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 fb6f 	bl	8006a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69d9      	ldr	r1, [r3, #28]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	021a      	lsls	r2, r3, #8
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	61da      	str	r2, [r3, #28]
      break;
 80063f2:	e043      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fbb8 	bl	8006b70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0208 	orr.w	r2, r2, #8
 800640e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0204 	bic.w	r2, r2, #4
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006432:	e023      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fbfc 	bl	8006c38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800644e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	021a      	lsls	r2, r3, #8
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006474:	e002      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
      break;
 800647a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop

08006490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d101      	bne.n	80064ac <HAL_TIM_ConfigClockSource+0x1c>
 80064a8:	2302      	movs	r3, #2
 80064aa:	e0b6      	b.n	800661a <HAL_TIM_ConfigClockSource+0x18a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e8:	d03e      	beq.n	8006568 <HAL_TIM_ConfigClockSource+0xd8>
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ee:	f200 8087 	bhi.w	8006600 <HAL_TIM_ConfigClockSource+0x170>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	f000 8086 	beq.w	8006606 <HAL_TIM_ConfigClockSource+0x176>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d87f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006500:	2b70      	cmp	r3, #112	; 0x70
 8006502:	d01a      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xaa>
 8006504:	2b70      	cmp	r3, #112	; 0x70
 8006506:	d87b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006508:	2b60      	cmp	r3, #96	; 0x60
 800650a:	d050      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x11e>
 800650c:	2b60      	cmp	r3, #96	; 0x60
 800650e:	d877      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006510:	2b50      	cmp	r3, #80	; 0x50
 8006512:	d03c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0xfe>
 8006514:	2b50      	cmp	r3, #80	; 0x50
 8006516:	d873      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006518:	2b40      	cmp	r3, #64	; 0x40
 800651a:	d058      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x13e>
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d86f      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006520:	2b30      	cmp	r3, #48	; 0x30
 8006522:	d064      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15e>
 8006524:	2b30      	cmp	r3, #48	; 0x30
 8006526:	d86b      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d060      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15e>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d867      	bhi.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d05c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15e>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d05a      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x15e>
 8006538:	e062      	b.n	8006600 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6899      	ldr	r1, [r3, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	f000 fc55 	bl	8006df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800655c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	609a      	str	r2, [r3, #8]
      break;
 8006566:	e04f      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6899      	ldr	r1, [r3, #8]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f000 fc3e 	bl	8006df8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e03c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	461a      	mov	r2, r3
 800659c:	f000 fbb2 	bl	8006d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2150      	movs	r1, #80	; 0x50
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fc0b 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 80065ac:	e02c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 fbd1 	bl	8006d62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2160      	movs	r1, #96	; 0x60
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fbfb 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 80065cc:	e01c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 fb92 	bl	8006d04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2140      	movs	r1, #64	; 0x40
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fbeb 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 80065ec:	e00c      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 fbe2 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 80065fe:	e003      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
      break;
 8006604:	e000      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a40      	ldr	r2, [pc, #256]	; (8006738 <TIM_Base_SetConfig+0x114>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d00f      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a3d      	ldr	r2, [pc, #244]	; (800673c <TIM_Base_SetConfig+0x118>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a3c      	ldr	r2, [pc, #240]	; (8006740 <TIM_Base_SetConfig+0x11c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a3b      	ldr	r2, [pc, #236]	; (8006744 <TIM_Base_SetConfig+0x120>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a3a      	ldr	r2, [pc, #232]	; (8006748 <TIM_Base_SetConfig+0x124>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2f      	ldr	r2, [pc, #188]	; (8006738 <TIM_Base_SetConfig+0x114>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01f      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006684:	d01b      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2c      	ldr	r2, [pc, #176]	; (800673c <TIM_Base_SetConfig+0x118>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d017      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2b      	ldr	r2, [pc, #172]	; (8006740 <TIM_Base_SetConfig+0x11c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a2a      	ldr	r2, [pc, #168]	; (8006744 <TIM_Base_SetConfig+0x120>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00f      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a29      	ldr	r2, [pc, #164]	; (8006748 <TIM_Base_SetConfig+0x124>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00b      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a28      	ldr	r2, [pc, #160]	; (800674c <TIM_Base_SetConfig+0x128>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d007      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a27      	ldr	r2, [pc, #156]	; (8006750 <TIM_Base_SetConfig+0x12c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d003      	beq.n	80066be <TIM_Base_SetConfig+0x9a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a26      	ldr	r2, [pc, #152]	; (8006754 <TIM_Base_SetConfig+0x130>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d108      	bne.n	80066d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a10      	ldr	r2, [pc, #64]	; (8006738 <TIM_Base_SetConfig+0x114>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00f      	beq.n	800671c <TIM_Base_SetConfig+0xf8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a12      	ldr	r2, [pc, #72]	; (8006748 <TIM_Base_SetConfig+0x124>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d00b      	beq.n	800671c <TIM_Base_SetConfig+0xf8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a11      	ldr	r2, [pc, #68]	; (800674c <TIM_Base_SetConfig+0x128>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d007      	beq.n	800671c <TIM_Base_SetConfig+0xf8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a10      	ldr	r2, [pc, #64]	; (8006750 <TIM_Base_SetConfig+0x12c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_Base_SetConfig+0xf8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a0f      	ldr	r2, [pc, #60]	; (8006754 <TIM_Base_SetConfig+0x130>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d103      	bne.n	8006724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	615a      	str	r2, [r3, #20]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40012c00 	.word	0x40012c00
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40013400 	.word	0x40013400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800

08006758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f023 0201 	bic.w	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 0302 	bic.w	r3, r3, #2
 80067a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a2c      	ldr	r2, [pc, #176]	; (8006864 <TIM_OC1_SetConfig+0x10c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00f      	beq.n	80067d8 <TIM_OC1_SetConfig+0x80>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <TIM_OC1_SetConfig+0x110>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00b      	beq.n	80067d8 <TIM_OC1_SetConfig+0x80>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a2a      	ldr	r2, [pc, #168]	; (800686c <TIM_OC1_SetConfig+0x114>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_OC1_SetConfig+0x80>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a29      	ldr	r2, [pc, #164]	; (8006870 <TIM_OC1_SetConfig+0x118>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_OC1_SetConfig+0x80>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a28      	ldr	r2, [pc, #160]	; (8006874 <TIM_OC1_SetConfig+0x11c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10c      	bne.n	80067f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	f023 0308 	bic.w	r3, r3, #8
 80067de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f023 0304 	bic.w	r3, r3, #4
 80067f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <TIM_OC1_SetConfig+0x10c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00f      	beq.n	800681a <TIM_OC1_SetConfig+0xc2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a1a      	ldr	r2, [pc, #104]	; (8006868 <TIM_OC1_SetConfig+0x110>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00b      	beq.n	800681a <TIM_OC1_SetConfig+0xc2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a19      	ldr	r2, [pc, #100]	; (800686c <TIM_OC1_SetConfig+0x114>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d007      	beq.n	800681a <TIM_OC1_SetConfig+0xc2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a18      	ldr	r2, [pc, #96]	; (8006870 <TIM_OC1_SetConfig+0x118>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d003      	beq.n	800681a <TIM_OC1_SetConfig+0xc2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <TIM_OC1_SetConfig+0x11c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d111      	bne.n	800683e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	621a      	str	r2, [r3, #32]
}
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40013400 	.word	0x40013400
 800686c:	40014000 	.word	0x40014000
 8006870:	40014400 	.word	0x40014400
 8006874:	40014800 	.word	0x40014800

08006878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0210 	bic.w	r2, r3, #16
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0320 	bic.w	r3, r3, #32
 80068c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a28      	ldr	r2, [pc, #160]	; (8006978 <TIM_OC2_SetConfig+0x100>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_OC2_SetConfig+0x6c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a27      	ldr	r2, [pc, #156]	; (800697c <TIM_OC2_SetConfig+0x104>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d10d      	bne.n	8006900 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	011b      	lsls	r3, r3, #4
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <TIM_OC2_SetConfig+0x100>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_OC2_SetConfig+0xb0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a1c      	ldr	r2, [pc, #112]	; (800697c <TIM_OC2_SetConfig+0x104>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_OC2_SetConfig+0xb0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <TIM_OC2_SetConfig+0x108>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_OC2_SetConfig+0xb0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <TIM_OC2_SetConfig+0x10c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC2_SetConfig+0xb0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a19      	ldr	r2, [pc, #100]	; (8006988 <TIM_OC2_SetConfig+0x110>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d113      	bne.n	8006950 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800692e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40013400 	.word	0x40013400
 8006980:	40014000 	.word	0x40014000
 8006984:	40014400 	.word	0x40014400
 8006988:	40014800 	.word	0x40014800

0800698c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0303 	bic.w	r3, r3, #3
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a27      	ldr	r2, [pc, #156]	; (8006a88 <TIM_OC3_SetConfig+0xfc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_OC3_SetConfig+0x6a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <TIM_OC3_SetConfig+0x100>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10d      	bne.n	8006a12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <TIM_OC3_SetConfig+0xfc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00f      	beq.n	8006a3a <TIM_OC3_SetConfig+0xae>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a1b      	ldr	r2, [pc, #108]	; (8006a8c <TIM_OC3_SetConfig+0x100>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <TIM_OC3_SetConfig+0xae>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <TIM_OC3_SetConfig+0x104>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_OC3_SetConfig+0xae>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <TIM_OC3_SetConfig+0x108>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_OC3_SetConfig+0xae>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a18      	ldr	r2, [pc, #96]	; (8006a98 <TIM_OC3_SetConfig+0x10c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d113      	bne.n	8006a62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	621a      	str	r2, [r3, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40013400 	.word	0x40013400
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40014400 	.word	0x40014400
 8006a98:	40014800 	.word	0x40014800

08006a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	021b      	lsls	r3, r3, #8
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	031b      	lsls	r3, r3, #12
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <TIM_OC4_SetConfig+0xc0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00f      	beq.n	8006b20 <TIM_OC4_SetConfig+0x84>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a17      	ldr	r2, [pc, #92]	; (8006b60 <TIM_OC4_SetConfig+0xc4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00b      	beq.n	8006b20 <TIM_OC4_SetConfig+0x84>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <TIM_OC4_SetConfig+0xc8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d007      	beq.n	8006b20 <TIM_OC4_SetConfig+0x84>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <TIM_OC4_SetConfig+0xcc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC4_SetConfig+0x84>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <TIM_OC4_SetConfig+0xd0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d109      	bne.n	8006b34 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	019b      	lsls	r3, r3, #6
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40014000 	.word	0x40014000
 8006b68:	40014400 	.word	0x40014400
 8006b6c:	40014800 	.word	0x40014800

08006b70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bb4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <TIM_OC5_SetConfig+0xb4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d00f      	beq.n	8006bea <TIM_OC5_SetConfig+0x7a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	; (8006c28 <TIM_OC5_SetConfig+0xb8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_OC5_SetConfig+0x7a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <TIM_OC5_SetConfig+0xbc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d007      	beq.n	8006bea <TIM_OC5_SetConfig+0x7a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <TIM_OC5_SetConfig+0xc0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_OC5_SetConfig+0x7a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <TIM_OC5_SetConfig+0xc4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d109      	bne.n	8006bfe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	621a      	str	r2, [r3, #32]
}
 8006c18:	bf00      	nop
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	40012c00 	.word	0x40012c00
 8006c28:	40013400 	.word	0x40013400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	051b      	lsls	r3, r3, #20
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <TIM_OC6_SetConfig+0xb8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00f      	beq.n	8006cb4 <TIM_OC6_SetConfig+0x7c>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <TIM_OC6_SetConfig+0xbc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d00b      	beq.n	8006cb4 <TIM_OC6_SetConfig+0x7c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a16      	ldr	r2, [pc, #88]	; (8006cf8 <TIM_OC6_SetConfig+0xc0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d007      	beq.n	8006cb4 <TIM_OC6_SetConfig+0x7c>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <TIM_OC6_SetConfig+0xc4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC6_SetConfig+0x7c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a14      	ldr	r2, [pc, #80]	; (8006d00 <TIM_OC6_SetConfig+0xc8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d109      	bne.n	8006cc8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	029b      	lsls	r3, r3, #10
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40014000 	.word	0x40014000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800

08006d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 030a 	bic.w	r3, r3, #10
 8006d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0210 	bic.w	r2, r3, #16
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f043 0307 	orr.w	r3, r3, #7
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	609a      	str	r2, [r3, #8]
}
 8006dec:	bf00      	nop
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	021a      	lsls	r2, r3, #8
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1a      	ldr	r2, [r3, #32]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e70:	431a      	orrs	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e068      	b.n	8006f6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a2e      	ldr	r2, [pc, #184]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2d      	ldr	r2, [pc, #180]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d108      	bne.n	8006ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1e      	ldr	r2, [pc, #120]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01d      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0e:	d018      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1b      	ldr	r2, [pc, #108]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d013      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1a      	ldr	r2, [pc, #104]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00e      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a14      	ldr	r2, [pc, #80]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d10c      	bne.n	8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40012c00 	.word	0x40012c00
 8006f80:	40013400 	.word	0x40013400
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40014000 	.word	0x40014000

08006f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e042      	b.n	800702c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f7fb ff5f 	bl	8002e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2224      	movs	r2, #36	; 0x24
 8006fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0201 	bic.w	r2, r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f998 	bl	800730c <UART_SetConfig>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e022      	b.n	800702c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fc54 	bl	800789c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fcdb 	bl	80079e0 <UART_CheckIdleState>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af02      	add	r7, sp, #8
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800704a:	2b20      	cmp	r3, #32
 800704c:	f040 8084 	bne.w	8007158 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_UART_Transmit+0x28>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e07c      	b.n	800715a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_UART_Transmit+0x3a>
 800706a:	2302      	movs	r3, #2
 800706c:	e075      	b.n	800715a <HAL_UART_Transmit+0x126>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2221      	movs	r2, #33	; 0x21
 8007082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007086:	f7fc f9d5 	bl	8003434 <HAL_GetTick>
 800708a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	88fa      	ldrh	r2, [r7, #6]
 8007098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a4:	d108      	bne.n	80070b8 <HAL_UART_Transmit+0x84>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d104      	bne.n	80070b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e003      	b.n	80070c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80070c8:	e02d      	b.n	8007126 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2200      	movs	r2, #0
 80070d2:	2180      	movs	r1, #128	; 0x80
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fcce 	bl	8007a76 <UART_WaitOnFlagUntilTimeout>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e03a      	b.n	800715a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10b      	bne.n	8007102 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f6:	b292      	uxth	r2, r2
 80070f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	3302      	adds	r3, #2
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	e008      	b.n	8007114 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	b292      	uxth	r2, r2
 800710c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	3301      	adds	r3, #1
 8007112:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1cb      	bne.n	80070ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2200      	movs	r2, #0
 800713a:	2140      	movs	r1, #64	; 0x40
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fc9a 	bl	8007a76 <UART_WaitOnFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e006      	b.n	800715a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3720      	adds	r7, #32
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b08a      	sub	sp, #40	; 0x28
 8007166:	af02      	add	r7, sp, #8
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	603b      	str	r3, [r7, #0]
 800716e:	4613      	mov	r3, r2
 8007170:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	2b20      	cmp	r3, #32
 800717a:	f040 80c1 	bne.w	8007300 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Receive+0x28>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e0b9      	b.n	8007302 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_UART_Receive+0x3a>
 8007198:	2302      	movs	r3, #2
 800719a:	e0b2      	b.n	8007302 <HAL_UART_Receive+0x1a0>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2222      	movs	r2, #34	; 0x22
 80071b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ba:	f7fc f93b 	bl	8003434 <HAL_GetTick>
 80071be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	88fa      	ldrh	r2, [r7, #6]
 80071c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	d10e      	bne.n	80071f8 <HAL_UART_Receive+0x96>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <HAL_UART_Receive+0x8c>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071ec:	e02d      	b.n	800724a <HAL_UART_Receive+0xe8>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	22ff      	movs	r2, #255	; 0xff
 80071f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071f6:	e028      	b.n	800724a <HAL_UART_Receive+0xe8>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10d      	bne.n	800721c <HAL_UART_Receive+0xba>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <HAL_UART_Receive+0xb0>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	22ff      	movs	r2, #255	; 0xff
 800720c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007210:	e01b      	b.n	800724a <HAL_UART_Receive+0xe8>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	227f      	movs	r2, #127	; 0x7f
 8007216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800721a:	e016      	b.n	800724a <HAL_UART_Receive+0xe8>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007224:	d10d      	bne.n	8007242 <HAL_UART_Receive+0xe0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <HAL_UART_Receive+0xd6>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	227f      	movs	r2, #127	; 0x7f
 8007232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007236:	e008      	b.n	800724a <HAL_UART_Receive+0xe8>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	223f      	movs	r2, #63	; 0x3f
 800723c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007240:	e003      	b.n	800724a <HAL_UART_Receive+0xe8>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007250:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725a:	d108      	bne.n	800726e <HAL_UART_Receive+0x10c>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	e003      	b.n	8007276 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800727e:	e033      	b.n	80072e8 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2200      	movs	r2, #0
 8007288:	2120      	movs	r1, #32
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fbf3 	bl	8007a76 <UART_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e033      	b.n	8007302 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10c      	bne.n	80072ba <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	8a7b      	ldrh	r3, [r7, #18]
 80072aa:	4013      	ands	r3, r2
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	3302      	adds	r3, #2
 80072b6:	61bb      	str	r3, [r7, #24]
 80072b8:	e00d      	b.n	80072d6 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	8a7b      	ldrh	r3, [r7, #18]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	4013      	ands	r3, r2
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	3301      	adds	r3, #1
 80072d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1c5      	bne.n	8007280 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8007300:	2302      	movs	r3, #2
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	b5b0      	push	{r4, r5, r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4313      	orrs	r3, r2
 800732e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4bb1      	ldr	r3, [pc, #708]	; (80075fc <UART_SetConfig+0x2f0>)
 8007338:	4013      	ands	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	69f9      	ldr	r1, [r7, #28]
 8007340:	430b      	orrs	r3, r1
 8007342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4aa6      	ldr	r2, [pc, #664]	; (8007600 <UART_SetConfig+0x2f4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	4313      	orrs	r3, r2
 8007372:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800737e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	69f9      	ldr	r1, [r7, #28]
 8007388:	430b      	orrs	r3, r1
 800738a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007392:	f023 010f 	bic.w	r1, r3, #15
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a97      	ldr	r2, [pc, #604]	; (8007604 <UART_SetConfig+0x2f8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d120      	bne.n	80073ee <UART_SetConfig+0xe2>
 80073ac:	4b96      	ldr	r3, [pc, #600]	; (8007608 <UART_SetConfig+0x2fc>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d816      	bhi.n	80073e8 <UART_SetConfig+0xdc>
 80073ba:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <UART_SetConfig+0xb4>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073d1 	.word	0x080073d1
 80073c4:	080073dd 	.word	0x080073dd
 80073c8:	080073d7 	.word	0x080073d7
 80073cc:	080073e3 	.word	0x080073e3
 80073d0:	2301      	movs	r3, #1
 80073d2:	76fb      	strb	r3, [r7, #27]
 80073d4:	e0e7      	b.n	80075a6 <UART_SetConfig+0x29a>
 80073d6:	2302      	movs	r3, #2
 80073d8:	76fb      	strb	r3, [r7, #27]
 80073da:	e0e4      	b.n	80075a6 <UART_SetConfig+0x29a>
 80073dc:	2304      	movs	r3, #4
 80073de:	76fb      	strb	r3, [r7, #27]
 80073e0:	e0e1      	b.n	80075a6 <UART_SetConfig+0x29a>
 80073e2:	2308      	movs	r3, #8
 80073e4:	76fb      	strb	r3, [r7, #27]
 80073e6:	e0de      	b.n	80075a6 <UART_SetConfig+0x29a>
 80073e8:	2310      	movs	r3, #16
 80073ea:	76fb      	strb	r3, [r7, #27]
 80073ec:	e0db      	b.n	80075a6 <UART_SetConfig+0x29a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a86      	ldr	r2, [pc, #536]	; (800760c <UART_SetConfig+0x300>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d132      	bne.n	800745e <UART_SetConfig+0x152>
 80073f8:	4b83      	ldr	r3, [pc, #524]	; (8007608 <UART_SetConfig+0x2fc>)
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	f003 030c 	and.w	r3, r3, #12
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d828      	bhi.n	8007458 <UART_SetConfig+0x14c>
 8007406:	a201      	add	r2, pc, #4	; (adr r2, 800740c <UART_SetConfig+0x100>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	08007441 	.word	0x08007441
 8007410:	08007459 	.word	0x08007459
 8007414:	08007459 	.word	0x08007459
 8007418:	08007459 	.word	0x08007459
 800741c:	0800744d 	.word	0x0800744d
 8007420:	08007459 	.word	0x08007459
 8007424:	08007459 	.word	0x08007459
 8007428:	08007459 	.word	0x08007459
 800742c:	08007447 	.word	0x08007447
 8007430:	08007459 	.word	0x08007459
 8007434:	08007459 	.word	0x08007459
 8007438:	08007459 	.word	0x08007459
 800743c:	08007453 	.word	0x08007453
 8007440:	2300      	movs	r3, #0
 8007442:	76fb      	strb	r3, [r7, #27]
 8007444:	e0af      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007446:	2302      	movs	r3, #2
 8007448:	76fb      	strb	r3, [r7, #27]
 800744a:	e0ac      	b.n	80075a6 <UART_SetConfig+0x29a>
 800744c:	2304      	movs	r3, #4
 800744e:	76fb      	strb	r3, [r7, #27]
 8007450:	e0a9      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007452:	2308      	movs	r3, #8
 8007454:	76fb      	strb	r3, [r7, #27]
 8007456:	e0a6      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007458:	2310      	movs	r3, #16
 800745a:	76fb      	strb	r3, [r7, #27]
 800745c:	e0a3      	b.n	80075a6 <UART_SetConfig+0x29a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a6b      	ldr	r2, [pc, #428]	; (8007610 <UART_SetConfig+0x304>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d120      	bne.n	80074aa <UART_SetConfig+0x19e>
 8007468:	4b67      	ldr	r3, [pc, #412]	; (8007608 <UART_SetConfig+0x2fc>)
 800746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007472:	2b30      	cmp	r3, #48	; 0x30
 8007474:	d013      	beq.n	800749e <UART_SetConfig+0x192>
 8007476:	2b30      	cmp	r3, #48	; 0x30
 8007478:	d814      	bhi.n	80074a4 <UART_SetConfig+0x198>
 800747a:	2b20      	cmp	r3, #32
 800747c:	d009      	beq.n	8007492 <UART_SetConfig+0x186>
 800747e:	2b20      	cmp	r3, #32
 8007480:	d810      	bhi.n	80074a4 <UART_SetConfig+0x198>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <UART_SetConfig+0x180>
 8007486:	2b10      	cmp	r3, #16
 8007488:	d006      	beq.n	8007498 <UART_SetConfig+0x18c>
 800748a:	e00b      	b.n	80074a4 <UART_SetConfig+0x198>
 800748c:	2300      	movs	r3, #0
 800748e:	76fb      	strb	r3, [r7, #27]
 8007490:	e089      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007492:	2302      	movs	r3, #2
 8007494:	76fb      	strb	r3, [r7, #27]
 8007496:	e086      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007498:	2304      	movs	r3, #4
 800749a:	76fb      	strb	r3, [r7, #27]
 800749c:	e083      	b.n	80075a6 <UART_SetConfig+0x29a>
 800749e:	2308      	movs	r3, #8
 80074a0:	76fb      	strb	r3, [r7, #27]
 80074a2:	e080      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074a4:	2310      	movs	r3, #16
 80074a6:	76fb      	strb	r3, [r7, #27]
 80074a8:	e07d      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a59      	ldr	r2, [pc, #356]	; (8007614 <UART_SetConfig+0x308>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d120      	bne.n	80074f6 <UART_SetConfig+0x1ea>
 80074b4:	4b54      	ldr	r3, [pc, #336]	; (8007608 <UART_SetConfig+0x2fc>)
 80074b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074be:	2bc0      	cmp	r3, #192	; 0xc0
 80074c0:	d013      	beq.n	80074ea <UART_SetConfig+0x1de>
 80074c2:	2bc0      	cmp	r3, #192	; 0xc0
 80074c4:	d814      	bhi.n	80074f0 <UART_SetConfig+0x1e4>
 80074c6:	2b80      	cmp	r3, #128	; 0x80
 80074c8:	d009      	beq.n	80074de <UART_SetConfig+0x1d2>
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d810      	bhi.n	80074f0 <UART_SetConfig+0x1e4>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <UART_SetConfig+0x1cc>
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d006      	beq.n	80074e4 <UART_SetConfig+0x1d8>
 80074d6:	e00b      	b.n	80074f0 <UART_SetConfig+0x1e4>
 80074d8:	2300      	movs	r3, #0
 80074da:	76fb      	strb	r3, [r7, #27]
 80074dc:	e063      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074de:	2302      	movs	r3, #2
 80074e0:	76fb      	strb	r3, [r7, #27]
 80074e2:	e060      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074e4:	2304      	movs	r3, #4
 80074e6:	76fb      	strb	r3, [r7, #27]
 80074e8:	e05d      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074ea:	2308      	movs	r3, #8
 80074ec:	76fb      	strb	r3, [r7, #27]
 80074ee:	e05a      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074f0:	2310      	movs	r3, #16
 80074f2:	76fb      	strb	r3, [r7, #27]
 80074f4:	e057      	b.n	80075a6 <UART_SetConfig+0x29a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a47      	ldr	r2, [pc, #284]	; (8007618 <UART_SetConfig+0x30c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d125      	bne.n	800754c <UART_SetConfig+0x240>
 8007500:	4b41      	ldr	r3, [pc, #260]	; (8007608 <UART_SetConfig+0x2fc>)
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800750e:	d017      	beq.n	8007540 <UART_SetConfig+0x234>
 8007510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007514:	d817      	bhi.n	8007546 <UART_SetConfig+0x23a>
 8007516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800751a:	d00b      	beq.n	8007534 <UART_SetConfig+0x228>
 800751c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007520:	d811      	bhi.n	8007546 <UART_SetConfig+0x23a>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <UART_SetConfig+0x222>
 8007526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752a:	d006      	beq.n	800753a <UART_SetConfig+0x22e>
 800752c:	e00b      	b.n	8007546 <UART_SetConfig+0x23a>
 800752e:	2300      	movs	r3, #0
 8007530:	76fb      	strb	r3, [r7, #27]
 8007532:	e038      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007534:	2302      	movs	r3, #2
 8007536:	76fb      	strb	r3, [r7, #27]
 8007538:	e035      	b.n	80075a6 <UART_SetConfig+0x29a>
 800753a:	2304      	movs	r3, #4
 800753c:	76fb      	strb	r3, [r7, #27]
 800753e:	e032      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007540:	2308      	movs	r3, #8
 8007542:	76fb      	strb	r3, [r7, #27]
 8007544:	e02f      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007546:	2310      	movs	r3, #16
 8007548:	76fb      	strb	r3, [r7, #27]
 800754a:	e02c      	b.n	80075a6 <UART_SetConfig+0x29a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a2b      	ldr	r2, [pc, #172]	; (8007600 <UART_SetConfig+0x2f4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d125      	bne.n	80075a2 <UART_SetConfig+0x296>
 8007556:	4b2c      	ldr	r3, [pc, #176]	; (8007608 <UART_SetConfig+0x2fc>)
 8007558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800755c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007564:	d017      	beq.n	8007596 <UART_SetConfig+0x28a>
 8007566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800756a:	d817      	bhi.n	800759c <UART_SetConfig+0x290>
 800756c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007570:	d00b      	beq.n	800758a <UART_SetConfig+0x27e>
 8007572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007576:	d811      	bhi.n	800759c <UART_SetConfig+0x290>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <UART_SetConfig+0x278>
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007580:	d006      	beq.n	8007590 <UART_SetConfig+0x284>
 8007582:	e00b      	b.n	800759c <UART_SetConfig+0x290>
 8007584:	2300      	movs	r3, #0
 8007586:	76fb      	strb	r3, [r7, #27]
 8007588:	e00d      	b.n	80075a6 <UART_SetConfig+0x29a>
 800758a:	2302      	movs	r3, #2
 800758c:	76fb      	strb	r3, [r7, #27]
 800758e:	e00a      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007590:	2304      	movs	r3, #4
 8007592:	76fb      	strb	r3, [r7, #27]
 8007594:	e007      	b.n	80075a6 <UART_SetConfig+0x29a>
 8007596:	2308      	movs	r3, #8
 8007598:	76fb      	strb	r3, [r7, #27]
 800759a:	e004      	b.n	80075a6 <UART_SetConfig+0x29a>
 800759c:	2310      	movs	r3, #16
 800759e:	76fb      	strb	r3, [r7, #27]
 80075a0:	e001      	b.n	80075a6 <UART_SetConfig+0x29a>
 80075a2:	2310      	movs	r3, #16
 80075a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a15      	ldr	r2, [pc, #84]	; (8007600 <UART_SetConfig+0x2f4>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	f040 809f 	bne.w	80076f0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075b2:	7efb      	ldrb	r3, [r7, #27]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d837      	bhi.n	8007628 <UART_SetConfig+0x31c>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0x2b4>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075e5 	.word	0x080075e5
 80075c4:	08007629 	.word	0x08007629
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	08007629 	.word	0x08007629
 80075d0:	080075f3 	.word	0x080075f3
 80075d4:	08007629 	.word	0x08007629
 80075d8:	08007629 	.word	0x08007629
 80075dc:	08007629 	.word	0x08007629
 80075e0:	08007621 	.word	0x08007621
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e4:	f7fd fe7c 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 80075e8:	6178      	str	r0, [r7, #20]
        break;
 80075ea:	e022      	b.n	8007632 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b0b      	ldr	r3, [pc, #44]	; (800761c <UART_SetConfig+0x310>)
 80075ee:	617b      	str	r3, [r7, #20]
        break;
 80075f0:	e01f      	b.n	8007632 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd fddd 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 80075f6:	6178      	str	r0, [r7, #20]
        break;
 80075f8:	e01b      	b.n	8007632 <UART_SetConfig+0x326>
 80075fa:	bf00      	nop
 80075fc:	cfff69f3 	.word	0xcfff69f3
 8007600:	40008000 	.word	0x40008000
 8007604:	40013800 	.word	0x40013800
 8007608:	40021000 	.word	0x40021000
 800760c:	40004400 	.word	0x40004400
 8007610:	40004800 	.word	0x40004800
 8007614:	40004c00 	.word	0x40004c00
 8007618:	40005000 	.word	0x40005000
 800761c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007624:	617b      	str	r3, [r7, #20]
        break;
 8007626:	e004      	b.n	8007632 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	76bb      	strb	r3, [r7, #26]
        break;
 8007630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8119 	beq.w	800786c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	4a95      	ldr	r2, [pc, #596]	; (8007894 <UART_SetConfig+0x588>)
 8007640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007644:	461a      	mov	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	fbb3 f3f2 	udiv	r3, r3, r2
 800764c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	d305      	bcc.n	800766a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	429a      	cmp	r2, r3
 8007668:	d902      	bls.n	8007670 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	76bb      	strb	r3, [r7, #26]
 800766e:	e0fd      	b.n	800786c <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4618      	mov	r0, r3
 8007674:	f04f 0100 	mov.w	r1, #0
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	4a85      	ldr	r2, [pc, #532]	; (8007894 <UART_SetConfig+0x588>)
 800767e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007682:	b29a      	uxth	r2, r3
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	f7f9 fb06 	bl	8000c98 <__aeabi_uldivmod>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4610      	mov	r0, r2
 8007692:	4619      	mov	r1, r3
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	020b      	lsls	r3, r1, #8
 800769e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076a2:	0202      	lsls	r2, r0, #8
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	6849      	ldr	r1, [r1, #4]
 80076a8:	0849      	lsrs	r1, r1, #1
 80076aa:	4608      	mov	r0, r1
 80076ac:	f04f 0100 	mov.w	r1, #0
 80076b0:	1814      	adds	r4, r2, r0
 80076b2:	eb43 0501 	adc.w	r5, r3, r1
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	4620      	mov	r0, r4
 80076c2:	4629      	mov	r1, r5
 80076c4:	f7f9 fae8 	bl	8000c98 <__aeabi_uldivmod>
 80076c8:	4602      	mov	r2, r0
 80076ca:	460b      	mov	r3, r1
 80076cc:	4613      	mov	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076d6:	d308      	bcc.n	80076ea <UART_SetConfig+0x3de>
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076de:	d204      	bcs.n	80076ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	60da      	str	r2, [r3, #12]
 80076e8:	e0c0      	b.n	800786c <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	76bb      	strb	r3, [r7, #26]
 80076ee:	e0bd      	b.n	800786c <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f8:	d164      	bne.n	80077c4 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80076fa:	7efb      	ldrb	r3, [r7, #27]
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d828      	bhi.n	8007752 <UART_SetConfig+0x446>
 8007700:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <UART_SetConfig+0x3fc>)
 8007702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007706:	bf00      	nop
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007735 	.word	0x08007735
 8007710:	0800773d 	.word	0x0800773d
 8007714:	08007753 	.word	0x08007753
 8007718:	08007743 	.word	0x08007743
 800771c:	08007753 	.word	0x08007753
 8007720:	08007753 	.word	0x08007753
 8007724:	08007753 	.word	0x08007753
 8007728:	0800774b 	.word	0x0800774b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800772c:	f7fd fdd8 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 8007730:	6178      	str	r0, [r7, #20]
        break;
 8007732:	e013      	b.n	800775c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007734:	f7fd fdea 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 8007738:	6178      	str	r0, [r7, #20]
        break;
 800773a:	e00f      	b.n	800775c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800773c:	4b56      	ldr	r3, [pc, #344]	; (8007898 <UART_SetConfig+0x58c>)
 800773e:	617b      	str	r3, [r7, #20]
        break;
 8007740:	e00c      	b.n	800775c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007742:	f7fd fd35 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 8007746:	6178      	str	r0, [r7, #20]
        break;
 8007748:	e008      	b.n	800775c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800774a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800774e:	617b      	str	r3, [r7, #20]
        break;
 8007750:	e004      	b.n	800775c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	76bb      	strb	r3, [r7, #26]
        break;
 800775a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 8084 	beq.w	800786c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	4a4a      	ldr	r2, [pc, #296]	; (8007894 <UART_SetConfig+0x588>)
 800776a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800776e:	461a      	mov	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	fbb3 f3f2 	udiv	r3, r3, r2
 8007776:	005a      	lsls	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	441a      	add	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	fbb2 f3f3 	udiv	r3, r2, r3
 8007788:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b0f      	cmp	r3, #15
 800778e:	d916      	bls.n	80077be <UART_SetConfig+0x4b2>
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007796:	d212      	bcs.n	80077be <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	b29b      	uxth	r3, r3
 800779c:	f023 030f 	bic.w	r3, r3, #15
 80077a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	89fb      	ldrh	r3, [r7, #14]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	89fa      	ldrh	r2, [r7, #14]
 80077ba:	60da      	str	r2, [r3, #12]
 80077bc:	e056      	b.n	800786c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	76bb      	strb	r3, [r7, #26]
 80077c2:	e053      	b.n	800786c <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077c4:	7efb      	ldrb	r3, [r7, #27]
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d827      	bhi.n	800781a <UART_SetConfig+0x50e>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <UART_SetConfig+0x4c4>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fd fd74 	bl	80052e0 <HAL_RCC_GetPCLK1Freq>
 80077f8:	6178      	str	r0, [r7, #20]
        break;
 80077fa:	e013      	b.n	8007824 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fd fd86 	bl	800530c <HAL_RCC_GetPCLK2Freq>
 8007800:	6178      	str	r0, [r7, #20]
        break;
 8007802:	e00f      	b.n	8007824 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b24      	ldr	r3, [pc, #144]	; (8007898 <UART_SetConfig+0x58c>)
 8007806:	617b      	str	r3, [r7, #20]
        break;
 8007808:	e00c      	b.n	8007824 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fd fcd1 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800780e:	6178      	str	r0, [r7, #20]
        break;
 8007810:	e008      	b.n	8007824 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	617b      	str	r3, [r7, #20]
        break;
 8007818:	e004      	b.n	8007824 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	76bb      	strb	r3, [r7, #26]
        break;
 8007822:	bf00      	nop
    }

    if (pclk != 0U)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d020      	beq.n	800786c <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	4a19      	ldr	r2, [pc, #100]	; (8007894 <UART_SetConfig+0x588>)
 8007830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007834:	461a      	mov	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	fbb3 f2f2 	udiv	r2, r3, r2
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	085b      	lsrs	r3, r3, #1
 8007842:	441a      	add	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	fbb2 f3f3 	udiv	r3, r2, r3
 800784c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b0f      	cmp	r3, #15
 8007852:	d909      	bls.n	8007868 <UART_SetConfig+0x55c>
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785a:	d205      	bcs.n	8007868 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	e001      	b.n	800786c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007888:	7ebb      	ldrb	r3, [r7, #26]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bdb0      	pop	{r4, r5, r7, pc}
 8007892:	bf00      	nop
 8007894:	0800b98c 	.word	0x0800b98c
 8007898:	00f42400 	.word	0x00f42400

0800789c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	f003 0302 	and.w	r3, r3, #2
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01a      	beq.n	80079b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800799a:	d10a      	bne.n	80079b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	605a      	str	r2, [r3, #4]
  }
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079f0:	f7fb fd20 	bl	8003434 <HAL_GetTick>
 80079f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d10e      	bne.n	8007a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f82f 	bl	8007a76 <UART_WaitOnFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e025      	b.n	8007a6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d10e      	bne.n	8007a4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f819 	bl	8007a76 <UART_WaitOnFlagUntilTimeout>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e00f      	b.n	8007a6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2220      	movs	r2, #32
 8007a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b09c      	sub	sp, #112	; 0x70
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a86:	e0a9      	b.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a8e:	f000 80a5 	beq.w	8007bdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a92:	f7fb fccf 	bl	8003434 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d302      	bcc.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d140      	bne.n	8007b2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007abc:	667b      	str	r3, [r7, #100]	; 0x64
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e6      	bne.n	8007aa8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	663b      	str	r3, [r7, #96]	; 0x60
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007afa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e069      	b.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d051      	beq.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b46:	d149      	bne.n	8007bdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
 8007b72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e6      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	613b      	str	r3, [r7, #16]
   return(result);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ba4:	623a      	str	r2, [r7, #32]
 8007ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	69f9      	ldr	r1, [r7, #28]
 8007baa:	6a3a      	ldr	r2, [r7, #32]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e5      	bne.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e010      	b.n	8007bfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69da      	ldr	r2, [r3, #28]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	4013      	ands	r3, r2
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	f43f af46 	beq.w	8007a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3770      	adds	r7, #112	; 0x70
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_UARTEx_DisableFifoMode+0x16>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e027      	b.n	8007c6c <HAL_UARTEx_DisableFifoMode+0x66>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2224      	movs	r2, #36	; 0x24
 8007c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f022 0201 	bic.w	r2, r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e02d      	b.n	8007cec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2224      	movs	r2, #36	; 0x24
 8007c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0201 	bic.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f84f 	bl	8007d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e02d      	b.n	8007d68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2224      	movs	r2, #36	; 0x24
 8007d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f811 	bl	8007d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d108      	bne.n	8007d92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d90:	e031      	b.n	8007df6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d92:	2308      	movs	r3, #8
 8007d94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d96:	2308      	movs	r3, #8
 8007d98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	0e5b      	lsrs	r3, r3, #25
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	0f5b      	lsrs	r3, r3, #29
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	7b3a      	ldrb	r2, [r7, #12]
 8007dbe:	4911      	ldr	r1, [pc, #68]	; (8007e04 <UARTEx_SetNbDataToProcess+0x94>)
 8007dc0:	5c8a      	ldrb	r2, [r1, r2]
 8007dc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007dc6:	7b3a      	ldrb	r2, [r7, #12]
 8007dc8:	490f      	ldr	r1, [pc, #60]	; (8007e08 <UARTEx_SetNbDataToProcess+0x98>)
 8007dca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	7b7a      	ldrb	r2, [r7, #13]
 8007ddc:	4909      	ldr	r1, [pc, #36]	; (8007e04 <UARTEx_SetNbDataToProcess+0x94>)
 8007dde:	5c8a      	ldrb	r2, [r1, r2]
 8007de0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007de4:	7b7a      	ldrb	r2, [r7, #13]
 8007de6:	4908      	ldr	r1, [pc, #32]	; (8007e08 <UARTEx_SetNbDataToProcess+0x98>)
 8007de8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007dea:	fb93 f3f2 	sdiv	r3, r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	0800b9a4 	.word	0x0800b9a4
 8007e08:	0800b9ac 	.word	0x0800b9ac

08007e0c <__assert_func>:
 8007e0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e0e:	4614      	mov	r4, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <__assert_func+0x2c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4605      	mov	r5, r0
 8007e18:	68d8      	ldr	r0, [r3, #12]
 8007e1a:	b14c      	cbz	r4, 8007e30 <__assert_func+0x24>
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <__assert_func+0x30>)
 8007e1e:	9100      	str	r1, [sp, #0]
 8007e20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e24:	4906      	ldr	r1, [pc, #24]	; (8007e40 <__assert_func+0x34>)
 8007e26:	462b      	mov	r3, r5
 8007e28:	f000 f828 	bl	8007e7c <fiprintf>
 8007e2c:	f001 f870 	bl	8008f10 <abort>
 8007e30:	4b04      	ldr	r3, [pc, #16]	; (8007e44 <__assert_func+0x38>)
 8007e32:	461c      	mov	r4, r3
 8007e34:	e7f3      	b.n	8007e1e <__assert_func+0x12>
 8007e36:	bf00      	nop
 8007e38:	2000000c 	.word	0x2000000c
 8007e3c:	0800b9b4 	.word	0x0800b9b4
 8007e40:	0800b9c1 	.word	0x0800b9c1
 8007e44:	0800b9ef 	.word	0x0800b9ef

08007e48 <__errno>:
 8007e48:	4b01      	ldr	r3, [pc, #4]	; (8007e50 <__errno+0x8>)
 8007e4a:	6818      	ldr	r0, [r3, #0]
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	2000000c 	.word	0x2000000c

08007e54 <exit>:
 8007e54:	b508      	push	{r3, lr}
 8007e56:	4b07      	ldr	r3, [pc, #28]	; (8007e74 <exit+0x20>)
 8007e58:	4604      	mov	r4, r0
 8007e5a:	b113      	cbz	r3, 8007e62 <exit+0xe>
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f3af 8000 	nop.w
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <exit+0x24>)
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e68:	b103      	cbz	r3, 8007e6c <exit+0x18>
 8007e6a:	4798      	blx	r3
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f7fb f990 	bl	8003192 <_exit>
 8007e72:	bf00      	nop
 8007e74:	00000000 	.word	0x00000000
 8007e78:	0800b9f0 	.word	0x0800b9f0

08007e7c <fiprintf>:
 8007e7c:	b40e      	push	{r1, r2, r3}
 8007e7e:	b503      	push	{r0, r1, lr}
 8007e80:	4601      	mov	r1, r0
 8007e82:	ab03      	add	r3, sp, #12
 8007e84:	4805      	ldr	r0, [pc, #20]	; (8007e9c <fiprintf+0x20>)
 8007e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8a:	6800      	ldr	r0, [r0, #0]
 8007e8c:	9301      	str	r3, [sp, #4]
 8007e8e:	f000 f90f 	bl	80080b0 <_vfiprintf_r>
 8007e92:	b002      	add	sp, #8
 8007e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e98:	b003      	add	sp, #12
 8007e9a:	4770      	bx	lr
 8007e9c:	2000000c 	.word	0x2000000c

08007ea0 <__libc_init_array>:
 8007ea0:	b570      	push	{r4, r5, r6, lr}
 8007ea2:	4d0d      	ldr	r5, [pc, #52]	; (8007ed8 <__libc_init_array+0x38>)
 8007ea4:	4c0d      	ldr	r4, [pc, #52]	; (8007edc <__libc_init_array+0x3c>)
 8007ea6:	1b64      	subs	r4, r4, r5
 8007ea8:	10a4      	asrs	r4, r4, #2
 8007eaa:	2600      	movs	r6, #0
 8007eac:	42a6      	cmp	r6, r4
 8007eae:	d109      	bne.n	8007ec4 <__libc_init_array+0x24>
 8007eb0:	4d0b      	ldr	r5, [pc, #44]	; (8007ee0 <__libc_init_array+0x40>)
 8007eb2:	4c0c      	ldr	r4, [pc, #48]	; (8007ee4 <__libc_init_array+0x44>)
 8007eb4:	f002 ff2a 	bl	800ad0c <_init>
 8007eb8:	1b64      	subs	r4, r4, r5
 8007eba:	10a4      	asrs	r4, r4, #2
 8007ebc:	2600      	movs	r6, #0
 8007ebe:	42a6      	cmp	r6, r4
 8007ec0:	d105      	bne.n	8007ece <__libc_init_array+0x2e>
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec8:	4798      	blx	r3
 8007eca:	3601      	adds	r6, #1
 8007ecc:	e7ee      	b.n	8007eac <__libc_init_array+0xc>
 8007ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed2:	4798      	blx	r3
 8007ed4:	3601      	adds	r6, #1
 8007ed6:	e7f2      	b.n	8007ebe <__libc_init_array+0x1e>
 8007ed8:	0800bda0 	.word	0x0800bda0
 8007edc:	0800bda0 	.word	0x0800bda0
 8007ee0:	0800bda0 	.word	0x0800bda0
 8007ee4:	0800bda4 	.word	0x0800bda4

08007ee8 <malloc>:
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <malloc+0xc>)
 8007eea:	4601      	mov	r1, r0
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f000 b85b 	b.w	8007fa8 <_malloc_r>
 8007ef2:	bf00      	nop
 8007ef4:	2000000c 	.word	0x2000000c

08007ef8 <memset>:
 8007ef8:	4402      	add	r2, r0
 8007efa:	4603      	mov	r3, r0
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d100      	bne.n	8007f02 <memset+0xa>
 8007f00:	4770      	bx	lr
 8007f02:	f803 1b01 	strb.w	r1, [r3], #1
 8007f06:	e7f9      	b.n	8007efc <memset+0x4>

08007f08 <_free_r>:
 8007f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f0a:	2900      	cmp	r1, #0
 8007f0c:	d048      	beq.n	8007fa0 <_free_r+0x98>
 8007f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f12:	9001      	str	r0, [sp, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f1a1 0404 	sub.w	r4, r1, #4
 8007f1a:	bfb8      	it	lt
 8007f1c:	18e4      	addlt	r4, r4, r3
 8007f1e:	f002 f8c3 	bl	800a0a8 <__malloc_lock>
 8007f22:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <_free_r+0x9c>)
 8007f24:	9801      	ldr	r0, [sp, #4]
 8007f26:	6813      	ldr	r3, [r2, #0]
 8007f28:	4615      	mov	r5, r2
 8007f2a:	b933      	cbnz	r3, 8007f3a <_free_r+0x32>
 8007f2c:	6063      	str	r3, [r4, #4]
 8007f2e:	6014      	str	r4, [r2, #0]
 8007f30:	b003      	add	sp, #12
 8007f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f36:	f002 b8bd 	b.w	800a0b4 <__malloc_unlock>
 8007f3a:	42a3      	cmp	r3, r4
 8007f3c:	d90b      	bls.n	8007f56 <_free_r+0x4e>
 8007f3e:	6821      	ldr	r1, [r4, #0]
 8007f40:	1862      	adds	r2, r4, r1
 8007f42:	4293      	cmp	r3, r2
 8007f44:	bf04      	itt	eq
 8007f46:	681a      	ldreq	r2, [r3, #0]
 8007f48:	685b      	ldreq	r3, [r3, #4]
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	bf04      	itt	eq
 8007f4e:	1852      	addeq	r2, r2, r1
 8007f50:	6022      	streq	r2, [r4, #0]
 8007f52:	602c      	str	r4, [r5, #0]
 8007f54:	e7ec      	b.n	8007f30 <_free_r+0x28>
 8007f56:	461a      	mov	r2, r3
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	b10b      	cbz	r3, 8007f60 <_free_r+0x58>
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d9fa      	bls.n	8007f56 <_free_r+0x4e>
 8007f60:	6811      	ldr	r1, [r2, #0]
 8007f62:	1855      	adds	r5, r2, r1
 8007f64:	42a5      	cmp	r5, r4
 8007f66:	d10b      	bne.n	8007f80 <_free_r+0x78>
 8007f68:	6824      	ldr	r4, [r4, #0]
 8007f6a:	4421      	add	r1, r4
 8007f6c:	1854      	adds	r4, r2, r1
 8007f6e:	42a3      	cmp	r3, r4
 8007f70:	6011      	str	r1, [r2, #0]
 8007f72:	d1dd      	bne.n	8007f30 <_free_r+0x28>
 8007f74:	681c      	ldr	r4, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	6053      	str	r3, [r2, #4]
 8007f7a:	4421      	add	r1, r4
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	e7d7      	b.n	8007f30 <_free_r+0x28>
 8007f80:	d902      	bls.n	8007f88 <_free_r+0x80>
 8007f82:	230c      	movs	r3, #12
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	e7d3      	b.n	8007f30 <_free_r+0x28>
 8007f88:	6825      	ldr	r5, [r4, #0]
 8007f8a:	1961      	adds	r1, r4, r5
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	bf04      	itt	eq
 8007f90:	6819      	ldreq	r1, [r3, #0]
 8007f92:	685b      	ldreq	r3, [r3, #4]
 8007f94:	6063      	str	r3, [r4, #4]
 8007f96:	bf04      	itt	eq
 8007f98:	1949      	addeq	r1, r1, r5
 8007f9a:	6021      	streq	r1, [r4, #0]
 8007f9c:	6054      	str	r4, [r2, #4]
 8007f9e:	e7c7      	b.n	8007f30 <_free_r+0x28>
 8007fa0:	b003      	add	sp, #12
 8007fa2:	bd30      	pop	{r4, r5, pc}
 8007fa4:	20000610 	.word	0x20000610

08007fa8 <_malloc_r>:
 8007fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007faa:	1ccd      	adds	r5, r1, #3
 8007fac:	f025 0503 	bic.w	r5, r5, #3
 8007fb0:	3508      	adds	r5, #8
 8007fb2:	2d0c      	cmp	r5, #12
 8007fb4:	bf38      	it	cc
 8007fb6:	250c      	movcc	r5, #12
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	4606      	mov	r6, r0
 8007fbc:	db01      	blt.n	8007fc2 <_malloc_r+0x1a>
 8007fbe:	42a9      	cmp	r1, r5
 8007fc0:	d903      	bls.n	8007fca <_malloc_r+0x22>
 8007fc2:	230c      	movs	r3, #12
 8007fc4:	6033      	str	r3, [r6, #0]
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fca:	f002 f86d 	bl	800a0a8 <__malloc_lock>
 8007fce:	4921      	ldr	r1, [pc, #132]	; (8008054 <_malloc_r+0xac>)
 8007fd0:	680a      	ldr	r2, [r1, #0]
 8007fd2:	4614      	mov	r4, r2
 8007fd4:	b99c      	cbnz	r4, 8007ffe <_malloc_r+0x56>
 8007fd6:	4f20      	ldr	r7, [pc, #128]	; (8008058 <_malloc_r+0xb0>)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	b923      	cbnz	r3, 8007fe6 <_malloc_r+0x3e>
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f000 fe8e 	bl	8008d00 <_sbrk_r>
 8007fe4:	6038      	str	r0, [r7, #0]
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 fe89 	bl	8008d00 <_sbrk_r>
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	d123      	bne.n	800803a <_malloc_r+0x92>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f002 f85c 	bl	800a0b4 <__malloc_unlock>
 8007ffc:	e7e3      	b.n	8007fc6 <_malloc_r+0x1e>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	1b5b      	subs	r3, r3, r5
 8008002:	d417      	bmi.n	8008034 <_malloc_r+0x8c>
 8008004:	2b0b      	cmp	r3, #11
 8008006:	d903      	bls.n	8008010 <_malloc_r+0x68>
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	441c      	add	r4, r3
 800800c:	6025      	str	r5, [r4, #0]
 800800e:	e004      	b.n	800801a <_malloc_r+0x72>
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	42a2      	cmp	r2, r4
 8008014:	bf0c      	ite	eq
 8008016:	600b      	streq	r3, [r1, #0]
 8008018:	6053      	strne	r3, [r2, #4]
 800801a:	4630      	mov	r0, r6
 800801c:	f002 f84a 	bl	800a0b4 <__malloc_unlock>
 8008020:	f104 000b 	add.w	r0, r4, #11
 8008024:	1d23      	adds	r3, r4, #4
 8008026:	f020 0007 	bic.w	r0, r0, #7
 800802a:	1ac2      	subs	r2, r0, r3
 800802c:	d0cc      	beq.n	8007fc8 <_malloc_r+0x20>
 800802e:	1a1b      	subs	r3, r3, r0
 8008030:	50a3      	str	r3, [r4, r2]
 8008032:	e7c9      	b.n	8007fc8 <_malloc_r+0x20>
 8008034:	4622      	mov	r2, r4
 8008036:	6864      	ldr	r4, [r4, #4]
 8008038:	e7cc      	b.n	8007fd4 <_malloc_r+0x2c>
 800803a:	1cc4      	adds	r4, r0, #3
 800803c:	f024 0403 	bic.w	r4, r4, #3
 8008040:	42a0      	cmp	r0, r4
 8008042:	d0e3      	beq.n	800800c <_malloc_r+0x64>
 8008044:	1a21      	subs	r1, r4, r0
 8008046:	4630      	mov	r0, r6
 8008048:	f000 fe5a 	bl	8008d00 <_sbrk_r>
 800804c:	3001      	adds	r0, #1
 800804e:	d1dd      	bne.n	800800c <_malloc_r+0x64>
 8008050:	e7cf      	b.n	8007ff2 <_malloc_r+0x4a>
 8008052:	bf00      	nop
 8008054:	20000610 	.word	0x20000610
 8008058:	20000614 	.word	0x20000614

0800805c <__sfputc_r>:
 800805c:	6893      	ldr	r3, [r2, #8]
 800805e:	3b01      	subs	r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	b410      	push	{r4}
 8008064:	6093      	str	r3, [r2, #8]
 8008066:	da08      	bge.n	800807a <__sfputc_r+0x1e>
 8008068:	6994      	ldr	r4, [r2, #24]
 800806a:	42a3      	cmp	r3, r4
 800806c:	db01      	blt.n	8008072 <__sfputc_r+0x16>
 800806e:	290a      	cmp	r1, #10
 8008070:	d103      	bne.n	800807a <__sfputc_r+0x1e>
 8008072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008076:	f000 be8b 	b.w	8008d90 <__swbuf_r>
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	1c58      	adds	r0, r3, #1
 800807e:	6010      	str	r0, [r2, #0]
 8008080:	7019      	strb	r1, [r3, #0]
 8008082:	4608      	mov	r0, r1
 8008084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008088:	4770      	bx	lr

0800808a <__sfputs_r>:
 800808a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	4614      	mov	r4, r2
 8008092:	18d5      	adds	r5, r2, r3
 8008094:	42ac      	cmp	r4, r5
 8008096:	d101      	bne.n	800809c <__sfputs_r+0x12>
 8008098:	2000      	movs	r0, #0
 800809a:	e007      	b.n	80080ac <__sfputs_r+0x22>
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	463a      	mov	r2, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ffda 	bl	800805c <__sfputc_r>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d1f3      	bne.n	8008094 <__sfputs_r+0xa>
 80080ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080b0 <_vfiprintf_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	460d      	mov	r5, r1
 80080b6:	b09d      	sub	sp, #116	; 0x74
 80080b8:	4614      	mov	r4, r2
 80080ba:	4698      	mov	r8, r3
 80080bc:	4606      	mov	r6, r0
 80080be:	b118      	cbz	r0, 80080c8 <_vfiprintf_r+0x18>
 80080c0:	6983      	ldr	r3, [r0, #24]
 80080c2:	b90b      	cbnz	r3, 80080c8 <_vfiprintf_r+0x18>
 80080c4:	f001 febe 	bl	8009e44 <__sinit>
 80080c8:	4b89      	ldr	r3, [pc, #548]	; (80082f0 <_vfiprintf_r+0x240>)
 80080ca:	429d      	cmp	r5, r3
 80080cc:	d11b      	bne.n	8008106 <_vfiprintf_r+0x56>
 80080ce:	6875      	ldr	r5, [r6, #4]
 80080d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080d2:	07d9      	lsls	r1, r3, #31
 80080d4:	d405      	bmi.n	80080e2 <_vfiprintf_r+0x32>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	059a      	lsls	r2, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_vfiprintf_r+0x32>
 80080dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080de:	f001 ff54 	bl	8009f8a <__retarget_lock_acquire_recursive>
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	071b      	lsls	r3, r3, #28
 80080e6:	d501      	bpl.n	80080ec <_vfiprintf_r+0x3c>
 80080e8:	692b      	ldr	r3, [r5, #16]
 80080ea:	b9eb      	cbnz	r3, 8008128 <_vfiprintf_r+0x78>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4630      	mov	r0, r6
 80080f0:	f000 fea0 	bl	8008e34 <__swsetup_r>
 80080f4:	b1c0      	cbz	r0, 8008128 <_vfiprintf_r+0x78>
 80080f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f8:	07dc      	lsls	r4, r3, #31
 80080fa:	d50e      	bpl.n	800811a <_vfiprintf_r+0x6a>
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008100:	b01d      	add	sp, #116	; 0x74
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	4b7b      	ldr	r3, [pc, #492]	; (80082f4 <_vfiprintf_r+0x244>)
 8008108:	429d      	cmp	r5, r3
 800810a:	d101      	bne.n	8008110 <_vfiprintf_r+0x60>
 800810c:	68b5      	ldr	r5, [r6, #8]
 800810e:	e7df      	b.n	80080d0 <_vfiprintf_r+0x20>
 8008110:	4b79      	ldr	r3, [pc, #484]	; (80082f8 <_vfiprintf_r+0x248>)
 8008112:	429d      	cmp	r5, r3
 8008114:	bf08      	it	eq
 8008116:	68f5      	ldreq	r5, [r6, #12]
 8008118:	e7da      	b.n	80080d0 <_vfiprintf_r+0x20>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	0598      	lsls	r0, r3, #22
 800811e:	d4ed      	bmi.n	80080fc <_vfiprintf_r+0x4c>
 8008120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008122:	f001 ff33 	bl	8009f8c <__retarget_lock_release_recursive>
 8008126:	e7e9      	b.n	80080fc <_vfiprintf_r+0x4c>
 8008128:	2300      	movs	r3, #0
 800812a:	9309      	str	r3, [sp, #36]	; 0x24
 800812c:	2320      	movs	r3, #32
 800812e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008132:	f8cd 800c 	str.w	r8, [sp, #12]
 8008136:	2330      	movs	r3, #48	; 0x30
 8008138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082fc <_vfiprintf_r+0x24c>
 800813c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008140:	f04f 0901 	mov.w	r9, #1
 8008144:	4623      	mov	r3, r4
 8008146:	469a      	mov	sl, r3
 8008148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814c:	b10a      	cbz	r2, 8008152 <_vfiprintf_r+0xa2>
 800814e:	2a25      	cmp	r2, #37	; 0x25
 8008150:	d1f9      	bne.n	8008146 <_vfiprintf_r+0x96>
 8008152:	ebba 0b04 	subs.w	fp, sl, r4
 8008156:	d00b      	beq.n	8008170 <_vfiprintf_r+0xc0>
 8008158:	465b      	mov	r3, fp
 800815a:	4622      	mov	r2, r4
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ff93 	bl	800808a <__sfputs_r>
 8008164:	3001      	adds	r0, #1
 8008166:	f000 80aa 	beq.w	80082be <_vfiprintf_r+0x20e>
 800816a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800816c:	445a      	add	r2, fp
 800816e:	9209      	str	r2, [sp, #36]	; 0x24
 8008170:	f89a 3000 	ldrb.w	r3, [sl]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 80a2 	beq.w	80082be <_vfiprintf_r+0x20e>
 800817a:	2300      	movs	r3, #0
 800817c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008184:	f10a 0a01 	add.w	sl, sl, #1
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008190:	931a      	str	r3, [sp, #104]	; 0x68
 8008192:	4654      	mov	r4, sl
 8008194:	2205      	movs	r2, #5
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	4858      	ldr	r0, [pc, #352]	; (80082fc <_vfiprintf_r+0x24c>)
 800819c:	f7f8 f848 	bl	8000230 <memchr>
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	b9d8      	cbnz	r0, 80081dc <_vfiprintf_r+0x12c>
 80081a4:	06d1      	lsls	r1, r2, #27
 80081a6:	bf44      	itt	mi
 80081a8:	2320      	movmi	r3, #32
 80081aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ae:	0713      	lsls	r3, r2, #28
 80081b0:	bf44      	itt	mi
 80081b2:	232b      	movmi	r3, #43	; 0x2b
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b8:	f89a 3000 	ldrb.w	r3, [sl]
 80081bc:	2b2a      	cmp	r3, #42	; 0x2a
 80081be:	d015      	beq.n	80081ec <_vfiprintf_r+0x13c>
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	4654      	mov	r4, sl
 80081c4:	2000      	movs	r0, #0
 80081c6:	f04f 0c0a 	mov.w	ip, #10
 80081ca:	4621      	mov	r1, r4
 80081cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d0:	3b30      	subs	r3, #48	; 0x30
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d94e      	bls.n	8008274 <_vfiprintf_r+0x1c4>
 80081d6:	b1b0      	cbz	r0, 8008206 <_vfiprintf_r+0x156>
 80081d8:	9207      	str	r2, [sp, #28]
 80081da:	e014      	b.n	8008206 <_vfiprintf_r+0x156>
 80081dc:	eba0 0308 	sub.w	r3, r0, r8
 80081e0:	fa09 f303 	lsl.w	r3, r9, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	46a2      	mov	sl, r4
 80081ea:	e7d2      	b.n	8008192 <_vfiprintf_r+0xe2>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d19      	adds	r1, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9103      	str	r1, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbb      	ittet	lt
 80081f8:	425b      	neglt	r3, r3
 80081fa:	f042 0202 	orrlt.w	r2, r2, #2
 80081fe:	9307      	strge	r3, [sp, #28]
 8008200:	9307      	strlt	r3, [sp, #28]
 8008202:	bfb8      	it	lt
 8008204:	9204      	strlt	r2, [sp, #16]
 8008206:	7823      	ldrb	r3, [r4, #0]
 8008208:	2b2e      	cmp	r3, #46	; 0x2e
 800820a:	d10c      	bne.n	8008226 <_vfiprintf_r+0x176>
 800820c:	7863      	ldrb	r3, [r4, #1]
 800820e:	2b2a      	cmp	r3, #42	; 0x2a
 8008210:	d135      	bne.n	800827e <_vfiprintf_r+0x1ce>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfb8      	it	lt
 800821e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008222:	3402      	adds	r4, #2
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800830c <_vfiprintf_r+0x25c>
 800822a:	7821      	ldrb	r1, [r4, #0]
 800822c:	2203      	movs	r2, #3
 800822e:	4650      	mov	r0, sl
 8008230:	f7f7 fffe 	bl	8000230 <memchr>
 8008234:	b140      	cbz	r0, 8008248 <_vfiprintf_r+0x198>
 8008236:	2340      	movs	r3, #64	; 0x40
 8008238:	eba0 000a 	sub.w	r0, r0, sl
 800823c:	fa03 f000 	lsl.w	r0, r3, r0
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	4303      	orrs	r3, r0
 8008244:	3401      	adds	r4, #1
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	482c      	ldr	r0, [pc, #176]	; (8008300 <_vfiprintf_r+0x250>)
 800824e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008252:	2206      	movs	r2, #6
 8008254:	f7f7 ffec 	bl	8000230 <memchr>
 8008258:	2800      	cmp	r0, #0
 800825a:	d03f      	beq.n	80082dc <_vfiprintf_r+0x22c>
 800825c:	4b29      	ldr	r3, [pc, #164]	; (8008304 <_vfiprintf_r+0x254>)
 800825e:	bb1b      	cbnz	r3, 80082a8 <_vfiprintf_r+0x1f8>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	3307      	adds	r3, #7
 8008264:	f023 0307 	bic.w	r3, r3, #7
 8008268:	3308      	adds	r3, #8
 800826a:	9303      	str	r3, [sp, #12]
 800826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826e:	443b      	add	r3, r7
 8008270:	9309      	str	r3, [sp, #36]	; 0x24
 8008272:	e767      	b.n	8008144 <_vfiprintf_r+0x94>
 8008274:	fb0c 3202 	mla	r2, ip, r2, r3
 8008278:	460c      	mov	r4, r1
 800827a:	2001      	movs	r0, #1
 800827c:	e7a5      	b.n	80081ca <_vfiprintf_r+0x11a>
 800827e:	2300      	movs	r3, #0
 8008280:	3401      	adds	r4, #1
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	4619      	mov	r1, r3
 8008286:	f04f 0c0a 	mov.w	ip, #10
 800828a:	4620      	mov	r0, r4
 800828c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008290:	3a30      	subs	r2, #48	; 0x30
 8008292:	2a09      	cmp	r2, #9
 8008294:	d903      	bls.n	800829e <_vfiprintf_r+0x1ee>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0c5      	beq.n	8008226 <_vfiprintf_r+0x176>
 800829a:	9105      	str	r1, [sp, #20]
 800829c:	e7c3      	b.n	8008226 <_vfiprintf_r+0x176>
 800829e:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a2:	4604      	mov	r4, r0
 80082a4:	2301      	movs	r3, #1
 80082a6:	e7f0      	b.n	800828a <_vfiprintf_r+0x1da>
 80082a8:	ab03      	add	r3, sp, #12
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	462a      	mov	r2, r5
 80082ae:	4b16      	ldr	r3, [pc, #88]	; (8008308 <_vfiprintf_r+0x258>)
 80082b0:	a904      	add	r1, sp, #16
 80082b2:	4630      	mov	r0, r6
 80082b4:	f000 f8cc 	bl	8008450 <_printf_float>
 80082b8:	4607      	mov	r7, r0
 80082ba:	1c78      	adds	r0, r7, #1
 80082bc:	d1d6      	bne.n	800826c <_vfiprintf_r+0x1bc>
 80082be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082c0:	07d9      	lsls	r1, r3, #31
 80082c2:	d405      	bmi.n	80082d0 <_vfiprintf_r+0x220>
 80082c4:	89ab      	ldrh	r3, [r5, #12]
 80082c6:	059a      	lsls	r2, r3, #22
 80082c8:	d402      	bmi.n	80082d0 <_vfiprintf_r+0x220>
 80082ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082cc:	f001 fe5e 	bl	8009f8c <__retarget_lock_release_recursive>
 80082d0:	89ab      	ldrh	r3, [r5, #12]
 80082d2:	065b      	lsls	r3, r3, #25
 80082d4:	f53f af12 	bmi.w	80080fc <_vfiprintf_r+0x4c>
 80082d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082da:	e711      	b.n	8008100 <_vfiprintf_r+0x50>
 80082dc:	ab03      	add	r3, sp, #12
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	462a      	mov	r2, r5
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <_vfiprintf_r+0x258>)
 80082e4:	a904      	add	r1, sp, #16
 80082e6:	4630      	mov	r0, r6
 80082e8:	f000 fb56 	bl	8008998 <_printf_i>
 80082ec:	e7e4      	b.n	80082b8 <_vfiprintf_r+0x208>
 80082ee:	bf00      	nop
 80082f0:	0800baf0 	.word	0x0800baf0
 80082f4:	0800bb10 	.word	0x0800bb10
 80082f8:	0800bad0 	.word	0x0800bad0
 80082fc:	0800b9f4 	.word	0x0800b9f4
 8008300:	0800b9fe 	.word	0x0800b9fe
 8008304:	08008451 	.word	0x08008451
 8008308:	0800808b 	.word	0x0800808b
 800830c:	0800b9fa 	.word	0x0800b9fa

08008310 <__cvt>:
 8008310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	ec55 4b10 	vmov	r4, r5, d0
 8008318:	2d00      	cmp	r5, #0
 800831a:	460e      	mov	r6, r1
 800831c:	4619      	mov	r1, r3
 800831e:	462b      	mov	r3, r5
 8008320:	bfbb      	ittet	lt
 8008322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008326:	461d      	movlt	r5, r3
 8008328:	2300      	movge	r3, #0
 800832a:	232d      	movlt	r3, #45	; 0x2d
 800832c:	700b      	strb	r3, [r1, #0]
 800832e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008334:	4691      	mov	r9, r2
 8008336:	f023 0820 	bic.w	r8, r3, #32
 800833a:	bfbc      	itt	lt
 800833c:	4622      	movlt	r2, r4
 800833e:	4614      	movlt	r4, r2
 8008340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008344:	d005      	beq.n	8008352 <__cvt+0x42>
 8008346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800834a:	d100      	bne.n	800834e <__cvt+0x3e>
 800834c:	3601      	adds	r6, #1
 800834e:	2102      	movs	r1, #2
 8008350:	e000      	b.n	8008354 <__cvt+0x44>
 8008352:	2103      	movs	r1, #3
 8008354:	ab03      	add	r3, sp, #12
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	ab02      	add	r3, sp, #8
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	ec45 4b10 	vmov	d0, r4, r5
 8008360:	4653      	mov	r3, sl
 8008362:	4632      	mov	r2, r6
 8008364:	f000 fe68 	bl	8009038 <_dtoa_r>
 8008368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800836c:	4607      	mov	r7, r0
 800836e:	d102      	bne.n	8008376 <__cvt+0x66>
 8008370:	f019 0f01 	tst.w	r9, #1
 8008374:	d022      	beq.n	80083bc <__cvt+0xac>
 8008376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800837a:	eb07 0906 	add.w	r9, r7, r6
 800837e:	d110      	bne.n	80083a2 <__cvt+0x92>
 8008380:	783b      	ldrb	r3, [r7, #0]
 8008382:	2b30      	cmp	r3, #48	; 0x30
 8008384:	d10a      	bne.n	800839c <__cvt+0x8c>
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	f7f8 fbc3 	bl	8000b18 <__aeabi_dcmpeq>
 8008392:	b918      	cbnz	r0, 800839c <__cvt+0x8c>
 8008394:	f1c6 0601 	rsb	r6, r6, #1
 8008398:	f8ca 6000 	str.w	r6, [sl]
 800839c:	f8da 3000 	ldr.w	r3, [sl]
 80083a0:	4499      	add	r9, r3
 80083a2:	2200      	movs	r2, #0
 80083a4:	2300      	movs	r3, #0
 80083a6:	4620      	mov	r0, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	f7f8 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 80083ae:	b108      	cbz	r0, 80083b4 <__cvt+0xa4>
 80083b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80083b4:	2230      	movs	r2, #48	; 0x30
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	454b      	cmp	r3, r9
 80083ba:	d307      	bcc.n	80083cc <__cvt+0xbc>
 80083bc:	9b03      	ldr	r3, [sp, #12]
 80083be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083c0:	1bdb      	subs	r3, r3, r7
 80083c2:	4638      	mov	r0, r7
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	b004      	add	sp, #16
 80083c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083cc:	1c59      	adds	r1, r3, #1
 80083ce:	9103      	str	r1, [sp, #12]
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e7f0      	b.n	80083b6 <__cvt+0xa6>

080083d4 <__exponent>:
 80083d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d6:	4603      	mov	r3, r0
 80083d8:	2900      	cmp	r1, #0
 80083da:	bfb8      	it	lt
 80083dc:	4249      	neglt	r1, r1
 80083de:	f803 2b02 	strb.w	r2, [r3], #2
 80083e2:	bfb4      	ite	lt
 80083e4:	222d      	movlt	r2, #45	; 0x2d
 80083e6:	222b      	movge	r2, #43	; 0x2b
 80083e8:	2909      	cmp	r1, #9
 80083ea:	7042      	strb	r2, [r0, #1]
 80083ec:	dd2a      	ble.n	8008444 <__exponent+0x70>
 80083ee:	f10d 0407 	add.w	r4, sp, #7
 80083f2:	46a4      	mov	ip, r4
 80083f4:	270a      	movs	r7, #10
 80083f6:	46a6      	mov	lr, r4
 80083f8:	460a      	mov	r2, r1
 80083fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80083fe:	fb07 1516 	mls	r5, r7, r6, r1
 8008402:	3530      	adds	r5, #48	; 0x30
 8008404:	2a63      	cmp	r2, #99	; 0x63
 8008406:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800840a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800840e:	4631      	mov	r1, r6
 8008410:	dcf1      	bgt.n	80083f6 <__exponent+0x22>
 8008412:	3130      	adds	r1, #48	; 0x30
 8008414:	f1ae 0502 	sub.w	r5, lr, #2
 8008418:	f804 1c01 	strb.w	r1, [r4, #-1]
 800841c:	1c44      	adds	r4, r0, #1
 800841e:	4629      	mov	r1, r5
 8008420:	4561      	cmp	r1, ip
 8008422:	d30a      	bcc.n	800843a <__exponent+0x66>
 8008424:	f10d 0209 	add.w	r2, sp, #9
 8008428:	eba2 020e 	sub.w	r2, r2, lr
 800842c:	4565      	cmp	r5, ip
 800842e:	bf88      	it	hi
 8008430:	2200      	movhi	r2, #0
 8008432:	4413      	add	r3, r2
 8008434:	1a18      	subs	r0, r3, r0
 8008436:	b003      	add	sp, #12
 8008438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800843a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800843e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008442:	e7ed      	b.n	8008420 <__exponent+0x4c>
 8008444:	2330      	movs	r3, #48	; 0x30
 8008446:	3130      	adds	r1, #48	; 0x30
 8008448:	7083      	strb	r3, [r0, #2]
 800844a:	70c1      	strb	r1, [r0, #3]
 800844c:	1d03      	adds	r3, r0, #4
 800844e:	e7f1      	b.n	8008434 <__exponent+0x60>

08008450 <_printf_float>:
 8008450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008454:	ed2d 8b02 	vpush	{d8}
 8008458:	b08d      	sub	sp, #52	; 0x34
 800845a:	460c      	mov	r4, r1
 800845c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008460:	4616      	mov	r6, r2
 8008462:	461f      	mov	r7, r3
 8008464:	4605      	mov	r5, r0
 8008466:	f001 fd8b 	bl	8009f80 <_localeconv_r>
 800846a:	f8d0 a000 	ldr.w	sl, [r0]
 800846e:	4650      	mov	r0, sl
 8008470:	f7f7 fed0 	bl	8000214 <strlen>
 8008474:	2300      	movs	r3, #0
 8008476:	930a      	str	r3, [sp, #40]	; 0x28
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	f8d8 3000 	ldr.w	r3, [r8]
 8008480:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008484:	3307      	adds	r3, #7
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	f103 0208 	add.w	r2, r3, #8
 800848e:	f8c8 2000 	str.w	r2, [r8]
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800849a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800849e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80084a8:	ee08 0a10 	vmov	s16, r0
 80084ac:	4b9f      	ldr	r3, [pc, #636]	; (800872c <_printf_float+0x2dc>)
 80084ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084b6:	f7f8 fb61 	bl	8000b7c <__aeabi_dcmpun>
 80084ba:	bb88      	cbnz	r0, 8008520 <_printf_float+0xd0>
 80084bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084c0:	4b9a      	ldr	r3, [pc, #616]	; (800872c <_printf_float+0x2dc>)
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084c6:	f7f8 fb3b 	bl	8000b40 <__aeabi_dcmple>
 80084ca:	bb48      	cbnz	r0, 8008520 <_printf_float+0xd0>
 80084cc:	2200      	movs	r2, #0
 80084ce:	2300      	movs	r3, #0
 80084d0:	4640      	mov	r0, r8
 80084d2:	4649      	mov	r1, r9
 80084d4:	f7f8 fb2a 	bl	8000b2c <__aeabi_dcmplt>
 80084d8:	b110      	cbz	r0, 80084e0 <_printf_float+0x90>
 80084da:	232d      	movs	r3, #45	; 0x2d
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084e0:	4b93      	ldr	r3, [pc, #588]	; (8008730 <_printf_float+0x2e0>)
 80084e2:	4894      	ldr	r0, [pc, #592]	; (8008734 <_printf_float+0x2e4>)
 80084e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084e8:	bf94      	ite	ls
 80084ea:	4698      	movls	r8, r3
 80084ec:	4680      	movhi	r8, r0
 80084ee:	2303      	movs	r3, #3
 80084f0:	6123      	str	r3, [r4, #16]
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	f023 0204 	bic.w	r2, r3, #4
 80084f8:	6022      	str	r2, [r4, #0]
 80084fa:	f04f 0900 	mov.w	r9, #0
 80084fe:	9700      	str	r7, [sp, #0]
 8008500:	4633      	mov	r3, r6
 8008502:	aa0b      	add	r2, sp, #44	; 0x2c
 8008504:	4621      	mov	r1, r4
 8008506:	4628      	mov	r0, r5
 8008508:	f000 f9d8 	bl	80088bc <_printf_common>
 800850c:	3001      	adds	r0, #1
 800850e:	f040 8090 	bne.w	8008632 <_printf_float+0x1e2>
 8008512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008516:	b00d      	add	sp, #52	; 0x34
 8008518:	ecbd 8b02 	vpop	{d8}
 800851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f8 fb28 	bl	8000b7c <__aeabi_dcmpun>
 800852c:	b140      	cbz	r0, 8008540 <_printf_float+0xf0>
 800852e:	464b      	mov	r3, r9
 8008530:	2b00      	cmp	r3, #0
 8008532:	bfbc      	itt	lt
 8008534:	232d      	movlt	r3, #45	; 0x2d
 8008536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800853a:	487f      	ldr	r0, [pc, #508]	; (8008738 <_printf_float+0x2e8>)
 800853c:	4b7f      	ldr	r3, [pc, #508]	; (800873c <_printf_float+0x2ec>)
 800853e:	e7d1      	b.n	80084e4 <_printf_float+0x94>
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008546:	9206      	str	r2, [sp, #24]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	d13f      	bne.n	80085cc <_printf_float+0x17c>
 800854c:	2306      	movs	r3, #6
 800854e:	6063      	str	r3, [r4, #4]
 8008550:	9b05      	ldr	r3, [sp, #20]
 8008552:	6861      	ldr	r1, [r4, #4]
 8008554:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008558:	2300      	movs	r3, #0
 800855a:	9303      	str	r3, [sp, #12]
 800855c:	ab0a      	add	r3, sp, #40	; 0x28
 800855e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008562:	ab09      	add	r3, sp, #36	; 0x24
 8008564:	ec49 8b10 	vmov	d0, r8, r9
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	6022      	str	r2, [r4, #0]
 800856c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008570:	4628      	mov	r0, r5
 8008572:	f7ff fecd 	bl	8008310 <__cvt>
 8008576:	9b06      	ldr	r3, [sp, #24]
 8008578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800857a:	2b47      	cmp	r3, #71	; 0x47
 800857c:	4680      	mov	r8, r0
 800857e:	d108      	bne.n	8008592 <_printf_float+0x142>
 8008580:	1cc8      	adds	r0, r1, #3
 8008582:	db02      	blt.n	800858a <_printf_float+0x13a>
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	4299      	cmp	r1, r3
 8008588:	dd41      	ble.n	800860e <_printf_float+0x1be>
 800858a:	f1ab 0b02 	sub.w	fp, fp, #2
 800858e:	fa5f fb8b 	uxtb.w	fp, fp
 8008592:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008596:	d820      	bhi.n	80085da <_printf_float+0x18a>
 8008598:	3901      	subs	r1, #1
 800859a:	465a      	mov	r2, fp
 800859c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085a0:	9109      	str	r1, [sp, #36]	; 0x24
 80085a2:	f7ff ff17 	bl	80083d4 <__exponent>
 80085a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a8:	1813      	adds	r3, r2, r0
 80085aa:	2a01      	cmp	r2, #1
 80085ac:	4681      	mov	r9, r0
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	dc02      	bgt.n	80085b8 <_printf_float+0x168>
 80085b2:	6822      	ldr	r2, [r4, #0]
 80085b4:	07d2      	lsls	r2, r2, #31
 80085b6:	d501      	bpl.n	80085bc <_printf_float+0x16c>
 80085b8:	3301      	adds	r3, #1
 80085ba:	6123      	str	r3, [r4, #16]
 80085bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d09c      	beq.n	80084fe <_printf_float+0xae>
 80085c4:	232d      	movs	r3, #45	; 0x2d
 80085c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085ca:	e798      	b.n	80084fe <_printf_float+0xae>
 80085cc:	9a06      	ldr	r2, [sp, #24]
 80085ce:	2a47      	cmp	r2, #71	; 0x47
 80085d0:	d1be      	bne.n	8008550 <_printf_float+0x100>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1bc      	bne.n	8008550 <_printf_float+0x100>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e7b9      	b.n	800854e <_printf_float+0xfe>
 80085da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80085de:	d118      	bne.n	8008612 <_printf_float+0x1c2>
 80085e0:	2900      	cmp	r1, #0
 80085e2:	6863      	ldr	r3, [r4, #4]
 80085e4:	dd0b      	ble.n	80085fe <_printf_float+0x1ae>
 80085e6:	6121      	str	r1, [r4, #16]
 80085e8:	b913      	cbnz	r3, 80085f0 <_printf_float+0x1a0>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	07d0      	lsls	r0, r2, #31
 80085ee:	d502      	bpl.n	80085f6 <_printf_float+0x1a6>
 80085f0:	3301      	adds	r3, #1
 80085f2:	440b      	add	r3, r1
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80085f8:	f04f 0900 	mov.w	r9, #0
 80085fc:	e7de      	b.n	80085bc <_printf_float+0x16c>
 80085fe:	b913      	cbnz	r3, 8008606 <_printf_float+0x1b6>
 8008600:	6822      	ldr	r2, [r4, #0]
 8008602:	07d2      	lsls	r2, r2, #31
 8008604:	d501      	bpl.n	800860a <_printf_float+0x1ba>
 8008606:	3302      	adds	r3, #2
 8008608:	e7f4      	b.n	80085f4 <_printf_float+0x1a4>
 800860a:	2301      	movs	r3, #1
 800860c:	e7f2      	b.n	80085f4 <_printf_float+0x1a4>
 800860e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008614:	4299      	cmp	r1, r3
 8008616:	db05      	blt.n	8008624 <_printf_float+0x1d4>
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	6121      	str	r1, [r4, #16]
 800861c:	07d8      	lsls	r0, r3, #31
 800861e:	d5ea      	bpl.n	80085f6 <_printf_float+0x1a6>
 8008620:	1c4b      	adds	r3, r1, #1
 8008622:	e7e7      	b.n	80085f4 <_printf_float+0x1a4>
 8008624:	2900      	cmp	r1, #0
 8008626:	bfd4      	ite	le
 8008628:	f1c1 0202 	rsble	r2, r1, #2
 800862c:	2201      	movgt	r2, #1
 800862e:	4413      	add	r3, r2
 8008630:	e7e0      	b.n	80085f4 <_printf_float+0x1a4>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	055a      	lsls	r2, r3, #21
 8008636:	d407      	bmi.n	8008648 <_printf_float+0x1f8>
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	4642      	mov	r2, r8
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	d12c      	bne.n	80086a0 <_printf_float+0x250>
 8008646:	e764      	b.n	8008512 <_printf_float+0xc2>
 8008648:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800864c:	f240 80e0 	bls.w	8008810 <_printf_float+0x3c0>
 8008650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008654:	2200      	movs	r2, #0
 8008656:	2300      	movs	r3, #0
 8008658:	f7f8 fa5e 	bl	8000b18 <__aeabi_dcmpeq>
 800865c:	2800      	cmp	r0, #0
 800865e:	d034      	beq.n	80086ca <_printf_float+0x27a>
 8008660:	4a37      	ldr	r2, [pc, #220]	; (8008740 <_printf_float+0x2f0>)
 8008662:	2301      	movs	r3, #1
 8008664:	4631      	mov	r1, r6
 8008666:	4628      	mov	r0, r5
 8008668:	47b8      	blx	r7
 800866a:	3001      	adds	r0, #1
 800866c:	f43f af51 	beq.w	8008512 <_printf_float+0xc2>
 8008670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008674:	429a      	cmp	r2, r3
 8008676:	db02      	blt.n	800867e <_printf_float+0x22e>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	07d8      	lsls	r0, r3, #31
 800867c:	d510      	bpl.n	80086a0 <_printf_float+0x250>
 800867e:	ee18 3a10 	vmov	r3, s16
 8008682:	4652      	mov	r2, sl
 8008684:	4631      	mov	r1, r6
 8008686:	4628      	mov	r0, r5
 8008688:	47b8      	blx	r7
 800868a:	3001      	adds	r0, #1
 800868c:	f43f af41 	beq.w	8008512 <_printf_float+0xc2>
 8008690:	f04f 0800 	mov.w	r8, #0
 8008694:	f104 091a 	add.w	r9, r4, #26
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	3b01      	subs	r3, #1
 800869c:	4543      	cmp	r3, r8
 800869e:	dc09      	bgt.n	80086b4 <_printf_float+0x264>
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	079b      	lsls	r3, r3, #30
 80086a4:	f100 8105 	bmi.w	80088b2 <_printf_float+0x462>
 80086a8:	68e0      	ldr	r0, [r4, #12]
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	4298      	cmp	r0, r3
 80086ae:	bfb8      	it	lt
 80086b0:	4618      	movlt	r0, r3
 80086b2:	e730      	b.n	8008516 <_printf_float+0xc6>
 80086b4:	2301      	movs	r3, #1
 80086b6:	464a      	mov	r2, r9
 80086b8:	4631      	mov	r1, r6
 80086ba:	4628      	mov	r0, r5
 80086bc:	47b8      	blx	r7
 80086be:	3001      	adds	r0, #1
 80086c0:	f43f af27 	beq.w	8008512 <_printf_float+0xc2>
 80086c4:	f108 0801 	add.w	r8, r8, #1
 80086c8:	e7e6      	b.n	8008698 <_printf_float+0x248>
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dc39      	bgt.n	8008744 <_printf_float+0x2f4>
 80086d0:	4a1b      	ldr	r2, [pc, #108]	; (8008740 <_printf_float+0x2f0>)
 80086d2:	2301      	movs	r3, #1
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	f43f af19 	beq.w	8008512 <_printf_float+0xc2>
 80086e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086e4:	4313      	orrs	r3, r2
 80086e6:	d102      	bne.n	80086ee <_printf_float+0x29e>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	d5d8      	bpl.n	80086a0 <_printf_float+0x250>
 80086ee:	ee18 3a10 	vmov	r3, s16
 80086f2:	4652      	mov	r2, sl
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b8      	blx	r7
 80086fa:	3001      	adds	r0, #1
 80086fc:	f43f af09 	beq.w	8008512 <_printf_float+0xc2>
 8008700:	f04f 0900 	mov.w	r9, #0
 8008704:	f104 0a1a 	add.w	sl, r4, #26
 8008708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800870a:	425b      	negs	r3, r3
 800870c:	454b      	cmp	r3, r9
 800870e:	dc01      	bgt.n	8008714 <_printf_float+0x2c4>
 8008710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008712:	e792      	b.n	800863a <_printf_float+0x1ea>
 8008714:	2301      	movs	r3, #1
 8008716:	4652      	mov	r2, sl
 8008718:	4631      	mov	r1, r6
 800871a:	4628      	mov	r0, r5
 800871c:	47b8      	blx	r7
 800871e:	3001      	adds	r0, #1
 8008720:	f43f aef7 	beq.w	8008512 <_printf_float+0xc2>
 8008724:	f109 0901 	add.w	r9, r9, #1
 8008728:	e7ee      	b.n	8008708 <_printf_float+0x2b8>
 800872a:	bf00      	nop
 800872c:	7fefffff 	.word	0x7fefffff
 8008730:	0800ba05 	.word	0x0800ba05
 8008734:	0800ba09 	.word	0x0800ba09
 8008738:	0800ba11 	.word	0x0800ba11
 800873c:	0800ba0d 	.word	0x0800ba0d
 8008740:	0800ba15 	.word	0x0800ba15
 8008744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008748:	429a      	cmp	r2, r3
 800874a:	bfa8      	it	ge
 800874c:	461a      	movge	r2, r3
 800874e:	2a00      	cmp	r2, #0
 8008750:	4691      	mov	r9, r2
 8008752:	dc37      	bgt.n	80087c4 <_printf_float+0x374>
 8008754:	f04f 0b00 	mov.w	fp, #0
 8008758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800875c:	f104 021a 	add.w	r2, r4, #26
 8008760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008762:	9305      	str	r3, [sp, #20]
 8008764:	eba3 0309 	sub.w	r3, r3, r9
 8008768:	455b      	cmp	r3, fp
 800876a:	dc33      	bgt.n	80087d4 <_printf_float+0x384>
 800876c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008770:	429a      	cmp	r2, r3
 8008772:	db3b      	blt.n	80087ec <_printf_float+0x39c>
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	07da      	lsls	r2, r3, #31
 8008778:	d438      	bmi.n	80087ec <_printf_float+0x39c>
 800877a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800877c:	9b05      	ldr	r3, [sp, #20]
 800877e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	eba2 0901 	sub.w	r9, r2, r1
 8008786:	4599      	cmp	r9, r3
 8008788:	bfa8      	it	ge
 800878a:	4699      	movge	r9, r3
 800878c:	f1b9 0f00 	cmp.w	r9, #0
 8008790:	dc35      	bgt.n	80087fe <_printf_float+0x3ae>
 8008792:	f04f 0800 	mov.w	r8, #0
 8008796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800879a:	f104 0a1a 	add.w	sl, r4, #26
 800879e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	eba3 0309 	sub.w	r3, r3, r9
 80087a8:	4543      	cmp	r3, r8
 80087aa:	f77f af79 	ble.w	80086a0 <_printf_float+0x250>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4652      	mov	r2, sl
 80087b2:	4631      	mov	r1, r6
 80087b4:	4628      	mov	r0, r5
 80087b6:	47b8      	blx	r7
 80087b8:	3001      	adds	r0, #1
 80087ba:	f43f aeaa 	beq.w	8008512 <_printf_float+0xc2>
 80087be:	f108 0801 	add.w	r8, r8, #1
 80087c2:	e7ec      	b.n	800879e <_printf_float+0x34e>
 80087c4:	4613      	mov	r3, r2
 80087c6:	4631      	mov	r1, r6
 80087c8:	4642      	mov	r2, r8
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	d1c0      	bne.n	8008754 <_printf_float+0x304>
 80087d2:	e69e      	b.n	8008512 <_printf_float+0xc2>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4631      	mov	r1, r6
 80087d8:	4628      	mov	r0, r5
 80087da:	9205      	str	r2, [sp, #20]
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f ae97 	beq.w	8008512 <_printf_float+0xc2>
 80087e4:	9a05      	ldr	r2, [sp, #20]
 80087e6:	f10b 0b01 	add.w	fp, fp, #1
 80087ea:	e7b9      	b.n	8008760 <_printf_float+0x310>
 80087ec:	ee18 3a10 	vmov	r3, s16
 80087f0:	4652      	mov	r2, sl
 80087f2:	4631      	mov	r1, r6
 80087f4:	4628      	mov	r0, r5
 80087f6:	47b8      	blx	r7
 80087f8:	3001      	adds	r0, #1
 80087fa:	d1be      	bne.n	800877a <_printf_float+0x32a>
 80087fc:	e689      	b.n	8008512 <_printf_float+0xc2>
 80087fe:	9a05      	ldr	r2, [sp, #20]
 8008800:	464b      	mov	r3, r9
 8008802:	4442      	add	r2, r8
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	d1c1      	bne.n	8008792 <_printf_float+0x342>
 800880e:	e680      	b.n	8008512 <_printf_float+0xc2>
 8008810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008812:	2a01      	cmp	r2, #1
 8008814:	dc01      	bgt.n	800881a <_printf_float+0x3ca>
 8008816:	07db      	lsls	r3, r3, #31
 8008818:	d538      	bpl.n	800888c <_printf_float+0x43c>
 800881a:	2301      	movs	r3, #1
 800881c:	4642      	mov	r2, r8
 800881e:	4631      	mov	r1, r6
 8008820:	4628      	mov	r0, r5
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	f43f ae74 	beq.w	8008512 <_printf_float+0xc2>
 800882a:	ee18 3a10 	vmov	r3, s16
 800882e:	4652      	mov	r2, sl
 8008830:	4631      	mov	r1, r6
 8008832:	4628      	mov	r0, r5
 8008834:	47b8      	blx	r7
 8008836:	3001      	adds	r0, #1
 8008838:	f43f ae6b 	beq.w	8008512 <_printf_float+0xc2>
 800883c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	f7f8 f968 	bl	8000b18 <__aeabi_dcmpeq>
 8008848:	b9d8      	cbnz	r0, 8008882 <_printf_float+0x432>
 800884a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884c:	f108 0201 	add.w	r2, r8, #1
 8008850:	3b01      	subs	r3, #1
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	47b8      	blx	r7
 8008858:	3001      	adds	r0, #1
 800885a:	d10e      	bne.n	800887a <_printf_float+0x42a>
 800885c:	e659      	b.n	8008512 <_printf_float+0xc2>
 800885e:	2301      	movs	r3, #1
 8008860:	4652      	mov	r2, sl
 8008862:	4631      	mov	r1, r6
 8008864:	4628      	mov	r0, r5
 8008866:	47b8      	blx	r7
 8008868:	3001      	adds	r0, #1
 800886a:	f43f ae52 	beq.w	8008512 <_printf_float+0xc2>
 800886e:	f108 0801 	add.w	r8, r8, #1
 8008872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008874:	3b01      	subs	r3, #1
 8008876:	4543      	cmp	r3, r8
 8008878:	dcf1      	bgt.n	800885e <_printf_float+0x40e>
 800887a:	464b      	mov	r3, r9
 800887c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008880:	e6dc      	b.n	800863c <_printf_float+0x1ec>
 8008882:	f04f 0800 	mov.w	r8, #0
 8008886:	f104 0a1a 	add.w	sl, r4, #26
 800888a:	e7f2      	b.n	8008872 <_printf_float+0x422>
 800888c:	2301      	movs	r3, #1
 800888e:	4642      	mov	r2, r8
 8008890:	e7df      	b.n	8008852 <_printf_float+0x402>
 8008892:	2301      	movs	r3, #1
 8008894:	464a      	mov	r2, r9
 8008896:	4631      	mov	r1, r6
 8008898:	4628      	mov	r0, r5
 800889a:	47b8      	blx	r7
 800889c:	3001      	adds	r0, #1
 800889e:	f43f ae38 	beq.w	8008512 <_printf_float+0xc2>
 80088a2:	f108 0801 	add.w	r8, r8, #1
 80088a6:	68e3      	ldr	r3, [r4, #12]
 80088a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088aa:	1a5b      	subs	r3, r3, r1
 80088ac:	4543      	cmp	r3, r8
 80088ae:	dcf0      	bgt.n	8008892 <_printf_float+0x442>
 80088b0:	e6fa      	b.n	80086a8 <_printf_float+0x258>
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	f104 0919 	add.w	r9, r4, #25
 80088ba:	e7f4      	b.n	80088a6 <_printf_float+0x456>

080088bc <_printf_common>:
 80088bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c0:	4616      	mov	r6, r2
 80088c2:	4699      	mov	r9, r3
 80088c4:	688a      	ldr	r2, [r1, #8]
 80088c6:	690b      	ldr	r3, [r1, #16]
 80088c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088cc:	4293      	cmp	r3, r2
 80088ce:	bfb8      	it	lt
 80088d0:	4613      	movlt	r3, r2
 80088d2:	6033      	str	r3, [r6, #0]
 80088d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088d8:	4607      	mov	r7, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	b10a      	cbz	r2, 80088e2 <_printf_common+0x26>
 80088de:	3301      	adds	r3, #1
 80088e0:	6033      	str	r3, [r6, #0]
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	0699      	lsls	r1, r3, #26
 80088e6:	bf42      	ittt	mi
 80088e8:	6833      	ldrmi	r3, [r6, #0]
 80088ea:	3302      	addmi	r3, #2
 80088ec:	6033      	strmi	r3, [r6, #0]
 80088ee:	6825      	ldr	r5, [r4, #0]
 80088f0:	f015 0506 	ands.w	r5, r5, #6
 80088f4:	d106      	bne.n	8008904 <_printf_common+0x48>
 80088f6:	f104 0a19 	add.w	sl, r4, #25
 80088fa:	68e3      	ldr	r3, [r4, #12]
 80088fc:	6832      	ldr	r2, [r6, #0]
 80088fe:	1a9b      	subs	r3, r3, r2
 8008900:	42ab      	cmp	r3, r5
 8008902:	dc26      	bgt.n	8008952 <_printf_common+0x96>
 8008904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008908:	1e13      	subs	r3, r2, #0
 800890a:	6822      	ldr	r2, [r4, #0]
 800890c:	bf18      	it	ne
 800890e:	2301      	movne	r3, #1
 8008910:	0692      	lsls	r2, r2, #26
 8008912:	d42b      	bmi.n	800896c <_printf_common+0xb0>
 8008914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008918:	4649      	mov	r1, r9
 800891a:	4638      	mov	r0, r7
 800891c:	47c0      	blx	r8
 800891e:	3001      	adds	r0, #1
 8008920:	d01e      	beq.n	8008960 <_printf_common+0xa4>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	68e5      	ldr	r5, [r4, #12]
 8008926:	6832      	ldr	r2, [r6, #0]
 8008928:	f003 0306 	and.w	r3, r3, #6
 800892c:	2b04      	cmp	r3, #4
 800892e:	bf08      	it	eq
 8008930:	1aad      	subeq	r5, r5, r2
 8008932:	68a3      	ldr	r3, [r4, #8]
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	bf0c      	ite	eq
 8008938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800893c:	2500      	movne	r5, #0
 800893e:	4293      	cmp	r3, r2
 8008940:	bfc4      	itt	gt
 8008942:	1a9b      	subgt	r3, r3, r2
 8008944:	18ed      	addgt	r5, r5, r3
 8008946:	2600      	movs	r6, #0
 8008948:	341a      	adds	r4, #26
 800894a:	42b5      	cmp	r5, r6
 800894c:	d11a      	bne.n	8008984 <_printf_common+0xc8>
 800894e:	2000      	movs	r0, #0
 8008950:	e008      	b.n	8008964 <_printf_common+0xa8>
 8008952:	2301      	movs	r3, #1
 8008954:	4652      	mov	r2, sl
 8008956:	4649      	mov	r1, r9
 8008958:	4638      	mov	r0, r7
 800895a:	47c0      	blx	r8
 800895c:	3001      	adds	r0, #1
 800895e:	d103      	bne.n	8008968 <_printf_common+0xac>
 8008960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008968:	3501      	adds	r5, #1
 800896a:	e7c6      	b.n	80088fa <_printf_common+0x3e>
 800896c:	18e1      	adds	r1, r4, r3
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	2030      	movs	r0, #48	; 0x30
 8008972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008976:	4422      	add	r2, r4
 8008978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800897c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008980:	3302      	adds	r3, #2
 8008982:	e7c7      	b.n	8008914 <_printf_common+0x58>
 8008984:	2301      	movs	r3, #1
 8008986:	4622      	mov	r2, r4
 8008988:	4649      	mov	r1, r9
 800898a:	4638      	mov	r0, r7
 800898c:	47c0      	blx	r8
 800898e:	3001      	adds	r0, #1
 8008990:	d0e6      	beq.n	8008960 <_printf_common+0xa4>
 8008992:	3601      	adds	r6, #1
 8008994:	e7d9      	b.n	800894a <_printf_common+0x8e>
	...

08008998 <_printf_i>:
 8008998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800899c:	460c      	mov	r4, r1
 800899e:	4691      	mov	r9, r2
 80089a0:	7e27      	ldrb	r7, [r4, #24]
 80089a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089a4:	2f78      	cmp	r7, #120	; 0x78
 80089a6:	4680      	mov	r8, r0
 80089a8:	469a      	mov	sl, r3
 80089aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ae:	d807      	bhi.n	80089c0 <_printf_i+0x28>
 80089b0:	2f62      	cmp	r7, #98	; 0x62
 80089b2:	d80a      	bhi.n	80089ca <_printf_i+0x32>
 80089b4:	2f00      	cmp	r7, #0
 80089b6:	f000 80d8 	beq.w	8008b6a <_printf_i+0x1d2>
 80089ba:	2f58      	cmp	r7, #88	; 0x58
 80089bc:	f000 80a3 	beq.w	8008b06 <_printf_i+0x16e>
 80089c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089c8:	e03a      	b.n	8008a40 <_printf_i+0xa8>
 80089ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089ce:	2b15      	cmp	r3, #21
 80089d0:	d8f6      	bhi.n	80089c0 <_printf_i+0x28>
 80089d2:	a001      	add	r0, pc, #4	; (adr r0, 80089d8 <_printf_i+0x40>)
 80089d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80089d8:	08008a31 	.word	0x08008a31
 80089dc:	08008a45 	.word	0x08008a45
 80089e0:	080089c1 	.word	0x080089c1
 80089e4:	080089c1 	.word	0x080089c1
 80089e8:	080089c1 	.word	0x080089c1
 80089ec:	080089c1 	.word	0x080089c1
 80089f0:	08008a45 	.word	0x08008a45
 80089f4:	080089c1 	.word	0x080089c1
 80089f8:	080089c1 	.word	0x080089c1
 80089fc:	080089c1 	.word	0x080089c1
 8008a00:	080089c1 	.word	0x080089c1
 8008a04:	08008b51 	.word	0x08008b51
 8008a08:	08008a75 	.word	0x08008a75
 8008a0c:	08008b33 	.word	0x08008b33
 8008a10:	080089c1 	.word	0x080089c1
 8008a14:	080089c1 	.word	0x080089c1
 8008a18:	08008b73 	.word	0x08008b73
 8008a1c:	080089c1 	.word	0x080089c1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089c1 	.word	0x080089c1
 8008a28:	080089c1 	.word	0x080089c1
 8008a2c:	08008b3b 	.word	0x08008b3b
 8008a30:	680b      	ldr	r3, [r1, #0]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	600a      	str	r2, [r1, #0]
 8008a38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0a3      	b.n	8008b8c <_printf_i+0x1f4>
 8008a44:	6825      	ldr	r5, [r4, #0]
 8008a46:	6808      	ldr	r0, [r1, #0]
 8008a48:	062e      	lsls	r6, r5, #24
 8008a4a:	f100 0304 	add.w	r3, r0, #4
 8008a4e:	d50a      	bpl.n	8008a66 <_printf_i+0xce>
 8008a50:	6805      	ldr	r5, [r0, #0]
 8008a52:	600b      	str	r3, [r1, #0]
 8008a54:	2d00      	cmp	r5, #0
 8008a56:	da03      	bge.n	8008a60 <_printf_i+0xc8>
 8008a58:	232d      	movs	r3, #45	; 0x2d
 8008a5a:	426d      	negs	r5, r5
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a60:	485e      	ldr	r0, [pc, #376]	; (8008bdc <_printf_i+0x244>)
 8008a62:	230a      	movs	r3, #10
 8008a64:	e019      	b.n	8008a9a <_printf_i+0x102>
 8008a66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a6a:	6805      	ldr	r5, [r0, #0]
 8008a6c:	600b      	str	r3, [r1, #0]
 8008a6e:	bf18      	it	ne
 8008a70:	b22d      	sxthne	r5, r5
 8008a72:	e7ef      	b.n	8008a54 <_printf_i+0xbc>
 8008a74:	680b      	ldr	r3, [r1, #0]
 8008a76:	6825      	ldr	r5, [r4, #0]
 8008a78:	1d18      	adds	r0, r3, #4
 8008a7a:	6008      	str	r0, [r1, #0]
 8008a7c:	0628      	lsls	r0, r5, #24
 8008a7e:	d501      	bpl.n	8008a84 <_printf_i+0xec>
 8008a80:	681d      	ldr	r5, [r3, #0]
 8008a82:	e002      	b.n	8008a8a <_printf_i+0xf2>
 8008a84:	0669      	lsls	r1, r5, #25
 8008a86:	d5fb      	bpl.n	8008a80 <_printf_i+0xe8>
 8008a88:	881d      	ldrh	r5, [r3, #0]
 8008a8a:	4854      	ldr	r0, [pc, #336]	; (8008bdc <_printf_i+0x244>)
 8008a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8008a8e:	bf0c      	ite	eq
 8008a90:	2308      	moveq	r3, #8
 8008a92:	230a      	movne	r3, #10
 8008a94:	2100      	movs	r1, #0
 8008a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a9a:	6866      	ldr	r6, [r4, #4]
 8008a9c:	60a6      	str	r6, [r4, #8]
 8008a9e:	2e00      	cmp	r6, #0
 8008aa0:	bfa2      	ittt	ge
 8008aa2:	6821      	ldrge	r1, [r4, #0]
 8008aa4:	f021 0104 	bicge.w	r1, r1, #4
 8008aa8:	6021      	strge	r1, [r4, #0]
 8008aaa:	b90d      	cbnz	r5, 8008ab0 <_printf_i+0x118>
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	d04d      	beq.n	8008b4c <_printf_i+0x1b4>
 8008ab0:	4616      	mov	r6, r2
 8008ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8008aba:	5dc7      	ldrb	r7, [r0, r7]
 8008abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ac0:	462f      	mov	r7, r5
 8008ac2:	42bb      	cmp	r3, r7
 8008ac4:	460d      	mov	r5, r1
 8008ac6:	d9f4      	bls.n	8008ab2 <_printf_i+0x11a>
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d10b      	bne.n	8008ae4 <_printf_i+0x14c>
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	07df      	lsls	r7, r3, #31
 8008ad0:	d508      	bpl.n	8008ae4 <_printf_i+0x14c>
 8008ad2:	6923      	ldr	r3, [r4, #16]
 8008ad4:	6861      	ldr	r1, [r4, #4]
 8008ad6:	4299      	cmp	r1, r3
 8008ad8:	bfde      	ittt	le
 8008ada:	2330      	movle	r3, #48	; 0x30
 8008adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ae0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008ae4:	1b92      	subs	r2, r2, r6
 8008ae6:	6122      	str	r2, [r4, #16]
 8008ae8:	f8cd a000 	str.w	sl, [sp]
 8008aec:	464b      	mov	r3, r9
 8008aee:	aa03      	add	r2, sp, #12
 8008af0:	4621      	mov	r1, r4
 8008af2:	4640      	mov	r0, r8
 8008af4:	f7ff fee2 	bl	80088bc <_printf_common>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d14c      	bne.n	8008b96 <_printf_i+0x1fe>
 8008afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b00:	b004      	add	sp, #16
 8008b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b06:	4835      	ldr	r0, [pc, #212]	; (8008bdc <_printf_i+0x244>)
 8008b08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	680e      	ldr	r6, [r1, #0]
 8008b10:	061f      	lsls	r7, r3, #24
 8008b12:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b16:	600e      	str	r6, [r1, #0]
 8008b18:	d514      	bpl.n	8008b44 <_printf_i+0x1ac>
 8008b1a:	07d9      	lsls	r1, r3, #31
 8008b1c:	bf44      	itt	mi
 8008b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8008b22:	6023      	strmi	r3, [r4, #0]
 8008b24:	b91d      	cbnz	r5, 8008b2e <_printf_i+0x196>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	f023 0320 	bic.w	r3, r3, #32
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	2310      	movs	r3, #16
 8008b30:	e7b0      	b.n	8008a94 <_printf_i+0xfc>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	f043 0320 	orr.w	r3, r3, #32
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	2378      	movs	r3, #120	; 0x78
 8008b3c:	4828      	ldr	r0, [pc, #160]	; (8008be0 <_printf_i+0x248>)
 8008b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b42:	e7e3      	b.n	8008b0c <_printf_i+0x174>
 8008b44:	065e      	lsls	r6, r3, #25
 8008b46:	bf48      	it	mi
 8008b48:	b2ad      	uxthmi	r5, r5
 8008b4a:	e7e6      	b.n	8008b1a <_printf_i+0x182>
 8008b4c:	4616      	mov	r6, r2
 8008b4e:	e7bb      	b.n	8008ac8 <_printf_i+0x130>
 8008b50:	680b      	ldr	r3, [r1, #0]
 8008b52:	6826      	ldr	r6, [r4, #0]
 8008b54:	6960      	ldr	r0, [r4, #20]
 8008b56:	1d1d      	adds	r5, r3, #4
 8008b58:	600d      	str	r5, [r1, #0]
 8008b5a:	0635      	lsls	r5, r6, #24
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	d501      	bpl.n	8008b64 <_printf_i+0x1cc>
 8008b60:	6018      	str	r0, [r3, #0]
 8008b62:	e002      	b.n	8008b6a <_printf_i+0x1d2>
 8008b64:	0671      	lsls	r1, r6, #25
 8008b66:	d5fb      	bpl.n	8008b60 <_printf_i+0x1c8>
 8008b68:	8018      	strh	r0, [r3, #0]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	4616      	mov	r6, r2
 8008b70:	e7ba      	b.n	8008ae8 <_printf_i+0x150>
 8008b72:	680b      	ldr	r3, [r1, #0]
 8008b74:	1d1a      	adds	r2, r3, #4
 8008b76:	600a      	str	r2, [r1, #0]
 8008b78:	681e      	ldr	r6, [r3, #0]
 8008b7a:	6862      	ldr	r2, [r4, #4]
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7f7 fb56 	bl	8000230 <memchr>
 8008b84:	b108      	cbz	r0, 8008b8a <_printf_i+0x1f2>
 8008b86:	1b80      	subs	r0, r0, r6
 8008b88:	6060      	str	r0, [r4, #4]
 8008b8a:	6863      	ldr	r3, [r4, #4]
 8008b8c:	6123      	str	r3, [r4, #16]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b94:	e7a8      	b.n	8008ae8 <_printf_i+0x150>
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	4632      	mov	r2, r6
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	47d0      	blx	sl
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d0ab      	beq.n	8008afc <_printf_i+0x164>
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	079b      	lsls	r3, r3, #30
 8008ba8:	d413      	bmi.n	8008bd2 <_printf_i+0x23a>
 8008baa:	68e0      	ldr	r0, [r4, #12]
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	4298      	cmp	r0, r3
 8008bb0:	bfb8      	it	lt
 8008bb2:	4618      	movlt	r0, r3
 8008bb4:	e7a4      	b.n	8008b00 <_printf_i+0x168>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	4632      	mov	r2, r6
 8008bba:	4649      	mov	r1, r9
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	47d0      	blx	sl
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d09b      	beq.n	8008afc <_printf_i+0x164>
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	68e3      	ldr	r3, [r4, #12]
 8008bc8:	9903      	ldr	r1, [sp, #12]
 8008bca:	1a5b      	subs	r3, r3, r1
 8008bcc:	42ab      	cmp	r3, r5
 8008bce:	dcf2      	bgt.n	8008bb6 <_printf_i+0x21e>
 8008bd0:	e7eb      	b.n	8008baa <_printf_i+0x212>
 8008bd2:	2500      	movs	r5, #0
 8008bd4:	f104 0619 	add.w	r6, r4, #25
 8008bd8:	e7f5      	b.n	8008bc6 <_printf_i+0x22e>
 8008bda:	bf00      	nop
 8008bdc:	0800ba17 	.word	0x0800ba17
 8008be0:	0800ba28 	.word	0x0800ba28

08008be4 <iprintf>:
 8008be4:	b40f      	push	{r0, r1, r2, r3}
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <iprintf+0x2c>)
 8008be8:	b513      	push	{r0, r1, r4, lr}
 8008bea:	681c      	ldr	r4, [r3, #0]
 8008bec:	b124      	cbz	r4, 8008bf8 <iprintf+0x14>
 8008bee:	69a3      	ldr	r3, [r4, #24]
 8008bf0:	b913      	cbnz	r3, 8008bf8 <iprintf+0x14>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f001 f926 	bl	8009e44 <__sinit>
 8008bf8:	ab05      	add	r3, sp, #20
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	68a1      	ldr	r1, [r4, #8]
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	4620      	mov	r0, r4
 8008c02:	f7ff fa55 	bl	80080b0 <_vfiprintf_r>
 8008c06:	b002      	add	sp, #8
 8008c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c0c:	b004      	add	sp, #16
 8008c0e:	4770      	bx	lr
 8008c10:	2000000c 	.word	0x2000000c

08008c14 <_puts_r>:
 8008c14:	b570      	push	{r4, r5, r6, lr}
 8008c16:	460e      	mov	r6, r1
 8008c18:	4605      	mov	r5, r0
 8008c1a:	b118      	cbz	r0, 8008c24 <_puts_r+0x10>
 8008c1c:	6983      	ldr	r3, [r0, #24]
 8008c1e:	b90b      	cbnz	r3, 8008c24 <_puts_r+0x10>
 8008c20:	f001 f910 	bl	8009e44 <__sinit>
 8008c24:	69ab      	ldr	r3, [r5, #24]
 8008c26:	68ac      	ldr	r4, [r5, #8]
 8008c28:	b913      	cbnz	r3, 8008c30 <_puts_r+0x1c>
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f001 f90a 	bl	8009e44 <__sinit>
 8008c30:	4b2c      	ldr	r3, [pc, #176]	; (8008ce4 <_puts_r+0xd0>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d120      	bne.n	8008c78 <_puts_r+0x64>
 8008c36:	686c      	ldr	r4, [r5, #4]
 8008c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c3a:	07db      	lsls	r3, r3, #31
 8008c3c:	d405      	bmi.n	8008c4a <_puts_r+0x36>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	0598      	lsls	r0, r3, #22
 8008c42:	d402      	bmi.n	8008c4a <_puts_r+0x36>
 8008c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c46:	f001 f9a0 	bl	8009f8a <__retarget_lock_acquire_recursive>
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	0719      	lsls	r1, r3, #28
 8008c4e:	d51d      	bpl.n	8008c8c <_puts_r+0x78>
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	b1db      	cbz	r3, 8008c8c <_puts_r+0x78>
 8008c54:	3e01      	subs	r6, #1
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	60a3      	str	r3, [r4, #8]
 8008c60:	bb39      	cbnz	r1, 8008cb2 <_puts_r+0x9e>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da38      	bge.n	8008cd8 <_puts_r+0xc4>
 8008c66:	4622      	mov	r2, r4
 8008c68:	210a      	movs	r1, #10
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f890 	bl	8008d90 <__swbuf_r>
 8008c70:	3001      	adds	r0, #1
 8008c72:	d011      	beq.n	8008c98 <_puts_r+0x84>
 8008c74:	250a      	movs	r5, #10
 8008c76:	e011      	b.n	8008c9c <_puts_r+0x88>
 8008c78:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <_puts_r+0xd4>)
 8008c7a:	429c      	cmp	r4, r3
 8008c7c:	d101      	bne.n	8008c82 <_puts_r+0x6e>
 8008c7e:	68ac      	ldr	r4, [r5, #8]
 8008c80:	e7da      	b.n	8008c38 <_puts_r+0x24>
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <_puts_r+0xd8>)
 8008c84:	429c      	cmp	r4, r3
 8008c86:	bf08      	it	eq
 8008c88:	68ec      	ldreq	r4, [r5, #12]
 8008c8a:	e7d5      	b.n	8008c38 <_puts_r+0x24>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 f8d0 	bl	8008e34 <__swsetup_r>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d0dd      	beq.n	8008c54 <_puts_r+0x40>
 8008c98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c9e:	07da      	lsls	r2, r3, #31
 8008ca0:	d405      	bmi.n	8008cae <_puts_r+0x9a>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	059b      	lsls	r3, r3, #22
 8008ca6:	d402      	bmi.n	8008cae <_puts_r+0x9a>
 8008ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008caa:	f001 f96f 	bl	8009f8c <__retarget_lock_release_recursive>
 8008cae:	4628      	mov	r0, r5
 8008cb0:	bd70      	pop	{r4, r5, r6, pc}
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da04      	bge.n	8008cc0 <_puts_r+0xac>
 8008cb6:	69a2      	ldr	r2, [r4, #24]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	dc06      	bgt.n	8008cca <_puts_r+0xb6>
 8008cbc:	290a      	cmp	r1, #10
 8008cbe:	d004      	beq.n	8008cca <_puts_r+0xb6>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	6022      	str	r2, [r4, #0]
 8008cc6:	7019      	strb	r1, [r3, #0]
 8008cc8:	e7c5      	b.n	8008c56 <_puts_r+0x42>
 8008cca:	4622      	mov	r2, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 f85f 	bl	8008d90 <__swbuf_r>
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d1bf      	bne.n	8008c56 <_puts_r+0x42>
 8008cd6:	e7df      	b.n	8008c98 <_puts_r+0x84>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	250a      	movs	r5, #10
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	701d      	strb	r5, [r3, #0]
 8008ce2:	e7db      	b.n	8008c9c <_puts_r+0x88>
 8008ce4:	0800baf0 	.word	0x0800baf0
 8008ce8:	0800bb10 	.word	0x0800bb10
 8008cec:	0800bad0 	.word	0x0800bad0

08008cf0 <puts>:
 8008cf0:	4b02      	ldr	r3, [pc, #8]	; (8008cfc <puts+0xc>)
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	f7ff bf8d 	b.w	8008c14 <_puts_r>
 8008cfa:	bf00      	nop
 8008cfc:	2000000c 	.word	0x2000000c

08008d00 <_sbrk_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d06      	ldr	r5, [pc, #24]	; (8008d1c <_sbrk_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	f7fa fab8 	bl	8003280 <_sbrk>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_sbrk_r+0x1a>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_sbrk_r+0x1a>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20000c2c 	.word	0x20000c2c

08008d20 <siprintf>:
 8008d20:	b40e      	push	{r1, r2, r3}
 8008d22:	b500      	push	{lr}
 8008d24:	b09c      	sub	sp, #112	; 0x70
 8008d26:	ab1d      	add	r3, sp, #116	; 0x74
 8008d28:	9002      	str	r0, [sp, #8]
 8008d2a:	9006      	str	r0, [sp, #24]
 8008d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d30:	4809      	ldr	r0, [pc, #36]	; (8008d58 <siprintf+0x38>)
 8008d32:	9107      	str	r1, [sp, #28]
 8008d34:	9104      	str	r1, [sp, #16]
 8008d36:	4909      	ldr	r1, [pc, #36]	; (8008d5c <siprintf+0x3c>)
 8008d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d3c:	9105      	str	r1, [sp, #20]
 8008d3e:	6800      	ldr	r0, [r0, #0]
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	a902      	add	r1, sp, #8
 8008d44:	f001 fdca 	bl	800a8dc <_svfiprintf_r>
 8008d48:	9b02      	ldr	r3, [sp, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	b01c      	add	sp, #112	; 0x70
 8008d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d54:	b003      	add	sp, #12
 8008d56:	4770      	bx	lr
 8008d58:	2000000c 	.word	0x2000000c
 8008d5c:	ffff0208 	.word	0xffff0208

08008d60 <strstr>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	780c      	ldrb	r4, [r1, #0]
 8008d64:	b164      	cbz	r4, 8008d80 <strstr+0x20>
 8008d66:	4603      	mov	r3, r0
 8008d68:	781a      	ldrb	r2, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	1c5e      	adds	r6, r3, #1
 8008d6e:	b90a      	cbnz	r2, 8008d74 <strstr+0x14>
 8008d70:	4610      	mov	r0, r2
 8008d72:	e005      	b.n	8008d80 <strstr+0x20>
 8008d74:	4294      	cmp	r4, r2
 8008d76:	d108      	bne.n	8008d8a <strstr+0x2a>
 8008d78:	460d      	mov	r5, r1
 8008d7a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008d7e:	b902      	cbnz	r2, 8008d82 <strstr+0x22>
 8008d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d82:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008d86:	4297      	cmp	r7, r2
 8008d88:	d0f7      	beq.n	8008d7a <strstr+0x1a>
 8008d8a:	4633      	mov	r3, r6
 8008d8c:	e7ec      	b.n	8008d68 <strstr+0x8>
	...

08008d90 <__swbuf_r>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	460e      	mov	r6, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	4605      	mov	r5, r0
 8008d98:	b118      	cbz	r0, 8008da2 <__swbuf_r+0x12>
 8008d9a:	6983      	ldr	r3, [r0, #24]
 8008d9c:	b90b      	cbnz	r3, 8008da2 <__swbuf_r+0x12>
 8008d9e:	f001 f851 	bl	8009e44 <__sinit>
 8008da2:	4b21      	ldr	r3, [pc, #132]	; (8008e28 <__swbuf_r+0x98>)
 8008da4:	429c      	cmp	r4, r3
 8008da6:	d12b      	bne.n	8008e00 <__swbuf_r+0x70>
 8008da8:	686c      	ldr	r4, [r5, #4]
 8008daa:	69a3      	ldr	r3, [r4, #24]
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	071a      	lsls	r2, r3, #28
 8008db2:	d52f      	bpl.n	8008e14 <__swbuf_r+0x84>
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	b36b      	cbz	r3, 8008e14 <__swbuf_r+0x84>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	6820      	ldr	r0, [r4, #0]
 8008dbc:	1ac0      	subs	r0, r0, r3
 8008dbe:	6963      	ldr	r3, [r4, #20]
 8008dc0:	b2f6      	uxtb	r6, r6
 8008dc2:	4283      	cmp	r3, r0
 8008dc4:	4637      	mov	r7, r6
 8008dc6:	dc04      	bgt.n	8008dd2 <__swbuf_r+0x42>
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4628      	mov	r0, r5
 8008dcc:	f000 ffa6 	bl	8009d1c <_fflush_r>
 8008dd0:	bb30      	cbnz	r0, 8008e20 <__swbuf_r+0x90>
 8008dd2:	68a3      	ldr	r3, [r4, #8]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	60a3      	str	r3, [r4, #8]
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	6022      	str	r2, [r4, #0]
 8008dde:	701e      	strb	r6, [r3, #0]
 8008de0:	6963      	ldr	r3, [r4, #20]
 8008de2:	3001      	adds	r0, #1
 8008de4:	4283      	cmp	r3, r0
 8008de6:	d004      	beq.n	8008df2 <__swbuf_r+0x62>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	07db      	lsls	r3, r3, #31
 8008dec:	d506      	bpl.n	8008dfc <__swbuf_r+0x6c>
 8008dee:	2e0a      	cmp	r6, #10
 8008df0:	d104      	bne.n	8008dfc <__swbuf_r+0x6c>
 8008df2:	4621      	mov	r1, r4
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 ff91 	bl	8009d1c <_fflush_r>
 8008dfa:	b988      	cbnz	r0, 8008e20 <__swbuf_r+0x90>
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e00:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <__swbuf_r+0x9c>)
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d101      	bne.n	8008e0a <__swbuf_r+0x7a>
 8008e06:	68ac      	ldr	r4, [r5, #8]
 8008e08:	e7cf      	b.n	8008daa <__swbuf_r+0x1a>
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <__swbuf_r+0xa0>)
 8008e0c:	429c      	cmp	r4, r3
 8008e0e:	bf08      	it	eq
 8008e10:	68ec      	ldreq	r4, [r5, #12]
 8008e12:	e7ca      	b.n	8008daa <__swbuf_r+0x1a>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f80c 	bl	8008e34 <__swsetup_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d0cb      	beq.n	8008db8 <__swbuf_r+0x28>
 8008e20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e24:	e7ea      	b.n	8008dfc <__swbuf_r+0x6c>
 8008e26:	bf00      	nop
 8008e28:	0800baf0 	.word	0x0800baf0
 8008e2c:	0800bb10 	.word	0x0800bb10
 8008e30:	0800bad0 	.word	0x0800bad0

08008e34 <__swsetup_r>:
 8008e34:	4b32      	ldr	r3, [pc, #200]	; (8008f00 <__swsetup_r+0xcc>)
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	681d      	ldr	r5, [r3, #0]
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460c      	mov	r4, r1
 8008e3e:	b125      	cbz	r5, 8008e4a <__swsetup_r+0x16>
 8008e40:	69ab      	ldr	r3, [r5, #24]
 8008e42:	b913      	cbnz	r3, 8008e4a <__swsetup_r+0x16>
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 fffd 	bl	8009e44 <__sinit>
 8008e4a:	4b2e      	ldr	r3, [pc, #184]	; (8008f04 <__swsetup_r+0xd0>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	d10f      	bne.n	8008e70 <__swsetup_r+0x3c>
 8008e50:	686c      	ldr	r4, [r5, #4]
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e58:	0719      	lsls	r1, r3, #28
 8008e5a:	d42c      	bmi.n	8008eb6 <__swsetup_r+0x82>
 8008e5c:	06dd      	lsls	r5, r3, #27
 8008e5e:	d411      	bmi.n	8008e84 <__swsetup_r+0x50>
 8008e60:	2309      	movs	r3, #9
 8008e62:	6033      	str	r3, [r6, #0]
 8008e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e6e:	e03e      	b.n	8008eee <__swsetup_r+0xba>
 8008e70:	4b25      	ldr	r3, [pc, #148]	; (8008f08 <__swsetup_r+0xd4>)
 8008e72:	429c      	cmp	r4, r3
 8008e74:	d101      	bne.n	8008e7a <__swsetup_r+0x46>
 8008e76:	68ac      	ldr	r4, [r5, #8]
 8008e78:	e7eb      	b.n	8008e52 <__swsetup_r+0x1e>
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <__swsetup_r+0xd8>)
 8008e7c:	429c      	cmp	r4, r3
 8008e7e:	bf08      	it	eq
 8008e80:	68ec      	ldreq	r4, [r5, #12]
 8008e82:	e7e6      	b.n	8008e52 <__swsetup_r+0x1e>
 8008e84:	0758      	lsls	r0, r3, #29
 8008e86:	d512      	bpl.n	8008eae <__swsetup_r+0x7a>
 8008e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8a:	b141      	cbz	r1, 8008e9e <__swsetup_r+0x6a>
 8008e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e90:	4299      	cmp	r1, r3
 8008e92:	d002      	beq.n	8008e9a <__swsetup_r+0x66>
 8008e94:	4630      	mov	r0, r6
 8008e96:	f7ff f837 	bl	8007f08 <_free_r>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ea4:	81a3      	strh	r3, [r4, #12]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f043 0308 	orr.w	r3, r3, #8
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	b94b      	cbnz	r3, 8008ece <__swsetup_r+0x9a>
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec4:	d003      	beq.n	8008ece <__swsetup_r+0x9a>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f001 f885 	bl	8009fd8 <__smakebuf_r>
 8008ece:	89a0      	ldrh	r0, [r4, #12]
 8008ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ed4:	f010 0301 	ands.w	r3, r0, #1
 8008ed8:	d00a      	beq.n	8008ef0 <__swsetup_r+0xbc>
 8008eda:	2300      	movs	r3, #0
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	6963      	ldr	r3, [r4, #20]
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	61a3      	str	r3, [r4, #24]
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	b943      	cbnz	r3, 8008efa <__swsetup_r+0xc6>
 8008ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008eec:	d1ba      	bne.n	8008e64 <__swsetup_r+0x30>
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	0781      	lsls	r1, r0, #30
 8008ef2:	bf58      	it	pl
 8008ef4:	6963      	ldrpl	r3, [r4, #20]
 8008ef6:	60a3      	str	r3, [r4, #8]
 8008ef8:	e7f4      	b.n	8008ee4 <__swsetup_r+0xb0>
 8008efa:	2000      	movs	r0, #0
 8008efc:	e7f7      	b.n	8008eee <__swsetup_r+0xba>
 8008efe:	bf00      	nop
 8008f00:	2000000c 	.word	0x2000000c
 8008f04:	0800baf0 	.word	0x0800baf0
 8008f08:	0800bb10 	.word	0x0800bb10
 8008f0c:	0800bad0 	.word	0x0800bad0

08008f10 <abort>:
 8008f10:	b508      	push	{r3, lr}
 8008f12:	2006      	movs	r0, #6
 8008f14:	f001 fe0a 	bl	800ab2c <raise>
 8008f18:	2001      	movs	r0, #1
 8008f1a:	f7fa f93a 	bl	8003192 <_exit>

08008f1e <quorem>:
 8008f1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f22:	6903      	ldr	r3, [r0, #16]
 8008f24:	690c      	ldr	r4, [r1, #16]
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	4607      	mov	r7, r0
 8008f2a:	f2c0 8081 	blt.w	8009030 <quorem+0x112>
 8008f2e:	3c01      	subs	r4, #1
 8008f30:	f101 0814 	add.w	r8, r1, #20
 8008f34:	f100 0514 	add.w	r5, r0, #20
 8008f38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f46:	3301      	adds	r3, #1
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f52:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f56:	d331      	bcc.n	8008fbc <quorem+0x9e>
 8008f58:	f04f 0e00 	mov.w	lr, #0
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	46ac      	mov	ip, r5
 8008f60:	46f2      	mov	sl, lr
 8008f62:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f66:	b293      	uxth	r3, r2
 8008f68:	fb06 e303 	mla	r3, r6, r3, lr
 8008f6c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	ebaa 0303 	sub.w	r3, sl, r3
 8008f76:	0c12      	lsrs	r2, r2, #16
 8008f78:	f8dc a000 	ldr.w	sl, [ip]
 8008f7c:	fb06 e202 	mla	r2, r6, r2, lr
 8008f80:	fa13 f38a 	uxtah	r3, r3, sl
 8008f84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f88:	fa1f fa82 	uxth.w	sl, r2
 8008f8c:	f8dc 2000 	ldr.w	r2, [ip]
 8008f90:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f9e:	4581      	cmp	r9, r0
 8008fa0:	f84c 3b04 	str.w	r3, [ip], #4
 8008fa4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fa8:	d2db      	bcs.n	8008f62 <quorem+0x44>
 8008faa:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fae:	b92b      	cbnz	r3, 8008fbc <quorem+0x9e>
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	3b04      	subs	r3, #4
 8008fb4:	429d      	cmp	r5, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	d32e      	bcc.n	8009018 <quorem+0xfa>
 8008fba:	613c      	str	r4, [r7, #16]
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f001 fafd 	bl	800a5bc <__mcmp>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	db24      	blt.n	8009010 <quorem+0xf2>
 8008fc6:	3601      	adds	r6, #1
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f04f 0c00 	mov.w	ip, #0
 8008fce:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fd2:	f8d0 e000 	ldr.w	lr, [r0]
 8008fd6:	b293      	uxth	r3, r2
 8008fd8:	ebac 0303 	sub.w	r3, ip, r3
 8008fdc:	0c12      	lsrs	r2, r2, #16
 8008fde:	fa13 f38e 	uxtah	r3, r3, lr
 8008fe2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008fe6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ff0:	45c1      	cmp	r9, r8
 8008ff2:	f840 3b04 	str.w	r3, [r0], #4
 8008ff6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ffa:	d2e8      	bcs.n	8008fce <quorem+0xb0>
 8008ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009004:	b922      	cbnz	r2, 8009010 <quorem+0xf2>
 8009006:	3b04      	subs	r3, #4
 8009008:	429d      	cmp	r5, r3
 800900a:	461a      	mov	r2, r3
 800900c:	d30a      	bcc.n	8009024 <quorem+0x106>
 800900e:	613c      	str	r4, [r7, #16]
 8009010:	4630      	mov	r0, r6
 8009012:	b003      	add	sp, #12
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	6812      	ldr	r2, [r2, #0]
 800901a:	3b04      	subs	r3, #4
 800901c:	2a00      	cmp	r2, #0
 800901e:	d1cc      	bne.n	8008fba <quorem+0x9c>
 8009020:	3c01      	subs	r4, #1
 8009022:	e7c7      	b.n	8008fb4 <quorem+0x96>
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	3b04      	subs	r3, #4
 8009028:	2a00      	cmp	r2, #0
 800902a:	d1f0      	bne.n	800900e <quorem+0xf0>
 800902c:	3c01      	subs	r4, #1
 800902e:	e7eb      	b.n	8009008 <quorem+0xea>
 8009030:	2000      	movs	r0, #0
 8009032:	e7ee      	b.n	8009012 <quorem+0xf4>
 8009034:	0000      	movs	r0, r0
	...

08009038 <_dtoa_r>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	ed2d 8b02 	vpush	{d8}
 8009040:	ec57 6b10 	vmov	r6, r7, d0
 8009044:	b095      	sub	sp, #84	; 0x54
 8009046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800904c:	9105      	str	r1, [sp, #20]
 800904e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009052:	4604      	mov	r4, r0
 8009054:	9209      	str	r2, [sp, #36]	; 0x24
 8009056:	930f      	str	r3, [sp, #60]	; 0x3c
 8009058:	b975      	cbnz	r5, 8009078 <_dtoa_r+0x40>
 800905a:	2010      	movs	r0, #16
 800905c:	f7fe ff44 	bl	8007ee8 <malloc>
 8009060:	4602      	mov	r2, r0
 8009062:	6260      	str	r0, [r4, #36]	; 0x24
 8009064:	b920      	cbnz	r0, 8009070 <_dtoa_r+0x38>
 8009066:	4bb2      	ldr	r3, [pc, #712]	; (8009330 <_dtoa_r+0x2f8>)
 8009068:	21ea      	movs	r1, #234	; 0xea
 800906a:	48b2      	ldr	r0, [pc, #712]	; (8009334 <_dtoa_r+0x2fc>)
 800906c:	f7fe fece 	bl	8007e0c <__assert_func>
 8009070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009074:	6005      	str	r5, [r0, #0]
 8009076:	60c5      	str	r5, [r0, #12]
 8009078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800907a:	6819      	ldr	r1, [r3, #0]
 800907c:	b151      	cbz	r1, 8009094 <_dtoa_r+0x5c>
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	604a      	str	r2, [r1, #4]
 8009082:	2301      	movs	r3, #1
 8009084:	4093      	lsls	r3, r2
 8009086:	608b      	str	r3, [r1, #8]
 8009088:	4620      	mov	r0, r4
 800908a:	f001 f859 	bl	800a140 <_Bfree>
 800908e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	1e3b      	subs	r3, r7, #0
 8009096:	bfb9      	ittee	lt
 8009098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800909c:	9303      	strlt	r3, [sp, #12]
 800909e:	2300      	movge	r3, #0
 80090a0:	f8c8 3000 	strge.w	r3, [r8]
 80090a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80090a8:	4ba3      	ldr	r3, [pc, #652]	; (8009338 <_dtoa_r+0x300>)
 80090aa:	bfbc      	itt	lt
 80090ac:	2201      	movlt	r2, #1
 80090ae:	f8c8 2000 	strlt.w	r2, [r8]
 80090b2:	ea33 0309 	bics.w	r3, r3, r9
 80090b6:	d11b      	bne.n	80090f0 <_dtoa_r+0xb8>
 80090b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090c4:	4333      	orrs	r3, r6
 80090c6:	f000 857a 	beq.w	8009bbe <_dtoa_r+0xb86>
 80090ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090cc:	b963      	cbnz	r3, 80090e8 <_dtoa_r+0xb0>
 80090ce:	4b9b      	ldr	r3, [pc, #620]	; (800933c <_dtoa_r+0x304>)
 80090d0:	e024      	b.n	800911c <_dtoa_r+0xe4>
 80090d2:	4b9b      	ldr	r3, [pc, #620]	; (8009340 <_dtoa_r+0x308>)
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	3308      	adds	r3, #8
 80090d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	9800      	ldr	r0, [sp, #0]
 80090de:	b015      	add	sp, #84	; 0x54
 80090e0:	ecbd 8b02 	vpop	{d8}
 80090e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e8:	4b94      	ldr	r3, [pc, #592]	; (800933c <_dtoa_r+0x304>)
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	3303      	adds	r3, #3
 80090ee:	e7f3      	b.n	80090d8 <_dtoa_r+0xa0>
 80090f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f4:	2200      	movs	r2, #0
 80090f6:	ec51 0b17 	vmov	r0, r1, d7
 80090fa:	2300      	movs	r3, #0
 80090fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009100:	f7f7 fd0a 	bl	8000b18 <__aeabi_dcmpeq>
 8009104:	4680      	mov	r8, r0
 8009106:	b158      	cbz	r0, 8009120 <_dtoa_r+0xe8>
 8009108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800910a:	2301      	movs	r3, #1
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 8551 	beq.w	8009bb8 <_dtoa_r+0xb80>
 8009116:	488b      	ldr	r0, [pc, #556]	; (8009344 <_dtoa_r+0x30c>)
 8009118:	6018      	str	r0, [r3, #0]
 800911a:	1e43      	subs	r3, r0, #1
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	e7dd      	b.n	80090dc <_dtoa_r+0xa4>
 8009120:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009124:	aa12      	add	r2, sp, #72	; 0x48
 8009126:	a913      	add	r1, sp, #76	; 0x4c
 8009128:	4620      	mov	r0, r4
 800912a:	f001 faeb 	bl	800a704 <__d2b>
 800912e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009132:	4683      	mov	fp, r0
 8009134:	2d00      	cmp	r5, #0
 8009136:	d07c      	beq.n	8009232 <_dtoa_r+0x1fa>
 8009138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800913a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800913e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009142:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009146:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800914a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800914e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009152:	4b7d      	ldr	r3, [pc, #500]	; (8009348 <_dtoa_r+0x310>)
 8009154:	2200      	movs	r2, #0
 8009156:	4630      	mov	r0, r6
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 f8bd 	bl	80002d8 <__aeabi_dsub>
 800915e:	a36e      	add	r3, pc, #440	; (adr r3, 8009318 <_dtoa_r+0x2e0>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 fa70 	bl	8000648 <__aeabi_dmul>
 8009168:	a36d      	add	r3, pc, #436	; (adr r3, 8009320 <_dtoa_r+0x2e8>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	f7f7 f8b5 	bl	80002dc <__adddf3>
 8009172:	4606      	mov	r6, r0
 8009174:	4628      	mov	r0, r5
 8009176:	460f      	mov	r7, r1
 8009178:	f7f7 f9fc 	bl	8000574 <__aeabi_i2d>
 800917c:	a36a      	add	r3, pc, #424	; (adr r3, 8009328 <_dtoa_r+0x2f0>)
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	f7f7 fa61 	bl	8000648 <__aeabi_dmul>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4630      	mov	r0, r6
 800918c:	4639      	mov	r1, r7
 800918e:	f7f7 f8a5 	bl	80002dc <__adddf3>
 8009192:	4606      	mov	r6, r0
 8009194:	460f      	mov	r7, r1
 8009196:	f7f7 fd07 	bl	8000ba8 <__aeabi_d2iz>
 800919a:	2200      	movs	r2, #0
 800919c:	4682      	mov	sl, r0
 800919e:	2300      	movs	r3, #0
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 fcc2 	bl	8000b2c <__aeabi_dcmplt>
 80091a8:	b148      	cbz	r0, 80091be <_dtoa_r+0x186>
 80091aa:	4650      	mov	r0, sl
 80091ac:	f7f7 f9e2 	bl	8000574 <__aeabi_i2d>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 80091b8:	b908      	cbnz	r0, 80091be <_dtoa_r+0x186>
 80091ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80091be:	f1ba 0f16 	cmp.w	sl, #22
 80091c2:	d854      	bhi.n	800926e <_dtoa_r+0x236>
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <_dtoa_r+0x314>)
 80091c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091d2:	f7f7 fcab 	bl	8000b2c <__aeabi_dcmplt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d04b      	beq.n	8009272 <_dtoa_r+0x23a>
 80091da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80091de:	2300      	movs	r3, #0
 80091e0:	930e      	str	r3, [sp, #56]	; 0x38
 80091e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091e4:	1b5d      	subs	r5, r3, r5
 80091e6:	1e6b      	subs	r3, r5, #1
 80091e8:	9304      	str	r3, [sp, #16]
 80091ea:	bf43      	ittte	mi
 80091ec:	2300      	movmi	r3, #0
 80091ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80091f2:	9304      	strmi	r3, [sp, #16]
 80091f4:	f04f 0800 	movpl.w	r8, #0
 80091f8:	f1ba 0f00 	cmp.w	sl, #0
 80091fc:	db3b      	blt.n	8009276 <_dtoa_r+0x23e>
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009204:	4453      	add	r3, sl
 8009206:	9304      	str	r3, [sp, #16]
 8009208:	2300      	movs	r3, #0
 800920a:	9306      	str	r3, [sp, #24]
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	2b09      	cmp	r3, #9
 8009210:	d869      	bhi.n	80092e6 <_dtoa_r+0x2ae>
 8009212:	2b05      	cmp	r3, #5
 8009214:	bfc4      	itt	gt
 8009216:	3b04      	subgt	r3, #4
 8009218:	9305      	strgt	r3, [sp, #20]
 800921a:	9b05      	ldr	r3, [sp, #20]
 800921c:	f1a3 0302 	sub.w	r3, r3, #2
 8009220:	bfcc      	ite	gt
 8009222:	2500      	movgt	r5, #0
 8009224:	2501      	movle	r5, #1
 8009226:	2b03      	cmp	r3, #3
 8009228:	d869      	bhi.n	80092fe <_dtoa_r+0x2c6>
 800922a:	e8df f003 	tbb	[pc, r3]
 800922e:	4e2c      	.short	0x4e2c
 8009230:	5a4c      	.short	0x5a4c
 8009232:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009236:	441d      	add	r5, r3
 8009238:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800923c:	2b20      	cmp	r3, #32
 800923e:	bfc1      	itttt	gt
 8009240:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009244:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009248:	fa09 f303 	lslgt.w	r3, r9, r3
 800924c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009250:	bfda      	itte	le
 8009252:	f1c3 0320 	rsble	r3, r3, #32
 8009256:	fa06 f003 	lslle.w	r0, r6, r3
 800925a:	4318      	orrgt	r0, r3
 800925c:	f7f7 f97a 	bl	8000554 <__aeabi_ui2d>
 8009260:	2301      	movs	r3, #1
 8009262:	4606      	mov	r6, r0
 8009264:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009268:	3d01      	subs	r5, #1
 800926a:	9310      	str	r3, [sp, #64]	; 0x40
 800926c:	e771      	b.n	8009152 <_dtoa_r+0x11a>
 800926e:	2301      	movs	r3, #1
 8009270:	e7b6      	b.n	80091e0 <_dtoa_r+0x1a8>
 8009272:	900e      	str	r0, [sp, #56]	; 0x38
 8009274:	e7b5      	b.n	80091e2 <_dtoa_r+0x1aa>
 8009276:	f1ca 0300 	rsb	r3, sl, #0
 800927a:	9306      	str	r3, [sp, #24]
 800927c:	2300      	movs	r3, #0
 800927e:	eba8 080a 	sub.w	r8, r8, sl
 8009282:	930d      	str	r3, [sp, #52]	; 0x34
 8009284:	e7c2      	b.n	800920c <_dtoa_r+0x1d4>
 8009286:	2300      	movs	r3, #0
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	dc39      	bgt.n	8009304 <_dtoa_r+0x2cc>
 8009290:	f04f 0901 	mov.w	r9, #1
 8009294:	f8cd 9004 	str.w	r9, [sp, #4]
 8009298:	464b      	mov	r3, r9
 800929a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800929e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092a0:	2200      	movs	r2, #0
 80092a2:	6042      	str	r2, [r0, #4]
 80092a4:	2204      	movs	r2, #4
 80092a6:	f102 0614 	add.w	r6, r2, #20
 80092aa:	429e      	cmp	r6, r3
 80092ac:	6841      	ldr	r1, [r0, #4]
 80092ae:	d92f      	bls.n	8009310 <_dtoa_r+0x2d8>
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 ff05 	bl	800a0c0 <_Balloc>
 80092b6:	9000      	str	r0, [sp, #0]
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d14b      	bne.n	8009354 <_dtoa_r+0x31c>
 80092bc:	4b24      	ldr	r3, [pc, #144]	; (8009350 <_dtoa_r+0x318>)
 80092be:	4602      	mov	r2, r0
 80092c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092c4:	e6d1      	b.n	800906a <_dtoa_r+0x32>
 80092c6:	2301      	movs	r3, #1
 80092c8:	e7de      	b.n	8009288 <_dtoa_r+0x250>
 80092ca:	2300      	movs	r3, #0
 80092cc:	9308      	str	r3, [sp, #32]
 80092ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d0:	eb0a 0903 	add.w	r9, sl, r3
 80092d4:	f109 0301 	add.w	r3, r9, #1
 80092d8:	2b01      	cmp	r3, #1
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	bfb8      	it	lt
 80092de:	2301      	movlt	r3, #1
 80092e0:	e7dd      	b.n	800929e <_dtoa_r+0x266>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e7f2      	b.n	80092cc <_dtoa_r+0x294>
 80092e6:	2501      	movs	r5, #1
 80092e8:	2300      	movs	r3, #0
 80092ea:	9305      	str	r3, [sp, #20]
 80092ec:	9508      	str	r5, [sp, #32]
 80092ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80092f8:	2312      	movs	r3, #18
 80092fa:	9209      	str	r2, [sp, #36]	; 0x24
 80092fc:	e7cf      	b.n	800929e <_dtoa_r+0x266>
 80092fe:	2301      	movs	r3, #1
 8009300:	9308      	str	r3, [sp, #32]
 8009302:	e7f4      	b.n	80092ee <_dtoa_r+0x2b6>
 8009304:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009308:	f8cd 9004 	str.w	r9, [sp, #4]
 800930c:	464b      	mov	r3, r9
 800930e:	e7c6      	b.n	800929e <_dtoa_r+0x266>
 8009310:	3101      	adds	r1, #1
 8009312:	6041      	str	r1, [r0, #4]
 8009314:	0052      	lsls	r2, r2, #1
 8009316:	e7c6      	b.n	80092a6 <_dtoa_r+0x26e>
 8009318:	636f4361 	.word	0x636f4361
 800931c:	3fd287a7 	.word	0x3fd287a7
 8009320:	8b60c8b3 	.word	0x8b60c8b3
 8009324:	3fc68a28 	.word	0x3fc68a28
 8009328:	509f79fb 	.word	0x509f79fb
 800932c:	3fd34413 	.word	0x3fd34413
 8009330:	0800ba46 	.word	0x0800ba46
 8009334:	0800ba5d 	.word	0x0800ba5d
 8009338:	7ff00000 	.word	0x7ff00000
 800933c:	0800ba42 	.word	0x0800ba42
 8009340:	0800ba39 	.word	0x0800ba39
 8009344:	0800ba16 	.word	0x0800ba16
 8009348:	3ff80000 	.word	0x3ff80000
 800934c:	0800bbb8 	.word	0x0800bbb8
 8009350:	0800babc 	.word	0x0800babc
 8009354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009356:	9a00      	ldr	r2, [sp, #0]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	9b01      	ldr	r3, [sp, #4]
 800935c:	2b0e      	cmp	r3, #14
 800935e:	f200 80ad 	bhi.w	80094bc <_dtoa_r+0x484>
 8009362:	2d00      	cmp	r5, #0
 8009364:	f000 80aa 	beq.w	80094bc <_dtoa_r+0x484>
 8009368:	f1ba 0f00 	cmp.w	sl, #0
 800936c:	dd36      	ble.n	80093dc <_dtoa_r+0x3a4>
 800936e:	4ac3      	ldr	r2, [pc, #780]	; (800967c <_dtoa_r+0x644>)
 8009370:	f00a 030f 	and.w	r3, sl, #15
 8009374:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009378:	ed93 7b00 	vldr	d7, [r3]
 800937c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009380:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009384:	eeb0 8a47 	vmov.f32	s16, s14
 8009388:	eef0 8a67 	vmov.f32	s17, s15
 800938c:	d016      	beq.n	80093bc <_dtoa_r+0x384>
 800938e:	4bbc      	ldr	r3, [pc, #752]	; (8009680 <_dtoa_r+0x648>)
 8009390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009398:	f7f7 fa80 	bl	800089c <__aeabi_ddiv>
 800939c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a0:	f007 070f 	and.w	r7, r7, #15
 80093a4:	2503      	movs	r5, #3
 80093a6:	4eb6      	ldr	r6, [pc, #728]	; (8009680 <_dtoa_r+0x648>)
 80093a8:	b957      	cbnz	r7, 80093c0 <_dtoa_r+0x388>
 80093aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093ae:	ec53 2b18 	vmov	r2, r3, d8
 80093b2:	f7f7 fa73 	bl	800089c <__aeabi_ddiv>
 80093b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ba:	e029      	b.n	8009410 <_dtoa_r+0x3d8>
 80093bc:	2502      	movs	r5, #2
 80093be:	e7f2      	b.n	80093a6 <_dtoa_r+0x36e>
 80093c0:	07f9      	lsls	r1, r7, #31
 80093c2:	d508      	bpl.n	80093d6 <_dtoa_r+0x39e>
 80093c4:	ec51 0b18 	vmov	r0, r1, d8
 80093c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093cc:	f7f7 f93c 	bl	8000648 <__aeabi_dmul>
 80093d0:	ec41 0b18 	vmov	d8, r0, r1
 80093d4:	3501      	adds	r5, #1
 80093d6:	107f      	asrs	r7, r7, #1
 80093d8:	3608      	adds	r6, #8
 80093da:	e7e5      	b.n	80093a8 <_dtoa_r+0x370>
 80093dc:	f000 80a6 	beq.w	800952c <_dtoa_r+0x4f4>
 80093e0:	f1ca 0600 	rsb	r6, sl, #0
 80093e4:	4ba5      	ldr	r3, [pc, #660]	; (800967c <_dtoa_r+0x644>)
 80093e6:	4fa6      	ldr	r7, [pc, #664]	; (8009680 <_dtoa_r+0x648>)
 80093e8:	f006 020f 	and.w	r2, r6, #15
 80093ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093f8:	f7f7 f926 	bl	8000648 <__aeabi_dmul>
 80093fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009400:	1136      	asrs	r6, r6, #4
 8009402:	2300      	movs	r3, #0
 8009404:	2502      	movs	r5, #2
 8009406:	2e00      	cmp	r6, #0
 8009408:	f040 8085 	bne.w	8009516 <_dtoa_r+0x4de>
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1d2      	bne.n	80093b6 <_dtoa_r+0x37e>
 8009410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 808c 	beq.w	8009530 <_dtoa_r+0x4f8>
 8009418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800941c:	4b99      	ldr	r3, [pc, #612]	; (8009684 <_dtoa_r+0x64c>)
 800941e:	2200      	movs	r2, #0
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f7 fb82 	bl	8000b2c <__aeabi_dcmplt>
 8009428:	2800      	cmp	r0, #0
 800942a:	f000 8081 	beq.w	8009530 <_dtoa_r+0x4f8>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d07d      	beq.n	8009530 <_dtoa_r+0x4f8>
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	dd3c      	ble.n	80094b4 <_dtoa_r+0x47c>
 800943a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800943e:	9307      	str	r3, [sp, #28]
 8009440:	2200      	movs	r2, #0
 8009442:	4b91      	ldr	r3, [pc, #580]	; (8009688 <_dtoa_r+0x650>)
 8009444:	4630      	mov	r0, r6
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 f8fe 	bl	8000648 <__aeabi_dmul>
 800944c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009450:	3501      	adds	r5, #1
 8009452:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009456:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800945a:	4628      	mov	r0, r5
 800945c:	f7f7 f88a 	bl	8000574 <__aeabi_i2d>
 8009460:	4632      	mov	r2, r6
 8009462:	463b      	mov	r3, r7
 8009464:	f7f7 f8f0 	bl	8000648 <__aeabi_dmul>
 8009468:	4b88      	ldr	r3, [pc, #544]	; (800968c <_dtoa_r+0x654>)
 800946a:	2200      	movs	r2, #0
 800946c:	f7f6 ff36 	bl	80002dc <__adddf3>
 8009470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009478:	9303      	str	r3, [sp, #12]
 800947a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800947c:	2b00      	cmp	r3, #0
 800947e:	d15c      	bne.n	800953a <_dtoa_r+0x502>
 8009480:	4b83      	ldr	r3, [pc, #524]	; (8009690 <_dtoa_r+0x658>)
 8009482:	2200      	movs	r2, #0
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f6 ff26 	bl	80002d8 <__aeabi_dsub>
 800948c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009490:	4606      	mov	r6, r0
 8009492:	460f      	mov	r7, r1
 8009494:	f7f7 fb68 	bl	8000b68 <__aeabi_dcmpgt>
 8009498:	2800      	cmp	r0, #0
 800949a:	f040 8296 	bne.w	80099ca <_dtoa_r+0x992>
 800949e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80094a2:	4630      	mov	r0, r6
 80094a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094a8:	4639      	mov	r1, r7
 80094aa:	f7f7 fb3f 	bl	8000b2c <__aeabi_dcmplt>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f040 8288 	bne.w	80099c4 <_dtoa_r+0x98c>
 80094b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f2c0 8158 	blt.w	8009774 <_dtoa_r+0x73c>
 80094c4:	f1ba 0f0e 	cmp.w	sl, #14
 80094c8:	f300 8154 	bgt.w	8009774 <_dtoa_r+0x73c>
 80094cc:	4b6b      	ldr	r3, [pc, #428]	; (800967c <_dtoa_r+0x644>)
 80094ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f280 80e3 	bge.w	80096a4 <_dtoa_r+0x66c>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f300 80df 	bgt.w	80096a4 <_dtoa_r+0x66c>
 80094e6:	f040 826d 	bne.w	80099c4 <_dtoa_r+0x98c>
 80094ea:	4b69      	ldr	r3, [pc, #420]	; (8009690 <_dtoa_r+0x658>)
 80094ec:	2200      	movs	r2, #0
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f7 f8a9 	bl	8000648 <__aeabi_dmul>
 80094f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094fa:	f7f7 fb2b 	bl	8000b54 <__aeabi_dcmpge>
 80094fe:	9e01      	ldr	r6, [sp, #4]
 8009500:	4637      	mov	r7, r6
 8009502:	2800      	cmp	r0, #0
 8009504:	f040 8243 	bne.w	800998e <_dtoa_r+0x956>
 8009508:	9d00      	ldr	r5, [sp, #0]
 800950a:	2331      	movs	r3, #49	; 0x31
 800950c:	f805 3b01 	strb.w	r3, [r5], #1
 8009510:	f10a 0a01 	add.w	sl, sl, #1
 8009514:	e23f      	b.n	8009996 <_dtoa_r+0x95e>
 8009516:	07f2      	lsls	r2, r6, #31
 8009518:	d505      	bpl.n	8009526 <_dtoa_r+0x4ee>
 800951a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800951e:	f7f7 f893 	bl	8000648 <__aeabi_dmul>
 8009522:	3501      	adds	r5, #1
 8009524:	2301      	movs	r3, #1
 8009526:	1076      	asrs	r6, r6, #1
 8009528:	3708      	adds	r7, #8
 800952a:	e76c      	b.n	8009406 <_dtoa_r+0x3ce>
 800952c:	2502      	movs	r5, #2
 800952e:	e76f      	b.n	8009410 <_dtoa_r+0x3d8>
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	f8cd a01c 	str.w	sl, [sp, #28]
 8009536:	930c      	str	r3, [sp, #48]	; 0x30
 8009538:	e78d      	b.n	8009456 <_dtoa_r+0x41e>
 800953a:	9900      	ldr	r1, [sp, #0]
 800953c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800953e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009540:	4b4e      	ldr	r3, [pc, #312]	; (800967c <_dtoa_r+0x644>)
 8009542:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009546:	4401      	add	r1, r0
 8009548:	9102      	str	r1, [sp, #8]
 800954a:	9908      	ldr	r1, [sp, #32]
 800954c:	eeb0 8a47 	vmov.f32	s16, s14
 8009550:	eef0 8a67 	vmov.f32	s17, s15
 8009554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800955c:	2900      	cmp	r1, #0
 800955e:	d045      	beq.n	80095ec <_dtoa_r+0x5b4>
 8009560:	494c      	ldr	r1, [pc, #304]	; (8009694 <_dtoa_r+0x65c>)
 8009562:	2000      	movs	r0, #0
 8009564:	f7f7 f99a 	bl	800089c <__aeabi_ddiv>
 8009568:	ec53 2b18 	vmov	r2, r3, d8
 800956c:	f7f6 feb4 	bl	80002d8 <__aeabi_dsub>
 8009570:	9d00      	ldr	r5, [sp, #0]
 8009572:	ec41 0b18 	vmov	d8, r0, r1
 8009576:	4639      	mov	r1, r7
 8009578:	4630      	mov	r0, r6
 800957a:	f7f7 fb15 	bl	8000ba8 <__aeabi_d2iz>
 800957e:	900c      	str	r0, [sp, #48]	; 0x30
 8009580:	f7f6 fff8 	bl	8000574 <__aeabi_i2d>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f6 fea4 	bl	80002d8 <__aeabi_dsub>
 8009590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009592:	3330      	adds	r3, #48	; 0x30
 8009594:	f805 3b01 	strb.w	r3, [r5], #1
 8009598:	ec53 2b18 	vmov	r2, r3, d8
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	f7f7 fac4 	bl	8000b2c <__aeabi_dcmplt>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d165      	bne.n	8009674 <_dtoa_r+0x63c>
 80095a8:	4632      	mov	r2, r6
 80095aa:	463b      	mov	r3, r7
 80095ac:	4935      	ldr	r1, [pc, #212]	; (8009684 <_dtoa_r+0x64c>)
 80095ae:	2000      	movs	r0, #0
 80095b0:	f7f6 fe92 	bl	80002d8 <__aeabi_dsub>
 80095b4:	ec53 2b18 	vmov	r2, r3, d8
 80095b8:	f7f7 fab8 	bl	8000b2c <__aeabi_dcmplt>
 80095bc:	2800      	cmp	r0, #0
 80095be:	f040 80b9 	bne.w	8009734 <_dtoa_r+0x6fc>
 80095c2:	9b02      	ldr	r3, [sp, #8]
 80095c4:	429d      	cmp	r5, r3
 80095c6:	f43f af75 	beq.w	80094b4 <_dtoa_r+0x47c>
 80095ca:	4b2f      	ldr	r3, [pc, #188]	; (8009688 <_dtoa_r+0x650>)
 80095cc:	ec51 0b18 	vmov	r0, r1, d8
 80095d0:	2200      	movs	r2, #0
 80095d2:	f7f7 f839 	bl	8000648 <__aeabi_dmul>
 80095d6:	4b2c      	ldr	r3, [pc, #176]	; (8009688 <_dtoa_r+0x650>)
 80095d8:	ec41 0b18 	vmov	d8, r0, r1
 80095dc:	2200      	movs	r2, #0
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f7 f831 	bl	8000648 <__aeabi_dmul>
 80095e6:	4606      	mov	r6, r0
 80095e8:	460f      	mov	r7, r1
 80095ea:	e7c4      	b.n	8009576 <_dtoa_r+0x53e>
 80095ec:	ec51 0b17 	vmov	r0, r1, d7
 80095f0:	f7f7 f82a 	bl	8000648 <__aeabi_dmul>
 80095f4:	9b02      	ldr	r3, [sp, #8]
 80095f6:	9d00      	ldr	r5, [sp, #0]
 80095f8:	930c      	str	r3, [sp, #48]	; 0x30
 80095fa:	ec41 0b18 	vmov	d8, r0, r1
 80095fe:	4639      	mov	r1, r7
 8009600:	4630      	mov	r0, r6
 8009602:	f7f7 fad1 	bl	8000ba8 <__aeabi_d2iz>
 8009606:	9011      	str	r0, [sp, #68]	; 0x44
 8009608:	f7f6 ffb4 	bl	8000574 <__aeabi_i2d>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f6 fe60 	bl	80002d8 <__aeabi_dsub>
 8009618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800961a:	3330      	adds	r3, #48	; 0x30
 800961c:	f805 3b01 	strb.w	r3, [r5], #1
 8009620:	9b02      	ldr	r3, [sp, #8]
 8009622:	429d      	cmp	r5, r3
 8009624:	4606      	mov	r6, r0
 8009626:	460f      	mov	r7, r1
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	d134      	bne.n	8009698 <_dtoa_r+0x660>
 800962e:	4b19      	ldr	r3, [pc, #100]	; (8009694 <_dtoa_r+0x65c>)
 8009630:	ec51 0b18 	vmov	r0, r1, d8
 8009634:	f7f6 fe52 	bl	80002dc <__adddf3>
 8009638:	4602      	mov	r2, r0
 800963a:	460b      	mov	r3, r1
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f7 fa92 	bl	8000b68 <__aeabi_dcmpgt>
 8009644:	2800      	cmp	r0, #0
 8009646:	d175      	bne.n	8009734 <_dtoa_r+0x6fc>
 8009648:	ec53 2b18 	vmov	r2, r3, d8
 800964c:	4911      	ldr	r1, [pc, #68]	; (8009694 <_dtoa_r+0x65c>)
 800964e:	2000      	movs	r0, #0
 8009650:	f7f6 fe42 	bl	80002d8 <__aeabi_dsub>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f7 fa66 	bl	8000b2c <__aeabi_dcmplt>
 8009660:	2800      	cmp	r0, #0
 8009662:	f43f af27 	beq.w	80094b4 <_dtoa_r+0x47c>
 8009666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009668:	1e6b      	subs	r3, r5, #1
 800966a:	930c      	str	r3, [sp, #48]	; 0x30
 800966c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009670:	2b30      	cmp	r3, #48	; 0x30
 8009672:	d0f8      	beq.n	8009666 <_dtoa_r+0x62e>
 8009674:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009678:	e04a      	b.n	8009710 <_dtoa_r+0x6d8>
 800967a:	bf00      	nop
 800967c:	0800bbb8 	.word	0x0800bbb8
 8009680:	0800bb90 	.word	0x0800bb90
 8009684:	3ff00000 	.word	0x3ff00000
 8009688:	40240000 	.word	0x40240000
 800968c:	401c0000 	.word	0x401c0000
 8009690:	40140000 	.word	0x40140000
 8009694:	3fe00000 	.word	0x3fe00000
 8009698:	4baf      	ldr	r3, [pc, #700]	; (8009958 <_dtoa_r+0x920>)
 800969a:	f7f6 ffd5 	bl	8000648 <__aeabi_dmul>
 800969e:	4606      	mov	r6, r0
 80096a0:	460f      	mov	r7, r1
 80096a2:	e7ac      	b.n	80095fe <_dtoa_r+0x5c6>
 80096a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096a8:	9d00      	ldr	r5, [sp, #0]
 80096aa:	4642      	mov	r2, r8
 80096ac:	464b      	mov	r3, r9
 80096ae:	4630      	mov	r0, r6
 80096b0:	4639      	mov	r1, r7
 80096b2:	f7f7 f8f3 	bl	800089c <__aeabi_ddiv>
 80096b6:	f7f7 fa77 	bl	8000ba8 <__aeabi_d2iz>
 80096ba:	9002      	str	r0, [sp, #8]
 80096bc:	f7f6 ff5a 	bl	8000574 <__aeabi_i2d>
 80096c0:	4642      	mov	r2, r8
 80096c2:	464b      	mov	r3, r9
 80096c4:	f7f6 ffc0 	bl	8000648 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f6 fe02 	bl	80002d8 <__aeabi_dsub>
 80096d4:	9e02      	ldr	r6, [sp, #8]
 80096d6:	9f01      	ldr	r7, [sp, #4]
 80096d8:	3630      	adds	r6, #48	; 0x30
 80096da:	f805 6b01 	strb.w	r6, [r5], #1
 80096de:	9e00      	ldr	r6, [sp, #0]
 80096e0:	1bae      	subs	r6, r5, r6
 80096e2:	42b7      	cmp	r7, r6
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	d137      	bne.n	800975a <_dtoa_r+0x722>
 80096ea:	f7f6 fdf7 	bl	80002dc <__adddf3>
 80096ee:	4642      	mov	r2, r8
 80096f0:	464b      	mov	r3, r9
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	f7f7 fa37 	bl	8000b68 <__aeabi_dcmpgt>
 80096fa:	b9c8      	cbnz	r0, 8009730 <_dtoa_r+0x6f8>
 80096fc:	4642      	mov	r2, r8
 80096fe:	464b      	mov	r3, r9
 8009700:	4630      	mov	r0, r6
 8009702:	4639      	mov	r1, r7
 8009704:	f7f7 fa08 	bl	8000b18 <__aeabi_dcmpeq>
 8009708:	b110      	cbz	r0, 8009710 <_dtoa_r+0x6d8>
 800970a:	9b02      	ldr	r3, [sp, #8]
 800970c:	07d9      	lsls	r1, r3, #31
 800970e:	d40f      	bmi.n	8009730 <_dtoa_r+0x6f8>
 8009710:	4620      	mov	r0, r4
 8009712:	4659      	mov	r1, fp
 8009714:	f000 fd14 	bl	800a140 <_Bfree>
 8009718:	2300      	movs	r3, #0
 800971a:	702b      	strb	r3, [r5, #0]
 800971c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800971e:	f10a 0001 	add.w	r0, sl, #1
 8009722:	6018      	str	r0, [r3, #0]
 8009724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009726:	2b00      	cmp	r3, #0
 8009728:	f43f acd8 	beq.w	80090dc <_dtoa_r+0xa4>
 800972c:	601d      	str	r5, [r3, #0]
 800972e:	e4d5      	b.n	80090dc <_dtoa_r+0xa4>
 8009730:	f8cd a01c 	str.w	sl, [sp, #28]
 8009734:	462b      	mov	r3, r5
 8009736:	461d      	mov	r5, r3
 8009738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800973c:	2a39      	cmp	r2, #57	; 0x39
 800973e:	d108      	bne.n	8009752 <_dtoa_r+0x71a>
 8009740:	9a00      	ldr	r2, [sp, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d1f7      	bne.n	8009736 <_dtoa_r+0x6fe>
 8009746:	9a07      	ldr	r2, [sp, #28]
 8009748:	9900      	ldr	r1, [sp, #0]
 800974a:	3201      	adds	r2, #1
 800974c:	9207      	str	r2, [sp, #28]
 800974e:	2230      	movs	r2, #48	; 0x30
 8009750:	700a      	strb	r2, [r1, #0]
 8009752:	781a      	ldrb	r2, [r3, #0]
 8009754:	3201      	adds	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	e78c      	b.n	8009674 <_dtoa_r+0x63c>
 800975a:	4b7f      	ldr	r3, [pc, #508]	; (8009958 <_dtoa_r+0x920>)
 800975c:	2200      	movs	r2, #0
 800975e:	f7f6 ff73 	bl	8000648 <__aeabi_dmul>
 8009762:	2200      	movs	r2, #0
 8009764:	2300      	movs	r3, #0
 8009766:	4606      	mov	r6, r0
 8009768:	460f      	mov	r7, r1
 800976a:	f7f7 f9d5 	bl	8000b18 <__aeabi_dcmpeq>
 800976e:	2800      	cmp	r0, #0
 8009770:	d09b      	beq.n	80096aa <_dtoa_r+0x672>
 8009772:	e7cd      	b.n	8009710 <_dtoa_r+0x6d8>
 8009774:	9a08      	ldr	r2, [sp, #32]
 8009776:	2a00      	cmp	r2, #0
 8009778:	f000 80c4 	beq.w	8009904 <_dtoa_r+0x8cc>
 800977c:	9a05      	ldr	r2, [sp, #20]
 800977e:	2a01      	cmp	r2, #1
 8009780:	f300 80a8 	bgt.w	80098d4 <_dtoa_r+0x89c>
 8009784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009786:	2a00      	cmp	r2, #0
 8009788:	f000 80a0 	beq.w	80098cc <_dtoa_r+0x894>
 800978c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009790:	9e06      	ldr	r6, [sp, #24]
 8009792:	4645      	mov	r5, r8
 8009794:	9a04      	ldr	r2, [sp, #16]
 8009796:	2101      	movs	r1, #1
 8009798:	441a      	add	r2, r3
 800979a:	4620      	mov	r0, r4
 800979c:	4498      	add	r8, r3
 800979e:	9204      	str	r2, [sp, #16]
 80097a0:	f000 fd8a 	bl	800a2b8 <__i2b>
 80097a4:	4607      	mov	r7, r0
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	dd0b      	ble.n	80097c2 <_dtoa_r+0x78a>
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dd08      	ble.n	80097c2 <_dtoa_r+0x78a>
 80097b0:	42ab      	cmp	r3, r5
 80097b2:	9a04      	ldr	r2, [sp, #16]
 80097b4:	bfa8      	it	ge
 80097b6:	462b      	movge	r3, r5
 80097b8:	eba8 0803 	sub.w	r8, r8, r3
 80097bc:	1aed      	subs	r5, r5, r3
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	9304      	str	r3, [sp, #16]
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	b1fb      	cbz	r3, 8009806 <_dtoa_r+0x7ce>
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 809f 	beq.w	800990c <_dtoa_r+0x8d4>
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	dd11      	ble.n	80097f6 <_dtoa_r+0x7be>
 80097d2:	4639      	mov	r1, r7
 80097d4:	4632      	mov	r2, r6
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 fe2a 	bl	800a430 <__pow5mult>
 80097dc:	465a      	mov	r2, fp
 80097de:	4601      	mov	r1, r0
 80097e0:	4607      	mov	r7, r0
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 fd7e 	bl	800a2e4 <__multiply>
 80097e8:	4659      	mov	r1, fp
 80097ea:	9007      	str	r0, [sp, #28]
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fca7 	bl	800a140 <_Bfree>
 80097f2:	9b07      	ldr	r3, [sp, #28]
 80097f4:	469b      	mov	fp, r3
 80097f6:	9b06      	ldr	r3, [sp, #24]
 80097f8:	1b9a      	subs	r2, r3, r6
 80097fa:	d004      	beq.n	8009806 <_dtoa_r+0x7ce>
 80097fc:	4659      	mov	r1, fp
 80097fe:	4620      	mov	r0, r4
 8009800:	f000 fe16 	bl	800a430 <__pow5mult>
 8009804:	4683      	mov	fp, r0
 8009806:	2101      	movs	r1, #1
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fd55 	bl	800a2b8 <__i2b>
 800980e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009810:	2b00      	cmp	r3, #0
 8009812:	4606      	mov	r6, r0
 8009814:	dd7c      	ble.n	8009910 <_dtoa_r+0x8d8>
 8009816:	461a      	mov	r2, r3
 8009818:	4601      	mov	r1, r0
 800981a:	4620      	mov	r0, r4
 800981c:	f000 fe08 	bl	800a430 <__pow5mult>
 8009820:	9b05      	ldr	r3, [sp, #20]
 8009822:	2b01      	cmp	r3, #1
 8009824:	4606      	mov	r6, r0
 8009826:	dd76      	ble.n	8009916 <_dtoa_r+0x8de>
 8009828:	2300      	movs	r3, #0
 800982a:	9306      	str	r3, [sp, #24]
 800982c:	6933      	ldr	r3, [r6, #16]
 800982e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009832:	6918      	ldr	r0, [r3, #16]
 8009834:	f000 fcf0 	bl	800a218 <__hi0bits>
 8009838:	f1c0 0020 	rsb	r0, r0, #32
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	4418      	add	r0, r3
 8009840:	f010 001f 	ands.w	r0, r0, #31
 8009844:	f000 8086 	beq.w	8009954 <_dtoa_r+0x91c>
 8009848:	f1c0 0320 	rsb	r3, r0, #32
 800984c:	2b04      	cmp	r3, #4
 800984e:	dd7f      	ble.n	8009950 <_dtoa_r+0x918>
 8009850:	f1c0 001c 	rsb	r0, r0, #28
 8009854:	9b04      	ldr	r3, [sp, #16]
 8009856:	4403      	add	r3, r0
 8009858:	4480      	add	r8, r0
 800985a:	4405      	add	r5, r0
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	f1b8 0f00 	cmp.w	r8, #0
 8009862:	dd05      	ble.n	8009870 <_dtoa_r+0x838>
 8009864:	4659      	mov	r1, fp
 8009866:	4642      	mov	r2, r8
 8009868:	4620      	mov	r0, r4
 800986a:	f000 fe3b 	bl	800a4e4 <__lshift>
 800986e:	4683      	mov	fp, r0
 8009870:	9b04      	ldr	r3, [sp, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	dd05      	ble.n	8009882 <_dtoa_r+0x84a>
 8009876:	4631      	mov	r1, r6
 8009878:	461a      	mov	r2, r3
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fe32 	bl	800a4e4 <__lshift>
 8009880:	4606      	mov	r6, r0
 8009882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009884:	2b00      	cmp	r3, #0
 8009886:	d069      	beq.n	800995c <_dtoa_r+0x924>
 8009888:	4631      	mov	r1, r6
 800988a:	4658      	mov	r0, fp
 800988c:	f000 fe96 	bl	800a5bc <__mcmp>
 8009890:	2800      	cmp	r0, #0
 8009892:	da63      	bge.n	800995c <_dtoa_r+0x924>
 8009894:	2300      	movs	r3, #0
 8009896:	4659      	mov	r1, fp
 8009898:	220a      	movs	r2, #10
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fc72 	bl	800a184 <__multadd>
 80098a0:	9b08      	ldr	r3, [sp, #32]
 80098a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098a6:	4683      	mov	fp, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 818f 	beq.w	8009bcc <_dtoa_r+0xb94>
 80098ae:	4639      	mov	r1, r7
 80098b0:	2300      	movs	r3, #0
 80098b2:	220a      	movs	r2, #10
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 fc65 	bl	800a184 <__multadd>
 80098ba:	f1b9 0f00 	cmp.w	r9, #0
 80098be:	4607      	mov	r7, r0
 80098c0:	f300 808e 	bgt.w	80099e0 <_dtoa_r+0x9a8>
 80098c4:	9b05      	ldr	r3, [sp, #20]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	dc50      	bgt.n	800996c <_dtoa_r+0x934>
 80098ca:	e089      	b.n	80099e0 <_dtoa_r+0x9a8>
 80098cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098d2:	e75d      	b.n	8009790 <_dtoa_r+0x758>
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	1e5e      	subs	r6, r3, #1
 80098d8:	9b06      	ldr	r3, [sp, #24]
 80098da:	42b3      	cmp	r3, r6
 80098dc:	bfbf      	itttt	lt
 80098de:	9b06      	ldrlt	r3, [sp, #24]
 80098e0:	9606      	strlt	r6, [sp, #24]
 80098e2:	1af2      	sublt	r2, r6, r3
 80098e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80098e6:	bfb6      	itet	lt
 80098e8:	189b      	addlt	r3, r3, r2
 80098ea:	1b9e      	subge	r6, r3, r6
 80098ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80098ee:	9b01      	ldr	r3, [sp, #4]
 80098f0:	bfb8      	it	lt
 80098f2:	2600      	movlt	r6, #0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfb5      	itete	lt
 80098f8:	eba8 0503 	sublt.w	r5, r8, r3
 80098fc:	9b01      	ldrge	r3, [sp, #4]
 80098fe:	2300      	movlt	r3, #0
 8009900:	4645      	movge	r5, r8
 8009902:	e747      	b.n	8009794 <_dtoa_r+0x75c>
 8009904:	9e06      	ldr	r6, [sp, #24]
 8009906:	9f08      	ldr	r7, [sp, #32]
 8009908:	4645      	mov	r5, r8
 800990a:	e74c      	b.n	80097a6 <_dtoa_r+0x76e>
 800990c:	9a06      	ldr	r2, [sp, #24]
 800990e:	e775      	b.n	80097fc <_dtoa_r+0x7c4>
 8009910:	9b05      	ldr	r3, [sp, #20]
 8009912:	2b01      	cmp	r3, #1
 8009914:	dc18      	bgt.n	8009948 <_dtoa_r+0x910>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	b9b3      	cbnz	r3, 8009948 <_dtoa_r+0x910>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009920:	b9a3      	cbnz	r3, 800994c <_dtoa_r+0x914>
 8009922:	9b03      	ldr	r3, [sp, #12]
 8009924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009928:	0d1b      	lsrs	r3, r3, #20
 800992a:	051b      	lsls	r3, r3, #20
 800992c:	b12b      	cbz	r3, 800993a <_dtoa_r+0x902>
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	3301      	adds	r3, #1
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	f108 0801 	add.w	r8, r8, #1
 8009938:	2301      	movs	r3, #1
 800993a:	9306      	str	r3, [sp, #24]
 800993c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800993e:	2b00      	cmp	r3, #0
 8009940:	f47f af74 	bne.w	800982c <_dtoa_r+0x7f4>
 8009944:	2001      	movs	r0, #1
 8009946:	e779      	b.n	800983c <_dtoa_r+0x804>
 8009948:	2300      	movs	r3, #0
 800994a:	e7f6      	b.n	800993a <_dtoa_r+0x902>
 800994c:	9b02      	ldr	r3, [sp, #8]
 800994e:	e7f4      	b.n	800993a <_dtoa_r+0x902>
 8009950:	d085      	beq.n	800985e <_dtoa_r+0x826>
 8009952:	4618      	mov	r0, r3
 8009954:	301c      	adds	r0, #28
 8009956:	e77d      	b.n	8009854 <_dtoa_r+0x81c>
 8009958:	40240000 	.word	0x40240000
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	dc38      	bgt.n	80099d4 <_dtoa_r+0x99c>
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	2b02      	cmp	r3, #2
 8009966:	dd35      	ble.n	80099d4 <_dtoa_r+0x99c>
 8009968:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800996c:	f1b9 0f00 	cmp.w	r9, #0
 8009970:	d10d      	bne.n	800998e <_dtoa_r+0x956>
 8009972:	4631      	mov	r1, r6
 8009974:	464b      	mov	r3, r9
 8009976:	2205      	movs	r2, #5
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fc03 	bl	800a184 <__multadd>
 800997e:	4601      	mov	r1, r0
 8009980:	4606      	mov	r6, r0
 8009982:	4658      	mov	r0, fp
 8009984:	f000 fe1a 	bl	800a5bc <__mcmp>
 8009988:	2800      	cmp	r0, #0
 800998a:	f73f adbd 	bgt.w	8009508 <_dtoa_r+0x4d0>
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	9d00      	ldr	r5, [sp, #0]
 8009992:	ea6f 0a03 	mvn.w	sl, r3
 8009996:	f04f 0800 	mov.w	r8, #0
 800999a:	4631      	mov	r1, r6
 800999c:	4620      	mov	r0, r4
 800999e:	f000 fbcf 	bl	800a140 <_Bfree>
 80099a2:	2f00      	cmp	r7, #0
 80099a4:	f43f aeb4 	beq.w	8009710 <_dtoa_r+0x6d8>
 80099a8:	f1b8 0f00 	cmp.w	r8, #0
 80099ac:	d005      	beq.n	80099ba <_dtoa_r+0x982>
 80099ae:	45b8      	cmp	r8, r7
 80099b0:	d003      	beq.n	80099ba <_dtoa_r+0x982>
 80099b2:	4641      	mov	r1, r8
 80099b4:	4620      	mov	r0, r4
 80099b6:	f000 fbc3 	bl	800a140 <_Bfree>
 80099ba:	4639      	mov	r1, r7
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fbbf 	bl	800a140 <_Bfree>
 80099c2:	e6a5      	b.n	8009710 <_dtoa_r+0x6d8>
 80099c4:	2600      	movs	r6, #0
 80099c6:	4637      	mov	r7, r6
 80099c8:	e7e1      	b.n	800998e <_dtoa_r+0x956>
 80099ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80099cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80099d0:	4637      	mov	r7, r6
 80099d2:	e599      	b.n	8009508 <_dtoa_r+0x4d0>
 80099d4:	9b08      	ldr	r3, [sp, #32]
 80099d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 80fd 	beq.w	8009bda <_dtoa_r+0xba2>
 80099e0:	2d00      	cmp	r5, #0
 80099e2:	dd05      	ble.n	80099f0 <_dtoa_r+0x9b8>
 80099e4:	4639      	mov	r1, r7
 80099e6:	462a      	mov	r2, r5
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fd7b 	bl	800a4e4 <__lshift>
 80099ee:	4607      	mov	r7, r0
 80099f0:	9b06      	ldr	r3, [sp, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d05c      	beq.n	8009ab0 <_dtoa_r+0xa78>
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 fb61 	bl	800a0c0 <_Balloc>
 80099fe:	4605      	mov	r5, r0
 8009a00:	b928      	cbnz	r0, 8009a0e <_dtoa_r+0x9d6>
 8009a02:	4b80      	ldr	r3, [pc, #512]	; (8009c04 <_dtoa_r+0xbcc>)
 8009a04:	4602      	mov	r2, r0
 8009a06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009a0a:	f7ff bb2e 	b.w	800906a <_dtoa_r+0x32>
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	3202      	adds	r2, #2
 8009a12:	0092      	lsls	r2, r2, #2
 8009a14:	f107 010c 	add.w	r1, r7, #12
 8009a18:	300c      	adds	r0, #12
 8009a1a:	f000 fb1d 	bl	800a058 <memcpy>
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4629      	mov	r1, r5
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 fd5e 	bl	800a4e4 <__lshift>
 8009a28:	9b00      	ldr	r3, [sp, #0]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	9b00      	ldr	r3, [sp, #0]
 8009a30:	444b      	add	r3, r9
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	9b02      	ldr	r3, [sp, #8]
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	46b8      	mov	r8, r7
 8009a3c:	9306      	str	r3, [sp, #24]
 8009a3e:	4607      	mov	r7, r0
 8009a40:	9b01      	ldr	r3, [sp, #4]
 8009a42:	4631      	mov	r1, r6
 8009a44:	3b01      	subs	r3, #1
 8009a46:	4658      	mov	r0, fp
 8009a48:	9302      	str	r3, [sp, #8]
 8009a4a:	f7ff fa68 	bl	8008f1e <quorem>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	3330      	adds	r3, #48	; 0x30
 8009a52:	9004      	str	r0, [sp, #16]
 8009a54:	4641      	mov	r1, r8
 8009a56:	4658      	mov	r0, fp
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	f000 fdaf 	bl	800a5bc <__mcmp>
 8009a5e:	463a      	mov	r2, r7
 8009a60:	4681      	mov	r9, r0
 8009a62:	4631      	mov	r1, r6
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 fdc5 	bl	800a5f4 <__mdiff>
 8009a6a:	68c2      	ldr	r2, [r0, #12]
 8009a6c:	9b08      	ldr	r3, [sp, #32]
 8009a6e:	4605      	mov	r5, r0
 8009a70:	bb02      	cbnz	r2, 8009ab4 <_dtoa_r+0xa7c>
 8009a72:	4601      	mov	r1, r0
 8009a74:	4658      	mov	r0, fp
 8009a76:	f000 fda1 	bl	800a5bc <__mcmp>
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4620      	mov	r0, r4
 8009a82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a86:	f000 fb5b 	bl	800a140 <_Bfree>
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a8e:	9d01      	ldr	r5, [sp, #4]
 8009a90:	ea43 0102 	orr.w	r1, r3, r2
 8009a94:	9b06      	ldr	r3, [sp, #24]
 8009a96:	430b      	orrs	r3, r1
 8009a98:	9b08      	ldr	r3, [sp, #32]
 8009a9a:	d10d      	bne.n	8009ab8 <_dtoa_r+0xa80>
 8009a9c:	2b39      	cmp	r3, #57	; 0x39
 8009a9e:	d029      	beq.n	8009af4 <_dtoa_r+0xabc>
 8009aa0:	f1b9 0f00 	cmp.w	r9, #0
 8009aa4:	dd01      	ble.n	8009aaa <_dtoa_r+0xa72>
 8009aa6:	9b04      	ldr	r3, [sp, #16]
 8009aa8:	3331      	adds	r3, #49	; 0x31
 8009aaa:	9a02      	ldr	r2, [sp, #8]
 8009aac:	7013      	strb	r3, [r2, #0]
 8009aae:	e774      	b.n	800999a <_dtoa_r+0x962>
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	e7b9      	b.n	8009a28 <_dtoa_r+0x9f0>
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	e7e2      	b.n	8009a7e <_dtoa_r+0xa46>
 8009ab8:	f1b9 0f00 	cmp.w	r9, #0
 8009abc:	db06      	blt.n	8009acc <_dtoa_r+0xa94>
 8009abe:	9905      	ldr	r1, [sp, #20]
 8009ac0:	ea41 0909 	orr.w	r9, r1, r9
 8009ac4:	9906      	ldr	r1, [sp, #24]
 8009ac6:	ea59 0101 	orrs.w	r1, r9, r1
 8009aca:	d120      	bne.n	8009b0e <_dtoa_r+0xad6>
 8009acc:	2a00      	cmp	r2, #0
 8009ace:	ddec      	ble.n	8009aaa <_dtoa_r+0xa72>
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	f000 fd04 	bl	800a4e4 <__lshift>
 8009adc:	4631      	mov	r1, r6
 8009ade:	4683      	mov	fp, r0
 8009ae0:	f000 fd6c 	bl	800a5bc <__mcmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	dc02      	bgt.n	8009af0 <_dtoa_r+0xab8>
 8009aea:	d1de      	bne.n	8009aaa <_dtoa_r+0xa72>
 8009aec:	07da      	lsls	r2, r3, #31
 8009aee:	d5dc      	bpl.n	8009aaa <_dtoa_r+0xa72>
 8009af0:	2b39      	cmp	r3, #57	; 0x39
 8009af2:	d1d8      	bne.n	8009aa6 <_dtoa_r+0xa6e>
 8009af4:	9a02      	ldr	r2, [sp, #8]
 8009af6:	2339      	movs	r3, #57	; 0x39
 8009af8:	7013      	strb	r3, [r2, #0]
 8009afa:	462b      	mov	r3, r5
 8009afc:	461d      	mov	r5, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b04:	2a39      	cmp	r2, #57	; 0x39
 8009b06:	d050      	beq.n	8009baa <_dtoa_r+0xb72>
 8009b08:	3201      	adds	r2, #1
 8009b0a:	701a      	strb	r2, [r3, #0]
 8009b0c:	e745      	b.n	800999a <_dtoa_r+0x962>
 8009b0e:	2a00      	cmp	r2, #0
 8009b10:	dd03      	ble.n	8009b1a <_dtoa_r+0xae2>
 8009b12:	2b39      	cmp	r3, #57	; 0x39
 8009b14:	d0ee      	beq.n	8009af4 <_dtoa_r+0xabc>
 8009b16:	3301      	adds	r3, #1
 8009b18:	e7c7      	b.n	8009aaa <_dtoa_r+0xa72>
 8009b1a:	9a01      	ldr	r2, [sp, #4]
 8009b1c:	9907      	ldr	r1, [sp, #28]
 8009b1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b22:	428a      	cmp	r2, r1
 8009b24:	d02a      	beq.n	8009b7c <_dtoa_r+0xb44>
 8009b26:	4659      	mov	r1, fp
 8009b28:	2300      	movs	r3, #0
 8009b2a:	220a      	movs	r2, #10
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fb29 	bl	800a184 <__multadd>
 8009b32:	45b8      	cmp	r8, r7
 8009b34:	4683      	mov	fp, r0
 8009b36:	f04f 0300 	mov.w	r3, #0
 8009b3a:	f04f 020a 	mov.w	r2, #10
 8009b3e:	4641      	mov	r1, r8
 8009b40:	4620      	mov	r0, r4
 8009b42:	d107      	bne.n	8009b54 <_dtoa_r+0xb1c>
 8009b44:	f000 fb1e 	bl	800a184 <__multadd>
 8009b48:	4680      	mov	r8, r0
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	9b01      	ldr	r3, [sp, #4]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	e775      	b.n	8009a40 <_dtoa_r+0xa08>
 8009b54:	f000 fb16 	bl	800a184 <__multadd>
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	220a      	movs	r2, #10
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fb0f 	bl	800a184 <__multadd>
 8009b66:	4607      	mov	r7, r0
 8009b68:	e7f0      	b.n	8009b4c <_dtoa_r+0xb14>
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	9a00      	ldr	r2, [sp, #0]
 8009b70:	bfcc      	ite	gt
 8009b72:	464d      	movgt	r5, r9
 8009b74:	2501      	movle	r5, #1
 8009b76:	4415      	add	r5, r2
 8009b78:	f04f 0800 	mov.w	r8, #0
 8009b7c:	4659      	mov	r1, fp
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4620      	mov	r0, r4
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	f000 fcae 	bl	800a4e4 <__lshift>
 8009b88:	4631      	mov	r1, r6
 8009b8a:	4683      	mov	fp, r0
 8009b8c:	f000 fd16 	bl	800a5bc <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	dcb2      	bgt.n	8009afa <_dtoa_r+0xac2>
 8009b94:	d102      	bne.n	8009b9c <_dtoa_r+0xb64>
 8009b96:	9b01      	ldr	r3, [sp, #4]
 8009b98:	07db      	lsls	r3, r3, #31
 8009b9a:	d4ae      	bmi.n	8009afa <_dtoa_r+0xac2>
 8009b9c:	462b      	mov	r3, r5
 8009b9e:	461d      	mov	r5, r3
 8009ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ba4:	2a30      	cmp	r2, #48	; 0x30
 8009ba6:	d0fa      	beq.n	8009b9e <_dtoa_r+0xb66>
 8009ba8:	e6f7      	b.n	800999a <_dtoa_r+0x962>
 8009baa:	9a00      	ldr	r2, [sp, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d1a5      	bne.n	8009afc <_dtoa_r+0xac4>
 8009bb0:	f10a 0a01 	add.w	sl, sl, #1
 8009bb4:	2331      	movs	r3, #49	; 0x31
 8009bb6:	e779      	b.n	8009aac <_dtoa_r+0xa74>
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <_dtoa_r+0xbd0>)
 8009bba:	f7ff baaf 	b.w	800911c <_dtoa_r+0xe4>
 8009bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f47f aa86 	bne.w	80090d2 <_dtoa_r+0x9a>
 8009bc6:	4b11      	ldr	r3, [pc, #68]	; (8009c0c <_dtoa_r+0xbd4>)
 8009bc8:	f7ff baa8 	b.w	800911c <_dtoa_r+0xe4>
 8009bcc:	f1b9 0f00 	cmp.w	r9, #0
 8009bd0:	dc03      	bgt.n	8009bda <_dtoa_r+0xba2>
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	f73f aec9 	bgt.w	800996c <_dtoa_r+0x934>
 8009bda:	9d00      	ldr	r5, [sp, #0]
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4658      	mov	r0, fp
 8009be0:	f7ff f99d 	bl	8008f1e <quorem>
 8009be4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009be8:	f805 3b01 	strb.w	r3, [r5], #1
 8009bec:	9a00      	ldr	r2, [sp, #0]
 8009bee:	1aaa      	subs	r2, r5, r2
 8009bf0:	4591      	cmp	r9, r2
 8009bf2:	ddba      	ble.n	8009b6a <_dtoa_r+0xb32>
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 fac2 	bl	800a184 <__multadd>
 8009c00:	4683      	mov	fp, r0
 8009c02:	e7eb      	b.n	8009bdc <_dtoa_r+0xba4>
 8009c04:	0800babc 	.word	0x0800babc
 8009c08:	0800ba15 	.word	0x0800ba15
 8009c0c:	0800ba39 	.word	0x0800ba39

08009c10 <__sflush_r>:
 8009c10:	898a      	ldrh	r2, [r1, #12]
 8009c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c16:	4605      	mov	r5, r0
 8009c18:	0710      	lsls	r0, r2, #28
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	d458      	bmi.n	8009cd0 <__sflush_r+0xc0>
 8009c1e:	684b      	ldr	r3, [r1, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dc05      	bgt.n	8009c30 <__sflush_r+0x20>
 8009c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dc02      	bgt.n	8009c30 <__sflush_r+0x20>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	d0f9      	beq.n	8009c2a <__sflush_r+0x1a>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c3c:	682f      	ldr	r7, [r5, #0]
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	d032      	beq.n	8009ca8 <__sflush_r+0x98>
 8009c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	075a      	lsls	r2, r3, #29
 8009c48:	d505      	bpl.n	8009c56 <__sflush_r+0x46>
 8009c4a:	6863      	ldr	r3, [r4, #4]
 8009c4c:	1ac0      	subs	r0, r0, r3
 8009c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c50:	b10b      	cbz	r3, 8009c56 <__sflush_r+0x46>
 8009c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c54:	1ac0      	subs	r0, r0, r3
 8009c56:	2300      	movs	r3, #0
 8009c58:	4602      	mov	r2, r0
 8009c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c5c:	6a21      	ldr	r1, [r4, #32]
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b0      	blx	r6
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	d106      	bne.n	8009c76 <__sflush_r+0x66>
 8009c68:	6829      	ldr	r1, [r5, #0]
 8009c6a:	291d      	cmp	r1, #29
 8009c6c:	d82c      	bhi.n	8009cc8 <__sflush_r+0xb8>
 8009c6e:	4a2a      	ldr	r2, [pc, #168]	; (8009d18 <__sflush_r+0x108>)
 8009c70:	40ca      	lsrs	r2, r1
 8009c72:	07d6      	lsls	r6, r2, #31
 8009c74:	d528      	bpl.n	8009cc8 <__sflush_r+0xb8>
 8009c76:	2200      	movs	r2, #0
 8009c78:	6062      	str	r2, [r4, #4]
 8009c7a:	04d9      	lsls	r1, r3, #19
 8009c7c:	6922      	ldr	r2, [r4, #16]
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	d504      	bpl.n	8009c8c <__sflush_r+0x7c>
 8009c82:	1c42      	adds	r2, r0, #1
 8009c84:	d101      	bne.n	8009c8a <__sflush_r+0x7a>
 8009c86:	682b      	ldr	r3, [r5, #0]
 8009c88:	b903      	cbnz	r3, 8009c8c <__sflush_r+0x7c>
 8009c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8e:	602f      	str	r7, [r5, #0]
 8009c90:	2900      	cmp	r1, #0
 8009c92:	d0ca      	beq.n	8009c2a <__sflush_r+0x1a>
 8009c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	d002      	beq.n	8009ca2 <__sflush_r+0x92>
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f7fe f933 	bl	8007f08 <_free_r>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca6:	e7c1      	b.n	8009c2c <__sflush_r+0x1c>
 8009ca8:	6a21      	ldr	r1, [r4, #32]
 8009caa:	2301      	movs	r3, #1
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b0      	blx	r6
 8009cb0:	1c41      	adds	r1, r0, #1
 8009cb2:	d1c7      	bne.n	8009c44 <__sflush_r+0x34>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0c4      	beq.n	8009c44 <__sflush_r+0x34>
 8009cba:	2b1d      	cmp	r3, #29
 8009cbc:	d001      	beq.n	8009cc2 <__sflush_r+0xb2>
 8009cbe:	2b16      	cmp	r3, #22
 8009cc0:	d101      	bne.n	8009cc6 <__sflush_r+0xb6>
 8009cc2:	602f      	str	r7, [r5, #0]
 8009cc4:	e7b1      	b.n	8009c2a <__sflush_r+0x1a>
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	e7ad      	b.n	8009c2c <__sflush_r+0x1c>
 8009cd0:	690f      	ldr	r7, [r1, #16]
 8009cd2:	2f00      	cmp	r7, #0
 8009cd4:	d0a9      	beq.n	8009c2a <__sflush_r+0x1a>
 8009cd6:	0793      	lsls	r3, r2, #30
 8009cd8:	680e      	ldr	r6, [r1, #0]
 8009cda:	bf08      	it	eq
 8009cdc:	694b      	ldreq	r3, [r1, #20]
 8009cde:	600f      	str	r7, [r1, #0]
 8009ce0:	bf18      	it	ne
 8009ce2:	2300      	movne	r3, #0
 8009ce4:	eba6 0807 	sub.w	r8, r6, r7
 8009ce8:	608b      	str	r3, [r1, #8]
 8009cea:	f1b8 0f00 	cmp.w	r8, #0
 8009cee:	dd9c      	ble.n	8009c2a <__sflush_r+0x1a>
 8009cf0:	6a21      	ldr	r1, [r4, #32]
 8009cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cf4:	4643      	mov	r3, r8
 8009cf6:	463a      	mov	r2, r7
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	47b0      	blx	r6
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	dc06      	bgt.n	8009d0e <__sflush_r+0xfe>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d06:	81a3      	strh	r3, [r4, #12]
 8009d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d0c:	e78e      	b.n	8009c2c <__sflush_r+0x1c>
 8009d0e:	4407      	add	r7, r0
 8009d10:	eba8 0800 	sub.w	r8, r8, r0
 8009d14:	e7e9      	b.n	8009cea <__sflush_r+0xda>
 8009d16:	bf00      	nop
 8009d18:	20400001 	.word	0x20400001

08009d1c <_fflush_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	4605      	mov	r5, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	b913      	cbnz	r3, 8009d2c <_fflush_r+0x10>
 8009d26:	2500      	movs	r5, #0
 8009d28:	4628      	mov	r0, r5
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	b118      	cbz	r0, 8009d36 <_fflush_r+0x1a>
 8009d2e:	6983      	ldr	r3, [r0, #24]
 8009d30:	b90b      	cbnz	r3, 8009d36 <_fflush_r+0x1a>
 8009d32:	f000 f887 	bl	8009e44 <__sinit>
 8009d36:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <_fflush_r+0x6c>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d11b      	bne.n	8009d74 <_fflush_r+0x58>
 8009d3c:	686c      	ldr	r4, [r5, #4]
 8009d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d0ef      	beq.n	8009d26 <_fflush_r+0xa>
 8009d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d48:	07d0      	lsls	r0, r2, #31
 8009d4a:	d404      	bmi.n	8009d56 <_fflush_r+0x3a>
 8009d4c:	0599      	lsls	r1, r3, #22
 8009d4e:	d402      	bmi.n	8009d56 <_fflush_r+0x3a>
 8009d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d52:	f000 f91a 	bl	8009f8a <__retarget_lock_acquire_recursive>
 8009d56:	4628      	mov	r0, r5
 8009d58:	4621      	mov	r1, r4
 8009d5a:	f7ff ff59 	bl	8009c10 <__sflush_r>
 8009d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d60:	07da      	lsls	r2, r3, #31
 8009d62:	4605      	mov	r5, r0
 8009d64:	d4e0      	bmi.n	8009d28 <_fflush_r+0xc>
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	059b      	lsls	r3, r3, #22
 8009d6a:	d4dd      	bmi.n	8009d28 <_fflush_r+0xc>
 8009d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6e:	f000 f90d 	bl	8009f8c <__retarget_lock_release_recursive>
 8009d72:	e7d9      	b.n	8009d28 <_fflush_r+0xc>
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <_fflush_r+0x70>)
 8009d76:	429c      	cmp	r4, r3
 8009d78:	d101      	bne.n	8009d7e <_fflush_r+0x62>
 8009d7a:	68ac      	ldr	r4, [r5, #8]
 8009d7c:	e7df      	b.n	8009d3e <_fflush_r+0x22>
 8009d7e:	4b04      	ldr	r3, [pc, #16]	; (8009d90 <_fflush_r+0x74>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	bf08      	it	eq
 8009d84:	68ec      	ldreq	r4, [r5, #12]
 8009d86:	e7da      	b.n	8009d3e <_fflush_r+0x22>
 8009d88:	0800baf0 	.word	0x0800baf0
 8009d8c:	0800bb10 	.word	0x0800bb10
 8009d90:	0800bad0 	.word	0x0800bad0

08009d94 <std>:
 8009d94:	2300      	movs	r3, #0
 8009d96:	b510      	push	{r4, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009da2:	6083      	str	r3, [r0, #8]
 8009da4:	8181      	strh	r1, [r0, #12]
 8009da6:	6643      	str	r3, [r0, #100]	; 0x64
 8009da8:	81c2      	strh	r2, [r0, #14]
 8009daa:	6183      	str	r3, [r0, #24]
 8009dac:	4619      	mov	r1, r3
 8009dae:	2208      	movs	r2, #8
 8009db0:	305c      	adds	r0, #92	; 0x5c
 8009db2:	f7fe f8a1 	bl	8007ef8 <memset>
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x38>)
 8009db8:	6263      	str	r3, [r4, #36]	; 0x24
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <std+0x3c>)
 8009dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <std+0x40>)
 8009dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <std+0x44>)
 8009dc4:	6224      	str	r4, [r4, #32]
 8009dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8009dc8:	bd10      	pop	{r4, pc}
 8009dca:	bf00      	nop
 8009dcc:	0800ab65 	.word	0x0800ab65
 8009dd0:	0800ab87 	.word	0x0800ab87
 8009dd4:	0800abbf 	.word	0x0800abbf
 8009dd8:	0800abe3 	.word	0x0800abe3

08009ddc <_cleanup_r>:
 8009ddc:	4901      	ldr	r1, [pc, #4]	; (8009de4 <_cleanup_r+0x8>)
 8009dde:	f000 b8af 	b.w	8009f40 <_fwalk_reent>
 8009de2:	bf00      	nop
 8009de4:	08009d1d 	.word	0x08009d1d

08009de8 <__sfmoreglue>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	1e4a      	subs	r2, r1, #1
 8009dec:	2568      	movs	r5, #104	; 0x68
 8009dee:	4355      	muls	r5, r2
 8009df0:	460e      	mov	r6, r1
 8009df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009df6:	f7fe f8d7 	bl	8007fa8 <_malloc_r>
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	b140      	cbz	r0, 8009e10 <__sfmoreglue+0x28>
 8009dfe:	2100      	movs	r1, #0
 8009e00:	e9c0 1600 	strd	r1, r6, [r0]
 8009e04:	300c      	adds	r0, #12
 8009e06:	60a0      	str	r0, [r4, #8]
 8009e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e0c:	f7fe f874 	bl	8007ef8 <memset>
 8009e10:	4620      	mov	r0, r4
 8009e12:	bd70      	pop	{r4, r5, r6, pc}

08009e14 <__sfp_lock_acquire>:
 8009e14:	4801      	ldr	r0, [pc, #4]	; (8009e1c <__sfp_lock_acquire+0x8>)
 8009e16:	f000 b8b8 	b.w	8009f8a <__retarget_lock_acquire_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	20000c28 	.word	0x20000c28

08009e20 <__sfp_lock_release>:
 8009e20:	4801      	ldr	r0, [pc, #4]	; (8009e28 <__sfp_lock_release+0x8>)
 8009e22:	f000 b8b3 	b.w	8009f8c <__retarget_lock_release_recursive>
 8009e26:	bf00      	nop
 8009e28:	20000c28 	.word	0x20000c28

08009e2c <__sinit_lock_acquire>:
 8009e2c:	4801      	ldr	r0, [pc, #4]	; (8009e34 <__sinit_lock_acquire+0x8>)
 8009e2e:	f000 b8ac 	b.w	8009f8a <__retarget_lock_acquire_recursive>
 8009e32:	bf00      	nop
 8009e34:	20000c23 	.word	0x20000c23

08009e38 <__sinit_lock_release>:
 8009e38:	4801      	ldr	r0, [pc, #4]	; (8009e40 <__sinit_lock_release+0x8>)
 8009e3a:	f000 b8a7 	b.w	8009f8c <__retarget_lock_release_recursive>
 8009e3e:	bf00      	nop
 8009e40:	20000c23 	.word	0x20000c23

08009e44 <__sinit>:
 8009e44:	b510      	push	{r4, lr}
 8009e46:	4604      	mov	r4, r0
 8009e48:	f7ff fff0 	bl	8009e2c <__sinit_lock_acquire>
 8009e4c:	69a3      	ldr	r3, [r4, #24]
 8009e4e:	b11b      	cbz	r3, 8009e58 <__sinit+0x14>
 8009e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e54:	f7ff bff0 	b.w	8009e38 <__sinit_lock_release>
 8009e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8009e5e:	4b13      	ldr	r3, [pc, #76]	; (8009eac <__sinit+0x68>)
 8009e60:	4a13      	ldr	r2, [pc, #76]	; (8009eb0 <__sinit+0x6c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e66:	42a3      	cmp	r3, r4
 8009e68:	bf04      	itt	eq
 8009e6a:	2301      	moveq	r3, #1
 8009e6c:	61a3      	streq	r3, [r4, #24]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 f820 	bl	8009eb4 <__sfp>
 8009e74:	6060      	str	r0, [r4, #4]
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 f81c 	bl	8009eb4 <__sfp>
 8009e7c:	60a0      	str	r0, [r4, #8]
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 f818 	bl	8009eb4 <__sfp>
 8009e84:	2200      	movs	r2, #0
 8009e86:	60e0      	str	r0, [r4, #12]
 8009e88:	2104      	movs	r1, #4
 8009e8a:	6860      	ldr	r0, [r4, #4]
 8009e8c:	f7ff ff82 	bl	8009d94 <std>
 8009e90:	68a0      	ldr	r0, [r4, #8]
 8009e92:	2201      	movs	r2, #1
 8009e94:	2109      	movs	r1, #9
 8009e96:	f7ff ff7d 	bl	8009d94 <std>
 8009e9a:	68e0      	ldr	r0, [r4, #12]
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	2112      	movs	r1, #18
 8009ea0:	f7ff ff78 	bl	8009d94 <std>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	61a3      	str	r3, [r4, #24]
 8009ea8:	e7d2      	b.n	8009e50 <__sinit+0xc>
 8009eaa:	bf00      	nop
 8009eac:	0800b9f0 	.word	0x0800b9f0
 8009eb0:	08009ddd 	.word	0x08009ddd

08009eb4 <__sfp>:
 8009eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	f7ff ffac 	bl	8009e14 <__sfp_lock_acquire>
 8009ebc:	4b1e      	ldr	r3, [pc, #120]	; (8009f38 <__sfp+0x84>)
 8009ebe:	681e      	ldr	r6, [r3, #0]
 8009ec0:	69b3      	ldr	r3, [r6, #24]
 8009ec2:	b913      	cbnz	r3, 8009eca <__sfp+0x16>
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff ffbd 	bl	8009e44 <__sinit>
 8009eca:	3648      	adds	r6, #72	; 0x48
 8009ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	d503      	bpl.n	8009edc <__sfp+0x28>
 8009ed4:	6833      	ldr	r3, [r6, #0]
 8009ed6:	b30b      	cbz	r3, 8009f1c <__sfp+0x68>
 8009ed8:	6836      	ldr	r6, [r6, #0]
 8009eda:	e7f7      	b.n	8009ecc <__sfp+0x18>
 8009edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ee0:	b9d5      	cbnz	r5, 8009f18 <__sfp+0x64>
 8009ee2:	4b16      	ldr	r3, [pc, #88]	; (8009f3c <__sfp+0x88>)
 8009ee4:	60e3      	str	r3, [r4, #12]
 8009ee6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eea:	6665      	str	r5, [r4, #100]	; 0x64
 8009eec:	f000 f84c 	bl	8009f88 <__retarget_lock_init_recursive>
 8009ef0:	f7ff ff96 	bl	8009e20 <__sfp_lock_release>
 8009ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009efc:	6025      	str	r5, [r4, #0]
 8009efe:	61a5      	str	r5, [r4, #24]
 8009f00:	2208      	movs	r2, #8
 8009f02:	4629      	mov	r1, r5
 8009f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f08:	f7fd fff6 	bl	8007ef8 <memset>
 8009f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f14:	4620      	mov	r0, r4
 8009f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f18:	3468      	adds	r4, #104	; 0x68
 8009f1a:	e7d9      	b.n	8009ed0 <__sfp+0x1c>
 8009f1c:	2104      	movs	r1, #4
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f7ff ff62 	bl	8009de8 <__sfmoreglue>
 8009f24:	4604      	mov	r4, r0
 8009f26:	6030      	str	r0, [r6, #0]
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d1d5      	bne.n	8009ed8 <__sfp+0x24>
 8009f2c:	f7ff ff78 	bl	8009e20 <__sfp_lock_release>
 8009f30:	230c      	movs	r3, #12
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	e7ee      	b.n	8009f14 <__sfp+0x60>
 8009f36:	bf00      	nop
 8009f38:	0800b9f0 	.word	0x0800b9f0
 8009f3c:	ffff0001 	.word	0xffff0001

08009f40 <_fwalk_reent>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	4606      	mov	r6, r0
 8009f46:	4688      	mov	r8, r1
 8009f48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f4c:	2700      	movs	r7, #0
 8009f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f52:	f1b9 0901 	subs.w	r9, r9, #1
 8009f56:	d505      	bpl.n	8009f64 <_fwalk_reent+0x24>
 8009f58:	6824      	ldr	r4, [r4, #0]
 8009f5a:	2c00      	cmp	r4, #0
 8009f5c:	d1f7      	bne.n	8009f4e <_fwalk_reent+0xe>
 8009f5e:	4638      	mov	r0, r7
 8009f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f64:	89ab      	ldrh	r3, [r5, #12]
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d907      	bls.n	8009f7a <_fwalk_reent+0x3a>
 8009f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	d003      	beq.n	8009f7a <_fwalk_reent+0x3a>
 8009f72:	4629      	mov	r1, r5
 8009f74:	4630      	mov	r0, r6
 8009f76:	47c0      	blx	r8
 8009f78:	4307      	orrs	r7, r0
 8009f7a:	3568      	adds	r5, #104	; 0x68
 8009f7c:	e7e9      	b.n	8009f52 <_fwalk_reent+0x12>
	...

08009f80 <_localeconv_r>:
 8009f80:	4800      	ldr	r0, [pc, #0]	; (8009f84 <_localeconv_r+0x4>)
 8009f82:	4770      	bx	lr
 8009f84:	20000160 	.word	0x20000160

08009f88 <__retarget_lock_init_recursive>:
 8009f88:	4770      	bx	lr

08009f8a <__retarget_lock_acquire_recursive>:
 8009f8a:	4770      	bx	lr

08009f8c <__retarget_lock_release_recursive>:
 8009f8c:	4770      	bx	lr

08009f8e <__swhatbuf_r>:
 8009f8e:	b570      	push	{r4, r5, r6, lr}
 8009f90:	460e      	mov	r6, r1
 8009f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f96:	2900      	cmp	r1, #0
 8009f98:	b096      	sub	sp, #88	; 0x58
 8009f9a:	4614      	mov	r4, r2
 8009f9c:	461d      	mov	r5, r3
 8009f9e:	da07      	bge.n	8009fb0 <__swhatbuf_r+0x22>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	89b3      	ldrh	r3, [r6, #12]
 8009fa6:	061a      	lsls	r2, r3, #24
 8009fa8:	d410      	bmi.n	8009fcc <__swhatbuf_r+0x3e>
 8009faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fae:	e00e      	b.n	8009fce <__swhatbuf_r+0x40>
 8009fb0:	466a      	mov	r2, sp
 8009fb2:	f000 fe3d 	bl	800ac30 <_fstat_r>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	dbf2      	blt.n	8009fa0 <__swhatbuf_r+0x12>
 8009fba:	9a01      	ldr	r2, [sp, #4]
 8009fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fc4:	425a      	negs	r2, r3
 8009fc6:	415a      	adcs	r2, r3
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	e7ee      	b.n	8009faa <__swhatbuf_r+0x1c>
 8009fcc:	2340      	movs	r3, #64	; 0x40
 8009fce:	2000      	movs	r0, #0
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	b016      	add	sp, #88	; 0x58
 8009fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fd8 <__smakebuf_r>:
 8009fd8:	898b      	ldrh	r3, [r1, #12]
 8009fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fdc:	079d      	lsls	r5, r3, #30
 8009fde:	4606      	mov	r6, r0
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	d507      	bpl.n	8009ff4 <__smakebuf_r+0x1c>
 8009fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	6123      	str	r3, [r4, #16]
 8009fec:	2301      	movs	r3, #1
 8009fee:	6163      	str	r3, [r4, #20]
 8009ff0:	b002      	add	sp, #8
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	ab01      	add	r3, sp, #4
 8009ff6:	466a      	mov	r2, sp
 8009ff8:	f7ff ffc9 	bl	8009f8e <__swhatbuf_r>
 8009ffc:	9900      	ldr	r1, [sp, #0]
 8009ffe:	4605      	mov	r5, r0
 800a000:	4630      	mov	r0, r6
 800a002:	f7fd ffd1 	bl	8007fa8 <_malloc_r>
 800a006:	b948      	cbnz	r0, 800a01c <__smakebuf_r+0x44>
 800a008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a00c:	059a      	lsls	r2, r3, #22
 800a00e:	d4ef      	bmi.n	8009ff0 <__smakebuf_r+0x18>
 800a010:	f023 0303 	bic.w	r3, r3, #3
 800a014:	f043 0302 	orr.w	r3, r3, #2
 800a018:	81a3      	strh	r3, [r4, #12]
 800a01a:	e7e3      	b.n	8009fe4 <__smakebuf_r+0xc>
 800a01c:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <__smakebuf_r+0x7c>)
 800a01e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	6020      	str	r0, [r4, #0]
 800a024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a028:	81a3      	strh	r3, [r4, #12]
 800a02a:	9b00      	ldr	r3, [sp, #0]
 800a02c:	6163      	str	r3, [r4, #20]
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	6120      	str	r0, [r4, #16]
 800a032:	b15b      	cbz	r3, 800a04c <__smakebuf_r+0x74>
 800a034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 fe0b 	bl	800ac54 <_isatty_r>
 800a03e:	b128      	cbz	r0, 800a04c <__smakebuf_r+0x74>
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	f043 0301 	orr.w	r3, r3, #1
 800a04a:	81a3      	strh	r3, [r4, #12]
 800a04c:	89a0      	ldrh	r0, [r4, #12]
 800a04e:	4305      	orrs	r5, r0
 800a050:	81a5      	strh	r5, [r4, #12]
 800a052:	e7cd      	b.n	8009ff0 <__smakebuf_r+0x18>
 800a054:	08009ddd 	.word	0x08009ddd

0800a058 <memcpy>:
 800a058:	440a      	add	r2, r1
 800a05a:	4291      	cmp	r1, r2
 800a05c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a060:	d100      	bne.n	800a064 <memcpy+0xc>
 800a062:	4770      	bx	lr
 800a064:	b510      	push	{r4, lr}
 800a066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a06a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a06e:	4291      	cmp	r1, r2
 800a070:	d1f9      	bne.n	800a066 <memcpy+0xe>
 800a072:	bd10      	pop	{r4, pc}

0800a074 <memmove>:
 800a074:	4288      	cmp	r0, r1
 800a076:	b510      	push	{r4, lr}
 800a078:	eb01 0402 	add.w	r4, r1, r2
 800a07c:	d902      	bls.n	800a084 <memmove+0x10>
 800a07e:	4284      	cmp	r4, r0
 800a080:	4623      	mov	r3, r4
 800a082:	d807      	bhi.n	800a094 <memmove+0x20>
 800a084:	1e43      	subs	r3, r0, #1
 800a086:	42a1      	cmp	r1, r4
 800a088:	d008      	beq.n	800a09c <memmove+0x28>
 800a08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a092:	e7f8      	b.n	800a086 <memmove+0x12>
 800a094:	4402      	add	r2, r0
 800a096:	4601      	mov	r1, r0
 800a098:	428a      	cmp	r2, r1
 800a09a:	d100      	bne.n	800a09e <memmove+0x2a>
 800a09c:	bd10      	pop	{r4, pc}
 800a09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0a6:	e7f7      	b.n	800a098 <memmove+0x24>

0800a0a8 <__malloc_lock>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__malloc_lock+0x8>)
 800a0aa:	f7ff bf6e 	b.w	8009f8a <__retarget_lock_acquire_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20000c24 	.word	0x20000c24

0800a0b4 <__malloc_unlock>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__malloc_unlock+0x8>)
 800a0b6:	f7ff bf69 	b.w	8009f8c <__retarget_lock_release_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	20000c24 	.word	0x20000c24

0800a0c0 <_Balloc>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	b976      	cbnz	r6, 800a0e8 <_Balloc+0x28>
 800a0ca:	2010      	movs	r0, #16
 800a0cc:	f7fd ff0c 	bl	8007ee8 <malloc>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	6260      	str	r0, [r4, #36]	; 0x24
 800a0d4:	b920      	cbnz	r0, 800a0e0 <_Balloc+0x20>
 800a0d6:	4b18      	ldr	r3, [pc, #96]	; (800a138 <_Balloc+0x78>)
 800a0d8:	4818      	ldr	r0, [pc, #96]	; (800a13c <_Balloc+0x7c>)
 800a0da:	2166      	movs	r1, #102	; 0x66
 800a0dc:	f7fd fe96 	bl	8007e0c <__assert_func>
 800a0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0e4:	6006      	str	r6, [r0, #0]
 800a0e6:	60c6      	str	r6, [r0, #12]
 800a0e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0ea:	68f3      	ldr	r3, [r6, #12]
 800a0ec:	b183      	cbz	r3, 800a110 <_Balloc+0x50>
 800a0ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0f6:	b9b8      	cbnz	r0, 800a128 <_Balloc+0x68>
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a0fe:	1d72      	adds	r2, r6, #5
 800a100:	0092      	lsls	r2, r2, #2
 800a102:	4620      	mov	r0, r4
 800a104:	f000 fb5a 	bl	800a7bc <_calloc_r>
 800a108:	b160      	cbz	r0, 800a124 <_Balloc+0x64>
 800a10a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a10e:	e00e      	b.n	800a12e <_Balloc+0x6e>
 800a110:	2221      	movs	r2, #33	; 0x21
 800a112:	2104      	movs	r1, #4
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fb51 	bl	800a7bc <_calloc_r>
 800a11a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a11c:	60f0      	str	r0, [r6, #12]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1e4      	bne.n	800a0ee <_Balloc+0x2e>
 800a124:	2000      	movs	r0, #0
 800a126:	bd70      	pop	{r4, r5, r6, pc}
 800a128:	6802      	ldr	r2, [r0, #0]
 800a12a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a12e:	2300      	movs	r3, #0
 800a130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a134:	e7f7      	b.n	800a126 <_Balloc+0x66>
 800a136:	bf00      	nop
 800a138:	0800ba46 	.word	0x0800ba46
 800a13c:	0800bb30 	.word	0x0800bb30

0800a140 <_Bfree>:
 800a140:	b570      	push	{r4, r5, r6, lr}
 800a142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a144:	4605      	mov	r5, r0
 800a146:	460c      	mov	r4, r1
 800a148:	b976      	cbnz	r6, 800a168 <_Bfree+0x28>
 800a14a:	2010      	movs	r0, #16
 800a14c:	f7fd fecc 	bl	8007ee8 <malloc>
 800a150:	4602      	mov	r2, r0
 800a152:	6268      	str	r0, [r5, #36]	; 0x24
 800a154:	b920      	cbnz	r0, 800a160 <_Bfree+0x20>
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <_Bfree+0x3c>)
 800a158:	4809      	ldr	r0, [pc, #36]	; (800a180 <_Bfree+0x40>)
 800a15a:	218a      	movs	r1, #138	; 0x8a
 800a15c:	f7fd fe56 	bl	8007e0c <__assert_func>
 800a160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a164:	6006      	str	r6, [r0, #0]
 800a166:	60c6      	str	r6, [r0, #12]
 800a168:	b13c      	cbz	r4, 800a17a <_Bfree+0x3a>
 800a16a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a16c:	6862      	ldr	r2, [r4, #4]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a174:	6021      	str	r1, [r4, #0]
 800a176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	0800ba46 	.word	0x0800ba46
 800a180:	0800bb30 	.word	0x0800bb30

0800a184 <__multadd>:
 800a184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	690e      	ldr	r6, [r1, #16]
 800a18a:	4607      	mov	r7, r0
 800a18c:	4698      	mov	r8, r3
 800a18e:	460c      	mov	r4, r1
 800a190:	f101 0014 	add.w	r0, r1, #20
 800a194:	2300      	movs	r3, #0
 800a196:	6805      	ldr	r5, [r0, #0]
 800a198:	b2a9      	uxth	r1, r5
 800a19a:	fb02 8101 	mla	r1, r2, r1, r8
 800a19e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a1a2:	0c2d      	lsrs	r5, r5, #16
 800a1a4:	fb02 c505 	mla	r5, r2, r5, ip
 800a1a8:	b289      	uxth	r1, r1
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a1b0:	429e      	cmp	r6, r3
 800a1b2:	f840 1b04 	str.w	r1, [r0], #4
 800a1b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a1ba:	dcec      	bgt.n	800a196 <__multadd+0x12>
 800a1bc:	f1b8 0f00 	cmp.w	r8, #0
 800a1c0:	d022      	beq.n	800a208 <__multadd+0x84>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	42b3      	cmp	r3, r6
 800a1c6:	dc19      	bgt.n	800a1fc <__multadd+0x78>
 800a1c8:	6861      	ldr	r1, [r4, #4]
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	f7ff ff77 	bl	800a0c0 <_Balloc>
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	b928      	cbnz	r0, 800a1e2 <__multadd+0x5e>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <__multadd+0x8c>)
 800a1da:	480e      	ldr	r0, [pc, #56]	; (800a214 <__multadd+0x90>)
 800a1dc:	21b5      	movs	r1, #181	; 0xb5
 800a1de:	f7fd fe15 	bl	8007e0c <__assert_func>
 800a1e2:	6922      	ldr	r2, [r4, #16]
 800a1e4:	3202      	adds	r2, #2
 800a1e6:	f104 010c 	add.w	r1, r4, #12
 800a1ea:	0092      	lsls	r2, r2, #2
 800a1ec:	300c      	adds	r0, #12
 800a1ee:	f7ff ff33 	bl	800a058 <memcpy>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff ffa3 	bl	800a140 <_Bfree>
 800a1fa:	462c      	mov	r4, r5
 800a1fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a200:	3601      	adds	r6, #1
 800a202:	f8c3 8014 	str.w	r8, [r3, #20]
 800a206:	6126      	str	r6, [r4, #16]
 800a208:	4620      	mov	r0, r4
 800a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20e:	bf00      	nop
 800a210:	0800babc 	.word	0x0800babc
 800a214:	0800bb30 	.word	0x0800bb30

0800a218 <__hi0bits>:
 800a218:	0c03      	lsrs	r3, r0, #16
 800a21a:	041b      	lsls	r3, r3, #16
 800a21c:	b9d3      	cbnz	r3, 800a254 <__hi0bits+0x3c>
 800a21e:	0400      	lsls	r0, r0, #16
 800a220:	2310      	movs	r3, #16
 800a222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a226:	bf04      	itt	eq
 800a228:	0200      	lsleq	r0, r0, #8
 800a22a:	3308      	addeq	r3, #8
 800a22c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a230:	bf04      	itt	eq
 800a232:	0100      	lsleq	r0, r0, #4
 800a234:	3304      	addeq	r3, #4
 800a236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a23a:	bf04      	itt	eq
 800a23c:	0080      	lsleq	r0, r0, #2
 800a23e:	3302      	addeq	r3, #2
 800a240:	2800      	cmp	r0, #0
 800a242:	db05      	blt.n	800a250 <__hi0bits+0x38>
 800a244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a248:	f103 0301 	add.w	r3, r3, #1
 800a24c:	bf08      	it	eq
 800a24e:	2320      	moveq	r3, #32
 800a250:	4618      	mov	r0, r3
 800a252:	4770      	bx	lr
 800a254:	2300      	movs	r3, #0
 800a256:	e7e4      	b.n	800a222 <__hi0bits+0xa>

0800a258 <__lo0bits>:
 800a258:	6803      	ldr	r3, [r0, #0]
 800a25a:	f013 0207 	ands.w	r2, r3, #7
 800a25e:	4601      	mov	r1, r0
 800a260:	d00b      	beq.n	800a27a <__lo0bits+0x22>
 800a262:	07da      	lsls	r2, r3, #31
 800a264:	d424      	bmi.n	800a2b0 <__lo0bits+0x58>
 800a266:	0798      	lsls	r0, r3, #30
 800a268:	bf49      	itett	mi
 800a26a:	085b      	lsrmi	r3, r3, #1
 800a26c:	089b      	lsrpl	r3, r3, #2
 800a26e:	2001      	movmi	r0, #1
 800a270:	600b      	strmi	r3, [r1, #0]
 800a272:	bf5c      	itt	pl
 800a274:	600b      	strpl	r3, [r1, #0]
 800a276:	2002      	movpl	r0, #2
 800a278:	4770      	bx	lr
 800a27a:	b298      	uxth	r0, r3
 800a27c:	b9b0      	cbnz	r0, 800a2ac <__lo0bits+0x54>
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	2010      	movs	r0, #16
 800a282:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a286:	bf04      	itt	eq
 800a288:	0a1b      	lsreq	r3, r3, #8
 800a28a:	3008      	addeq	r0, #8
 800a28c:	071a      	lsls	r2, r3, #28
 800a28e:	bf04      	itt	eq
 800a290:	091b      	lsreq	r3, r3, #4
 800a292:	3004      	addeq	r0, #4
 800a294:	079a      	lsls	r2, r3, #30
 800a296:	bf04      	itt	eq
 800a298:	089b      	lsreq	r3, r3, #2
 800a29a:	3002      	addeq	r0, #2
 800a29c:	07da      	lsls	r2, r3, #31
 800a29e:	d403      	bmi.n	800a2a8 <__lo0bits+0x50>
 800a2a0:	085b      	lsrs	r3, r3, #1
 800a2a2:	f100 0001 	add.w	r0, r0, #1
 800a2a6:	d005      	beq.n	800a2b4 <__lo0bits+0x5c>
 800a2a8:	600b      	str	r3, [r1, #0]
 800a2aa:	4770      	bx	lr
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	e7e8      	b.n	800a282 <__lo0bits+0x2a>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	4770      	bx	lr
 800a2b4:	2020      	movs	r0, #32
 800a2b6:	4770      	bx	lr

0800a2b8 <__i2b>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f7ff feff 	bl	800a0c0 <_Balloc>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__i2b+0x1a>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <__i2b+0x24>)
 800a2c8:	4805      	ldr	r0, [pc, #20]	; (800a2e0 <__i2b+0x28>)
 800a2ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2ce:	f7fd fd9d 	bl	8007e0c <__assert_func>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	6144      	str	r4, [r0, #20]
 800a2d6:	6103      	str	r3, [r0, #16]
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800babc 	.word	0x0800babc
 800a2e0:	0800bb30 	.word	0x0800bb30

0800a2e4 <__multiply>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	690a      	ldr	r2, [r1, #16]
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	bfb8      	it	lt
 800a2f2:	460b      	movlt	r3, r1
 800a2f4:	460d      	mov	r5, r1
 800a2f6:	bfbc      	itt	lt
 800a2f8:	4625      	movlt	r5, r4
 800a2fa:	461c      	movlt	r4, r3
 800a2fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a300:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a304:	68ab      	ldr	r3, [r5, #8]
 800a306:	6869      	ldr	r1, [r5, #4]
 800a308:	eb0a 0709 	add.w	r7, sl, r9
 800a30c:	42bb      	cmp	r3, r7
 800a30e:	b085      	sub	sp, #20
 800a310:	bfb8      	it	lt
 800a312:	3101      	addlt	r1, #1
 800a314:	f7ff fed4 	bl	800a0c0 <_Balloc>
 800a318:	b930      	cbnz	r0, 800a328 <__multiply+0x44>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b42      	ldr	r3, [pc, #264]	; (800a428 <__multiply+0x144>)
 800a31e:	4843      	ldr	r0, [pc, #268]	; (800a42c <__multiply+0x148>)
 800a320:	f240 115d 	movw	r1, #349	; 0x15d
 800a324:	f7fd fd72 	bl	8007e0c <__assert_func>
 800a328:	f100 0614 	add.w	r6, r0, #20
 800a32c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a330:	4633      	mov	r3, r6
 800a332:	2200      	movs	r2, #0
 800a334:	4543      	cmp	r3, r8
 800a336:	d31e      	bcc.n	800a376 <__multiply+0x92>
 800a338:	f105 0c14 	add.w	ip, r5, #20
 800a33c:	f104 0314 	add.w	r3, r4, #20
 800a340:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a344:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a348:	9202      	str	r2, [sp, #8]
 800a34a:	ebac 0205 	sub.w	r2, ip, r5
 800a34e:	3a15      	subs	r2, #21
 800a350:	f022 0203 	bic.w	r2, r2, #3
 800a354:	3204      	adds	r2, #4
 800a356:	f105 0115 	add.w	r1, r5, #21
 800a35a:	458c      	cmp	ip, r1
 800a35c:	bf38      	it	cc
 800a35e:	2204      	movcc	r2, #4
 800a360:	9201      	str	r2, [sp, #4]
 800a362:	9a02      	ldr	r2, [sp, #8]
 800a364:	9303      	str	r3, [sp, #12]
 800a366:	429a      	cmp	r2, r3
 800a368:	d808      	bhi.n	800a37c <__multiply+0x98>
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	dc55      	bgt.n	800a41a <__multiply+0x136>
 800a36e:	6107      	str	r7, [r0, #16]
 800a370:	b005      	add	sp, #20
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	f843 2b04 	str.w	r2, [r3], #4
 800a37a:	e7db      	b.n	800a334 <__multiply+0x50>
 800a37c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a380:	f1ba 0f00 	cmp.w	sl, #0
 800a384:	d020      	beq.n	800a3c8 <__multiply+0xe4>
 800a386:	f105 0e14 	add.w	lr, r5, #20
 800a38a:	46b1      	mov	r9, r6
 800a38c:	2200      	movs	r2, #0
 800a38e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a392:	f8d9 b000 	ldr.w	fp, [r9]
 800a396:	b2a1      	uxth	r1, r4
 800a398:	fa1f fb8b 	uxth.w	fp, fp
 800a39c:	fb0a b101 	mla	r1, sl, r1, fp
 800a3a0:	4411      	add	r1, r2
 800a3a2:	f8d9 2000 	ldr.w	r2, [r9]
 800a3a6:	0c24      	lsrs	r4, r4, #16
 800a3a8:	0c12      	lsrs	r2, r2, #16
 800a3aa:	fb0a 2404 	mla	r4, sl, r4, r2
 800a3ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a3b2:	b289      	uxth	r1, r1
 800a3b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a3b8:	45f4      	cmp	ip, lr
 800a3ba:	f849 1b04 	str.w	r1, [r9], #4
 800a3be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a3c2:	d8e4      	bhi.n	800a38e <__multiply+0xaa>
 800a3c4:	9901      	ldr	r1, [sp, #4]
 800a3c6:	5072      	str	r2, [r6, r1]
 800a3c8:	9a03      	ldr	r2, [sp, #12]
 800a3ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	f1b9 0f00 	cmp.w	r9, #0
 800a3d4:	d01f      	beq.n	800a416 <__multiply+0x132>
 800a3d6:	6834      	ldr	r4, [r6, #0]
 800a3d8:	f105 0114 	add.w	r1, r5, #20
 800a3dc:	46b6      	mov	lr, r6
 800a3de:	f04f 0a00 	mov.w	sl, #0
 800a3e2:	880a      	ldrh	r2, [r1, #0]
 800a3e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a3e8:	fb09 b202 	mla	r2, r9, r2, fp
 800a3ec:	4492      	add	sl, r2
 800a3ee:	b2a4      	uxth	r4, r4
 800a3f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a3f4:	f84e 4b04 	str.w	r4, [lr], #4
 800a3f8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a3fc:	f8be 2000 	ldrh.w	r2, [lr]
 800a400:	0c24      	lsrs	r4, r4, #16
 800a402:	fb09 2404 	mla	r4, r9, r4, r2
 800a406:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a40a:	458c      	cmp	ip, r1
 800a40c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a410:	d8e7      	bhi.n	800a3e2 <__multiply+0xfe>
 800a412:	9a01      	ldr	r2, [sp, #4]
 800a414:	50b4      	str	r4, [r6, r2]
 800a416:	3604      	adds	r6, #4
 800a418:	e7a3      	b.n	800a362 <__multiply+0x7e>
 800a41a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1a5      	bne.n	800a36e <__multiply+0x8a>
 800a422:	3f01      	subs	r7, #1
 800a424:	e7a1      	b.n	800a36a <__multiply+0x86>
 800a426:	bf00      	nop
 800a428:	0800babc 	.word	0x0800babc
 800a42c:	0800bb30 	.word	0x0800bb30

0800a430 <__pow5mult>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	4615      	mov	r5, r2
 800a436:	f012 0203 	ands.w	r2, r2, #3
 800a43a:	4606      	mov	r6, r0
 800a43c:	460f      	mov	r7, r1
 800a43e:	d007      	beq.n	800a450 <__pow5mult+0x20>
 800a440:	4c25      	ldr	r4, [pc, #148]	; (800a4d8 <__pow5mult+0xa8>)
 800a442:	3a01      	subs	r2, #1
 800a444:	2300      	movs	r3, #0
 800a446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a44a:	f7ff fe9b 	bl	800a184 <__multadd>
 800a44e:	4607      	mov	r7, r0
 800a450:	10ad      	asrs	r5, r5, #2
 800a452:	d03d      	beq.n	800a4d0 <__pow5mult+0xa0>
 800a454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a456:	b97c      	cbnz	r4, 800a478 <__pow5mult+0x48>
 800a458:	2010      	movs	r0, #16
 800a45a:	f7fd fd45 	bl	8007ee8 <malloc>
 800a45e:	4602      	mov	r2, r0
 800a460:	6270      	str	r0, [r6, #36]	; 0x24
 800a462:	b928      	cbnz	r0, 800a470 <__pow5mult+0x40>
 800a464:	4b1d      	ldr	r3, [pc, #116]	; (800a4dc <__pow5mult+0xac>)
 800a466:	481e      	ldr	r0, [pc, #120]	; (800a4e0 <__pow5mult+0xb0>)
 800a468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a46c:	f7fd fcce 	bl	8007e0c <__assert_func>
 800a470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a474:	6004      	str	r4, [r0, #0]
 800a476:	60c4      	str	r4, [r0, #12]
 800a478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a47c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a480:	b94c      	cbnz	r4, 800a496 <__pow5mult+0x66>
 800a482:	f240 2171 	movw	r1, #625	; 0x271
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff16 	bl	800a2b8 <__i2b>
 800a48c:	2300      	movs	r3, #0
 800a48e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a492:	4604      	mov	r4, r0
 800a494:	6003      	str	r3, [r0, #0]
 800a496:	f04f 0900 	mov.w	r9, #0
 800a49a:	07eb      	lsls	r3, r5, #31
 800a49c:	d50a      	bpl.n	800a4b4 <__pow5mult+0x84>
 800a49e:	4639      	mov	r1, r7
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f7ff ff1e 	bl	800a2e4 <__multiply>
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	4680      	mov	r8, r0
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f7ff fe47 	bl	800a140 <_Bfree>
 800a4b2:	4647      	mov	r7, r8
 800a4b4:	106d      	asrs	r5, r5, #1
 800a4b6:	d00b      	beq.n	800a4d0 <__pow5mult+0xa0>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	b938      	cbnz	r0, 800a4cc <__pow5mult+0x9c>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f7ff ff0f 	bl	800a2e4 <__multiply>
 800a4c6:	6020      	str	r0, [r4, #0]
 800a4c8:	f8c0 9000 	str.w	r9, [r0]
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	e7e4      	b.n	800a49a <__pow5mult+0x6a>
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800bc80 	.word	0x0800bc80
 800a4dc:	0800ba46 	.word	0x0800ba46
 800a4e0:	0800bb30 	.word	0x0800bb30

0800a4e4 <__lshift>:
 800a4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	6849      	ldr	r1, [r1, #4]
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	4691      	mov	r9, r2
 800a4f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4fc:	f108 0601 	add.w	r6, r8, #1
 800a500:	42b3      	cmp	r3, r6
 800a502:	db0b      	blt.n	800a51c <__lshift+0x38>
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff fddb 	bl	800a0c0 <_Balloc>
 800a50a:	4605      	mov	r5, r0
 800a50c:	b948      	cbnz	r0, 800a522 <__lshift+0x3e>
 800a50e:	4602      	mov	r2, r0
 800a510:	4b28      	ldr	r3, [pc, #160]	; (800a5b4 <__lshift+0xd0>)
 800a512:	4829      	ldr	r0, [pc, #164]	; (800a5b8 <__lshift+0xd4>)
 800a514:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a518:	f7fd fc78 	bl	8007e0c <__assert_func>
 800a51c:	3101      	adds	r1, #1
 800a51e:	005b      	lsls	r3, r3, #1
 800a520:	e7ee      	b.n	800a500 <__lshift+0x1c>
 800a522:	2300      	movs	r3, #0
 800a524:	f100 0114 	add.w	r1, r0, #20
 800a528:	f100 0210 	add.w	r2, r0, #16
 800a52c:	4618      	mov	r0, r3
 800a52e:	4553      	cmp	r3, sl
 800a530:	db33      	blt.n	800a59a <__lshift+0xb6>
 800a532:	6920      	ldr	r0, [r4, #16]
 800a534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a538:	f104 0314 	add.w	r3, r4, #20
 800a53c:	f019 091f 	ands.w	r9, r9, #31
 800a540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a544:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a548:	d02b      	beq.n	800a5a2 <__lshift+0xbe>
 800a54a:	f1c9 0e20 	rsb	lr, r9, #32
 800a54e:	468a      	mov	sl, r1
 800a550:	2200      	movs	r2, #0
 800a552:	6818      	ldr	r0, [r3, #0]
 800a554:	fa00 f009 	lsl.w	r0, r0, r9
 800a558:	4302      	orrs	r2, r0
 800a55a:	f84a 2b04 	str.w	r2, [sl], #4
 800a55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a562:	459c      	cmp	ip, r3
 800a564:	fa22 f20e 	lsr.w	r2, r2, lr
 800a568:	d8f3      	bhi.n	800a552 <__lshift+0x6e>
 800a56a:	ebac 0304 	sub.w	r3, ip, r4
 800a56e:	3b15      	subs	r3, #21
 800a570:	f023 0303 	bic.w	r3, r3, #3
 800a574:	3304      	adds	r3, #4
 800a576:	f104 0015 	add.w	r0, r4, #21
 800a57a:	4584      	cmp	ip, r0
 800a57c:	bf38      	it	cc
 800a57e:	2304      	movcc	r3, #4
 800a580:	50ca      	str	r2, [r1, r3]
 800a582:	b10a      	cbz	r2, 800a588 <__lshift+0xa4>
 800a584:	f108 0602 	add.w	r6, r8, #2
 800a588:	3e01      	subs	r6, #1
 800a58a:	4638      	mov	r0, r7
 800a58c:	612e      	str	r6, [r5, #16]
 800a58e:	4621      	mov	r1, r4
 800a590:	f7ff fdd6 	bl	800a140 <_Bfree>
 800a594:	4628      	mov	r0, r5
 800a596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a59a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a59e:	3301      	adds	r3, #1
 800a5a0:	e7c5      	b.n	800a52e <__lshift+0x4a>
 800a5a2:	3904      	subs	r1, #4
 800a5a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5ac:	459c      	cmp	ip, r3
 800a5ae:	d8f9      	bhi.n	800a5a4 <__lshift+0xc0>
 800a5b0:	e7ea      	b.n	800a588 <__lshift+0xa4>
 800a5b2:	bf00      	nop
 800a5b4:	0800babc 	.word	0x0800babc
 800a5b8:	0800bb30 	.word	0x0800bb30

0800a5bc <__mcmp>:
 800a5bc:	b530      	push	{r4, r5, lr}
 800a5be:	6902      	ldr	r2, [r0, #16]
 800a5c0:	690c      	ldr	r4, [r1, #16]
 800a5c2:	1b12      	subs	r2, r2, r4
 800a5c4:	d10e      	bne.n	800a5e4 <__mcmp+0x28>
 800a5c6:	f100 0314 	add.w	r3, r0, #20
 800a5ca:	3114      	adds	r1, #20
 800a5cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5dc:	42a5      	cmp	r5, r4
 800a5de:	d003      	beq.n	800a5e8 <__mcmp+0x2c>
 800a5e0:	d305      	bcc.n	800a5ee <__mcmp+0x32>
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	bd30      	pop	{r4, r5, pc}
 800a5e8:	4283      	cmp	r3, r0
 800a5ea:	d3f3      	bcc.n	800a5d4 <__mcmp+0x18>
 800a5ec:	e7fa      	b.n	800a5e4 <__mcmp+0x28>
 800a5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5f2:	e7f7      	b.n	800a5e4 <__mcmp+0x28>

0800a5f4 <__mdiff>:
 800a5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4620      	mov	r0, r4
 800a600:	4617      	mov	r7, r2
 800a602:	f7ff ffdb 	bl	800a5bc <__mcmp>
 800a606:	1e05      	subs	r5, r0, #0
 800a608:	d110      	bne.n	800a62c <__mdiff+0x38>
 800a60a:	4629      	mov	r1, r5
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff fd57 	bl	800a0c0 <_Balloc>
 800a612:	b930      	cbnz	r0, 800a622 <__mdiff+0x2e>
 800a614:	4b39      	ldr	r3, [pc, #228]	; (800a6fc <__mdiff+0x108>)
 800a616:	4602      	mov	r2, r0
 800a618:	f240 2132 	movw	r1, #562	; 0x232
 800a61c:	4838      	ldr	r0, [pc, #224]	; (800a700 <__mdiff+0x10c>)
 800a61e:	f7fd fbf5 	bl	8007e0c <__assert_func>
 800a622:	2301      	movs	r3, #1
 800a624:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	bfa4      	itt	ge
 800a62e:	463b      	movge	r3, r7
 800a630:	4627      	movge	r7, r4
 800a632:	4630      	mov	r0, r6
 800a634:	6879      	ldr	r1, [r7, #4]
 800a636:	bfa6      	itte	ge
 800a638:	461c      	movge	r4, r3
 800a63a:	2500      	movge	r5, #0
 800a63c:	2501      	movlt	r5, #1
 800a63e:	f7ff fd3f 	bl	800a0c0 <_Balloc>
 800a642:	b920      	cbnz	r0, 800a64e <__mdiff+0x5a>
 800a644:	4b2d      	ldr	r3, [pc, #180]	; (800a6fc <__mdiff+0x108>)
 800a646:	4602      	mov	r2, r0
 800a648:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a64c:	e7e6      	b.n	800a61c <__mdiff+0x28>
 800a64e:	693e      	ldr	r6, [r7, #16]
 800a650:	60c5      	str	r5, [r0, #12]
 800a652:	6925      	ldr	r5, [r4, #16]
 800a654:	f107 0114 	add.w	r1, r7, #20
 800a658:	f104 0914 	add.w	r9, r4, #20
 800a65c:	f100 0e14 	add.w	lr, r0, #20
 800a660:	f107 0210 	add.w	r2, r7, #16
 800a664:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a668:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a66c:	46f2      	mov	sl, lr
 800a66e:	2700      	movs	r7, #0
 800a670:	f859 3b04 	ldr.w	r3, [r9], #4
 800a674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a678:	fa1f f883 	uxth.w	r8, r3
 800a67c:	fa17 f78b 	uxtah	r7, r7, fp
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	eba7 0808 	sub.w	r8, r7, r8
 800a686:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a68a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a68e:	fa1f f888 	uxth.w	r8, r8
 800a692:	141f      	asrs	r7, r3, #16
 800a694:	454d      	cmp	r5, r9
 800a696:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a69a:	f84a 3b04 	str.w	r3, [sl], #4
 800a69e:	d8e7      	bhi.n	800a670 <__mdiff+0x7c>
 800a6a0:	1b2b      	subs	r3, r5, r4
 800a6a2:	3b15      	subs	r3, #21
 800a6a4:	f023 0303 	bic.w	r3, r3, #3
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	3415      	adds	r4, #21
 800a6ac:	42a5      	cmp	r5, r4
 800a6ae:	bf38      	it	cc
 800a6b0:	2304      	movcc	r3, #4
 800a6b2:	4419      	add	r1, r3
 800a6b4:	4473      	add	r3, lr
 800a6b6:	469e      	mov	lr, r3
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	4565      	cmp	r5, ip
 800a6bc:	d30e      	bcc.n	800a6dc <__mdiff+0xe8>
 800a6be:	f10c 0203 	add.w	r2, ip, #3
 800a6c2:	1a52      	subs	r2, r2, r1
 800a6c4:	f022 0203 	bic.w	r2, r2, #3
 800a6c8:	3903      	subs	r1, #3
 800a6ca:	458c      	cmp	ip, r1
 800a6cc:	bf38      	it	cc
 800a6ce:	2200      	movcc	r2, #0
 800a6d0:	441a      	add	r2, r3
 800a6d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6d6:	b17b      	cbz	r3, 800a6f8 <__mdiff+0x104>
 800a6d8:	6106      	str	r6, [r0, #16]
 800a6da:	e7a5      	b.n	800a628 <__mdiff+0x34>
 800a6dc:	f855 8b04 	ldr.w	r8, [r5], #4
 800a6e0:	fa17 f488 	uxtah	r4, r7, r8
 800a6e4:	1422      	asrs	r2, r4, #16
 800a6e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a6ea:	b2a4      	uxth	r4, r4
 800a6ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a6f0:	f84e 4b04 	str.w	r4, [lr], #4
 800a6f4:	1417      	asrs	r7, r2, #16
 800a6f6:	e7e0      	b.n	800a6ba <__mdiff+0xc6>
 800a6f8:	3e01      	subs	r6, #1
 800a6fa:	e7ea      	b.n	800a6d2 <__mdiff+0xde>
 800a6fc:	0800babc 	.word	0x0800babc
 800a700:	0800bb30 	.word	0x0800bb30

0800a704 <__d2b>:
 800a704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a708:	4689      	mov	r9, r1
 800a70a:	2101      	movs	r1, #1
 800a70c:	ec57 6b10 	vmov	r6, r7, d0
 800a710:	4690      	mov	r8, r2
 800a712:	f7ff fcd5 	bl	800a0c0 <_Balloc>
 800a716:	4604      	mov	r4, r0
 800a718:	b930      	cbnz	r0, 800a728 <__d2b+0x24>
 800a71a:	4602      	mov	r2, r0
 800a71c:	4b25      	ldr	r3, [pc, #148]	; (800a7b4 <__d2b+0xb0>)
 800a71e:	4826      	ldr	r0, [pc, #152]	; (800a7b8 <__d2b+0xb4>)
 800a720:	f240 310a 	movw	r1, #778	; 0x30a
 800a724:	f7fd fb72 	bl	8007e0c <__assert_func>
 800a728:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a72c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a730:	bb35      	cbnz	r5, 800a780 <__d2b+0x7c>
 800a732:	2e00      	cmp	r6, #0
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	d028      	beq.n	800a78a <__d2b+0x86>
 800a738:	4668      	mov	r0, sp
 800a73a:	9600      	str	r6, [sp, #0]
 800a73c:	f7ff fd8c 	bl	800a258 <__lo0bits>
 800a740:	9900      	ldr	r1, [sp, #0]
 800a742:	b300      	cbz	r0, 800a786 <__d2b+0x82>
 800a744:	9a01      	ldr	r2, [sp, #4]
 800a746:	f1c0 0320 	rsb	r3, r0, #32
 800a74a:	fa02 f303 	lsl.w	r3, r2, r3
 800a74e:	430b      	orrs	r3, r1
 800a750:	40c2      	lsrs	r2, r0
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	9201      	str	r2, [sp, #4]
 800a756:	9b01      	ldr	r3, [sp, #4]
 800a758:	61a3      	str	r3, [r4, #24]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bf14      	ite	ne
 800a75e:	2202      	movne	r2, #2
 800a760:	2201      	moveq	r2, #1
 800a762:	6122      	str	r2, [r4, #16]
 800a764:	b1d5      	cbz	r5, 800a79c <__d2b+0x98>
 800a766:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a76a:	4405      	add	r5, r0
 800a76c:	f8c9 5000 	str.w	r5, [r9]
 800a770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a774:	f8c8 0000 	str.w	r0, [r8]
 800a778:	4620      	mov	r0, r4
 800a77a:	b003      	add	sp, #12
 800a77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a784:	e7d5      	b.n	800a732 <__d2b+0x2e>
 800a786:	6161      	str	r1, [r4, #20]
 800a788:	e7e5      	b.n	800a756 <__d2b+0x52>
 800a78a:	a801      	add	r0, sp, #4
 800a78c:	f7ff fd64 	bl	800a258 <__lo0bits>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	2201      	movs	r2, #1
 800a796:	6122      	str	r2, [r4, #16]
 800a798:	3020      	adds	r0, #32
 800a79a:	e7e3      	b.n	800a764 <__d2b+0x60>
 800a79c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7a4:	f8c9 0000 	str.w	r0, [r9]
 800a7a8:	6918      	ldr	r0, [r3, #16]
 800a7aa:	f7ff fd35 	bl	800a218 <__hi0bits>
 800a7ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7b2:	e7df      	b.n	800a774 <__d2b+0x70>
 800a7b4:	0800babc 	.word	0x0800babc
 800a7b8:	0800bb30 	.word	0x0800bb30

0800a7bc <_calloc_r>:
 800a7bc:	b513      	push	{r0, r1, r4, lr}
 800a7be:	434a      	muls	r2, r1
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	9201      	str	r2, [sp, #4]
 800a7c4:	f7fd fbf0 	bl	8007fa8 <_malloc_r>
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	b118      	cbz	r0, 800a7d4 <_calloc_r+0x18>
 800a7cc:	9a01      	ldr	r2, [sp, #4]
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	f7fd fb92 	bl	8007ef8 <memset>
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	b002      	add	sp, #8
 800a7d8:	bd10      	pop	{r4, pc}

0800a7da <_realloc_r>:
 800a7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7dc:	4607      	mov	r7, r0
 800a7de:	4614      	mov	r4, r2
 800a7e0:	460e      	mov	r6, r1
 800a7e2:	b921      	cbnz	r1, 800a7ee <_realloc_r+0x14>
 800a7e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	f7fd bbdd 	b.w	8007fa8 <_malloc_r>
 800a7ee:	b922      	cbnz	r2, 800a7fa <_realloc_r+0x20>
 800a7f0:	f7fd fb8a 	bl	8007f08 <_free_r>
 800a7f4:	4625      	mov	r5, r4
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7fa:	f000 fa5f 	bl	800acbc <_malloc_usable_size_r>
 800a7fe:	42a0      	cmp	r0, r4
 800a800:	d20f      	bcs.n	800a822 <_realloc_r+0x48>
 800a802:	4621      	mov	r1, r4
 800a804:	4638      	mov	r0, r7
 800a806:	f7fd fbcf 	bl	8007fa8 <_malloc_r>
 800a80a:	4605      	mov	r5, r0
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d0f2      	beq.n	800a7f6 <_realloc_r+0x1c>
 800a810:	4631      	mov	r1, r6
 800a812:	4622      	mov	r2, r4
 800a814:	f7ff fc20 	bl	800a058 <memcpy>
 800a818:	4631      	mov	r1, r6
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7fd fb74 	bl	8007f08 <_free_r>
 800a820:	e7e9      	b.n	800a7f6 <_realloc_r+0x1c>
 800a822:	4635      	mov	r5, r6
 800a824:	e7e7      	b.n	800a7f6 <_realloc_r+0x1c>

0800a826 <__ssputs_r>:
 800a826:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82a:	688e      	ldr	r6, [r1, #8]
 800a82c:	429e      	cmp	r6, r3
 800a82e:	4682      	mov	sl, r0
 800a830:	460c      	mov	r4, r1
 800a832:	4690      	mov	r8, r2
 800a834:	461f      	mov	r7, r3
 800a836:	d838      	bhi.n	800a8aa <__ssputs_r+0x84>
 800a838:	898a      	ldrh	r2, [r1, #12]
 800a83a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a83e:	d032      	beq.n	800a8a6 <__ssputs_r+0x80>
 800a840:	6825      	ldr	r5, [r4, #0]
 800a842:	6909      	ldr	r1, [r1, #16]
 800a844:	eba5 0901 	sub.w	r9, r5, r1
 800a848:	6965      	ldr	r5, [r4, #20]
 800a84a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a84e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a852:	3301      	adds	r3, #1
 800a854:	444b      	add	r3, r9
 800a856:	106d      	asrs	r5, r5, #1
 800a858:	429d      	cmp	r5, r3
 800a85a:	bf38      	it	cc
 800a85c:	461d      	movcc	r5, r3
 800a85e:	0553      	lsls	r3, r2, #21
 800a860:	d531      	bpl.n	800a8c6 <__ssputs_r+0xa0>
 800a862:	4629      	mov	r1, r5
 800a864:	f7fd fba0 	bl	8007fa8 <_malloc_r>
 800a868:	4606      	mov	r6, r0
 800a86a:	b950      	cbnz	r0, 800a882 <__ssputs_r+0x5c>
 800a86c:	230c      	movs	r3, #12
 800a86e:	f8ca 3000 	str.w	r3, [sl]
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a878:	81a3      	strh	r3, [r4, #12]
 800a87a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a882:	6921      	ldr	r1, [r4, #16]
 800a884:	464a      	mov	r2, r9
 800a886:	f7ff fbe7 	bl	800a058 <memcpy>
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	6126      	str	r6, [r4, #16]
 800a898:	6165      	str	r5, [r4, #20]
 800a89a:	444e      	add	r6, r9
 800a89c:	eba5 0509 	sub.w	r5, r5, r9
 800a8a0:	6026      	str	r6, [r4, #0]
 800a8a2:	60a5      	str	r5, [r4, #8]
 800a8a4:	463e      	mov	r6, r7
 800a8a6:	42be      	cmp	r6, r7
 800a8a8:	d900      	bls.n	800a8ac <__ssputs_r+0x86>
 800a8aa:	463e      	mov	r6, r7
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	6820      	ldr	r0, [r4, #0]
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	f7ff fbdf 	bl	800a074 <memmove>
 800a8b6:	68a3      	ldr	r3, [r4, #8]
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	1b9b      	subs	r3, r3, r6
 800a8bc:	4432      	add	r2, r6
 800a8be:	60a3      	str	r3, [r4, #8]
 800a8c0:	6022      	str	r2, [r4, #0]
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	e7db      	b.n	800a87e <__ssputs_r+0x58>
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	f7ff ff87 	bl	800a7da <_realloc_r>
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1e1      	bne.n	800a896 <__ssputs_r+0x70>
 800a8d2:	6921      	ldr	r1, [r4, #16]
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	f7fd fb17 	bl	8007f08 <_free_r>
 800a8da:	e7c7      	b.n	800a86c <__ssputs_r+0x46>

0800a8dc <_svfiprintf_r>:
 800a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	4698      	mov	r8, r3
 800a8e2:	898b      	ldrh	r3, [r1, #12]
 800a8e4:	061b      	lsls	r3, r3, #24
 800a8e6:	b09d      	sub	sp, #116	; 0x74
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	d50e      	bpl.n	800a90e <_svfiprintf_r+0x32>
 800a8f0:	690b      	ldr	r3, [r1, #16]
 800a8f2:	b963      	cbnz	r3, 800a90e <_svfiprintf_r+0x32>
 800a8f4:	2140      	movs	r1, #64	; 0x40
 800a8f6:	f7fd fb57 	bl	8007fa8 <_malloc_r>
 800a8fa:	6028      	str	r0, [r5, #0]
 800a8fc:	6128      	str	r0, [r5, #16]
 800a8fe:	b920      	cbnz	r0, 800a90a <_svfiprintf_r+0x2e>
 800a900:	230c      	movs	r3, #12
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a908:	e0d1      	b.n	800aaae <_svfiprintf_r+0x1d2>
 800a90a:	2340      	movs	r3, #64	; 0x40
 800a90c:	616b      	str	r3, [r5, #20]
 800a90e:	2300      	movs	r3, #0
 800a910:	9309      	str	r3, [sp, #36]	; 0x24
 800a912:	2320      	movs	r3, #32
 800a914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a918:	f8cd 800c 	str.w	r8, [sp, #12]
 800a91c:	2330      	movs	r3, #48	; 0x30
 800a91e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aac8 <_svfiprintf_r+0x1ec>
 800a922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a926:	f04f 0901 	mov.w	r9, #1
 800a92a:	4623      	mov	r3, r4
 800a92c:	469a      	mov	sl, r3
 800a92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a932:	b10a      	cbz	r2, 800a938 <_svfiprintf_r+0x5c>
 800a934:	2a25      	cmp	r2, #37	; 0x25
 800a936:	d1f9      	bne.n	800a92c <_svfiprintf_r+0x50>
 800a938:	ebba 0b04 	subs.w	fp, sl, r4
 800a93c:	d00b      	beq.n	800a956 <_svfiprintf_r+0x7a>
 800a93e:	465b      	mov	r3, fp
 800a940:	4622      	mov	r2, r4
 800a942:	4629      	mov	r1, r5
 800a944:	4638      	mov	r0, r7
 800a946:	f7ff ff6e 	bl	800a826 <__ssputs_r>
 800a94a:	3001      	adds	r0, #1
 800a94c:	f000 80aa 	beq.w	800aaa4 <_svfiprintf_r+0x1c8>
 800a950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a952:	445a      	add	r2, fp
 800a954:	9209      	str	r2, [sp, #36]	; 0x24
 800a956:	f89a 3000 	ldrb.w	r3, [sl]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 80a2 	beq.w	800aaa4 <_svfiprintf_r+0x1c8>
 800a960:	2300      	movs	r3, #0
 800a962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a96a:	f10a 0a01 	add.w	sl, sl, #1
 800a96e:	9304      	str	r3, [sp, #16]
 800a970:	9307      	str	r3, [sp, #28]
 800a972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a976:	931a      	str	r3, [sp, #104]	; 0x68
 800a978:	4654      	mov	r4, sl
 800a97a:	2205      	movs	r2, #5
 800a97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a980:	4851      	ldr	r0, [pc, #324]	; (800aac8 <_svfiprintf_r+0x1ec>)
 800a982:	f7f5 fc55 	bl	8000230 <memchr>
 800a986:	9a04      	ldr	r2, [sp, #16]
 800a988:	b9d8      	cbnz	r0, 800a9c2 <_svfiprintf_r+0xe6>
 800a98a:	06d0      	lsls	r0, r2, #27
 800a98c:	bf44      	itt	mi
 800a98e:	2320      	movmi	r3, #32
 800a990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a994:	0711      	lsls	r1, r2, #28
 800a996:	bf44      	itt	mi
 800a998:	232b      	movmi	r3, #43	; 0x2b
 800a99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a99e:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a4:	d015      	beq.n	800a9d2 <_svfiprintf_r+0xf6>
 800a9a6:	9a07      	ldr	r2, [sp, #28]
 800a9a8:	4654      	mov	r4, sl
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	f04f 0c0a 	mov.w	ip, #10
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9b6:	3b30      	subs	r3, #48	; 0x30
 800a9b8:	2b09      	cmp	r3, #9
 800a9ba:	d94e      	bls.n	800aa5a <_svfiprintf_r+0x17e>
 800a9bc:	b1b0      	cbz	r0, 800a9ec <_svfiprintf_r+0x110>
 800a9be:	9207      	str	r2, [sp, #28]
 800a9c0:	e014      	b.n	800a9ec <_svfiprintf_r+0x110>
 800a9c2:	eba0 0308 	sub.w	r3, r0, r8
 800a9c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	9304      	str	r3, [sp, #16]
 800a9ce:	46a2      	mov	sl, r4
 800a9d0:	e7d2      	b.n	800a978 <_svfiprintf_r+0x9c>
 800a9d2:	9b03      	ldr	r3, [sp, #12]
 800a9d4:	1d19      	adds	r1, r3, #4
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	9103      	str	r1, [sp, #12]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfbb      	ittet	lt
 800a9de:	425b      	neglt	r3, r3
 800a9e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a9e4:	9307      	strge	r3, [sp, #28]
 800a9e6:	9307      	strlt	r3, [sp, #28]
 800a9e8:	bfb8      	it	lt
 800a9ea:	9204      	strlt	r2, [sp, #16]
 800a9ec:	7823      	ldrb	r3, [r4, #0]
 800a9ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f0:	d10c      	bne.n	800aa0c <_svfiprintf_r+0x130>
 800a9f2:	7863      	ldrb	r3, [r4, #1]
 800a9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f6:	d135      	bne.n	800aa64 <_svfiprintf_r+0x188>
 800a9f8:	9b03      	ldr	r3, [sp, #12]
 800a9fa:	1d1a      	adds	r2, r3, #4
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	9203      	str	r2, [sp, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bfb8      	it	lt
 800aa04:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa08:	3402      	adds	r4, #2
 800aa0a:	9305      	str	r3, [sp, #20]
 800aa0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aad8 <_svfiprintf_r+0x1fc>
 800aa10:	7821      	ldrb	r1, [r4, #0]
 800aa12:	2203      	movs	r2, #3
 800aa14:	4650      	mov	r0, sl
 800aa16:	f7f5 fc0b 	bl	8000230 <memchr>
 800aa1a:	b140      	cbz	r0, 800aa2e <_svfiprintf_r+0x152>
 800aa1c:	2340      	movs	r3, #64	; 0x40
 800aa1e:	eba0 000a 	sub.w	r0, r0, sl
 800aa22:	fa03 f000 	lsl.w	r0, r3, r0
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	4303      	orrs	r3, r0
 800aa2a:	3401      	adds	r4, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa32:	4826      	ldr	r0, [pc, #152]	; (800aacc <_svfiprintf_r+0x1f0>)
 800aa34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa38:	2206      	movs	r2, #6
 800aa3a:	f7f5 fbf9 	bl	8000230 <memchr>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d038      	beq.n	800aab4 <_svfiprintf_r+0x1d8>
 800aa42:	4b23      	ldr	r3, [pc, #140]	; (800aad0 <_svfiprintf_r+0x1f4>)
 800aa44:	bb1b      	cbnz	r3, 800aa8e <_svfiprintf_r+0x1b2>
 800aa46:	9b03      	ldr	r3, [sp, #12]
 800aa48:	3307      	adds	r3, #7
 800aa4a:	f023 0307 	bic.w	r3, r3, #7
 800aa4e:	3308      	adds	r3, #8
 800aa50:	9303      	str	r3, [sp, #12]
 800aa52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa54:	4433      	add	r3, r6
 800aa56:	9309      	str	r3, [sp, #36]	; 0x24
 800aa58:	e767      	b.n	800a92a <_svfiprintf_r+0x4e>
 800aa5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5e:	460c      	mov	r4, r1
 800aa60:	2001      	movs	r0, #1
 800aa62:	e7a5      	b.n	800a9b0 <_svfiprintf_r+0xd4>
 800aa64:	2300      	movs	r3, #0
 800aa66:	3401      	adds	r4, #1
 800aa68:	9305      	str	r3, [sp, #20]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	f04f 0c0a 	mov.w	ip, #10
 800aa70:	4620      	mov	r0, r4
 800aa72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa76:	3a30      	subs	r2, #48	; 0x30
 800aa78:	2a09      	cmp	r2, #9
 800aa7a:	d903      	bls.n	800aa84 <_svfiprintf_r+0x1a8>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0c5      	beq.n	800aa0c <_svfiprintf_r+0x130>
 800aa80:	9105      	str	r1, [sp, #20]
 800aa82:	e7c3      	b.n	800aa0c <_svfiprintf_r+0x130>
 800aa84:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa88:	4604      	mov	r4, r0
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e7f0      	b.n	800aa70 <_svfiprintf_r+0x194>
 800aa8e:	ab03      	add	r3, sp, #12
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	462a      	mov	r2, r5
 800aa94:	4b0f      	ldr	r3, [pc, #60]	; (800aad4 <_svfiprintf_r+0x1f8>)
 800aa96:	a904      	add	r1, sp, #16
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7fd fcd9 	bl	8008450 <_printf_float>
 800aa9e:	1c42      	adds	r2, r0, #1
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	d1d6      	bne.n	800aa52 <_svfiprintf_r+0x176>
 800aaa4:	89ab      	ldrh	r3, [r5, #12]
 800aaa6:	065b      	lsls	r3, r3, #25
 800aaa8:	f53f af2c 	bmi.w	800a904 <_svfiprintf_r+0x28>
 800aaac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaae:	b01d      	add	sp, #116	; 0x74
 800aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <_svfiprintf_r+0x1f8>)
 800aabc:	a904      	add	r1, sp, #16
 800aabe:	4638      	mov	r0, r7
 800aac0:	f7fd ff6a 	bl	8008998 <_printf_i>
 800aac4:	e7eb      	b.n	800aa9e <_svfiprintf_r+0x1c2>
 800aac6:	bf00      	nop
 800aac8:	0800b9f4 	.word	0x0800b9f4
 800aacc:	0800b9fe 	.word	0x0800b9fe
 800aad0:	08008451 	.word	0x08008451
 800aad4:	0800a827 	.word	0x0800a827
 800aad8:	0800b9fa 	.word	0x0800b9fa

0800aadc <_raise_r>:
 800aadc:	291f      	cmp	r1, #31
 800aade:	b538      	push	{r3, r4, r5, lr}
 800aae0:	4604      	mov	r4, r0
 800aae2:	460d      	mov	r5, r1
 800aae4:	d904      	bls.n	800aaf0 <_raise_r+0x14>
 800aae6:	2316      	movs	r3, #22
 800aae8:	6003      	str	r3, [r0, #0]
 800aaea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aaf2:	b112      	cbz	r2, 800aafa <_raise_r+0x1e>
 800aaf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaf8:	b94b      	cbnz	r3, 800ab0e <_raise_r+0x32>
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 f830 	bl	800ab60 <_getpid_r>
 800ab00:	462a      	mov	r2, r5
 800ab02:	4601      	mov	r1, r0
 800ab04:	4620      	mov	r0, r4
 800ab06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab0a:	f000 b817 	b.w	800ab3c <_kill_r>
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d00a      	beq.n	800ab28 <_raise_r+0x4c>
 800ab12:	1c59      	adds	r1, r3, #1
 800ab14:	d103      	bne.n	800ab1e <_raise_r+0x42>
 800ab16:	2316      	movs	r3, #22
 800ab18:	6003      	str	r3, [r0, #0]
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e7e7      	b.n	800aaee <_raise_r+0x12>
 800ab1e:	2400      	movs	r4, #0
 800ab20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab24:	4628      	mov	r0, r5
 800ab26:	4798      	blx	r3
 800ab28:	2000      	movs	r0, #0
 800ab2a:	e7e0      	b.n	800aaee <_raise_r+0x12>

0800ab2c <raise>:
 800ab2c:	4b02      	ldr	r3, [pc, #8]	; (800ab38 <raise+0xc>)
 800ab2e:	4601      	mov	r1, r0
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	f7ff bfd3 	b.w	800aadc <_raise_r>
 800ab36:	bf00      	nop
 800ab38:	2000000c 	.word	0x2000000c

0800ab3c <_kill_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d07      	ldr	r5, [pc, #28]	; (800ab5c <_kill_r+0x20>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	4611      	mov	r1, r2
 800ab48:	602b      	str	r3, [r5, #0]
 800ab4a:	f7f8 fb12 	bl	8003172 <_kill>
 800ab4e:	1c43      	adds	r3, r0, #1
 800ab50:	d102      	bne.n	800ab58 <_kill_r+0x1c>
 800ab52:	682b      	ldr	r3, [r5, #0]
 800ab54:	b103      	cbz	r3, 800ab58 <_kill_r+0x1c>
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	bd38      	pop	{r3, r4, r5, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20000c2c 	.word	0x20000c2c

0800ab60 <_getpid_r>:
 800ab60:	f7f8 baff 	b.w	8003162 <_getpid>

0800ab64 <__sread>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	460c      	mov	r4, r1
 800ab68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6c:	f000 f8ae 	bl	800accc <_read_r>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	bfab      	itete	ge
 800ab74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab76:	89a3      	ldrhlt	r3, [r4, #12]
 800ab78:	181b      	addge	r3, r3, r0
 800ab7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab7e:	bfac      	ite	ge
 800ab80:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab82:	81a3      	strhlt	r3, [r4, #12]
 800ab84:	bd10      	pop	{r4, pc}

0800ab86 <__swrite>:
 800ab86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8a:	461f      	mov	r7, r3
 800ab8c:	898b      	ldrh	r3, [r1, #12]
 800ab8e:	05db      	lsls	r3, r3, #23
 800ab90:	4605      	mov	r5, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4616      	mov	r6, r2
 800ab96:	d505      	bpl.n	800aba4 <__swrite+0x1e>
 800ab98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f000 f868 	bl	800ac74 <_lseek_r>
 800aba4:	89a3      	ldrh	r3, [r4, #12]
 800aba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abae:	81a3      	strh	r3, [r4, #12]
 800abb0:	4632      	mov	r2, r6
 800abb2:	463b      	mov	r3, r7
 800abb4:	4628      	mov	r0, r5
 800abb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abba:	f000 b817 	b.w	800abec <_write_r>

0800abbe <__sseek>:
 800abbe:	b510      	push	{r4, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc6:	f000 f855 	bl	800ac74 <_lseek_r>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	bf15      	itete	ne
 800abd0:	6560      	strne	r0, [r4, #84]	; 0x54
 800abd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abda:	81a3      	strheq	r3, [r4, #12]
 800abdc:	bf18      	it	ne
 800abde:	81a3      	strhne	r3, [r4, #12]
 800abe0:	bd10      	pop	{r4, pc}

0800abe2 <__sclose>:
 800abe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe6:	f000 b813 	b.w	800ac10 <_close_r>
	...

0800abec <_write_r>:
 800abec:	b538      	push	{r3, r4, r5, lr}
 800abee:	4d07      	ldr	r5, [pc, #28]	; (800ac0c <_write_r+0x20>)
 800abf0:	4604      	mov	r4, r0
 800abf2:	4608      	mov	r0, r1
 800abf4:	4611      	mov	r1, r2
 800abf6:	2200      	movs	r2, #0
 800abf8:	602a      	str	r2, [r5, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	f7f8 faf0 	bl	80031e0 <_write>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d102      	bne.n	800ac0a <_write_r+0x1e>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b103      	cbz	r3, 800ac0a <_write_r+0x1e>
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	20000c2c 	.word	0x20000c2c

0800ac10 <_close_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d06      	ldr	r5, [pc, #24]	; (800ac2c <_close_r+0x1c>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	f7f8 fafc 	bl	8003218 <_close>
 800ac20:	1c43      	adds	r3, r0, #1
 800ac22:	d102      	bne.n	800ac2a <_close_r+0x1a>
 800ac24:	682b      	ldr	r3, [r5, #0]
 800ac26:	b103      	cbz	r3, 800ac2a <_close_r+0x1a>
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	20000c2c 	.word	0x20000c2c

0800ac30 <_fstat_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	; (800ac50 <_fstat_r+0x20>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f7f8 faf7 	bl	8003230 <_fstat>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d102      	bne.n	800ac4c <_fstat_r+0x1c>
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	b103      	cbz	r3, 800ac4c <_fstat_r+0x1c>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000c2c 	.word	0x20000c2c

0800ac54 <_isatty_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4d06      	ldr	r5, [pc, #24]	; (800ac70 <_isatty_r+0x1c>)
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7f8 faf6 	bl	8003250 <_isatty>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_isatty_r+0x1a>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_isatty_r+0x1a>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	20000c2c 	.word	0x20000c2c

0800ac74 <_lseek_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	4d07      	ldr	r5, [pc, #28]	; (800ac94 <_lseek_r+0x20>)
 800ac78:	4604      	mov	r4, r0
 800ac7a:	4608      	mov	r0, r1
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	602a      	str	r2, [r5, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	f7f8 faef 	bl	8003266 <_lseek>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d102      	bne.n	800ac92 <_lseek_r+0x1e>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	b103      	cbz	r3, 800ac92 <_lseek_r+0x1e>
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	bd38      	pop	{r3, r4, r5, pc}
 800ac94:	20000c2c 	.word	0x20000c2c

0800ac98 <__ascii_mbtowc>:
 800ac98:	b082      	sub	sp, #8
 800ac9a:	b901      	cbnz	r1, 800ac9e <__ascii_mbtowc+0x6>
 800ac9c:	a901      	add	r1, sp, #4
 800ac9e:	b142      	cbz	r2, 800acb2 <__ascii_mbtowc+0x1a>
 800aca0:	b14b      	cbz	r3, 800acb6 <__ascii_mbtowc+0x1e>
 800aca2:	7813      	ldrb	r3, [r2, #0]
 800aca4:	600b      	str	r3, [r1, #0]
 800aca6:	7812      	ldrb	r2, [r2, #0]
 800aca8:	1e10      	subs	r0, r2, #0
 800acaa:	bf18      	it	ne
 800acac:	2001      	movne	r0, #1
 800acae:	b002      	add	sp, #8
 800acb0:	4770      	bx	lr
 800acb2:	4610      	mov	r0, r2
 800acb4:	e7fb      	b.n	800acae <__ascii_mbtowc+0x16>
 800acb6:	f06f 0001 	mvn.w	r0, #1
 800acba:	e7f8      	b.n	800acae <__ascii_mbtowc+0x16>

0800acbc <_malloc_usable_size_r>:
 800acbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acc0:	1f18      	subs	r0, r3, #4
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	bfbc      	itt	lt
 800acc6:	580b      	ldrlt	r3, [r1, r0]
 800acc8:	18c0      	addlt	r0, r0, r3
 800acca:	4770      	bx	lr

0800accc <_read_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_read_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f8 fa63 	bl	80031a6 <_read>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_read_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_read_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000c2c 	.word	0x20000c2c

0800acf0 <__ascii_wctomb>:
 800acf0:	b149      	cbz	r1, 800ad06 <__ascii_wctomb+0x16>
 800acf2:	2aff      	cmp	r2, #255	; 0xff
 800acf4:	bf85      	ittet	hi
 800acf6:	238a      	movhi	r3, #138	; 0x8a
 800acf8:	6003      	strhi	r3, [r0, #0]
 800acfa:	700a      	strbls	r2, [r1, #0]
 800acfc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad00:	bf98      	it	ls
 800ad02:	2001      	movls	r0, #1
 800ad04:	4770      	bx	lr
 800ad06:	4608      	mov	r0, r1
 800ad08:	4770      	bx	lr
	...

0800ad0c <_init>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	bf00      	nop
 800ad10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad12:	bc08      	pop	{r3}
 800ad14:	469e      	mov	lr, r3
 800ad16:	4770      	bx	lr

0800ad18 <_fini>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	bf00      	nop
 800ad1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1e:	bc08      	pop	{r3}
 800ad20:	469e      	mov	lr, r3
 800ad22:	4770      	bx	lr
