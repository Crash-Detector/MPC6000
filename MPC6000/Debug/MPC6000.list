
MPC6000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000787c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08007a40  08007a40  00017a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eac  08007eac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007eac  08007eac  00017eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb4  08007eb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb4  08007eb4  00017eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007ebc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200001e0  0800809c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  0800809c  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fb3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002363  00000000  00000000  000341c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00036528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000372c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aad2  00000000  00000000  00037f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111ba  00000000  00000000  00062a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101c35  00000000  00000000  00073c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00175851  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d4  00000000  00000000  001758a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007a24 	.word	0x08007a24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08007a24 	.word	0x08007a24

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MPC6000_config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void  MPC6000_config( void )
    {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
    uint8_t buf[10] = {0};
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	809a      	strh	r2, [r3, #4]

    // gyro config
    buf[0] = GYRO_CONFIG;
 8000ee4:	231b      	movs	r3, #27
 8000ee6:	713b      	strb	r3, [r7, #4]
    buf[1] = 0b00011000;
 8000ee8:	2318      	movs	r3, #24
 8000eea:	717b      	strb	r3, [r7, #5]
    // Sec   arg: I2C address + r/w bit
    // Third arg: pointer to transmit buffer.
    // 4th  arg: size of buffer determining number of data writes (in bytes).
    // 5th  arg:  Max time out delay set (in  milliseconds)

    ret =  HAL_I2C_Master_Transmit(hi2c_handler, MPU_SAD_W, &buf[0], 2, 1000);
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MPC6000_config+0x74>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	21d0      	movs	r1, #208	; 0xd0
 8000efc:	f001 f9c0 	bl	8002280 <HAL_I2C_Master_Transmit>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
    if ( ret != HAL_OK )
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <MPC6000_config+0x40>
        {
        printf( "Error Tx\r\rn" );
 8000f0a:	480f      	ldr	r0, [pc, #60]	; (8000f48 <MPC6000_config+0x78>)
 8000f0c:	f004 fd0a 	bl	8005924 <iprintf>
        } // end if

    // Acc config
    buf[0] = ACC_CONFIG;
 8000f10:	231c      	movs	r3, #28
 8000f12:	713b      	strb	r3, [r7, #4]
    buf[1] = 0b0011000;
 8000f14:	2318      	movs	r3, #24
 8000f16:	717b      	strb	r3, [r7, #5]
    ret =  HAL_I2C_Master_Transmit(hi2c_handler, MPU_SAD_W, &buf[0], 2, 1000);
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MPC6000_config+0x74>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	1d3a      	adds	r2, r7, #4
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2302      	movs	r3, #2
 8000f26:	21d0      	movs	r1, #208	; 0xd0
 8000f28:	f001 f9aa 	bl	8002280 <HAL_I2C_Master_Transmit>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	73fb      	strb	r3, [r7, #15]

    if ( ret != HAL_OK )
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d002      	beq.n	8000f3c <MPC6000_config+0x6c>
        {
        printf( "Error Tx\r\rn" );
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MPC6000_config+0x78>)
 8000f38:	f004 fcf4 	bl	8005924 <iprintf>
        } // end if
    } // end MPC6000_config( )
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	08007a40 	.word	0x08007a40

08000f4c <get_axis_val_base_wrapper>:

float get_axis_val_base_wrapper( const f_args in )
    {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	80b8      	strh	r0, [r7, #4]
    const uint8_t sub_addr = in.sub_addr ? in.sub_addr : MPU_SAD;
 8000f54:	793b      	ldrb	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <get_axis_val_base_wrapper+0x12>
 8000f5a:	793b      	ldrb	r3, [r7, #4]
 8000f5c:	e000      	b.n	8000f60 <get_axis_val_base_wrapper+0x14>
 8000f5e:	2368      	movs	r3, #104	; 0x68
 8000f60:	73fb      	strb	r3, [r7, #15]
    const uint8_t axis_sub_addr = in.axis_addr ? in.axis_addr : ACC_X_OUT;
 8000f62:	797b      	ldrb	r3, [r7, #5]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <get_axis_val_base_wrapper+0x20>
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	e000      	b.n	8000f6e <get_axis_val_base_wrapper+0x22>
 8000f6c:	233b      	movs	r3, #59	; 0x3b
 8000f6e:	73bb      	strb	r3, [r7, #14]

    return get_axis_val_base( sub_addr, axis_sub_addr );
 8000f70:	7bba      	ldrb	r2, [r7, #14]
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f807 	bl	8000f8a <get_axis_val_base>
 8000f7c:	eef0 7a40 	vmov.f32	s15, s0
    } // end get_axis_val_base_wrapper( )
 8000f80:	eeb0 0a67 	vmov.f32	s0, s15
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <get_axis_val_base>:


float get_axis_val_base( const uint8_t sub_addr, const uint8_t axis_sub_addr )
    {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	460a      	mov	r2, r1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	4613      	mov	r3, r2
 8000f98:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[10] = { 0 };
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	809a      	strh	r2, [r3, #4]
    buf[0] = sub_addr << 1;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	733b      	strb	r3, [r7, #12]
    buf[1] = axis_sub_addr; // This will be 0x3b (for x-axis)
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	737b      	strb	r3, [r7, #13]

    read_I2C_val( sub_addr, axis_sub_addr, buf, 2 );
 8000fb4:	f107 020c 	add.w	r2, r7, #12
 8000fb8:	79b9      	ldrb	r1, [r7, #6]
 8000fba:	79f8      	ldrb	r0, [r7, #7]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f000 f80f 	bl	8000fe0 <read_I2C_val>

    // The MSB is in the first byte, LSB second.
    uint16_t axis_val = buf[ 0 ] | buf[ 1 ]; 
 8000fc2:	7b3a      	ldrb	r2, [r7, #12]
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	82fb      	strh	r3, [r7, #22]

    return (float)axis_val;
 8000fcc:	8afb      	ldrh	r3, [r7, #22]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    } // end get_axis_val_base( )
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <read_I2C_val>:

void read_I2C_val( const uint8_t sub_addr, const uint8_t reg_addr, int8_t *const buff, const uint32_t buff_size )
    {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60ba      	str	r2, [r7, #8]
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	73bb      	strb	r3, [r7, #14]
    const uint8_t sub_addr_w = sub_addr << 1; // Add in 1 (to indicate reading). 
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
    const uint8_t sub_addr_r = sub_addr << 1 | 1; // Add in 1 (to indicate reading). 
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	b25b      	sxtb	r3, r3
 8001004:	75bb      	strb	r3, [r7, #22]
    const uint8_t reg_addr_c = reg_addr; // Add in 1 (to indicate reading). 
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	753b      	strb	r3, [r7, #20]
    HAL_StatusTypeDef ret;   

    // First tell slave the subaddress (to read from) -> (write to it)
    ret = HAL_I2C_Master_Transmit( hi2c_handler, sub_addr_w, &reg_addr_c, 1, 1000 );
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <read_I2C_val+0x84>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	b299      	uxth	r1, r3
 8001012:	f107 0214 	add.w	r2, r7, #20
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	f001 f92f 	bl	8002280 <HAL_I2C_Master_Transmit>
 8001022:	4603      	mov	r3, r0
 8001024:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK )
 8001026:	7d7b      	ldrb	r3, [r7, #21]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <read_I2C_val+0x52>
        {
        printf( "Error Tx\r\rn" );
 800102c:	480e      	ldr	r0, [pc, #56]	; (8001068 <read_I2C_val+0x88>)
 800102e:	f004 fc79 	bl	8005924 <iprintf>
        } // end if

    // Now read buff_size bytes from it.
    ret = HAL_I2C_Master_Transmit( hi2c_handler, sub_addr_r, buff, buff_size, 1000 );
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <read_I2C_val+0x84>)
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	b299      	uxth	r1, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	b29b      	uxth	r3, r3
 800103e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001042:	9200      	str	r2, [sp, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	f001 f91b 	bl	8002280 <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK )
 800104e:	7d7b      	ldrb	r3, [r7, #21]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <read_I2C_val+0x7c>
        {
        printf( "Error Tx\r\rn" );
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <read_I2C_val+0x88>)
 8001056:	f004 fc65 	bl	8005924 <iprintf>
        } // end if

    return;
 800105a:	bf00      	nop
 800105c:	bf00      	nop
    } // end read_I2C_val( )
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	08007a40 	.word	0x08007a40

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001072:	f000 fd64 	bl	8001b3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 f829 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f000 f8f7 	bl	800126c <MX_GPIO_Init>
  MX_I2C3_Init();
 800107e:	f000 f86b 	bl	8001158 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001082:	f000 f8a7 	bl	80011d4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MPC6000_config( );
 8001086:	f7ff ff23 	bl	8000ed0 <MPC6000_config>
  uint8_t buf[10] = {0};
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	809a      	strh	r2, [r3, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Read from x-axis:
    const float x_axis_raw = get_axis_val( MPU_SAD, ACC_X_OUT );
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <main+0x58>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	80bb      	strh	r3, [r7, #4]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff54 	bl	8000f4c <get_axis_val_base_wrapper>
 80010a4:	ed87 0a05 	vstr	s0, [r7, #20]
    printf( "%f\r\n", x_axis_raw );
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff fa65 	bl	8000578 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <main+0x5c>)
 80010b4:	f004 fc36 	bl	8005924 <iprintf>
    HAL_Delay(500);
 80010b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010bc:	f000 fdb4 	bl	8001c28 <HAL_Delay>
  {
 80010c0:	e7ea      	b.n	8001098 <main+0x2c>
 80010c2:	bf00      	nop
 80010c4:	08007a54 	.word	0x08007a54
 80010c8:	08007a4c 	.word	0x08007a4c

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b096      	sub	sp, #88	; 0x58
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2244      	movs	r2, #68	; 0x44
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 ffb0 	bl	8005040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010f2:	f001 fc6f 	bl	80029d4 <HAL_PWREx_ControlVoltageScaling>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010fc:	f000 fb0c 	bl	8001718 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001100:	2310      	movs	r3, #16
 8001102:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800110c:	2360      	movs	r3, #96	; 0x60
 800110e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001110:	2300      	movs	r3, #0
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fd0f 	bl	8002b3c <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001124:	f000 faf8 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f002 f921 	bl	8003388 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800114c:	f000 fae4 	bl	8001718 <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3758      	adds	r7, #88	; 0x58
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_I2C3_Init+0x74>)
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <MX_I2C3_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_I2C3_Init+0x74>)
 8001164:	f640 6214 	movw	r2, #3604	; 0xe14
 8001168:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_I2C3_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_I2C3_Init+0x74>)
 8001172:	2201      	movs	r2, #1
 8001174:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_I2C3_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_I2C3_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_I2C3_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_I2C3_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_I2C3_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_I2C3_Init+0x74>)
 8001196:	f000 ffe3 	bl	8002160 <HAL_I2C_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011a0:	f000 faba 	bl	8001718 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <MX_I2C3_Init+0x74>)
 80011a8:	f001 fb5c 	bl	8002864 <HAL_I2CEx_ConfigAnalogFilter>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80011b2:	f000 fab1 	bl	8001718 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_I2C3_Init+0x74>)
 80011ba:	f001 fb9e 	bl	80028fa <HAL_I2CEx_ConfigDigitalFilter>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011c4:	f000 faa8 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000208 	.word	0x20000208
 80011d0:	40005c00 	.word	0x40005c00

080011d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 80011da:	4a23      	ldr	r2, [pc, #140]	; (8001268 <MX_LPUART1_UART_Init+0x94>)
 80011dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 800121e:	f003 f87d 	bl	800431c <HAL_UART_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001228:	f000 fa76 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800122c:	2100      	movs	r1, #0
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001230:	f003 fe12 	bl	8004e58 <HAL_UARTEx_SetTxFifoThreshold>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800123a:	f000 fa6d 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	4808      	ldr	r0, [pc, #32]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001242:	f003 fe47 	bl	8004ed4 <HAL_UARTEx_SetRxFifoThreshold>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800124c:	f000 fa64 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <MX_LPUART1_UART_Init+0x90>)
 8001252:	f003 fdc8 	bl	8004de6 <HAL_UARTEx_DisableFifoMode>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800125c:	f000 fa5c 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000254 	.word	0x20000254
 8001268:	40008000 	.word	0x40008000

0800126c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4bb2      	ldr	r3, [pc, #712]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4ab1      	ldr	r2, [pc, #708]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4baf      	ldr	r3, [pc, #700]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4bac      	ldr	r3, [pc, #688]	; (800154c <MX_GPIO_Init+0x2e0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4aab      	ldr	r2, [pc, #684]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4ba9      	ldr	r3, [pc, #676]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b2:	4ba6      	ldr	r3, [pc, #664]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4aa5      	ldr	r2, [pc, #660]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4ba3      	ldr	r3, [pc, #652]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	4ba0      	ldr	r3, [pc, #640]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	4a9f      	ldr	r2, [pc, #636]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b9a      	ldr	r3, [pc, #616]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a99      	ldr	r2, [pc, #612]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b97      	ldr	r3, [pc, #604]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b94      	ldr	r3, [pc, #592]	; (800154c <MX_GPIO_Init+0x2e0>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a93      	ldr	r2, [pc, #588]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b91      	ldr	r3, [pc, #580]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	4b8e      	ldr	r3, [pc, #568]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	4a8d      	ldr	r2, [pc, #564]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131e:	4b8b      	ldr	r3, [pc, #556]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132a:	4b88      	ldr	r3, [pc, #544]	; (800154c <MX_GPIO_Init+0x2e0>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a87      	ldr	r2, [pc, #540]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b85      	ldr	r3, [pc, #532]	; (800154c <MX_GPIO_Init+0x2e0>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001342:	f001 fbeb 	bl	8002b1c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001346:	230c      	movs	r3, #12
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001356:	230d      	movs	r3, #13
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	487b      	ldr	r0, [pc, #492]	; (8001550 <MX_GPIO_Init+0x2e4>)
 8001362:	f000 fd6b 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001366:	2307      	movs	r3, #7
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001376:	2304      	movs	r3, #4
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4874      	ldr	r0, [pc, #464]	; (8001554 <MX_GPIO_Init+0x2e8>)
 8001382:	f000 fd5b 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001396:	230d      	movs	r3, #13
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	486c      	ldr	r0, [pc, #432]	; (8001554 <MX_GPIO_Init+0x2e8>)
 80013a2:	f000 fd4b 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013a6:	233c      	movs	r3, #60	; 0x3c
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013aa:	230b      	movs	r3, #11
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4619      	mov	r1, r3
 80013b8:	4867      	ldr	r0, [pc, #412]	; (8001558 <MX_GPIO_Init+0x2ec>)
 80013ba:	f000 fd3f 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013be:	2301      	movs	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ce:	2301      	movs	r3, #1
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f000 fd2e 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80013e0:	230a      	movs	r3, #10
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013e4:	230b      	movs	r3, #11
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f000 fd21 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013fa:	23f0      	movs	r3, #240	; 0xf0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140a:	2305      	movs	r3, #5
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f000 fd10 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141c:	2301      	movs	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800142c:	2302      	movs	r3, #2
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4849      	ldr	r0, [pc, #292]	; (800155c <MX_GPIO_Init+0x2f0>)
 8001438:	f000 fd00 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800143c:	2302      	movs	r3, #2
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001440:	230b      	movs	r3, #11
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4843      	ldr	r0, [pc, #268]	; (800155c <MX_GPIO_Init+0x2f0>)
 8001450:	f000 fcf4 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001454:	2344      	movs	r3, #68	; 0x44
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001458:	2303      	movs	r3, #3
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	483d      	ldr	r0, [pc, #244]	; (800155c <MX_GPIO_Init+0x2f0>)
 8001468:	f000 fce8 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800146c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800147e:	2301      	movs	r3, #1
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	4831      	ldr	r0, [pc, #196]	; (8001550 <MX_GPIO_Init+0x2e4>)
 800148a:	f000 fcd7 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800148e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80014a0:	2303      	movs	r3, #3
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	4829      	ldr	r0, [pc, #164]	; (8001550 <MX_GPIO_Init+0x2e4>)
 80014ac:	f000 fcc6 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014c2:	2301      	movs	r3, #1
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <MX_GPIO_Init+0x2f0>)
 80014ce:	f000 fcb5 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80014d2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80014e4:	230d      	movs	r3, #13
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	481b      	ldr	r0, [pc, #108]	; (800155c <MX_GPIO_Init+0x2f0>)
 80014f0:	f000 fca4 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001506:	230e      	movs	r3, #14
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4812      	ldr	r0, [pc, #72]	; (800155c <MX_GPIO_Init+0x2f0>)
 8001512:	f000 fc93 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001516:	f44f 7340 	mov.w	r3, #768	; 0x300
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001528:	2307      	movs	r3, #7
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_GPIO_Init+0x2f4>)
 8001534:	f000 fc82 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001538:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	e00c      	b.n	8001564 <MX_GPIO_Init+0x2f8>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	48001000 	.word	0x48001000
 8001554:	48001400 	.word	0x48001400
 8001558:	48000800 	.word	0x48000800
 800155c:	48000400 	.word	0x48000400
 8001560:	48000c00 	.word	0x48000c00
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001566:	2302      	movs	r3, #2
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	485c      	ldr	r0, [pc, #368]	; (80016e4 <MX_GPIO_Init+0x478>)
 8001572:	f000 fc63 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001586:	230d      	movs	r3, #13
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4855      	ldr	r0, [pc, #340]	; (80016e8 <MX_GPIO_Init+0x47c>)
 8001592:	f000 fc53 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015a6:	2302      	movs	r3, #2
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	484d      	ldr	r0, [pc, #308]	; (80016e8 <MX_GPIO_Init+0x47c>)
 80015b2:	f000 fc43 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015c8:	230c      	movs	r3, #12
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4845      	ldr	r0, [pc, #276]	; (80016e8 <MX_GPIO_Init+0x47c>)
 80015d4:	f000 fc32 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80015d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ea:	230a      	movs	r3, #10
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f8:	f000 fc20 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f000 fc12 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001628:	2309      	movs	r3, #9
 800162a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	482c      	ldr	r0, [pc, #176]	; (80016e4 <MX_GPIO_Init+0x478>)
 8001634:	f000 fc02 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001638:	2304      	movs	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001648:	230c      	movs	r3, #12
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4824      	ldr	r0, [pc, #144]	; (80016e4 <MX_GPIO_Init+0x478>)
 8001654:	f000 fbf2 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001658:	2378      	movs	r3, #120	; 0x78
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001668:	2307      	movs	r3, #7
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	481c      	ldr	r0, [pc, #112]	; (80016e4 <MX_GPIO_Init+0x478>)
 8001674:	f000 fbe2 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001678:	2338      	movs	r3, #56	; 0x38
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001688:	2306      	movs	r3, #6
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	4816      	ldr	r0, [pc, #88]	; (80016ec <MX_GPIO_Init+0x480>)
 8001694:	f000 fbd2 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001698:	f44f 7340 	mov.w	r3, #768	; 0x300
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169e:	2312      	movs	r3, #18
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016aa:	2304      	movs	r3, #4
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b2:	4619      	mov	r1, r3
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_GPIO_Init+0x480>)
 80016b6:	f000 fbc1 	bl	8001e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ba:	2301      	movs	r3, #1
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ca:	2302      	movs	r3, #2
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <MX_GPIO_Init+0x484>)
 80016d6:	f000 fbb1 	bl	8001e3c <HAL_GPIO_Init>

}
 80016da:	bf00      	nop
 80016dc:	3738      	adds	r7, #56	; 0x38
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	48000c00 	.word	0x48000c00
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48001000 	.word	0x48001000

080016f4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80016fc:	1d39      	adds	r1, r7, #4
 80016fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001702:	2201      	movs	r2, #1
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <__io_putchar+0x20>)
 8001706:	f002 fe59 	bl	80043bc <HAL_UART_Transmit>
  return ch;
 800170a:	687b      	ldr	r3, [r7, #4]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000254 	.word	0x20000254

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6613      	str	r3, [r2, #96]	; 0x60
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_MspInit+0x44>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_MspInit+0x44>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6593      	str	r3, [r2, #88]	; 0x58
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_MspInit+0x44>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ae      	sub	sp, #184	; 0xb8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2294      	movs	r2, #148	; 0x94
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f003 fc57 	bl	8005040 <memset>
  if(hi2c->Instance==I2C3)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_I2C_MspInit+0xb0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d13b      	bne.n	8001814 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800179c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 f89e 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017b6:	f7ff ffaf 	bl	8001718 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017d2:	2303      	movs	r3, #3
 80017d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ea:	2304      	movs	r3, #4
 80017ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_I2C_MspInit+0xb8>)
 80017f8:	f000 fb20 	bl	8001e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 8001802:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	37b8      	adds	r7, #184	; 0xb8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40005c00 	.word	0x40005c00
 8001820:	40021000 	.word	0x40021000
 8001824:	48000800 	.word	0x48000800

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0ae      	sub	sp, #184	; 0xb8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2294      	movs	r2, #148	; 0x94
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fbf9 	bl	8005040 <memset>
  if(huart->Instance==LPUART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a22      	ldr	r2, [pc, #136]	; (80018dc <HAL_UART_MspInit+0xb4>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d13d      	bne.n	80018d4 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001858:	2320      	movs	r3, #32
 800185a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800185c:	2300      	movs	r3, #0
 800185e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4618      	mov	r0, r3
 8001866:	f002 f841 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001870:	f7ff ff52 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_UART_MspInit+0xb8>)
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_UART_MspInit+0xb8>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_UART_MspInit+0xb8>)
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_UART_MspInit+0xb8>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <HAL_UART_MspInit+0xb8>)
 8001892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_UART_MspInit+0xb8>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80018a4:	f001 f93a 	bl	8002b1c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80018c2:	2308      	movs	r3, #8
 80018c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_UART_MspInit+0xbc>)
 80018d0:	f000 fab4 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80018d4:	bf00      	nop
 80018d6:	37b8      	adds	r7, #184	; 0xb8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40008000 	.word	0x40008000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001800 	.word	0x48001800

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <NMI_Handler+0x4>

080018ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <MemManage_Handler+0x4>

080018fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fe:	e7fe      	b.n	80018fe <BusFault_Handler+0x4>

08001900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f000 f958 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <_getpid>:
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
 8001940:	2301      	movs	r3, #1
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	f003 fb49 	bl	8004fec <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
 800197e:	e7fe      	b.n	800197e <_exit+0x12>

08001980 <_read>:
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <_read+0x28>
 8001992:	f3af 8000 	nop.w
 8001996:	4601      	mov	r1, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf0      	blt.n	8001992 <_read+0x12>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_write>:
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e009      	b.n	80019e0 <_write+0x26>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe8d 	bl	80016f4 <__io_putchar>
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	dbf1      	blt.n	80019cc <_write+0x12>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_close>:
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <_fstat>:
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_isatty>:
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	2301      	movs	r3, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_lseek>:
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_sbrk>:
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
 8001a8c:	f003 faae 	bl	8004fec <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200a0000 	.word	0x200a0000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	200001fc 	.word	0x200001fc
 8001ac4:	200002f8 	.word	0x200002f8

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001af0:	f7ff ffea 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001af6:	490d      	ldr	r1, [pc, #52]	; (8001b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <LoopForever+0xe>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001afc:	e002      	b.n	8001b04 <LoopCopyDataInit>

08001afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b02:	3304      	adds	r3, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b08:	d3f9      	bcc.n	8001afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b0c:	4c0a      	ldr	r4, [pc, #40]	; (8001b38 <LoopForever+0x16>)
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b10:	e001      	b.n	8001b16 <LoopFillZerobss>

08001b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b14:	3204      	adds	r2, #4

08001b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b18:	d3fb      	bcc.n	8001b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f003 fa6d 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b1e:	f7ff faa5 	bl	800106c <main>

08001b22 <LoopForever>:

LoopForever:
    b LoopForever
 8001b22:	e7fe      	b.n	8001b22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b30:	08007ebc 	.word	0x08007ebc
  ldr r2, =_sbss
 8001b34:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b38:	200002f8 	.word	0x200002f8

08001b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_IRQHandler>

08001b3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 f943 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f80e 	bl	8001b70 <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	e001      	b.n	8001b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b60:	f7ff fde0 	bl	8001724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b64:	79fb      	ldrb	r3, [r7, #7]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_InitTick+0x6c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_InitTick+0x70>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_InitTick+0x6c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f941 	bl	8001e22 <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d809      	bhi.n	8001bc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bb4:	f000 f919 	bl	8001dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <HAL_InitTick+0x74>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e004      	b.n	8001bd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	e001      	b.n	8001bd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000004 	.word	0x20000004
 8001be4:	20000008 	.word	0x20000008

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	200002e4 	.word	0x200002e4

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	200002e4 	.word	0x200002e4

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000000c 	.word	0x2000000c

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff47 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5c 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	e166      	b.n	800211a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8158 	beq.w	8002114 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_GPIO_Init+0x40>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0201 	and.w	r2, r3, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d017      	beq.n	8001f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d123      	bne.n	8001f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	08da      	lsrs	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3208      	adds	r2, #8
 8001f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	6939      	ldr	r1, [r7, #16]
 8001f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0203 	and.w	r2, r3, #3
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80b2 	beq.w	8002114 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6613      	str	r3, [r2, #96]	; 0x60
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_GPIO_Init+0x2fc>)
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc8:	4a5c      	ldr	r2, [pc, #368]	; (800213c <HAL_GPIO_Init+0x300>)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff2:	d02b      	beq.n	800204c <HAL_GPIO_Init+0x210>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a52      	ldr	r2, [pc, #328]	; (8002140 <HAL_GPIO_Init+0x304>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d025      	beq.n	8002048 <HAL_GPIO_Init+0x20c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x308>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01f      	beq.n	8002044 <HAL_GPIO_Init+0x208>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x30c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d019      	beq.n	8002040 <HAL_GPIO_Init+0x204>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x310>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <HAL_GPIO_Init+0x200>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_GPIO_Init+0x314>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00d      	beq.n	8002038 <HAL_GPIO_Init+0x1fc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_GPIO_Init+0x318>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <HAL_GPIO_Init+0x1f8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x31c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_GPIO_Init+0x1f4>
 800202c:	2307      	movs	r3, #7
 800202e:	e00e      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002030:	2308      	movs	r3, #8
 8002032:	e00c      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002034:	2306      	movs	r3, #6
 8002036:	e00a      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002038:	2305      	movs	r3, #5
 800203a:	e008      	b.n	800204e <HAL_GPIO_Init+0x212>
 800203c:	2304      	movs	r3, #4
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002040:	2303      	movs	r3, #3
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x212>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x212>
 800204c:	2300      	movs	r3, #0
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800205e:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_GPIO_Init+0x300>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <HAL_GPIO_Init+0x320>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <HAL_GPIO_Init+0x320>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_GPIO_Init+0x320>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ba:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_GPIO_Init+0x320>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_GPIO_Init+0x320>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4013      	ands	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_GPIO_Init+0x320>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	; (800215c <HAL_GPIO_Init+0x320>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_GPIO_Init+0x320>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f ae91 	bne.w	8001e4c <HAL_GPIO_Init+0x10>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	48000400 	.word	0x48000400
 8002144:	48000800 	.word	0x48000800
 8002148:	48000c00 	.word	0x48000c00
 800214c:	48001000 	.word	0x48001000
 8002150:	48001400 	.word	0x48001400
 8002154:	48001800 	.word	0x48001800
 8002158:	48001c00 	.word	0x48001c00
 800215c:	40010400 	.word	0x40010400

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e081      	b.n	8002276 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff faf0 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e006      	b.n	80021e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d104      	bne.n	80021fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	f040 80da 	bne.w	8002456 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Transmit+0x30>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0d3      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022b8:	f7ff fcaa 	bl	8001c10 <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2319      	movs	r3, #25
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f8f0 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0be      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2221      	movs	r2, #33	; 0x21
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2210      	movs	r2, #16
 80022e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	893a      	ldrh	r2, [r7, #8]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d90e      	bls.n	800232a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_I2C_Master_Transmit+0x1e0>)
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa6c 	bl	8002800 <I2C_TransferConfig>
 8002328:	e06c      	b.n	8002404 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_I2C_Master_Transmit+0x1e0>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa5b 	bl	8002800 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800234a:	e05b      	b.n	8002404 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	6a39      	ldr	r1, [r7, #32]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f8ed 	bl	8002530 <I2C_WaitOnTXISFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e07b      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d034      	beq.n	8002404 <HAL_I2C_Master_Transmit+0x184>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d130      	bne.n	8002404 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f87f 	bl	80024b0 <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e04d      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d90e      	bls.n	80023e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	22ff      	movs	r2, #255	; 0xff
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	8979      	ldrh	r1, [r7, #10]
 80023d4:	2300      	movs	r3, #0
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fa0f 	bl	8002800 <I2C_TransferConfig>
 80023e2:	e00f      	b.n	8002404 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	8979      	ldrh	r1, [r7, #10]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f9fe 	bl	8002800 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d19e      	bne.n	800234c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	6a39      	ldr	r1, [r7, #32]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8cc 	bl	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e01a      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_I2C_Master_Transmit+0x1e4>)
 8002436:	400b      	ands	r3, r1
 8002438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	80002000 	.word	0x80002000
 8002464:	fe00e800 	.word	0xfe00e800

08002468 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d103      	bne.n	8002486 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b01      	cmp	r3, #1
 8002492:	d007      	beq.n	80024a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	619a      	str	r2, [r3, #24]
  }
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024c0:	e022      	b.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c8:	d01e      	beq.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7ff fba1 	bl	8001c10 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d113      	bne.n	8002508 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f043 0220 	orr.w	r2, r3, #32
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00f      	b.n	8002528 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4013      	ands	r3, r2
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	461a      	mov	r2, r3
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	429a      	cmp	r2, r3
 8002524:	d0cd      	beq.n	80024c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800253c:	e02c      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68b9      	ldr	r1, [r7, #8]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f870 	bl	8002628 <I2C_IsErrorOccurred>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02a      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002558:	d01e      	beq.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7ff fb59 	bl	8001c10 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d113      	bne.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f043 0220 	orr.w	r2, r3, #32
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d1cb      	bne.n	800253e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025bc:	e028      	b.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f830 	bl	8002628 <I2C_IsErrorOccurred>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e026      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7ff fb1d 	bl	8001c10 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e007      	b.n	8002620 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d1cf      	bne.n	80025be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d075      	beq.n	8002740 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800265c:	e056      	b.n	800270c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d052      	beq.n	800270c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7ff fad3 	bl	8001c10 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_IsErrorOccurred+0x54>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d147      	bne.n	800270c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800269e:	d12e      	bne.n	80026fe <I2C_IsErrorOccurred+0xd6>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a6:	d02a      	beq.n	80026fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d027      	beq.n	80026fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026be:	f7ff faa7 	bl	8001c10 <HAL_GetTick>
 80026c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c4:	e01b      	b.n	80026fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c6:	f7ff faa3 	bl	8001c10 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b19      	cmp	r3, #25
 80026d2:	d914      	bls.n	80026fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b20      	cmp	r3, #32
 800270a:	d1dc      	bne.n	80026c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d003      	beq.n	8002722 <I2C_IsErrorOccurred+0xfa>
 800271a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800271e:	2b00      	cmp	r3, #0
 8002720:	d09d      	beq.n	800265e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2220      	movs	r2, #32
 8002730:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002762:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00b      	beq.n	800278c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01c      	beq.n	80027f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f7ff fe56 	bl	8002468 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <I2C_IsErrorOccurred+0x1d4>)
 80027c8:	400b      	ands	r3, r1
 80027ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	fe00e800 	.word	0xfe00e800

08002800 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607b      	str	r3, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	817b      	strh	r3, [r7, #10]
 800280e:	4613      	mov	r3, r2
 8002810:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002818:	7a7b      	ldrb	r3, [r7, #9]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002820:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	4313      	orrs	r3, r2
 800282a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	0d5b      	lsrs	r3, r3, #21
 800283a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <I2C_TransferConfig+0x60>)
 8002840:	430b      	orrs	r3, r1
 8002842:	43db      	mvns	r3, r3
 8002844:	ea02 0103 	and.w	r1, r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	03ff63ff 	.word	0x03ff63ff

08002864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b20      	cmp	r3, #32
 8002878:	d138      	bne.n	80028ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002884:	2302      	movs	r3, #2
 8002886:	e032      	b.n	80028ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	; 0x24
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e000      	b.n	80028ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ec:	2302      	movs	r3, #2
  }
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b20      	cmp	r3, #32
 800290e:	d139      	bne.n	8002984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800291a:	2302      	movs	r3, #2
 800291c:	e033      	b.n	8002986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2224      	movs	r2, #36	; 0x24
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800294c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a4:	d102      	bne.n	80029ac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80029a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029aa:	e00b      	b.n	80029c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80029ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ba:	d102      	bne.n	80029c2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80029bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c0:	e000      	b.n	80029c4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80029c2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40007000 	.word	0x40007000

080029d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d141      	bne.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029e2:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ee:	d131      	bne.n	8002a54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029f0:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f6:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a00:	4b43      	ldr	r3, [pc, #268]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a08:	4a41      	ldr	r2, [pc, #260]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a10:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2232      	movs	r2, #50	; 0x32
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	4a3f      	ldr	r2, [pc, #252]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	0c9b      	lsrs	r3, r3, #18
 8002a22:	3301      	adds	r3, #1
 8002a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a26:	e002      	b.n	8002a2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d102      	bne.n	8002a42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f2      	bne.n	8002a28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a42:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4e:	d158      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e057      	b.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a54:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a64:	e04d      	b.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a6c:	d141      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a6e:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	d131      	bne.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a7c:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	4a23      	ldr	r2, [pc, #140]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a94:	4a1e      	ldr	r2, [pc, #120]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2232      	movs	r2, #50	; 0x32
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab2:	e002      	b.n	8002aba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac6:	d102      	bne.n	8002ace <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f2      	bne.n	8002ab4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d112      	bne.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e011      	b.n	8002b04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002af0:	e007      	b.n	8002b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b00:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40007000 	.word	0x40007000
 8002b14:	20000004 	.word	0x20000004
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b2a:	6053      	str	r3, [r2, #4]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40007000 	.word	0x40007000

08002b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f000 bc16 	b.w	800337c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b50:	4ba0      	ldr	r3, [pc, #640]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5a:	4b9e      	ldr	r3, [pc, #632]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80e4 	beq.w	8002d3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_RCC_OscConfig+0x4c>
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	f040 808b 	bne.w	8002c96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	f040 8087 	bne.w	8002c96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b88:	4b92      	ldr	r3, [pc, #584]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x64>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e3ed      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	4b8b      	ldr	r3, [pc, #556]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_RCC_OscConfig+0x7e>
 8002bb0:	4b88      	ldr	r3, [pc, #544]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb8:	e005      	b.n	8002bc6 <HAL_RCC_OscConfig+0x8a>
 8002bba:	4b86      	ldr	r3, [pc, #536]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d223      	bcs.n	8002c12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fdca 	bl	8003768 <RCC_SetFlashLatencyFromMSIRange>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e3ce      	b.n	800337c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bde:	4b7d      	ldr	r3, [pc, #500]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7c      	ldr	r2, [pc, #496]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b7a      	ldr	r3, [pc, #488]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4977      	ldr	r1, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfc:	4b75      	ldr	r3, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	4972      	ldr	r1, [pc, #456]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
 8002c10:	e025      	b.n	8002c5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c12:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6f      	ldr	r2, [pc, #444]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	496a      	ldr	r1, [pc, #424]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c30:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	4965      	ldr	r1, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fd8a 	bl	8003768 <RCC_SetFlashLatencyFromMSIRange>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e38e      	b.n	800337c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c5e:	f000 fcbf 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	495a      	ldr	r1, [pc, #360]	; (8002dd8 <HAL_RCC_OscConfig+0x29c>)
 8002c70:	5ccb      	ldrb	r3, [r1, r3]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_RCC_OscConfig+0x2a0>)
 8002c7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c7e:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <HAL_RCC_OscConfig+0x2a4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe ff74 	bl	8001b70 <HAL_InitTick>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d052      	beq.n	8002d38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	e372      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d032      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002caa:	f7fe ffb1 	bl	8001c10 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cb2:	f7fe ffad 	bl	8001c10 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e35b      	b.n	800337c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd0:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3f      	ldr	r2, [pc, #252]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cd6:	f043 0308 	orr.w	r3, r3, #8
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	493a      	ldr	r1, [pc, #232]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	4935      	ldr	r1, [pc, #212]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
 8002d02:	e01a      	b.n	8002d3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d10:	f7fe ff7e 	bl	8001c10 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d18:	f7fe ff7a 	bl	8001c10 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e328      	b.n	800337c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1dc>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d073      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x21c>
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d10e      	bne.n	8002d70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d10b      	bne.n	8002d70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d063      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d15f      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e305      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d106      	bne.n	8002d88 <HAL_RCC_OscConfig+0x24c>
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x288>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x270>
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0c      	ldr	r2, [pc, #48]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x288>
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <HAL_RCC_OscConfig+0x298>)
 8002dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d01b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe ff20 	bl	8001c10 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	e010      	b.n	8002df6 <HAL_RCC_OscConfig+0x2ba>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08007a58 	.word	0x08007a58
 8002ddc:	20000004 	.word	0x20000004
 8002de0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe ff14 	bl	8001c10 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e2c2      	b.n	800337c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df6:	4baf      	ldr	r3, [pc, #700]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x2a8>
 8002e02:	e014      	b.n	8002e2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe ff04 	bl	8001c10 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe ff00 	bl	8001c10 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e2ae      	b.n	800337c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e1e:	4ba5      	ldr	r3, [pc, #660]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x2d0>
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d060      	beq.n	8002efc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d005      	beq.n	8002e4c <HAL_RCC_OscConfig+0x310>
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d119      	bne.n	8002e7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d116      	bne.n	8002e7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e4c:	4b99      	ldr	r3, [pc, #612]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x328>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e28b      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b93      	ldr	r3, [pc, #588]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	061b      	lsls	r3, r3, #24
 8002e72:	4990      	ldr	r1, [pc, #576]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e78:	e040      	b.n	8002efc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d023      	beq.n	8002eca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e82:	4b8c      	ldr	r3, [pc, #560]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a8b      	ldr	r2, [pc, #556]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8e:	f7fe febf 	bl	8001c10 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e96:	f7fe febb 	bl	8001c10 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e269      	b.n	800337c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea8:	4b82      	ldr	r3, [pc, #520]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb4:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	497c      	ldr	r1, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	e018      	b.n	8002efc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eca:	4b7a      	ldr	r3, [pc, #488]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a79      	ldr	r2, [pc, #484]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fe9b 	bl	8001c10 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ede:	f7fe fe97 	bl	8001c10 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e245      	b.n	800337c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ef0:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d03c      	beq.n	8002f82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01c      	beq.n	8002f4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f10:	4b68      	ldr	r3, [pc, #416]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	4a67      	ldr	r2, [pc, #412]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fe76 	bl	8001c10 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fe fe72 	bl	8001c10 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e220      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f3a:	4b5e      	ldr	r3, [pc, #376]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0ef      	beq.n	8002f28 <HAL_RCC_OscConfig+0x3ec>
 8002f48:	e01b      	b.n	8002f82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b5a      	ldr	r3, [pc, #360]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f50:	4a58      	ldr	r2, [pc, #352]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fe59 	bl	8001c10 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fe55 	bl	8001c10 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e203      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ef      	bne.n	8002f62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80a6 	beq.w	80030dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f94:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b44      	ldr	r3, [pc, #272]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	4a43      	ldr	r2, [pc, #268]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002faa:	6593      	str	r3, [r2, #88]	; 0x58
 8002fac:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbc:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <HAL_RCC_OscConfig+0x57c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d118      	bne.n	8002ffa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fc8:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_RCC_OscConfig+0x57c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_RCC_OscConfig+0x57c>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fe1c 	bl	8001c10 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fe fe18 	bl	8001c10 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1c6      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fee:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_RCC_OscConfig+0x57c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d108      	bne.n	8003014 <HAL_RCC_OscConfig+0x4d8>
 8003002:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	4a2a      	ldr	r2, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003012:	e024      	b.n	800305e <HAL_RCC_OscConfig+0x522>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b05      	cmp	r3, #5
 800301a:	d110      	bne.n	800303e <HAL_RCC_OscConfig+0x502>
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302c:	4b21      	ldr	r3, [pc, #132]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a20      	ldr	r2, [pc, #128]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	e00f      	b.n	800305e <HAL_RCC_OscConfig+0x522>
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003056:	f023 0304 	bic.w	r3, r3, #4
 800305a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d016      	beq.n	8003094 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7fe fdd3 	bl	8001c10 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800306c:	e00a      	b.n	8003084 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fdcf 	bl	8001c10 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e17b      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_OscConfig+0x578>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0ed      	beq.n	800306e <HAL_RCC_OscConfig+0x532>
 8003092:	e01a      	b.n	80030ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fdbc 	bl	8001c10 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800309a:	e00f      	b.n	80030bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe fdb8 	bl	8001c10 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d906      	bls.n	80030bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e164      	b.n	800337c <HAL_RCC_OscConfig+0x840>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030bc:	4ba8      	ldr	r3, [pc, #672]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e8      	bne.n	800309c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d0:	4ba3      	ldr	r3, [pc, #652]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	4aa2      	ldr	r2, [pc, #648]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80030d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d03c      	beq.n	8003162 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01c      	beq.n	800312a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030f0:	4b9b      	ldr	r3, [pc, #620]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80030f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f6:	4a9a      	ldr	r2, [pc, #616]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fd86 	bl	8001c10 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003108:	f7fe fd82 	bl	8001c10 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e130      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800311a:	4b91      	ldr	r3, [pc, #580]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800311c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <HAL_RCC_OscConfig+0x5cc>
 8003128:	e01b      	b.n	8003162 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800312a:	4b8d      	ldr	r3, [pc, #564]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800312c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003130:	4a8b      	ldr	r2, [pc, #556]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe fd69 	bl	8001c10 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003142:	f7fe fd65 	bl	8001c10 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e113      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003154:	4b82      	ldr	r3, [pc, #520]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ef      	bne.n	8003142 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8107 	beq.w	800337a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b02      	cmp	r3, #2
 8003172:	f040 80cb 	bne.w	800330c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003176:	4b7a      	ldr	r3, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	429a      	cmp	r2, r3
 8003188:	d12c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	3b01      	subs	r3, #1
 8003196:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d123      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d11b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d113      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d109      	bne.n	80031e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	3b01      	subs	r3, #1
 80031de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d06d      	beq.n	80032c0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d068      	beq.n	80032bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031ea:	4b5d      	ldr	r3, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031f6:	4b5a      	ldr	r3, [pc, #360]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e0ba      	b.n	800337c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003206:	4b56      	ldr	r3, [pc, #344]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a55      	ldr	r2, [pc, #340]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800320c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003210:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003212:	f7fe fcfd 	bl	8001c10 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321a:	f7fe fcf9 	bl	8001c10 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0a7      	b.n	800337c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800322c:	4b4c      	ldr	r3, [pc, #304]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f0      	bne.n	800321a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003238:	4b49      	ldr	r3, [pc, #292]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_RCC_OscConfig+0x828>)
 800323e:	4013      	ands	r3, r2
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003248:	3a01      	subs	r2, #1
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	4311      	orrs	r1, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003252:	0212      	lsls	r2, r2, #8
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800325a:	0852      	lsrs	r2, r2, #1
 800325c:	3a01      	subs	r2, #1
 800325e:	0552      	lsls	r2, r2, #21
 8003260:	4311      	orrs	r1, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003266:	0852      	lsrs	r2, r2, #1
 8003268:	3a01      	subs	r2, #1
 800326a:	0652      	lsls	r2, r2, #25
 800326c:	4311      	orrs	r1, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003272:	06d2      	lsls	r2, r2, #27
 8003274:	430a      	orrs	r2, r1
 8003276:	493a      	ldr	r1, [pc, #232]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003278:	4313      	orrs	r3, r2
 800327a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800327c:	4b38      	ldr	r3, [pc, #224]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a37      	ldr	r2, [pc, #220]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003286:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003288:	4b35      	ldr	r3, [pc, #212]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a34      	ldr	r2, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800328e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003292:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003294:	f7fe fcbc 	bl	8001c10 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fcb8 	bl	8001c10 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e066      	b.n	800337c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ba:	e05e      	b.n	800337a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e05d      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d156      	bne.n	800337a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032cc:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80032d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032e4:	f7fe fc94 	bl	8001c10 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fc90 	bl	8001c10 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e03e      	b.n	800337c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fe:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x7b0>
 800330a:	e036      	b.n	800337a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d031      	beq.n	8003376 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800331e:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003330:	f023 0303 	bic.w	r3, r3, #3
 8003334:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x824>)
 800333c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003344:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fe fc63 	bl	8001c10 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	e00c      	b.n	8003368 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fc5f 	bl	8001c10 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d905      	bls.n	8003368 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e00d      	b.n	800337c <HAL_RCC_OscConfig+0x840>
 8003360:	40021000 	.word	0x40021000
 8003364:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_OscConfig+0x848>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ec      	bne.n	800334e <HAL_RCC_OscConfig+0x812>
 8003374:	e001      	b.n	800337a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e10f      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a0:	4b89      	ldr	r3, [pc, #548]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d910      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ae:	4b86      	ldr	r3, [pc, #536]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 020f 	bic.w	r2, r3, #15
 80033b6:	4984      	ldr	r1, [pc, #528]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0f7      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8089 	beq.w	80034f0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d133      	bne.n	800344e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e6:	4b79      	ldr	r3, [pc, #484]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0e4      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80033f6:	f000 fa11 	bl	800381c <RCC_GetSysClockFreqFromPLLSource>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4a74      	ldr	r2, [pc, #464]	; (80035d0 <HAL_RCC_ClockConfig+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d955      	bls.n	80034ae <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003402:	4b72      	ldr	r3, [pc, #456]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800340e:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003416:	4a6d      	ldr	r2, [pc, #436]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e044      	b.n	80034ae <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03e      	beq.n	80034ae <HAL_RCC_ClockConfig+0x126>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d13a      	bne.n	80034ae <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003438:	4b64      	ldr	r3, [pc, #400]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003440:	4a62      	ldr	r2, [pc, #392]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003446:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	e02f      	b.n	80034ae <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003456:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d115      	bne.n	800348e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0ac      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346e:	4b57      	ldr	r3, [pc, #348]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0a0      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347e:	4b53      	ldr	r3, [pc, #332]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e098      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800348e:	f000 f8a7 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8003492:	4603      	mov	r3, r0
 8003494:	4a4e      	ldr	r2, [pc, #312]	; (80035d0 <HAL_RCC_ClockConfig+0x248>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d909      	bls.n	80034ae <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800349a:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a2:	4a4a      	ldr	r2, [pc, #296]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 80034a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b47      	ldr	r3, [pc, #284]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4944      	ldr	r1, [pc, #272]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fe fba6 	bl	8001c10 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fe fba2 	bl	8001c10 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e070      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b33      	ldr	r3, [pc, #204]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4930      	ldr	r1, [pc, #192]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
 800350e:	e008      	b.n	8003522 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b80      	cmp	r3, #128	; 0x80
 8003514:	d105      	bne.n	8003522 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800351c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003520:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003522:	4b29      	ldr	r3, [pc, #164]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d210      	bcs.n	8003552 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003530:	4b25      	ldr	r3, [pc, #148]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f023 020f 	bic.w	r2, r3, #15
 8003538:	4923      	ldr	r1, [pc, #140]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003540:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_RCC_ClockConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d001      	beq.n	8003552 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e036      	b.n	80035c0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355e:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4918      	ldr	r1, [pc, #96]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4910      	ldr	r1, [pc, #64]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003590:	f000 f826 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCC_ClockConfig+0x244>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <HAL_RCC_ClockConfig+0x24c>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x250>)
 80035ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x254>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fadb 	bl	8001b70 <HAL_InitTick>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80035be:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40021000 	.word	0x40021000
 80035d0:	04c4b400 	.word	0x04c4b400
 80035d4:	08007a58 	.word	0x08007a58
 80035d8:	20000004 	.word	0x20000004
 80035dc:	20000008 	.word	0x20000008

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ee:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f8:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x34>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d121      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d11e      	bne.n	8003652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d107      	bne.n	8003630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e005      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	091b      	lsrs	r3, r3, #4
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800363c:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d102      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	e004      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d101      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d134      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0xa6>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d003      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0xac>
 8003684:	e005      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	e005      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800368e:	617b      	str	r3, [r7, #20]
      break;
 8003690:	e002      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	617b      	str	r3, [r7, #20]
      break;
 8003696:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3301      	adds	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	fb02 f203 	mul.w	r2, r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	0e5b      	lsrs	r3, r3, #25
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	3301      	adds	r3, #1
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036d8:	69bb      	ldr	r3, [r7, #24]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08007a70 	.word	0x08007a70
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	007a1200 	.word	0x007a1200

080036f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCC_GetHCLKFreq+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000004 	.word	0x20000004

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003714:	f7ff fff0 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4904      	ldr	r1, [pc, #16]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000
 8003738:	08007a68 	.word	0x08007a68

0800373c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003740:	f7ff ffda 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0adb      	lsrs	r3, r3, #11
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4904      	ldr	r1, [pc, #16]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	08007a68 	.word	0x08007a68

08003768 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003780:	f7ff f908 	bl	8002994 <HAL_PWREx_GetVoltageRange>
 8003784:	6178      	str	r0, [r7, #20]
 8003786:	e014      	b.n	80037b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a21      	ldr	r2, [pc, #132]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037a0:	f7ff f8f8 	bl	8002994 <HAL_PWREx_GetVoltageRange>
 80037a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037b8:	d10b      	bne.n	80037d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b80      	cmp	r3, #128	; 0x80
 80037be:	d913      	bls.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2ba0      	cmp	r3, #160	; 0xa0
 80037c4:	d902      	bls.n	80037cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037c6:	2302      	movs	r3, #2
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	e00d      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037cc:	2301      	movs	r3, #1
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	e00a      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b7f      	cmp	r3, #127	; 0x7f
 80037d6:	d902      	bls.n	80037de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80037d8:	2302      	movs	r3, #2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e004      	b.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d101      	bne.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e4:	2301      	movs	r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 020f 	bic.w	r2, r3, #15
 80037f0:	4909      	ldr	r1, [pc, #36]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	40022000 	.word	0x40022000

0800381c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003826:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d118      	bne.n	8003864 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e005      	b.n	800385a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800384e:	4b23      	ldr	r3, [pc, #140]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800385a:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d003      	beq.n	800387c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d003      	beq.n	8003882 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800387a:	e005      	b.n	8003888 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800387e:	613b      	str	r3, [r7, #16]
    break;
 8003880:	e005      	b.n	800388e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003882:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003884:	613b      	str	r3, [r7, #16]
    break;
 8003886:	e002      	b.n	800388e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	613b      	str	r3, [r7, #16]
    break;
 800388c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	3301      	adds	r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	fb02 f203 	mul.w	r2, r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0e5b      	lsrs	r3, r3, #25
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80038ce:	683b      	ldr	r3, [r7, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40021000 	.word	0x40021000
 80038e0:	08007a70 	.word	0x08007a70
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	007a1200 	.word	0x007a1200

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003904:	2b00      	cmp	r3, #0
 8003906:	d040      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d02a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d825      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003914:	2b60      	cmp	r3, #96	; 0x60
 8003916:	d026      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003918:	2b60      	cmp	r3, #96	; 0x60
 800391a:	d821      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d006      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d81d      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d010      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800392c:	e018      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800392e:	4b89      	ldr	r3, [pc, #548]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4a88      	ldr	r2, [pc, #544]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800393a:	e015      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fb02 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394c:	e00c      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3320      	adds	r3, #32
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fbed 	bl	8004134 <RCCEx_PLLSAI2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	74fb      	strb	r3, [r7, #19]
      break;
 8003964:	e000      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800396e:	4b79      	ldr	r3, [pc, #484]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003970:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003974:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397c:	4975      	ldr	r1, [pc, #468]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d047      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800399e:	d030      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a4:	d82a      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039aa:	d02a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80039ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b0:	d824      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d008      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039bc:	d81e      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d010      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80039c8:	e018      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ca:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a61      	ldr	r2, [pc, #388]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d6:	e015      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fab4 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039e8:	e00c      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3320      	adds	r3, #32
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fb9f 	bl	8004134 <RCCEx_PLLSAI2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039fa:	e003      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	74fb      	strb	r3, [r7, #19]
      break;
 8003a00:	e000      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a0a:	4b52      	ldr	r3, [pc, #328]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	494e      	ldr	r1, [pc, #312]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 809f 	beq.w	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a34:	2300      	movs	r3, #0
 8003a36:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a38:	4b46      	ldr	r3, [pc, #280]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	4a40      	ldr	r2, [pc, #256]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a76:	f7fe f8cb 	bl	8001c10 <HAL_GetTick>
 8003a7a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a7c:	e009      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fe f8c7 	bl	8001c10 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d902      	bls.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a90:	e005      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ef      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d15b      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01f      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d019      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ac2:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003acc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ace:	4b21      	ldr	r3, [pc, #132]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	4a1b      	ldr	r2, [pc, #108]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aee:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d016      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fe f886 	bl	8001c10 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b06:	e00b      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe f882 	bl	8001c10 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d902      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b1e:	e006      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ec      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10c      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b34:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	74bb      	strb	r3, [r7, #18]
 8003b52:	e005      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b60:	7c7b      	ldrb	r3, [r7, #17]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4ba0      	ldr	r3, [pc, #640]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	4a9f      	ldr	r2, [pc, #636]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b7e:	4b9a      	ldr	r3, [pc, #616]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f023 0203 	bic.w	r2, r3, #3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	4996      	ldr	r1, [pc, #600]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba0:	4b91      	ldr	r3, [pc, #580]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 020c 	bic.w	r2, r3, #12
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	498e      	ldr	r1, [pc, #568]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bc2:	4b89      	ldr	r3, [pc, #548]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	4985      	ldr	r1, [pc, #532]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003be4:	4b80      	ldr	r3, [pc, #512]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	497d      	ldr	r1, [pc, #500]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c06:	4b78      	ldr	r3, [pc, #480]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	4974      	ldr	r1, [pc, #464]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c28:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c36:	496c      	ldr	r1, [pc, #432]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c4a:	4b67      	ldr	r3, [pc, #412]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c58:	4963      	ldr	r1, [pc, #396]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c6c:	4b5e      	ldr	r3, [pc, #376]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7a:	495b      	ldr	r1, [pc, #364]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c8e:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	4952      	ldr	r1, [pc, #328]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb0:	4b4d      	ldr	r3, [pc, #308]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	494a      	ldr	r1, [pc, #296]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd2:	4b45      	ldr	r3, [pc, #276]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce0:	4941      	ldr	r1, [pc, #260]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	4939      	ldr	r1, [pc, #228]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d028      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d16:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d24:	4930      	ldr	r1, [pc, #192]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d34:	d106      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4a2b      	ldr	r2, [pc, #172]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d40:	60d3      	str	r3, [r2, #12]
 8003d42:	e011      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3304      	adds	r3, #4
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f8f9 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d04d      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7c:	d108      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d8a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d8e:	e012      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003d90:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d96:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dae:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a08      	ldr	r2, [pc, #32]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e020      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd6:	d109      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a02      	ldr	r2, [pc, #8]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de2:	60d3      	str	r3, [r2, #12]
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f8a5 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d028      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e1c:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e2a:	4947      	ldr	r1, [pc, #284]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
 8003e48:	e011      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f876 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e64:	7cfb      	ldrb	r3, [r7, #19]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003e6a:	7cfb      	ldrb	r3, [r7, #19]
 8003e6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01e      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8a:	492f      	ldr	r1, [pc, #188]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f851 	bl	8003f4c <RCCEx_PLLSAI1_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eae:	7cfb      	ldrb	r3, [r7, #19]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec4:	4b20      	ldr	r3, [pc, #128]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eca:	f023 0204 	bic.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	491c      	ldr	r1, [pc, #112]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00b      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ee8:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eee:	f023 0218 	bic.w	r2, r3, #24
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef8:	4913      	ldr	r1, [pc, #76]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d017      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f0c:	4b0e      	ldr	r3, [pc, #56]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1c:	490a      	ldr	r1, [pc, #40]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000

08003f4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f5a:	4b72      	ldr	r3, [pc, #456]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00e      	beq.n	8003f84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f66:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f003 0203 	and.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d103      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
       ||
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d142      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e03f      	b.n	8004004 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d018      	beq.n	8003fbe <RCCEx_PLLSAI1_Config+0x72>
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d825      	bhi.n	8003fdc <RCCEx_PLLSAI1_Config+0x90>
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d002      	beq.n	8003f9a <RCCEx_PLLSAI1_Config+0x4e>
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d009      	beq.n	8003fac <RCCEx_PLLSAI1_Config+0x60>
 8003f98:	e020      	b.n	8003fdc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9a:	4b62      	ldr	r3, [pc, #392]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11d      	bne.n	8003fe2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003faa:	e01a      	b.n	8003fe2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fac:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d116      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbc:	e013      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fbe:	4b59      	ldr	r3, [pc, #356]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fca:	4b56      	ldr	r3, [pc, #344]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fda:	e006      	b.n	8003fea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e004      	b.n	8003fec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d108      	bne.n	8004004 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003ff2:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 0203 	bic.w	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4949      	ldr	r1, [pc, #292]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 8086 	bne.w	8004118 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a44      	ldr	r2, [pc, #272]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004018:	f7fd fdfa 	bl	8001c10 <HAL_GetTick>
 800401c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800401e:	e009      	b.n	8004034 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004020:	f7fd fdf6 	bl	8001c10 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	73fb      	strb	r3, [r7, #15]
        break;
 8004032:	e005      	b.n	8004040 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004034:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ef      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d168      	bne.n	8004118 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d113      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800404c:	4b35      	ldr	r3, [pc, #212]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	4b35      	ldr	r3, [pc, #212]	; (8004128 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004052:	4013      	ands	r3, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6892      	ldr	r2, [r2, #8]
 8004058:	0211      	lsls	r1, r2, #8
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68d2      	ldr	r2, [r2, #12]
 800405e:	06d2      	lsls	r2, r2, #27
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6852      	ldr	r2, [r2, #4]
 8004066:	3a01      	subs	r2, #1
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	430a      	orrs	r2, r1
 800406c:	492d      	ldr	r1, [pc, #180]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]
 8004072:	e02d      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d115      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800407a:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	0211      	lsls	r1, r2, #8
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6912      	ldr	r2, [r2, #16]
 800408c:	0852      	lsrs	r2, r2, #1
 800408e:	3a01      	subs	r2, #1
 8004090:	0552      	lsls	r2, r2, #21
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6852      	ldr	r2, [r2, #4]
 8004098:	3a01      	subs	r2, #1
 800409a:	0112      	lsls	r2, r2, #4
 800409c:	430a      	orrs	r2, r1
 800409e:	4921      	ldr	r1, [pc, #132]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	610b      	str	r3, [r1, #16]
 80040a4:	e014      	b.n	80040d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a6:	4b1f      	ldr	r3, [pc, #124]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	0211      	lsls	r1, r2, #8
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6952      	ldr	r2, [r2, #20]
 80040b8:	0852      	lsrs	r2, r2, #1
 80040ba:	3a01      	subs	r2, #1
 80040bc:	0652      	lsls	r2, r2, #25
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6852      	ldr	r2, [r2, #4]
 80040c4:	3a01      	subs	r2, #1
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4916      	ldr	r1, [pc, #88]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd fd98 	bl	8001c10 <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e2:	e009      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e4:	f7fd fd94 	bl	8001c10 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d902      	bls.n	80040f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	73fb      	strb	r3, [r7, #15]
          break;
 80040f6:	e005      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ef      	beq.n	80040e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	4904      	ldr	r1, [pc, #16]	; (8004124 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004114:	4313      	orrs	r3, r2
 8004116:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	07ff800f 	.word	0x07ff800f
 800412c:	ff9f800f 	.word	0xff9f800f
 8004130:	f9ff800f 	.word	0xf9ff800f

08004134 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004142:	4b72      	ldr	r3, [pc, #456]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00e      	beq.n	800416c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800414e:	4b6f      	ldr	r3, [pc, #444]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0203 	and.w	r2, r3, #3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d103      	bne.n	8004166 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
       ||
 8004162:	2b00      	cmp	r3, #0
 8004164:	d142      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	e03f      	b.n	80041ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d018      	beq.n	80041a6 <RCCEx_PLLSAI2_Config+0x72>
 8004174:	2b03      	cmp	r3, #3
 8004176:	d825      	bhi.n	80041c4 <RCCEx_PLLSAI2_Config+0x90>
 8004178:	2b01      	cmp	r3, #1
 800417a:	d002      	beq.n	8004182 <RCCEx_PLLSAI2_Config+0x4e>
 800417c:	2b02      	cmp	r3, #2
 800417e:	d009      	beq.n	8004194 <RCCEx_PLLSAI2_Config+0x60>
 8004180:	e020      	b.n	80041c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004182:	4b62      	ldr	r3, [pc, #392]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d11d      	bne.n	80041ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004192:	e01a      	b.n	80041ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004194:	4b5d      	ldr	r3, [pc, #372]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a4:	e013      	b.n	80041ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041a6:	4b59      	ldr	r3, [pc, #356]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b2:	4b56      	ldr	r3, [pc, #344]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c2:	e006      	b.n	80041d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e004      	b.n	80041d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041ca:	bf00      	nop
 80041cc:	e002      	b.n	80041d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041ce:	bf00      	nop
 80041d0:	e000      	b.n	80041d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80041d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d108      	bne.n	80041ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80041da:	4b4c      	ldr	r3, [pc, #304]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4949      	ldr	r1, [pc, #292]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 8086 	bne.w	8004300 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a44      	ldr	r2, [pc, #272]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fd fd06 	bl	8001c10 <HAL_GetTick>
 8004204:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004206:	e009      	b.n	800421c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004208:	f7fd fd02 	bl	8001c10 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d902      	bls.n	800421c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	73fb      	strb	r3, [r7, #15]
        break;
 800421a:	e005      	b.n	8004228 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800421c:	4b3b      	ldr	r3, [pc, #236]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ef      	bne.n	8004208 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d168      	bne.n	8004300 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d113      	bne.n	800425c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004234:	4b35      	ldr	r3, [pc, #212]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	4b35      	ldr	r3, [pc, #212]	; (8004310 <RCCEx_PLLSAI2_Config+0x1dc>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6892      	ldr	r2, [r2, #8]
 8004240:	0211      	lsls	r1, r2, #8
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	06d2      	lsls	r2, r2, #27
 8004248:	4311      	orrs	r1, r2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6852      	ldr	r2, [r2, #4]
 800424e:	3a01      	subs	r2, #1
 8004250:	0112      	lsls	r2, r2, #4
 8004252:	430a      	orrs	r2, r1
 8004254:	492d      	ldr	r1, [pc, #180]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004256:	4313      	orrs	r3, r2
 8004258:	614b      	str	r3, [r1, #20]
 800425a:	e02d      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d115      	bne.n	800428e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004262:	4b2a      	ldr	r3, [pc, #168]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6892      	ldr	r2, [r2, #8]
 800426e:	0211      	lsls	r1, r2, #8
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6912      	ldr	r2, [r2, #16]
 8004274:	0852      	lsrs	r2, r2, #1
 8004276:	3a01      	subs	r2, #1
 8004278:	0552      	lsls	r2, r2, #21
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6852      	ldr	r2, [r2, #4]
 8004280:	3a01      	subs	r2, #1
 8004282:	0112      	lsls	r2, r2, #4
 8004284:	430a      	orrs	r2, r1
 8004286:	4921      	ldr	r1, [pc, #132]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004288:	4313      	orrs	r3, r2
 800428a:	614b      	str	r3, [r1, #20]
 800428c:	e014      	b.n	80042b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800428e:	4b1f      	ldr	r3, [pc, #124]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6892      	ldr	r2, [r2, #8]
 800429a:	0211      	lsls	r1, r2, #8
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6952      	ldr	r2, [r2, #20]
 80042a0:	0852      	lsrs	r2, r2, #1
 80042a2:	3a01      	subs	r2, #1
 80042a4:	0652      	lsls	r2, r2, #25
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6852      	ldr	r2, [r2, #4]
 80042ac:	3a01      	subs	r2, #1
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	430a      	orrs	r2, r1
 80042b2:	4916      	ldr	r1, [pc, #88]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a13      	ldr	r2, [pc, #76]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c4:	f7fd fca4 	bl	8001c10 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042ca:	e009      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042cc:	f7fd fca0 	bl	8001c10 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d902      	bls.n	80042e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	73fb      	strb	r3, [r7, #15]
          break;
 80042de:	e005      	b.n	80042ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ef      	beq.n	80042cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	4904      	ldr	r1, [pc, #16]	; (800430c <RCCEx_PLLSAI2_Config+0x1d8>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004300:	7bfb      	ldrb	r3, [r7, #15]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	07ff800f 	.word	0x07ff800f
 8004314:	ff9f800f 	.word	0xff9f800f
 8004318:	f9ff800f 	.word	0xf9ff800f

0800431c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fd fa71 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	; 0x24
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8c4 	bl	80044ec <UART_SetConfig>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e022      	b.n	80043b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fb80 	bl	8004a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800438a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800439a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fc07 	bl	8004bc0 <UART_CheckIdleState>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	f040 8084 	bne.w	80044e0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Transmit+0x28>
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e07c      	b.n	80044e2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Transmit+0x3a>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e075      	b.n	80044e2 <HAL_UART_Transmit+0x126>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	; 0x21
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fd fbff 	bl	8001c10 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	d108      	bne.n	8004440 <HAL_UART_Transmit+0x84>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e003      	b.n	8004448 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004450:	e02d      	b.n	80044ae <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fbfa 	bl	8004c56 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e03a      	b.n	80044e2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	881a      	ldrh	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800447e:	b292      	uxth	r2, r2
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3302      	adds	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e008      	b.n	800449c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b292      	uxth	r2, r2
 8004494:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3301      	adds	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1cb      	bne.n	8004452 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2200      	movs	r2, #0
 80044c2:	2140      	movs	r1, #64	; 0x40
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fbc6 	bl	8004c56 <UART_WaitOnFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e006      	b.n	80044e2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	b5b0      	push	{r4, r5, r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	4313      	orrs	r3, r2
 800450e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4bb1      	ldr	r3, [pc, #708]	; (80047dc <UART_SetConfig+0x2f0>)
 8004518:	4013      	ands	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	69f9      	ldr	r1, [r7, #28]
 8004520:	430b      	orrs	r3, r1
 8004522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4aa6      	ldr	r2, [pc, #664]	; (80047e0 <UART_SetConfig+0x2f4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	4313      	orrs	r3, r2
 8004552:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800455e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	430b      	orrs	r3, r1
 800456a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	f023 010f 	bic.w	r1, r3, #15
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a97      	ldr	r2, [pc, #604]	; (80047e4 <UART_SetConfig+0x2f8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d120      	bne.n	80045ce <UART_SetConfig+0xe2>
 800458c:	4b96      	ldr	r3, [pc, #600]	; (80047e8 <UART_SetConfig+0x2fc>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b03      	cmp	r3, #3
 8004598:	d816      	bhi.n	80045c8 <UART_SetConfig+0xdc>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <UART_SetConfig+0xb4>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045bd 	.word	0x080045bd
 80045a8:	080045b7 	.word	0x080045b7
 80045ac:	080045c3 	.word	0x080045c3
 80045b0:	2301      	movs	r3, #1
 80045b2:	76fb      	strb	r3, [r7, #27]
 80045b4:	e0e7      	b.n	8004786 <UART_SetConfig+0x29a>
 80045b6:	2302      	movs	r3, #2
 80045b8:	76fb      	strb	r3, [r7, #27]
 80045ba:	e0e4      	b.n	8004786 <UART_SetConfig+0x29a>
 80045bc:	2304      	movs	r3, #4
 80045be:	76fb      	strb	r3, [r7, #27]
 80045c0:	e0e1      	b.n	8004786 <UART_SetConfig+0x29a>
 80045c2:	2308      	movs	r3, #8
 80045c4:	76fb      	strb	r3, [r7, #27]
 80045c6:	e0de      	b.n	8004786 <UART_SetConfig+0x29a>
 80045c8:	2310      	movs	r3, #16
 80045ca:	76fb      	strb	r3, [r7, #27]
 80045cc:	e0db      	b.n	8004786 <UART_SetConfig+0x29a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a86      	ldr	r2, [pc, #536]	; (80047ec <UART_SetConfig+0x300>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d132      	bne.n	800463e <UART_SetConfig+0x152>
 80045d8:	4b83      	ldr	r3, [pc, #524]	; (80047e8 <UART_SetConfig+0x2fc>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d828      	bhi.n	8004638 <UART_SetConfig+0x14c>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0x100>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	08004621 	.word	0x08004621
 80045f0:	08004639 	.word	0x08004639
 80045f4:	08004639 	.word	0x08004639
 80045f8:	08004639 	.word	0x08004639
 80045fc:	0800462d 	.word	0x0800462d
 8004600:	08004639 	.word	0x08004639
 8004604:	08004639 	.word	0x08004639
 8004608:	08004639 	.word	0x08004639
 800460c:	08004627 	.word	0x08004627
 8004610:	08004639 	.word	0x08004639
 8004614:	08004639 	.word	0x08004639
 8004618:	08004639 	.word	0x08004639
 800461c:	08004633 	.word	0x08004633
 8004620:	2300      	movs	r3, #0
 8004622:	76fb      	strb	r3, [r7, #27]
 8004624:	e0af      	b.n	8004786 <UART_SetConfig+0x29a>
 8004626:	2302      	movs	r3, #2
 8004628:	76fb      	strb	r3, [r7, #27]
 800462a:	e0ac      	b.n	8004786 <UART_SetConfig+0x29a>
 800462c:	2304      	movs	r3, #4
 800462e:	76fb      	strb	r3, [r7, #27]
 8004630:	e0a9      	b.n	8004786 <UART_SetConfig+0x29a>
 8004632:	2308      	movs	r3, #8
 8004634:	76fb      	strb	r3, [r7, #27]
 8004636:	e0a6      	b.n	8004786 <UART_SetConfig+0x29a>
 8004638:	2310      	movs	r3, #16
 800463a:	76fb      	strb	r3, [r7, #27]
 800463c:	e0a3      	b.n	8004786 <UART_SetConfig+0x29a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a6b      	ldr	r2, [pc, #428]	; (80047f0 <UART_SetConfig+0x304>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d120      	bne.n	800468a <UART_SetConfig+0x19e>
 8004648:	4b67      	ldr	r3, [pc, #412]	; (80047e8 <UART_SetConfig+0x2fc>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004652:	2b30      	cmp	r3, #48	; 0x30
 8004654:	d013      	beq.n	800467e <UART_SetConfig+0x192>
 8004656:	2b30      	cmp	r3, #48	; 0x30
 8004658:	d814      	bhi.n	8004684 <UART_SetConfig+0x198>
 800465a:	2b20      	cmp	r3, #32
 800465c:	d009      	beq.n	8004672 <UART_SetConfig+0x186>
 800465e:	2b20      	cmp	r3, #32
 8004660:	d810      	bhi.n	8004684 <UART_SetConfig+0x198>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <UART_SetConfig+0x180>
 8004666:	2b10      	cmp	r3, #16
 8004668:	d006      	beq.n	8004678 <UART_SetConfig+0x18c>
 800466a:	e00b      	b.n	8004684 <UART_SetConfig+0x198>
 800466c:	2300      	movs	r3, #0
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	e089      	b.n	8004786 <UART_SetConfig+0x29a>
 8004672:	2302      	movs	r3, #2
 8004674:	76fb      	strb	r3, [r7, #27]
 8004676:	e086      	b.n	8004786 <UART_SetConfig+0x29a>
 8004678:	2304      	movs	r3, #4
 800467a:	76fb      	strb	r3, [r7, #27]
 800467c:	e083      	b.n	8004786 <UART_SetConfig+0x29a>
 800467e:	2308      	movs	r3, #8
 8004680:	76fb      	strb	r3, [r7, #27]
 8004682:	e080      	b.n	8004786 <UART_SetConfig+0x29a>
 8004684:	2310      	movs	r3, #16
 8004686:	76fb      	strb	r3, [r7, #27]
 8004688:	e07d      	b.n	8004786 <UART_SetConfig+0x29a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a59      	ldr	r2, [pc, #356]	; (80047f4 <UART_SetConfig+0x308>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d120      	bne.n	80046d6 <UART_SetConfig+0x1ea>
 8004694:	4b54      	ldr	r3, [pc, #336]	; (80047e8 <UART_SetConfig+0x2fc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800469e:	2bc0      	cmp	r3, #192	; 0xc0
 80046a0:	d013      	beq.n	80046ca <UART_SetConfig+0x1de>
 80046a2:	2bc0      	cmp	r3, #192	; 0xc0
 80046a4:	d814      	bhi.n	80046d0 <UART_SetConfig+0x1e4>
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d009      	beq.n	80046be <UART_SetConfig+0x1d2>
 80046aa:	2b80      	cmp	r3, #128	; 0x80
 80046ac:	d810      	bhi.n	80046d0 <UART_SetConfig+0x1e4>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <UART_SetConfig+0x1cc>
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d006      	beq.n	80046c4 <UART_SetConfig+0x1d8>
 80046b6:	e00b      	b.n	80046d0 <UART_SetConfig+0x1e4>
 80046b8:	2300      	movs	r3, #0
 80046ba:	76fb      	strb	r3, [r7, #27]
 80046bc:	e063      	b.n	8004786 <UART_SetConfig+0x29a>
 80046be:	2302      	movs	r3, #2
 80046c0:	76fb      	strb	r3, [r7, #27]
 80046c2:	e060      	b.n	8004786 <UART_SetConfig+0x29a>
 80046c4:	2304      	movs	r3, #4
 80046c6:	76fb      	strb	r3, [r7, #27]
 80046c8:	e05d      	b.n	8004786 <UART_SetConfig+0x29a>
 80046ca:	2308      	movs	r3, #8
 80046cc:	76fb      	strb	r3, [r7, #27]
 80046ce:	e05a      	b.n	8004786 <UART_SetConfig+0x29a>
 80046d0:	2310      	movs	r3, #16
 80046d2:	76fb      	strb	r3, [r7, #27]
 80046d4:	e057      	b.n	8004786 <UART_SetConfig+0x29a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a47      	ldr	r2, [pc, #284]	; (80047f8 <UART_SetConfig+0x30c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d125      	bne.n	800472c <UART_SetConfig+0x240>
 80046e0:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <UART_SetConfig+0x2fc>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ee:	d017      	beq.n	8004720 <UART_SetConfig+0x234>
 80046f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f4:	d817      	bhi.n	8004726 <UART_SetConfig+0x23a>
 80046f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fa:	d00b      	beq.n	8004714 <UART_SetConfig+0x228>
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004700:	d811      	bhi.n	8004726 <UART_SetConfig+0x23a>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <UART_SetConfig+0x222>
 8004706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470a:	d006      	beq.n	800471a <UART_SetConfig+0x22e>
 800470c:	e00b      	b.n	8004726 <UART_SetConfig+0x23a>
 800470e:	2300      	movs	r3, #0
 8004710:	76fb      	strb	r3, [r7, #27]
 8004712:	e038      	b.n	8004786 <UART_SetConfig+0x29a>
 8004714:	2302      	movs	r3, #2
 8004716:	76fb      	strb	r3, [r7, #27]
 8004718:	e035      	b.n	8004786 <UART_SetConfig+0x29a>
 800471a:	2304      	movs	r3, #4
 800471c:	76fb      	strb	r3, [r7, #27]
 800471e:	e032      	b.n	8004786 <UART_SetConfig+0x29a>
 8004720:	2308      	movs	r3, #8
 8004722:	76fb      	strb	r3, [r7, #27]
 8004724:	e02f      	b.n	8004786 <UART_SetConfig+0x29a>
 8004726:	2310      	movs	r3, #16
 8004728:	76fb      	strb	r3, [r7, #27]
 800472a:	e02c      	b.n	8004786 <UART_SetConfig+0x29a>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2b      	ldr	r2, [pc, #172]	; (80047e0 <UART_SetConfig+0x2f4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d125      	bne.n	8004782 <UART_SetConfig+0x296>
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <UART_SetConfig+0x2fc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004740:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004744:	d017      	beq.n	8004776 <UART_SetConfig+0x28a>
 8004746:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800474a:	d817      	bhi.n	800477c <UART_SetConfig+0x290>
 800474c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004750:	d00b      	beq.n	800476a <UART_SetConfig+0x27e>
 8004752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004756:	d811      	bhi.n	800477c <UART_SetConfig+0x290>
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <UART_SetConfig+0x278>
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004760:	d006      	beq.n	8004770 <UART_SetConfig+0x284>
 8004762:	e00b      	b.n	800477c <UART_SetConfig+0x290>
 8004764:	2300      	movs	r3, #0
 8004766:	76fb      	strb	r3, [r7, #27]
 8004768:	e00d      	b.n	8004786 <UART_SetConfig+0x29a>
 800476a:	2302      	movs	r3, #2
 800476c:	76fb      	strb	r3, [r7, #27]
 800476e:	e00a      	b.n	8004786 <UART_SetConfig+0x29a>
 8004770:	2304      	movs	r3, #4
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e007      	b.n	8004786 <UART_SetConfig+0x29a>
 8004776:	2308      	movs	r3, #8
 8004778:	76fb      	strb	r3, [r7, #27]
 800477a:	e004      	b.n	8004786 <UART_SetConfig+0x29a>
 800477c:	2310      	movs	r3, #16
 800477e:	76fb      	strb	r3, [r7, #27]
 8004780:	e001      	b.n	8004786 <UART_SetConfig+0x29a>
 8004782:	2310      	movs	r3, #16
 8004784:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <UART_SetConfig+0x2f4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	f040 809f 	bne.w	80048d0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004792:	7efb      	ldrb	r3, [r7, #27]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d837      	bhi.n	8004808 <UART_SetConfig+0x31c>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x2b4>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	08004809 	.word	0x08004809
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	08004809 	.word	0x08004809
 80047b0:	080047d3 	.word	0x080047d3
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004809 	.word	0x08004809
 80047bc:	08004809 	.word	0x08004809
 80047c0:	08004801 	.word	0x08004801
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fe ffa4 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 80047c8:	6178      	str	r0, [r7, #20]
        break;
 80047ca:	e022      	b.n	8004812 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <UART_SetConfig+0x310>)
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e01f      	b.n	8004812 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d2:	f7fe ff05 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 80047d6:	6178      	str	r0, [r7, #20]
        break;
 80047d8:	e01b      	b.n	8004812 <UART_SetConfig+0x326>
 80047da:	bf00      	nop
 80047dc:	cfff69f3 	.word	0xcfff69f3
 80047e0:	40008000 	.word	0x40008000
 80047e4:	40013800 	.word	0x40013800
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40004400 	.word	0x40004400
 80047f0:	40004800 	.word	0x40004800
 80047f4:	40004c00 	.word	0x40004c00
 80047f8:	40005000 	.word	0x40005000
 80047fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004804:	617b      	str	r3, [r7, #20]
        break;
 8004806:	e004      	b.n	8004812 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	76bb      	strb	r3, [r7, #26]
        break;
 8004810:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8119 	beq.w	8004a4c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	4a95      	ldr	r2, [pc, #596]	; (8004a74 <UART_SetConfig+0x588>)
 8004820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004824:	461a      	mov	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	fbb3 f3f2 	udiv	r3, r3, r2
 800482c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	4413      	add	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	d305      	bcc.n	800484a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	429a      	cmp	r2, r3
 8004848:	d902      	bls.n	8004850 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	76bb      	strb	r3, [r7, #26]
 800484e:	e0fd      	b.n	8004a4c <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	4618      	mov	r0, r3
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	4a85      	ldr	r2, [pc, #532]	; (8004a74 <UART_SetConfig+0x588>)
 800485e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004862:	b29a      	uxth	r2, r3
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f7fc f9b6 	bl	8000bd8 <__aeabi_uldivmod>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	020b      	lsls	r3, r1, #8
 800487e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004882:	0202      	lsls	r2, r0, #8
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	6849      	ldr	r1, [r1, #4]
 8004888:	0849      	lsrs	r1, r1, #1
 800488a:	4608      	mov	r0, r1
 800488c:	f04f 0100 	mov.w	r1, #0
 8004890:	1814      	adds	r4, r2, r0
 8004892:	eb43 0501 	adc.w	r5, r3, r1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	461a      	mov	r2, r3
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fc f998 	bl	8000bd8 <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b6:	d308      	bcc.n	80048ca <UART_SetConfig+0x3de>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048be:	d204      	bcs.n	80048ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e0c0      	b.n	8004a4c <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	76bb      	strb	r3, [r7, #26]
 80048ce:	e0bd      	b.n	8004a4c <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d8:	d164      	bne.n	80049a4 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80048da:	7efb      	ldrb	r3, [r7, #27]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d828      	bhi.n	8004932 <UART_SetConfig+0x446>
 80048e0:	a201      	add	r2, pc, #4	; (adr r2, 80048e8 <UART_SetConfig+0x3fc>)
 80048e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e6:	bf00      	nop
 80048e8:	0800490d 	.word	0x0800490d
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800491d 	.word	0x0800491d
 80048f4:	08004933 	.word	0x08004933
 80048f8:	08004923 	.word	0x08004923
 80048fc:	08004933 	.word	0x08004933
 8004900:	08004933 	.word	0x08004933
 8004904:	08004933 	.word	0x08004933
 8004908:	0800492b 	.word	0x0800492b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490c:	f7fe ff00 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 8004910:	6178      	str	r0, [r7, #20]
        break;
 8004912:	e013      	b.n	800493c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004914:	f7fe ff12 	bl	800373c <HAL_RCC_GetPCLK2Freq>
 8004918:	6178      	str	r0, [r7, #20]
        break;
 800491a:	e00f      	b.n	800493c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800491c:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <UART_SetConfig+0x58c>)
 800491e:	617b      	str	r3, [r7, #20]
        break;
 8004920:	e00c      	b.n	800493c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe fe5d 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8004926:	6178      	str	r0, [r7, #20]
        break;
 8004928:	e008      	b.n	800493c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800492a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492e:	617b      	str	r3, [r7, #20]
        break;
 8004930:	e004      	b.n	800493c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	76bb      	strb	r3, [r7, #26]
        break;
 800493a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 8084 	beq.w	8004a4c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	4a4a      	ldr	r2, [pc, #296]	; (8004a74 <UART_SetConfig+0x588>)
 800494a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494e:	461a      	mov	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fbb3 f3f2 	udiv	r3, r3, r2
 8004956:	005a      	lsls	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	441a      	add	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d916      	bls.n	800499e <UART_SetConfig+0x4b2>
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004976:	d212      	bcs.n	800499e <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f023 030f 	bic.w	r3, r3, #15
 8004980:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	b29a      	uxth	r2, r3
 800498e:	89fb      	ldrh	r3, [r7, #14]
 8004990:	4313      	orrs	r3, r2
 8004992:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	89fa      	ldrh	r2, [r7, #14]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e056      	b.n	8004a4c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	76bb      	strb	r3, [r7, #26]
 80049a2:	e053      	b.n	8004a4c <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a4:	7efb      	ldrb	r3, [r7, #27]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d827      	bhi.n	80049fa <UART_SetConfig+0x50e>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x4c4>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fe fe9c 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 80049d8:	6178      	str	r0, [r7, #20]
        break;
 80049da:	e013      	b.n	8004a04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fe feae 	bl	800373c <HAL_RCC_GetPCLK2Freq>
 80049e0:	6178      	str	r0, [r7, #20]
        break;
 80049e2:	e00f      	b.n	8004a04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <UART_SetConfig+0x58c>)
 80049e6:	617b      	str	r3, [r7, #20]
        break;
 80049e8:	e00c      	b.n	8004a04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fdf9 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 80049ee:	6178      	str	r0, [r7, #20]
        break;
 80049f0:	e008      	b.n	8004a04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f6:	617b      	str	r3, [r7, #20]
        break;
 80049f8:	e004      	b.n	8004a04 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	76bb      	strb	r3, [r7, #26]
        break;
 8004a02:	bf00      	nop
    }

    if (pclk != 0U)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <UART_SetConfig+0x588>)
 8004a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a14:	461a      	mov	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d909      	bls.n	8004a48 <UART_SetConfig+0x55c>
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3a:	d205      	bcs.n	8004a48 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	e001      	b.n	8004a4c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a68:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bdb0      	pop	{r4, r5, r7, pc}
 8004a72:	bf00      	nop
 8004a74:	08007aa0 	.word	0x08007aa0
 8004a78:	00f42400 	.word	0x00f42400

08004a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01a      	beq.n	8004b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7a:	d10a      	bne.n	8004b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bd0:	f7fd f81e 	bl	8001c10 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d10e      	bne.n	8004c02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f82f 	bl	8004c56 <UART_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e025      	b.n	8004c4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d10e      	bne.n	8004c2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f819 	bl	8004c56 <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e00f      	b.n	8004c4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b09c      	sub	sp, #112	; 0x70
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	4613      	mov	r3, r2
 8004c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c66:	e0a9      	b.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6e:	f000 80a5 	beq.w	8004dbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7fc ffcd 	bl	8001c10 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d302      	bcc.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d140      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e6      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cda:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e5      	bne.n	8004cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e069      	b.n	8004dde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d051      	beq.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d26:	d149      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	637b      	str	r3, [r7, #52]	; 0x34
 8004d52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e6      	bne.n	8004d32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	613b      	str	r3, [r7, #16]
   return(result);
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 0301 	bic.w	r3, r3, #1
 8004d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d84:	623a      	str	r2, [r7, #32]
 8004d86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	69f9      	ldr	r1, [r7, #28]
 8004d8a:	6a3a      	ldr	r2, [r7, #32]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e010      	b.n	8004dde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69da      	ldr	r2, [r3, #28]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	f43f af46 	beq.w	8004c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3770      	adds	r7, #112	; 0x70
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b085      	sub	sp, #20
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_UARTEx_DisableFifoMode+0x16>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e027      	b.n	8004e4c <HAL_UARTEx_DisableFifoMode+0x66>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e02d      	b.n	8004ecc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f84f 	bl	8004f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e02d      	b.n	8004f48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2224      	movs	r2, #36	; 0x24
 8004ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f811 	bl	8004f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d108      	bne.n	8004f72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f70:	e031      	b.n	8004fd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f72:	2308      	movs	r3, #8
 8004f74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f76:	2308      	movs	r3, #8
 8004f78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	0e5b      	lsrs	r3, r3, #25
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	0f5b      	lsrs	r3, r3, #29
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	7b3a      	ldrb	r2, [r7, #12]
 8004f9e:	4911      	ldr	r1, [pc, #68]	; (8004fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8004fa0:	5c8a      	ldrb	r2, [r1, r2]
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fa6:	7b3a      	ldrb	r2, [r7, #12]
 8004fa8:	490f      	ldr	r1, [pc, #60]	; (8004fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8004faa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fac:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	7b7a      	ldrb	r2, [r7, #13]
 8004fbc:	4909      	ldr	r1, [pc, #36]	; (8004fe4 <UARTEx_SetNbDataToProcess+0x94>)
 8004fbe:	5c8a      	ldrb	r2, [r1, r2]
 8004fc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fc4:	7b7a      	ldrb	r2, [r7, #13]
 8004fc6:	4908      	ldr	r1, [pc, #32]	; (8004fe8 <UARTEx_SetNbDataToProcess+0x98>)
 8004fc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fca:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	08007ab8 	.word	0x08007ab8
 8004fe8:	08007ac0 	.word	0x08007ac0

08004fec <__errno>:
 8004fec:	4b01      	ldr	r3, [pc, #4]	; (8004ff4 <__errno+0x8>)
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20000010 	.word	0x20000010

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	4d0d      	ldr	r5, [pc, #52]	; (8005030 <__libc_init_array+0x38>)
 8004ffc:	4c0d      	ldr	r4, [pc, #52]	; (8005034 <__libc_init_array+0x3c>)
 8004ffe:	1b64      	subs	r4, r4, r5
 8005000:	10a4      	asrs	r4, r4, #2
 8005002:	2600      	movs	r6, #0
 8005004:	42a6      	cmp	r6, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	4d0b      	ldr	r5, [pc, #44]	; (8005038 <__libc_init_array+0x40>)
 800500a:	4c0c      	ldr	r4, [pc, #48]	; (800503c <__libc_init_array+0x44>)
 800500c:	f002 fd0a 	bl	8007a24 <_init>
 8005010:	1b64      	subs	r4, r4, r5
 8005012:	10a4      	asrs	r4, r4, #2
 8005014:	2600      	movs	r6, #0
 8005016:	42a6      	cmp	r6, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005020:	4798      	blx	r3
 8005022:	3601      	adds	r6, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f855 3b04 	ldr.w	r3, [r5], #4
 800502a:	4798      	blx	r3
 800502c:	3601      	adds	r6, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	08007eb4 	.word	0x08007eb4
 8005034:	08007eb4 	.word	0x08007eb4
 8005038:	08007eb4 	.word	0x08007eb4
 800503c:	08007eb8 	.word	0x08007eb8

08005040 <memset>:
 8005040:	4402      	add	r2, r0
 8005042:	4603      	mov	r3, r0
 8005044:	4293      	cmp	r3, r2
 8005046:	d100      	bne.n	800504a <memset+0xa>
 8005048:	4770      	bx	lr
 800504a:	f803 1b01 	strb.w	r1, [r3], #1
 800504e:	e7f9      	b.n	8005044 <memset+0x4>

08005050 <__cvt>:
 8005050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	ec55 4b10 	vmov	r4, r5, d0
 8005058:	2d00      	cmp	r5, #0
 800505a:	460e      	mov	r6, r1
 800505c:	4619      	mov	r1, r3
 800505e:	462b      	mov	r3, r5
 8005060:	bfbb      	ittet	lt
 8005062:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005066:	461d      	movlt	r5, r3
 8005068:	2300      	movge	r3, #0
 800506a:	232d      	movlt	r3, #45	; 0x2d
 800506c:	700b      	strb	r3, [r1, #0]
 800506e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005070:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005074:	4691      	mov	r9, r2
 8005076:	f023 0820 	bic.w	r8, r3, #32
 800507a:	bfbc      	itt	lt
 800507c:	4622      	movlt	r2, r4
 800507e:	4614      	movlt	r4, r2
 8005080:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005084:	d005      	beq.n	8005092 <__cvt+0x42>
 8005086:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800508a:	d100      	bne.n	800508e <__cvt+0x3e>
 800508c:	3601      	adds	r6, #1
 800508e:	2102      	movs	r1, #2
 8005090:	e000      	b.n	8005094 <__cvt+0x44>
 8005092:	2103      	movs	r1, #3
 8005094:	ab03      	add	r3, sp, #12
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	ab02      	add	r3, sp, #8
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	ec45 4b10 	vmov	d0, r4, r5
 80050a0:	4653      	mov	r3, sl
 80050a2:	4632      	mov	r2, r6
 80050a4:	f000 fce4 	bl	8005a70 <_dtoa_r>
 80050a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050ac:	4607      	mov	r7, r0
 80050ae:	d102      	bne.n	80050b6 <__cvt+0x66>
 80050b0:	f019 0f01 	tst.w	r9, #1
 80050b4:	d022      	beq.n	80050fc <__cvt+0xac>
 80050b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ba:	eb07 0906 	add.w	r9, r7, r6
 80050be:	d110      	bne.n	80050e2 <__cvt+0x92>
 80050c0:	783b      	ldrb	r3, [r7, #0]
 80050c2:	2b30      	cmp	r3, #48	; 0x30
 80050c4:	d10a      	bne.n	80050dc <__cvt+0x8c>
 80050c6:	2200      	movs	r2, #0
 80050c8:	2300      	movs	r3, #0
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb fd13 	bl	8000af8 <__aeabi_dcmpeq>
 80050d2:	b918      	cbnz	r0, 80050dc <__cvt+0x8c>
 80050d4:	f1c6 0601 	rsb	r6, r6, #1
 80050d8:	f8ca 6000 	str.w	r6, [sl]
 80050dc:	f8da 3000 	ldr.w	r3, [sl]
 80050e0:	4499      	add	r9, r3
 80050e2:	2200      	movs	r2, #0
 80050e4:	2300      	movs	r3, #0
 80050e6:	4620      	mov	r0, r4
 80050e8:	4629      	mov	r1, r5
 80050ea:	f7fb fd05 	bl	8000af8 <__aeabi_dcmpeq>
 80050ee:	b108      	cbz	r0, 80050f4 <__cvt+0xa4>
 80050f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80050f4:	2230      	movs	r2, #48	; 0x30
 80050f6:	9b03      	ldr	r3, [sp, #12]
 80050f8:	454b      	cmp	r3, r9
 80050fa:	d307      	bcc.n	800510c <__cvt+0xbc>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005100:	1bdb      	subs	r3, r3, r7
 8005102:	4638      	mov	r0, r7
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	b004      	add	sp, #16
 8005108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	9103      	str	r1, [sp, #12]
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	e7f0      	b.n	80050f6 <__cvt+0xa6>

08005114 <__exponent>:
 8005114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005116:	4603      	mov	r3, r0
 8005118:	2900      	cmp	r1, #0
 800511a:	bfb8      	it	lt
 800511c:	4249      	neglt	r1, r1
 800511e:	f803 2b02 	strb.w	r2, [r3], #2
 8005122:	bfb4      	ite	lt
 8005124:	222d      	movlt	r2, #45	; 0x2d
 8005126:	222b      	movge	r2, #43	; 0x2b
 8005128:	2909      	cmp	r1, #9
 800512a:	7042      	strb	r2, [r0, #1]
 800512c:	dd2a      	ble.n	8005184 <__exponent+0x70>
 800512e:	f10d 0407 	add.w	r4, sp, #7
 8005132:	46a4      	mov	ip, r4
 8005134:	270a      	movs	r7, #10
 8005136:	46a6      	mov	lr, r4
 8005138:	460a      	mov	r2, r1
 800513a:	fb91 f6f7 	sdiv	r6, r1, r7
 800513e:	fb07 1516 	mls	r5, r7, r6, r1
 8005142:	3530      	adds	r5, #48	; 0x30
 8005144:	2a63      	cmp	r2, #99	; 0x63
 8005146:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800514a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800514e:	4631      	mov	r1, r6
 8005150:	dcf1      	bgt.n	8005136 <__exponent+0x22>
 8005152:	3130      	adds	r1, #48	; 0x30
 8005154:	f1ae 0502 	sub.w	r5, lr, #2
 8005158:	f804 1c01 	strb.w	r1, [r4, #-1]
 800515c:	1c44      	adds	r4, r0, #1
 800515e:	4629      	mov	r1, r5
 8005160:	4561      	cmp	r1, ip
 8005162:	d30a      	bcc.n	800517a <__exponent+0x66>
 8005164:	f10d 0209 	add.w	r2, sp, #9
 8005168:	eba2 020e 	sub.w	r2, r2, lr
 800516c:	4565      	cmp	r5, ip
 800516e:	bf88      	it	hi
 8005170:	2200      	movhi	r2, #0
 8005172:	4413      	add	r3, r2
 8005174:	1a18      	subs	r0, r3, r0
 8005176:	b003      	add	sp, #12
 8005178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800517a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800517e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005182:	e7ed      	b.n	8005160 <__exponent+0x4c>
 8005184:	2330      	movs	r3, #48	; 0x30
 8005186:	3130      	adds	r1, #48	; 0x30
 8005188:	7083      	strb	r3, [r0, #2]
 800518a:	70c1      	strb	r1, [r0, #3]
 800518c:	1d03      	adds	r3, r0, #4
 800518e:	e7f1      	b.n	8005174 <__exponent+0x60>

08005190 <_printf_float>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	ed2d 8b02 	vpush	{d8}
 8005198:	b08d      	sub	sp, #52	; 0x34
 800519a:	460c      	mov	r4, r1
 800519c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051a0:	4616      	mov	r6, r2
 80051a2:	461f      	mov	r7, r3
 80051a4:	4605      	mov	r5, r0
 80051a6:	f001 fb45 	bl	8006834 <_localeconv_r>
 80051aa:	f8d0 a000 	ldr.w	sl, [r0]
 80051ae:	4650      	mov	r0, sl
 80051b0:	f7fb f826 	bl	8000200 <strlen>
 80051b4:	2300      	movs	r3, #0
 80051b6:	930a      	str	r3, [sp, #40]	; 0x28
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	9305      	str	r3, [sp, #20]
 80051bc:	f8d8 3000 	ldr.w	r3, [r8]
 80051c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80051c4:	3307      	adds	r3, #7
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	f103 0208 	add.w	r2, r3, #8
 80051ce:	f8c8 2000 	str.w	r2, [r8]
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80051da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80051de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80051e2:	9307      	str	r3, [sp, #28]
 80051e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80051e8:	ee08 0a10 	vmov	s16, r0
 80051ec:	4b9f      	ldr	r3, [pc, #636]	; (800546c <_printf_float+0x2dc>)
 80051ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051f6:	f7fb fcb1 	bl	8000b5c <__aeabi_dcmpun>
 80051fa:	bb88      	cbnz	r0, 8005260 <_printf_float+0xd0>
 80051fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005200:	4b9a      	ldr	r3, [pc, #616]	; (800546c <_printf_float+0x2dc>)
 8005202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005206:	f7fb fc8b 	bl	8000b20 <__aeabi_dcmple>
 800520a:	bb48      	cbnz	r0, 8005260 <_printf_float+0xd0>
 800520c:	2200      	movs	r2, #0
 800520e:	2300      	movs	r3, #0
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb fc7a 	bl	8000b0c <__aeabi_dcmplt>
 8005218:	b110      	cbz	r0, 8005220 <_printf_float+0x90>
 800521a:	232d      	movs	r3, #45	; 0x2d
 800521c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005220:	4b93      	ldr	r3, [pc, #588]	; (8005470 <_printf_float+0x2e0>)
 8005222:	4894      	ldr	r0, [pc, #592]	; (8005474 <_printf_float+0x2e4>)
 8005224:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005228:	bf94      	ite	ls
 800522a:	4698      	movls	r8, r3
 800522c:	4680      	movhi	r8, r0
 800522e:	2303      	movs	r3, #3
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	9b05      	ldr	r3, [sp, #20]
 8005234:	f023 0204 	bic.w	r2, r3, #4
 8005238:	6022      	str	r2, [r4, #0]
 800523a:	f04f 0900 	mov.w	r9, #0
 800523e:	9700      	str	r7, [sp, #0]
 8005240:	4633      	mov	r3, r6
 8005242:	aa0b      	add	r2, sp, #44	; 0x2c
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f000 f9d8 	bl	80055fc <_printf_common>
 800524c:	3001      	adds	r0, #1
 800524e:	f040 8090 	bne.w	8005372 <_printf_float+0x1e2>
 8005252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005256:	b00d      	add	sp, #52	; 0x34
 8005258:	ecbd 8b02 	vpop	{d8}
 800525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005260:	4642      	mov	r2, r8
 8005262:	464b      	mov	r3, r9
 8005264:	4640      	mov	r0, r8
 8005266:	4649      	mov	r1, r9
 8005268:	f7fb fc78 	bl	8000b5c <__aeabi_dcmpun>
 800526c:	b140      	cbz	r0, 8005280 <_printf_float+0xf0>
 800526e:	464b      	mov	r3, r9
 8005270:	2b00      	cmp	r3, #0
 8005272:	bfbc      	itt	lt
 8005274:	232d      	movlt	r3, #45	; 0x2d
 8005276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800527a:	487f      	ldr	r0, [pc, #508]	; (8005478 <_printf_float+0x2e8>)
 800527c:	4b7f      	ldr	r3, [pc, #508]	; (800547c <_printf_float+0x2ec>)
 800527e:	e7d1      	b.n	8005224 <_printf_float+0x94>
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005286:	9206      	str	r2, [sp, #24]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	d13f      	bne.n	800530c <_printf_float+0x17c>
 800528c:	2306      	movs	r3, #6
 800528e:	6063      	str	r3, [r4, #4]
 8005290:	9b05      	ldr	r3, [sp, #20]
 8005292:	6861      	ldr	r1, [r4, #4]
 8005294:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005298:	2300      	movs	r3, #0
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	ab0a      	add	r3, sp, #40	; 0x28
 800529e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052a2:	ab09      	add	r3, sp, #36	; 0x24
 80052a4:	ec49 8b10 	vmov	d0, r8, r9
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	6022      	str	r2, [r4, #0]
 80052ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052b0:	4628      	mov	r0, r5
 80052b2:	f7ff fecd 	bl	8005050 <__cvt>
 80052b6:	9b06      	ldr	r3, [sp, #24]
 80052b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ba:	2b47      	cmp	r3, #71	; 0x47
 80052bc:	4680      	mov	r8, r0
 80052be:	d108      	bne.n	80052d2 <_printf_float+0x142>
 80052c0:	1cc8      	adds	r0, r1, #3
 80052c2:	db02      	blt.n	80052ca <_printf_float+0x13a>
 80052c4:	6863      	ldr	r3, [r4, #4]
 80052c6:	4299      	cmp	r1, r3
 80052c8:	dd41      	ble.n	800534e <_printf_float+0x1be>
 80052ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80052ce:	fa5f fb8b 	uxtb.w	fp, fp
 80052d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052d6:	d820      	bhi.n	800531a <_printf_float+0x18a>
 80052d8:	3901      	subs	r1, #1
 80052da:	465a      	mov	r2, fp
 80052dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80052e0:	9109      	str	r1, [sp, #36]	; 0x24
 80052e2:	f7ff ff17 	bl	8005114 <__exponent>
 80052e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052e8:	1813      	adds	r3, r2, r0
 80052ea:	2a01      	cmp	r2, #1
 80052ec:	4681      	mov	r9, r0
 80052ee:	6123      	str	r3, [r4, #16]
 80052f0:	dc02      	bgt.n	80052f8 <_printf_float+0x168>
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	07d2      	lsls	r2, r2, #31
 80052f6:	d501      	bpl.n	80052fc <_printf_float+0x16c>
 80052f8:	3301      	adds	r3, #1
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005300:	2b00      	cmp	r3, #0
 8005302:	d09c      	beq.n	800523e <_printf_float+0xae>
 8005304:	232d      	movs	r3, #45	; 0x2d
 8005306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800530a:	e798      	b.n	800523e <_printf_float+0xae>
 800530c:	9a06      	ldr	r2, [sp, #24]
 800530e:	2a47      	cmp	r2, #71	; 0x47
 8005310:	d1be      	bne.n	8005290 <_printf_float+0x100>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1bc      	bne.n	8005290 <_printf_float+0x100>
 8005316:	2301      	movs	r3, #1
 8005318:	e7b9      	b.n	800528e <_printf_float+0xfe>
 800531a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800531e:	d118      	bne.n	8005352 <_printf_float+0x1c2>
 8005320:	2900      	cmp	r1, #0
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	dd0b      	ble.n	800533e <_printf_float+0x1ae>
 8005326:	6121      	str	r1, [r4, #16]
 8005328:	b913      	cbnz	r3, 8005330 <_printf_float+0x1a0>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	07d0      	lsls	r0, r2, #31
 800532e:	d502      	bpl.n	8005336 <_printf_float+0x1a6>
 8005330:	3301      	adds	r3, #1
 8005332:	440b      	add	r3, r1
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	65a1      	str	r1, [r4, #88]	; 0x58
 8005338:	f04f 0900 	mov.w	r9, #0
 800533c:	e7de      	b.n	80052fc <_printf_float+0x16c>
 800533e:	b913      	cbnz	r3, 8005346 <_printf_float+0x1b6>
 8005340:	6822      	ldr	r2, [r4, #0]
 8005342:	07d2      	lsls	r2, r2, #31
 8005344:	d501      	bpl.n	800534a <_printf_float+0x1ba>
 8005346:	3302      	adds	r3, #2
 8005348:	e7f4      	b.n	8005334 <_printf_float+0x1a4>
 800534a:	2301      	movs	r3, #1
 800534c:	e7f2      	b.n	8005334 <_printf_float+0x1a4>
 800534e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005354:	4299      	cmp	r1, r3
 8005356:	db05      	blt.n	8005364 <_printf_float+0x1d4>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	6121      	str	r1, [r4, #16]
 800535c:	07d8      	lsls	r0, r3, #31
 800535e:	d5ea      	bpl.n	8005336 <_printf_float+0x1a6>
 8005360:	1c4b      	adds	r3, r1, #1
 8005362:	e7e7      	b.n	8005334 <_printf_float+0x1a4>
 8005364:	2900      	cmp	r1, #0
 8005366:	bfd4      	ite	le
 8005368:	f1c1 0202 	rsble	r2, r1, #2
 800536c:	2201      	movgt	r2, #1
 800536e:	4413      	add	r3, r2
 8005370:	e7e0      	b.n	8005334 <_printf_float+0x1a4>
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	055a      	lsls	r2, r3, #21
 8005376:	d407      	bmi.n	8005388 <_printf_float+0x1f8>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	4642      	mov	r2, r8
 800537c:	4631      	mov	r1, r6
 800537e:	4628      	mov	r0, r5
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	d12c      	bne.n	80053e0 <_printf_float+0x250>
 8005386:	e764      	b.n	8005252 <_printf_float+0xc2>
 8005388:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800538c:	f240 80e0 	bls.w	8005550 <_printf_float+0x3c0>
 8005390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005394:	2200      	movs	r2, #0
 8005396:	2300      	movs	r3, #0
 8005398:	f7fb fbae 	bl	8000af8 <__aeabi_dcmpeq>
 800539c:	2800      	cmp	r0, #0
 800539e:	d034      	beq.n	800540a <_printf_float+0x27a>
 80053a0:	4a37      	ldr	r2, [pc, #220]	; (8005480 <_printf_float+0x2f0>)
 80053a2:	2301      	movs	r3, #1
 80053a4:	4631      	mov	r1, r6
 80053a6:	4628      	mov	r0, r5
 80053a8:	47b8      	blx	r7
 80053aa:	3001      	adds	r0, #1
 80053ac:	f43f af51 	beq.w	8005252 <_printf_float+0xc2>
 80053b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053b4:	429a      	cmp	r2, r3
 80053b6:	db02      	blt.n	80053be <_printf_float+0x22e>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	07d8      	lsls	r0, r3, #31
 80053bc:	d510      	bpl.n	80053e0 <_printf_float+0x250>
 80053be:	ee18 3a10 	vmov	r3, s16
 80053c2:	4652      	mov	r2, sl
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f af41 	beq.w	8005252 <_printf_float+0xc2>
 80053d0:	f04f 0800 	mov.w	r8, #0
 80053d4:	f104 091a 	add.w	r9, r4, #26
 80053d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053da:	3b01      	subs	r3, #1
 80053dc:	4543      	cmp	r3, r8
 80053de:	dc09      	bgt.n	80053f4 <_printf_float+0x264>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	f100 8105 	bmi.w	80055f2 <_printf_float+0x462>
 80053e8:	68e0      	ldr	r0, [r4, #12]
 80053ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ec:	4298      	cmp	r0, r3
 80053ee:	bfb8      	it	lt
 80053f0:	4618      	movlt	r0, r3
 80053f2:	e730      	b.n	8005256 <_printf_float+0xc6>
 80053f4:	2301      	movs	r3, #1
 80053f6:	464a      	mov	r2, r9
 80053f8:	4631      	mov	r1, r6
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	f43f af27 	beq.w	8005252 <_printf_float+0xc2>
 8005404:	f108 0801 	add.w	r8, r8, #1
 8005408:	e7e6      	b.n	80053d8 <_printf_float+0x248>
 800540a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	dc39      	bgt.n	8005484 <_printf_float+0x2f4>
 8005410:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <_printf_float+0x2f0>)
 8005412:	2301      	movs	r3, #1
 8005414:	4631      	mov	r1, r6
 8005416:	4628      	mov	r0, r5
 8005418:	47b8      	blx	r7
 800541a:	3001      	adds	r0, #1
 800541c:	f43f af19 	beq.w	8005252 <_printf_float+0xc2>
 8005420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005424:	4313      	orrs	r3, r2
 8005426:	d102      	bne.n	800542e <_printf_float+0x29e>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	07d9      	lsls	r1, r3, #31
 800542c:	d5d8      	bpl.n	80053e0 <_printf_float+0x250>
 800542e:	ee18 3a10 	vmov	r3, s16
 8005432:	4652      	mov	r2, sl
 8005434:	4631      	mov	r1, r6
 8005436:	4628      	mov	r0, r5
 8005438:	47b8      	blx	r7
 800543a:	3001      	adds	r0, #1
 800543c:	f43f af09 	beq.w	8005252 <_printf_float+0xc2>
 8005440:	f04f 0900 	mov.w	r9, #0
 8005444:	f104 0a1a 	add.w	sl, r4, #26
 8005448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800544a:	425b      	negs	r3, r3
 800544c:	454b      	cmp	r3, r9
 800544e:	dc01      	bgt.n	8005454 <_printf_float+0x2c4>
 8005450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005452:	e792      	b.n	800537a <_printf_float+0x1ea>
 8005454:	2301      	movs	r3, #1
 8005456:	4652      	mov	r2, sl
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f aef7 	beq.w	8005252 <_printf_float+0xc2>
 8005464:	f109 0901 	add.w	r9, r9, #1
 8005468:	e7ee      	b.n	8005448 <_printf_float+0x2b8>
 800546a:	bf00      	nop
 800546c:	7fefffff 	.word	0x7fefffff
 8005470:	08007acc 	.word	0x08007acc
 8005474:	08007ad0 	.word	0x08007ad0
 8005478:	08007ad8 	.word	0x08007ad8
 800547c:	08007ad4 	.word	0x08007ad4
 8005480:	08007adc 	.word	0x08007adc
 8005484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005486:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005488:	429a      	cmp	r2, r3
 800548a:	bfa8      	it	ge
 800548c:	461a      	movge	r2, r3
 800548e:	2a00      	cmp	r2, #0
 8005490:	4691      	mov	r9, r2
 8005492:	dc37      	bgt.n	8005504 <_printf_float+0x374>
 8005494:	f04f 0b00 	mov.w	fp, #0
 8005498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800549c:	f104 021a 	add.w	r2, r4, #26
 80054a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054a2:	9305      	str	r3, [sp, #20]
 80054a4:	eba3 0309 	sub.w	r3, r3, r9
 80054a8:	455b      	cmp	r3, fp
 80054aa:	dc33      	bgt.n	8005514 <_printf_float+0x384>
 80054ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b0:	429a      	cmp	r2, r3
 80054b2:	db3b      	blt.n	800552c <_printf_float+0x39c>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	07da      	lsls	r2, r3, #31
 80054b8:	d438      	bmi.n	800552c <_printf_float+0x39c>
 80054ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	eba2 0901 	sub.w	r9, r2, r1
 80054c6:	4599      	cmp	r9, r3
 80054c8:	bfa8      	it	ge
 80054ca:	4699      	movge	r9, r3
 80054cc:	f1b9 0f00 	cmp.w	r9, #0
 80054d0:	dc35      	bgt.n	800553e <_printf_float+0x3ae>
 80054d2:	f04f 0800 	mov.w	r8, #0
 80054d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054da:	f104 0a1a 	add.w	sl, r4, #26
 80054de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	eba3 0309 	sub.w	r3, r3, r9
 80054e8:	4543      	cmp	r3, r8
 80054ea:	f77f af79 	ble.w	80053e0 <_printf_float+0x250>
 80054ee:	2301      	movs	r3, #1
 80054f0:	4652      	mov	r2, sl
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f aeaa 	beq.w	8005252 <_printf_float+0xc2>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	e7ec      	b.n	80054de <_printf_float+0x34e>
 8005504:	4613      	mov	r3, r2
 8005506:	4631      	mov	r1, r6
 8005508:	4642      	mov	r2, r8
 800550a:	4628      	mov	r0, r5
 800550c:	47b8      	blx	r7
 800550e:	3001      	adds	r0, #1
 8005510:	d1c0      	bne.n	8005494 <_printf_float+0x304>
 8005512:	e69e      	b.n	8005252 <_printf_float+0xc2>
 8005514:	2301      	movs	r3, #1
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	9205      	str	r2, [sp, #20]
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f ae97 	beq.w	8005252 <_printf_float+0xc2>
 8005524:	9a05      	ldr	r2, [sp, #20]
 8005526:	f10b 0b01 	add.w	fp, fp, #1
 800552a:	e7b9      	b.n	80054a0 <_printf_float+0x310>
 800552c:	ee18 3a10 	vmov	r3, s16
 8005530:	4652      	mov	r2, sl
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	47b8      	blx	r7
 8005538:	3001      	adds	r0, #1
 800553a:	d1be      	bne.n	80054ba <_printf_float+0x32a>
 800553c:	e689      	b.n	8005252 <_printf_float+0xc2>
 800553e:	9a05      	ldr	r2, [sp, #20]
 8005540:	464b      	mov	r3, r9
 8005542:	4442      	add	r2, r8
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	d1c1      	bne.n	80054d2 <_printf_float+0x342>
 800554e:	e680      	b.n	8005252 <_printf_float+0xc2>
 8005550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005552:	2a01      	cmp	r2, #1
 8005554:	dc01      	bgt.n	800555a <_printf_float+0x3ca>
 8005556:	07db      	lsls	r3, r3, #31
 8005558:	d538      	bpl.n	80055cc <_printf_float+0x43c>
 800555a:	2301      	movs	r3, #1
 800555c:	4642      	mov	r2, r8
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f ae74 	beq.w	8005252 <_printf_float+0xc2>
 800556a:	ee18 3a10 	vmov	r3, s16
 800556e:	4652      	mov	r2, sl
 8005570:	4631      	mov	r1, r6
 8005572:	4628      	mov	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	f43f ae6b 	beq.w	8005252 <_printf_float+0xc2>
 800557c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005580:	2200      	movs	r2, #0
 8005582:	2300      	movs	r3, #0
 8005584:	f7fb fab8 	bl	8000af8 <__aeabi_dcmpeq>
 8005588:	b9d8      	cbnz	r0, 80055c2 <_printf_float+0x432>
 800558a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558c:	f108 0201 	add.w	r2, r8, #1
 8005590:	3b01      	subs	r3, #1
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	d10e      	bne.n	80055ba <_printf_float+0x42a>
 800559c:	e659      	b.n	8005252 <_printf_float+0xc2>
 800559e:	2301      	movs	r3, #1
 80055a0:	4652      	mov	r2, sl
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f ae52 	beq.w	8005252 <_printf_float+0xc2>
 80055ae:	f108 0801 	add.w	r8, r8, #1
 80055b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	4543      	cmp	r3, r8
 80055b8:	dcf1      	bgt.n	800559e <_printf_float+0x40e>
 80055ba:	464b      	mov	r3, r9
 80055bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055c0:	e6dc      	b.n	800537c <_printf_float+0x1ec>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	f104 0a1a 	add.w	sl, r4, #26
 80055ca:	e7f2      	b.n	80055b2 <_printf_float+0x422>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4642      	mov	r2, r8
 80055d0:	e7df      	b.n	8005592 <_printf_float+0x402>
 80055d2:	2301      	movs	r3, #1
 80055d4:	464a      	mov	r2, r9
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae38 	beq.w	8005252 <_printf_float+0xc2>
 80055e2:	f108 0801 	add.w	r8, r8, #1
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055ea:	1a5b      	subs	r3, r3, r1
 80055ec:	4543      	cmp	r3, r8
 80055ee:	dcf0      	bgt.n	80055d2 <_printf_float+0x442>
 80055f0:	e6fa      	b.n	80053e8 <_printf_float+0x258>
 80055f2:	f04f 0800 	mov.w	r8, #0
 80055f6:	f104 0919 	add.w	r9, r4, #25
 80055fa:	e7f4      	b.n	80055e6 <_printf_float+0x456>

080055fc <_printf_common>:
 80055fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005600:	4616      	mov	r6, r2
 8005602:	4699      	mov	r9, r3
 8005604:	688a      	ldr	r2, [r1, #8]
 8005606:	690b      	ldr	r3, [r1, #16]
 8005608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800560c:	4293      	cmp	r3, r2
 800560e:	bfb8      	it	lt
 8005610:	4613      	movlt	r3, r2
 8005612:	6033      	str	r3, [r6, #0]
 8005614:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005618:	4607      	mov	r7, r0
 800561a:	460c      	mov	r4, r1
 800561c:	b10a      	cbz	r2, 8005622 <_printf_common+0x26>
 800561e:	3301      	adds	r3, #1
 8005620:	6033      	str	r3, [r6, #0]
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	0699      	lsls	r1, r3, #26
 8005626:	bf42      	ittt	mi
 8005628:	6833      	ldrmi	r3, [r6, #0]
 800562a:	3302      	addmi	r3, #2
 800562c:	6033      	strmi	r3, [r6, #0]
 800562e:	6825      	ldr	r5, [r4, #0]
 8005630:	f015 0506 	ands.w	r5, r5, #6
 8005634:	d106      	bne.n	8005644 <_printf_common+0x48>
 8005636:	f104 0a19 	add.w	sl, r4, #25
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	6832      	ldr	r2, [r6, #0]
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	42ab      	cmp	r3, r5
 8005642:	dc26      	bgt.n	8005692 <_printf_common+0x96>
 8005644:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005648:	1e13      	subs	r3, r2, #0
 800564a:	6822      	ldr	r2, [r4, #0]
 800564c:	bf18      	it	ne
 800564e:	2301      	movne	r3, #1
 8005650:	0692      	lsls	r2, r2, #26
 8005652:	d42b      	bmi.n	80056ac <_printf_common+0xb0>
 8005654:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005658:	4649      	mov	r1, r9
 800565a:	4638      	mov	r0, r7
 800565c:	47c0      	blx	r8
 800565e:	3001      	adds	r0, #1
 8005660:	d01e      	beq.n	80056a0 <_printf_common+0xa4>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	68e5      	ldr	r5, [r4, #12]
 8005666:	6832      	ldr	r2, [r6, #0]
 8005668:	f003 0306 	and.w	r3, r3, #6
 800566c:	2b04      	cmp	r3, #4
 800566e:	bf08      	it	eq
 8005670:	1aad      	subeq	r5, r5, r2
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	6922      	ldr	r2, [r4, #16]
 8005676:	bf0c      	ite	eq
 8005678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800567c:	2500      	movne	r5, #0
 800567e:	4293      	cmp	r3, r2
 8005680:	bfc4      	itt	gt
 8005682:	1a9b      	subgt	r3, r3, r2
 8005684:	18ed      	addgt	r5, r5, r3
 8005686:	2600      	movs	r6, #0
 8005688:	341a      	adds	r4, #26
 800568a:	42b5      	cmp	r5, r6
 800568c:	d11a      	bne.n	80056c4 <_printf_common+0xc8>
 800568e:	2000      	movs	r0, #0
 8005690:	e008      	b.n	80056a4 <_printf_common+0xa8>
 8005692:	2301      	movs	r3, #1
 8005694:	4652      	mov	r2, sl
 8005696:	4649      	mov	r1, r9
 8005698:	4638      	mov	r0, r7
 800569a:	47c0      	blx	r8
 800569c:	3001      	adds	r0, #1
 800569e:	d103      	bne.n	80056a8 <_printf_common+0xac>
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a8:	3501      	adds	r5, #1
 80056aa:	e7c6      	b.n	800563a <_printf_common+0x3e>
 80056ac:	18e1      	adds	r1, r4, r3
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	2030      	movs	r0, #48	; 0x30
 80056b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056b6:	4422      	add	r2, r4
 80056b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056c0:	3302      	adds	r3, #2
 80056c2:	e7c7      	b.n	8005654 <_printf_common+0x58>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4622      	mov	r2, r4
 80056c8:	4649      	mov	r1, r9
 80056ca:	4638      	mov	r0, r7
 80056cc:	47c0      	blx	r8
 80056ce:	3001      	adds	r0, #1
 80056d0:	d0e6      	beq.n	80056a0 <_printf_common+0xa4>
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7d9      	b.n	800568a <_printf_common+0x8e>
	...

080056d8 <_printf_i>:
 80056d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056dc:	460c      	mov	r4, r1
 80056de:	4691      	mov	r9, r2
 80056e0:	7e27      	ldrb	r7, [r4, #24]
 80056e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056e4:	2f78      	cmp	r7, #120	; 0x78
 80056e6:	4680      	mov	r8, r0
 80056e8:	469a      	mov	sl, r3
 80056ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ee:	d807      	bhi.n	8005700 <_printf_i+0x28>
 80056f0:	2f62      	cmp	r7, #98	; 0x62
 80056f2:	d80a      	bhi.n	800570a <_printf_i+0x32>
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	f000 80d8 	beq.w	80058aa <_printf_i+0x1d2>
 80056fa:	2f58      	cmp	r7, #88	; 0x58
 80056fc:	f000 80a3 	beq.w	8005846 <_printf_i+0x16e>
 8005700:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005704:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005708:	e03a      	b.n	8005780 <_printf_i+0xa8>
 800570a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800570e:	2b15      	cmp	r3, #21
 8005710:	d8f6      	bhi.n	8005700 <_printf_i+0x28>
 8005712:	a001      	add	r0, pc, #4	; (adr r0, 8005718 <_printf_i+0x40>)
 8005714:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005718:	08005771 	.word	0x08005771
 800571c:	08005785 	.word	0x08005785
 8005720:	08005701 	.word	0x08005701
 8005724:	08005701 	.word	0x08005701
 8005728:	08005701 	.word	0x08005701
 800572c:	08005701 	.word	0x08005701
 8005730:	08005785 	.word	0x08005785
 8005734:	08005701 	.word	0x08005701
 8005738:	08005701 	.word	0x08005701
 800573c:	08005701 	.word	0x08005701
 8005740:	08005701 	.word	0x08005701
 8005744:	08005891 	.word	0x08005891
 8005748:	080057b5 	.word	0x080057b5
 800574c:	08005873 	.word	0x08005873
 8005750:	08005701 	.word	0x08005701
 8005754:	08005701 	.word	0x08005701
 8005758:	080058b3 	.word	0x080058b3
 800575c:	08005701 	.word	0x08005701
 8005760:	080057b5 	.word	0x080057b5
 8005764:	08005701 	.word	0x08005701
 8005768:	08005701 	.word	0x08005701
 800576c:	0800587b 	.word	0x0800587b
 8005770:	680b      	ldr	r3, [r1, #0]
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	600a      	str	r2, [r1, #0]
 8005778:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800577c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005780:	2301      	movs	r3, #1
 8005782:	e0a3      	b.n	80058cc <_printf_i+0x1f4>
 8005784:	6825      	ldr	r5, [r4, #0]
 8005786:	6808      	ldr	r0, [r1, #0]
 8005788:	062e      	lsls	r6, r5, #24
 800578a:	f100 0304 	add.w	r3, r0, #4
 800578e:	d50a      	bpl.n	80057a6 <_printf_i+0xce>
 8005790:	6805      	ldr	r5, [r0, #0]
 8005792:	600b      	str	r3, [r1, #0]
 8005794:	2d00      	cmp	r5, #0
 8005796:	da03      	bge.n	80057a0 <_printf_i+0xc8>
 8005798:	232d      	movs	r3, #45	; 0x2d
 800579a:	426d      	negs	r5, r5
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057a0:	485e      	ldr	r0, [pc, #376]	; (800591c <_printf_i+0x244>)
 80057a2:	230a      	movs	r3, #10
 80057a4:	e019      	b.n	80057da <_printf_i+0x102>
 80057a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057aa:	6805      	ldr	r5, [r0, #0]
 80057ac:	600b      	str	r3, [r1, #0]
 80057ae:	bf18      	it	ne
 80057b0:	b22d      	sxthne	r5, r5
 80057b2:	e7ef      	b.n	8005794 <_printf_i+0xbc>
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	1d18      	adds	r0, r3, #4
 80057ba:	6008      	str	r0, [r1, #0]
 80057bc:	0628      	lsls	r0, r5, #24
 80057be:	d501      	bpl.n	80057c4 <_printf_i+0xec>
 80057c0:	681d      	ldr	r5, [r3, #0]
 80057c2:	e002      	b.n	80057ca <_printf_i+0xf2>
 80057c4:	0669      	lsls	r1, r5, #25
 80057c6:	d5fb      	bpl.n	80057c0 <_printf_i+0xe8>
 80057c8:	881d      	ldrh	r5, [r3, #0]
 80057ca:	4854      	ldr	r0, [pc, #336]	; (800591c <_printf_i+0x244>)
 80057cc:	2f6f      	cmp	r7, #111	; 0x6f
 80057ce:	bf0c      	ite	eq
 80057d0:	2308      	moveq	r3, #8
 80057d2:	230a      	movne	r3, #10
 80057d4:	2100      	movs	r1, #0
 80057d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057da:	6866      	ldr	r6, [r4, #4]
 80057dc:	60a6      	str	r6, [r4, #8]
 80057de:	2e00      	cmp	r6, #0
 80057e0:	bfa2      	ittt	ge
 80057e2:	6821      	ldrge	r1, [r4, #0]
 80057e4:	f021 0104 	bicge.w	r1, r1, #4
 80057e8:	6021      	strge	r1, [r4, #0]
 80057ea:	b90d      	cbnz	r5, 80057f0 <_printf_i+0x118>
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	d04d      	beq.n	800588c <_printf_i+0x1b4>
 80057f0:	4616      	mov	r6, r2
 80057f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80057f6:	fb03 5711 	mls	r7, r3, r1, r5
 80057fa:	5dc7      	ldrb	r7, [r0, r7]
 80057fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005800:	462f      	mov	r7, r5
 8005802:	42bb      	cmp	r3, r7
 8005804:	460d      	mov	r5, r1
 8005806:	d9f4      	bls.n	80057f2 <_printf_i+0x11a>
 8005808:	2b08      	cmp	r3, #8
 800580a:	d10b      	bne.n	8005824 <_printf_i+0x14c>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	07df      	lsls	r7, r3, #31
 8005810:	d508      	bpl.n	8005824 <_printf_i+0x14c>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	6861      	ldr	r1, [r4, #4]
 8005816:	4299      	cmp	r1, r3
 8005818:	bfde      	ittt	le
 800581a:	2330      	movle	r3, #48	; 0x30
 800581c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005820:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005824:	1b92      	subs	r2, r2, r6
 8005826:	6122      	str	r2, [r4, #16]
 8005828:	f8cd a000 	str.w	sl, [sp]
 800582c:	464b      	mov	r3, r9
 800582e:	aa03      	add	r2, sp, #12
 8005830:	4621      	mov	r1, r4
 8005832:	4640      	mov	r0, r8
 8005834:	f7ff fee2 	bl	80055fc <_printf_common>
 8005838:	3001      	adds	r0, #1
 800583a:	d14c      	bne.n	80058d6 <_printf_i+0x1fe>
 800583c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005840:	b004      	add	sp, #16
 8005842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005846:	4835      	ldr	r0, [pc, #212]	; (800591c <_printf_i+0x244>)
 8005848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	680e      	ldr	r6, [r1, #0]
 8005850:	061f      	lsls	r7, r3, #24
 8005852:	f856 5b04 	ldr.w	r5, [r6], #4
 8005856:	600e      	str	r6, [r1, #0]
 8005858:	d514      	bpl.n	8005884 <_printf_i+0x1ac>
 800585a:	07d9      	lsls	r1, r3, #31
 800585c:	bf44      	itt	mi
 800585e:	f043 0320 	orrmi.w	r3, r3, #32
 8005862:	6023      	strmi	r3, [r4, #0]
 8005864:	b91d      	cbnz	r5, 800586e <_printf_i+0x196>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	f023 0320 	bic.w	r3, r3, #32
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	2310      	movs	r3, #16
 8005870:	e7b0      	b.n	80057d4 <_printf_i+0xfc>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	f043 0320 	orr.w	r3, r3, #32
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	2378      	movs	r3, #120	; 0x78
 800587c:	4828      	ldr	r0, [pc, #160]	; (8005920 <_printf_i+0x248>)
 800587e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005882:	e7e3      	b.n	800584c <_printf_i+0x174>
 8005884:	065e      	lsls	r6, r3, #25
 8005886:	bf48      	it	mi
 8005888:	b2ad      	uxthmi	r5, r5
 800588a:	e7e6      	b.n	800585a <_printf_i+0x182>
 800588c:	4616      	mov	r6, r2
 800588e:	e7bb      	b.n	8005808 <_printf_i+0x130>
 8005890:	680b      	ldr	r3, [r1, #0]
 8005892:	6826      	ldr	r6, [r4, #0]
 8005894:	6960      	ldr	r0, [r4, #20]
 8005896:	1d1d      	adds	r5, r3, #4
 8005898:	600d      	str	r5, [r1, #0]
 800589a:	0635      	lsls	r5, r6, #24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	d501      	bpl.n	80058a4 <_printf_i+0x1cc>
 80058a0:	6018      	str	r0, [r3, #0]
 80058a2:	e002      	b.n	80058aa <_printf_i+0x1d2>
 80058a4:	0671      	lsls	r1, r6, #25
 80058a6:	d5fb      	bpl.n	80058a0 <_printf_i+0x1c8>
 80058a8:	8018      	strh	r0, [r3, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	4616      	mov	r6, r2
 80058b0:	e7ba      	b.n	8005828 <_printf_i+0x150>
 80058b2:	680b      	ldr	r3, [r1, #0]
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	600a      	str	r2, [r1, #0]
 80058b8:	681e      	ldr	r6, [r3, #0]
 80058ba:	6862      	ldr	r2, [r4, #4]
 80058bc:	2100      	movs	r1, #0
 80058be:	4630      	mov	r0, r6
 80058c0:	f7fa fca6 	bl	8000210 <memchr>
 80058c4:	b108      	cbz	r0, 80058ca <_printf_i+0x1f2>
 80058c6:	1b80      	subs	r0, r0, r6
 80058c8:	6060      	str	r0, [r4, #4]
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	2300      	movs	r3, #0
 80058d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d4:	e7a8      	b.n	8005828 <_printf_i+0x150>
 80058d6:	6923      	ldr	r3, [r4, #16]
 80058d8:	4632      	mov	r2, r6
 80058da:	4649      	mov	r1, r9
 80058dc:	4640      	mov	r0, r8
 80058de:	47d0      	blx	sl
 80058e0:	3001      	adds	r0, #1
 80058e2:	d0ab      	beq.n	800583c <_printf_i+0x164>
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	079b      	lsls	r3, r3, #30
 80058e8:	d413      	bmi.n	8005912 <_printf_i+0x23a>
 80058ea:	68e0      	ldr	r0, [r4, #12]
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	4298      	cmp	r0, r3
 80058f0:	bfb8      	it	lt
 80058f2:	4618      	movlt	r0, r3
 80058f4:	e7a4      	b.n	8005840 <_printf_i+0x168>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4632      	mov	r2, r6
 80058fa:	4649      	mov	r1, r9
 80058fc:	4640      	mov	r0, r8
 80058fe:	47d0      	blx	sl
 8005900:	3001      	adds	r0, #1
 8005902:	d09b      	beq.n	800583c <_printf_i+0x164>
 8005904:	3501      	adds	r5, #1
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	9903      	ldr	r1, [sp, #12]
 800590a:	1a5b      	subs	r3, r3, r1
 800590c:	42ab      	cmp	r3, r5
 800590e:	dcf2      	bgt.n	80058f6 <_printf_i+0x21e>
 8005910:	e7eb      	b.n	80058ea <_printf_i+0x212>
 8005912:	2500      	movs	r5, #0
 8005914:	f104 0619 	add.w	r6, r4, #25
 8005918:	e7f5      	b.n	8005906 <_printf_i+0x22e>
 800591a:	bf00      	nop
 800591c:	08007ade 	.word	0x08007ade
 8005920:	08007aef 	.word	0x08007aef

08005924 <iprintf>:
 8005924:	b40f      	push	{r0, r1, r2, r3}
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <iprintf+0x2c>)
 8005928:	b513      	push	{r0, r1, r4, lr}
 800592a:	681c      	ldr	r4, [r3, #0]
 800592c:	b124      	cbz	r4, 8005938 <iprintf+0x14>
 800592e:	69a3      	ldr	r3, [r4, #24]
 8005930:	b913      	cbnz	r3, 8005938 <iprintf+0x14>
 8005932:	4620      	mov	r0, r4
 8005934:	f000 fee0 	bl	80066f8 <__sinit>
 8005938:	ab05      	add	r3, sp, #20
 800593a:	9a04      	ldr	r2, [sp, #16]
 800593c:	68a1      	ldr	r1, [r4, #8]
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	4620      	mov	r0, r4
 8005942:	f001 fbf7 	bl	8007134 <_vfiprintf_r>
 8005946:	b002      	add	sp, #8
 8005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594c:	b004      	add	sp, #16
 800594e:	4770      	bx	lr
 8005950:	20000010 	.word	0x20000010

08005954 <quorem>:
 8005954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	6903      	ldr	r3, [r0, #16]
 800595a:	690c      	ldr	r4, [r1, #16]
 800595c:	42a3      	cmp	r3, r4
 800595e:	4607      	mov	r7, r0
 8005960:	f2c0 8081 	blt.w	8005a66 <quorem+0x112>
 8005964:	3c01      	subs	r4, #1
 8005966:	f101 0814 	add.w	r8, r1, #20
 800596a:	f100 0514 	add.w	r5, r0, #20
 800596e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800597c:	3301      	adds	r3, #1
 800597e:	429a      	cmp	r2, r3
 8005980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005988:	fbb2 f6f3 	udiv	r6, r2, r3
 800598c:	d331      	bcc.n	80059f2 <quorem+0x9e>
 800598e:	f04f 0e00 	mov.w	lr, #0
 8005992:	4640      	mov	r0, r8
 8005994:	46ac      	mov	ip, r5
 8005996:	46f2      	mov	sl, lr
 8005998:	f850 2b04 	ldr.w	r2, [r0], #4
 800599c:	b293      	uxth	r3, r2
 800599e:	fb06 e303 	mla	r3, r6, r3, lr
 80059a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ebaa 0303 	sub.w	r3, sl, r3
 80059ac:	0c12      	lsrs	r2, r2, #16
 80059ae:	f8dc a000 	ldr.w	sl, [ip]
 80059b2:	fb06 e202 	mla	r2, r6, r2, lr
 80059b6:	fa13 f38a 	uxtah	r3, r3, sl
 80059ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059be:	fa1f fa82 	uxth.w	sl, r2
 80059c2:	f8dc 2000 	ldr.w	r2, [ip]
 80059c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80059ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d4:	4581      	cmp	r9, r0
 80059d6:	f84c 3b04 	str.w	r3, [ip], #4
 80059da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80059de:	d2db      	bcs.n	8005998 <quorem+0x44>
 80059e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80059e4:	b92b      	cbnz	r3, 80059f2 <quorem+0x9e>
 80059e6:	9b01      	ldr	r3, [sp, #4]
 80059e8:	3b04      	subs	r3, #4
 80059ea:	429d      	cmp	r5, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	d32e      	bcc.n	8005a4e <quorem+0xfa>
 80059f0:	613c      	str	r4, [r7, #16]
 80059f2:	4638      	mov	r0, r7
 80059f4:	f001 f9ba 	bl	8006d6c <__mcmp>
 80059f8:	2800      	cmp	r0, #0
 80059fa:	db24      	blt.n	8005a46 <quorem+0xf2>
 80059fc:	3601      	adds	r6, #1
 80059fe:	4628      	mov	r0, r5
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a08:	f8d0 e000 	ldr.w	lr, [r0]
 8005a0c:	b293      	uxth	r3, r2
 8005a0e:	ebac 0303 	sub.w	r3, ip, r3
 8005a12:	0c12      	lsrs	r2, r2, #16
 8005a14:	fa13 f38e 	uxtah	r3, r3, lr
 8005a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a26:	45c1      	cmp	r9, r8
 8005a28:	f840 3b04 	str.w	r3, [r0], #4
 8005a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a30:	d2e8      	bcs.n	8005a04 <quorem+0xb0>
 8005a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3a:	b922      	cbnz	r2, 8005a46 <quorem+0xf2>
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	429d      	cmp	r5, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	d30a      	bcc.n	8005a5a <quorem+0x106>
 8005a44:	613c      	str	r4, [r7, #16]
 8005a46:	4630      	mov	r0, r6
 8005a48:	b003      	add	sp, #12
 8005a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	3b04      	subs	r3, #4
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	d1cc      	bne.n	80059f0 <quorem+0x9c>
 8005a56:	3c01      	subs	r4, #1
 8005a58:	e7c7      	b.n	80059ea <quorem+0x96>
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d1f0      	bne.n	8005a44 <quorem+0xf0>
 8005a62:	3c01      	subs	r4, #1
 8005a64:	e7eb      	b.n	8005a3e <quorem+0xea>
 8005a66:	2000      	movs	r0, #0
 8005a68:	e7ee      	b.n	8005a48 <quorem+0xf4>
 8005a6a:	0000      	movs	r0, r0
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <_dtoa_r>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	ed2d 8b02 	vpush	{d8}
 8005a78:	ec57 6b10 	vmov	r6, r7, d0
 8005a7c:	b095      	sub	sp, #84	; 0x54
 8005a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a84:	9105      	str	r1, [sp, #20]
 8005a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a90:	b975      	cbnz	r5, 8005ab0 <_dtoa_r+0x40>
 8005a92:	2010      	movs	r0, #16
 8005a94:	f000 fed6 	bl	8006844 <malloc>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a9c:	b920      	cbnz	r0, 8005aa8 <_dtoa_r+0x38>
 8005a9e:	4bb2      	ldr	r3, [pc, #712]	; (8005d68 <_dtoa_r+0x2f8>)
 8005aa0:	21ea      	movs	r1, #234	; 0xea
 8005aa2:	48b2      	ldr	r0, [pc, #712]	; (8005d6c <_dtoa_r+0x2fc>)
 8005aa4:	f001 fd9c 	bl	80075e0 <__assert_func>
 8005aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005aac:	6005      	str	r5, [r0, #0]
 8005aae:	60c5      	str	r5, [r0, #12]
 8005ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	b151      	cbz	r1, 8005acc <_dtoa_r+0x5c>
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	604a      	str	r2, [r1, #4]
 8005aba:	2301      	movs	r3, #1
 8005abc:	4093      	lsls	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 ff15 	bl	80068f0 <_Bfree>
 8005ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	1e3b      	subs	r3, r7, #0
 8005ace:	bfb9      	ittee	lt
 8005ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ad4:	9303      	strlt	r3, [sp, #12]
 8005ad6:	2300      	movge	r3, #0
 8005ad8:	f8c8 3000 	strge.w	r3, [r8]
 8005adc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005ae0:	4ba3      	ldr	r3, [pc, #652]	; (8005d70 <_dtoa_r+0x300>)
 8005ae2:	bfbc      	itt	lt
 8005ae4:	2201      	movlt	r2, #1
 8005ae6:	f8c8 2000 	strlt.w	r2, [r8]
 8005aea:	ea33 0309 	bics.w	r3, r3, r9
 8005aee:	d11b      	bne.n	8005b28 <_dtoa_r+0xb8>
 8005af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005afc:	4333      	orrs	r3, r6
 8005afe:	f000 857a 	beq.w	80065f6 <_dtoa_r+0xb86>
 8005b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b04:	b963      	cbnz	r3, 8005b20 <_dtoa_r+0xb0>
 8005b06:	4b9b      	ldr	r3, [pc, #620]	; (8005d74 <_dtoa_r+0x304>)
 8005b08:	e024      	b.n	8005b54 <_dtoa_r+0xe4>
 8005b0a:	4b9b      	ldr	r3, [pc, #620]	; (8005d78 <_dtoa_r+0x308>)
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	9800      	ldr	r0, [sp, #0]
 8005b16:	b015      	add	sp, #84	; 0x54
 8005b18:	ecbd 8b02 	vpop	{d8}
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	4b94      	ldr	r3, [pc, #592]	; (8005d74 <_dtoa_r+0x304>)
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	3303      	adds	r3, #3
 8005b26:	e7f3      	b.n	8005b10 <_dtoa_r+0xa0>
 8005b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	ec51 0b17 	vmov	r0, r1, d7
 8005b32:	2300      	movs	r3, #0
 8005b34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005b38:	f7fa ffde 	bl	8000af8 <__aeabi_dcmpeq>
 8005b3c:	4680      	mov	r8, r0
 8005b3e:	b158      	cbz	r0, 8005b58 <_dtoa_r+0xe8>
 8005b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b42:	2301      	movs	r3, #1
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8551 	beq.w	80065f0 <_dtoa_r+0xb80>
 8005b4e:	488b      	ldr	r0, [pc, #556]	; (8005d7c <_dtoa_r+0x30c>)
 8005b50:	6018      	str	r0, [r3, #0]
 8005b52:	1e43      	subs	r3, r0, #1
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	e7dd      	b.n	8005b14 <_dtoa_r+0xa4>
 8005b58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005b5c:	aa12      	add	r2, sp, #72	; 0x48
 8005b5e:	a913      	add	r1, sp, #76	; 0x4c
 8005b60:	4620      	mov	r0, r4
 8005b62:	f001 f9a7 	bl	8006eb4 <__d2b>
 8005b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b6a:	4683      	mov	fp, r0
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	d07c      	beq.n	8005c6a <_dtoa_r+0x1fa>
 8005b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005b7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b8a:	4b7d      	ldr	r3, [pc, #500]	; (8005d80 <_dtoa_r+0x310>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4630      	mov	r0, r6
 8005b90:	4639      	mov	r1, r7
 8005b92:	f7fa fb91 	bl	80002b8 <__aeabi_dsub>
 8005b96:	a36e      	add	r3, pc, #440	; (adr r3, 8005d50 <_dtoa_r+0x2e0>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f7fa fd44 	bl	8000628 <__aeabi_dmul>
 8005ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8005d58 <_dtoa_r+0x2e8>)
 8005ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba6:	f7fa fb89 	bl	80002bc <__adddf3>
 8005baa:	4606      	mov	r6, r0
 8005bac:	4628      	mov	r0, r5
 8005bae:	460f      	mov	r7, r1
 8005bb0:	f7fa fcd0 	bl	8000554 <__aeabi_i2d>
 8005bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8005d60 <_dtoa_r+0x2f0>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7fa fd35 	bl	8000628 <__aeabi_dmul>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	4639      	mov	r1, r7
 8005bc6:	f7fa fb79 	bl	80002bc <__adddf3>
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	f7fa ffdb 	bl	8000b88 <__aeabi_d2iz>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4682      	mov	sl, r0
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	4630      	mov	r0, r6
 8005bda:	4639      	mov	r1, r7
 8005bdc:	f7fa ff96 	bl	8000b0c <__aeabi_dcmplt>
 8005be0:	b148      	cbz	r0, 8005bf6 <_dtoa_r+0x186>
 8005be2:	4650      	mov	r0, sl
 8005be4:	f7fa fcb6 	bl	8000554 <__aeabi_i2d>
 8005be8:	4632      	mov	r2, r6
 8005bea:	463b      	mov	r3, r7
 8005bec:	f7fa ff84 	bl	8000af8 <__aeabi_dcmpeq>
 8005bf0:	b908      	cbnz	r0, 8005bf6 <_dtoa_r+0x186>
 8005bf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bf6:	f1ba 0f16 	cmp.w	sl, #22
 8005bfa:	d854      	bhi.n	8005ca6 <_dtoa_r+0x236>
 8005bfc:	4b61      	ldr	r3, [pc, #388]	; (8005d84 <_dtoa_r+0x314>)
 8005bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c0a:	f7fa ff7f 	bl	8000b0c <__aeabi_dcmplt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d04b      	beq.n	8005caa <_dtoa_r+0x23a>
 8005c12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c16:	2300      	movs	r3, #0
 8005c18:	930e      	str	r3, [sp, #56]	; 0x38
 8005c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c1c:	1b5d      	subs	r5, r3, r5
 8005c1e:	1e6b      	subs	r3, r5, #1
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	bf43      	ittte	mi
 8005c24:	2300      	movmi	r3, #0
 8005c26:	f1c5 0801 	rsbmi	r8, r5, #1
 8005c2a:	9304      	strmi	r3, [sp, #16]
 8005c2c:	f04f 0800 	movpl.w	r8, #0
 8005c30:	f1ba 0f00 	cmp.w	sl, #0
 8005c34:	db3b      	blt.n	8005cae <_dtoa_r+0x23e>
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005c3c:	4453      	add	r3, sl
 8005c3e:	9304      	str	r3, [sp, #16]
 8005c40:	2300      	movs	r3, #0
 8005c42:	9306      	str	r3, [sp, #24]
 8005c44:	9b05      	ldr	r3, [sp, #20]
 8005c46:	2b09      	cmp	r3, #9
 8005c48:	d869      	bhi.n	8005d1e <_dtoa_r+0x2ae>
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	bfc4      	itt	gt
 8005c4e:	3b04      	subgt	r3, #4
 8005c50:	9305      	strgt	r3, [sp, #20]
 8005c52:	9b05      	ldr	r3, [sp, #20]
 8005c54:	f1a3 0302 	sub.w	r3, r3, #2
 8005c58:	bfcc      	ite	gt
 8005c5a:	2500      	movgt	r5, #0
 8005c5c:	2501      	movle	r5, #1
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d869      	bhi.n	8005d36 <_dtoa_r+0x2c6>
 8005c62:	e8df f003 	tbb	[pc, r3]
 8005c66:	4e2c      	.short	0x4e2c
 8005c68:	5a4c      	.short	0x5a4c
 8005c6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005c6e:	441d      	add	r5, r3
 8005c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	bfc1      	itttt	gt
 8005c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c80:	fa09 f303 	lslgt.w	r3, r9, r3
 8005c84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c88:	bfda      	itte	le
 8005c8a:	f1c3 0320 	rsble	r3, r3, #32
 8005c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8005c92:	4318      	orrgt	r0, r3
 8005c94:	f7fa fc4e 	bl	8000534 <__aeabi_ui2d>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ca0:	3d01      	subs	r5, #1
 8005ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ca4:	e771      	b.n	8005b8a <_dtoa_r+0x11a>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e7b6      	b.n	8005c18 <_dtoa_r+0x1a8>
 8005caa:	900e      	str	r0, [sp, #56]	; 0x38
 8005cac:	e7b5      	b.n	8005c1a <_dtoa_r+0x1aa>
 8005cae:	f1ca 0300 	rsb	r3, sl, #0
 8005cb2:	9306      	str	r3, [sp, #24]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	eba8 080a 	sub.w	r8, r8, sl
 8005cba:	930d      	str	r3, [sp, #52]	; 0x34
 8005cbc:	e7c2      	b.n	8005c44 <_dtoa_r+0x1d4>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9308      	str	r3, [sp, #32]
 8005cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	dc39      	bgt.n	8005d3c <_dtoa_r+0x2cc>
 8005cc8:	f04f 0901 	mov.w	r9, #1
 8005ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cd8:	2200      	movs	r2, #0
 8005cda:	6042      	str	r2, [r0, #4]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	f102 0614 	add.w	r6, r2, #20
 8005ce2:	429e      	cmp	r6, r3
 8005ce4:	6841      	ldr	r1, [r0, #4]
 8005ce6:	d92f      	bls.n	8005d48 <_dtoa_r+0x2d8>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fdc1 	bl	8006870 <_Balloc>
 8005cee:	9000      	str	r0, [sp, #0]
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d14b      	bne.n	8005d8c <_dtoa_r+0x31c>
 8005cf4:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <_dtoa_r+0x318>)
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cfc:	e6d1      	b.n	8005aa2 <_dtoa_r+0x32>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e7de      	b.n	8005cc0 <_dtoa_r+0x250>
 8005d02:	2300      	movs	r3, #0
 8005d04:	9308      	str	r3, [sp, #32]
 8005d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d08:	eb0a 0903 	add.w	r9, sl, r3
 8005d0c:	f109 0301 	add.w	r3, r9, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	9301      	str	r3, [sp, #4]
 8005d14:	bfb8      	it	lt
 8005d16:	2301      	movlt	r3, #1
 8005d18:	e7dd      	b.n	8005cd6 <_dtoa_r+0x266>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e7f2      	b.n	8005d04 <_dtoa_r+0x294>
 8005d1e:	2501      	movs	r5, #1
 8005d20:	2300      	movs	r3, #0
 8005d22:	9305      	str	r3, [sp, #20]
 8005d24:	9508      	str	r5, [sp, #32]
 8005d26:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d30:	2312      	movs	r3, #18
 8005d32:	9209      	str	r2, [sp, #36]	; 0x24
 8005d34:	e7cf      	b.n	8005cd6 <_dtoa_r+0x266>
 8005d36:	2301      	movs	r3, #1
 8005d38:	9308      	str	r3, [sp, #32]
 8005d3a:	e7f4      	b.n	8005d26 <_dtoa_r+0x2b6>
 8005d3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d44:	464b      	mov	r3, r9
 8005d46:	e7c6      	b.n	8005cd6 <_dtoa_r+0x266>
 8005d48:	3101      	adds	r1, #1
 8005d4a:	6041      	str	r1, [r0, #4]
 8005d4c:	0052      	lsls	r2, r2, #1
 8005d4e:	e7c6      	b.n	8005cde <_dtoa_r+0x26e>
 8005d50:	636f4361 	.word	0x636f4361
 8005d54:	3fd287a7 	.word	0x3fd287a7
 8005d58:	8b60c8b3 	.word	0x8b60c8b3
 8005d5c:	3fc68a28 	.word	0x3fc68a28
 8005d60:	509f79fb 	.word	0x509f79fb
 8005d64:	3fd34413 	.word	0x3fd34413
 8005d68:	08007b0d 	.word	0x08007b0d
 8005d6c:	08007b24 	.word	0x08007b24
 8005d70:	7ff00000 	.word	0x7ff00000
 8005d74:	08007b09 	.word	0x08007b09
 8005d78:	08007b00 	.word	0x08007b00
 8005d7c:	08007add 	.word	0x08007add
 8005d80:	3ff80000 	.word	0x3ff80000
 8005d84:	08007c80 	.word	0x08007c80
 8005d88:	08007b83 	.word	0x08007b83
 8005d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d8e:	9a00      	ldr	r2, [sp, #0]
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	9b01      	ldr	r3, [sp, #4]
 8005d94:	2b0e      	cmp	r3, #14
 8005d96:	f200 80ad 	bhi.w	8005ef4 <_dtoa_r+0x484>
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	f000 80aa 	beq.w	8005ef4 <_dtoa_r+0x484>
 8005da0:	f1ba 0f00 	cmp.w	sl, #0
 8005da4:	dd36      	ble.n	8005e14 <_dtoa_r+0x3a4>
 8005da6:	4ac3      	ldr	r2, [pc, #780]	; (80060b4 <_dtoa_r+0x644>)
 8005da8:	f00a 030f 	and.w	r3, sl, #15
 8005dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005db0:	ed93 7b00 	vldr	d7, [r3]
 8005db4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005db8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005dbc:	eeb0 8a47 	vmov.f32	s16, s14
 8005dc0:	eef0 8a67 	vmov.f32	s17, s15
 8005dc4:	d016      	beq.n	8005df4 <_dtoa_r+0x384>
 8005dc6:	4bbc      	ldr	r3, [pc, #752]	; (80060b8 <_dtoa_r+0x648>)
 8005dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dd0:	f7fa fd54 	bl	800087c <__aeabi_ddiv>
 8005dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dd8:	f007 070f 	and.w	r7, r7, #15
 8005ddc:	2503      	movs	r5, #3
 8005dde:	4eb6      	ldr	r6, [pc, #728]	; (80060b8 <_dtoa_r+0x648>)
 8005de0:	b957      	cbnz	r7, 8005df8 <_dtoa_r+0x388>
 8005de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005de6:	ec53 2b18 	vmov	r2, r3, d8
 8005dea:	f7fa fd47 	bl	800087c <__aeabi_ddiv>
 8005dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df2:	e029      	b.n	8005e48 <_dtoa_r+0x3d8>
 8005df4:	2502      	movs	r5, #2
 8005df6:	e7f2      	b.n	8005dde <_dtoa_r+0x36e>
 8005df8:	07f9      	lsls	r1, r7, #31
 8005dfa:	d508      	bpl.n	8005e0e <_dtoa_r+0x39e>
 8005dfc:	ec51 0b18 	vmov	r0, r1, d8
 8005e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e04:	f7fa fc10 	bl	8000628 <__aeabi_dmul>
 8005e08:	ec41 0b18 	vmov	d8, r0, r1
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	107f      	asrs	r7, r7, #1
 8005e10:	3608      	adds	r6, #8
 8005e12:	e7e5      	b.n	8005de0 <_dtoa_r+0x370>
 8005e14:	f000 80a6 	beq.w	8005f64 <_dtoa_r+0x4f4>
 8005e18:	f1ca 0600 	rsb	r6, sl, #0
 8005e1c:	4ba5      	ldr	r3, [pc, #660]	; (80060b4 <_dtoa_r+0x644>)
 8005e1e:	4fa6      	ldr	r7, [pc, #664]	; (80060b8 <_dtoa_r+0x648>)
 8005e20:	f006 020f 	and.w	r2, r6, #15
 8005e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005e30:	f7fa fbfa 	bl	8000628 <__aeabi_dmul>
 8005e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e38:	1136      	asrs	r6, r6, #4
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	2502      	movs	r5, #2
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	f040 8085 	bne.w	8005f4e <_dtoa_r+0x4de>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1d2      	bne.n	8005dee <_dtoa_r+0x37e>
 8005e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 808c 	beq.w	8005f68 <_dtoa_r+0x4f8>
 8005e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e54:	4b99      	ldr	r3, [pc, #612]	; (80060bc <_dtoa_r+0x64c>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fe56 	bl	8000b0c <__aeabi_dcmplt>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	f000 8081 	beq.w	8005f68 <_dtoa_r+0x4f8>
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d07d      	beq.n	8005f68 <_dtoa_r+0x4f8>
 8005e6c:	f1b9 0f00 	cmp.w	r9, #0
 8005e70:	dd3c      	ble.n	8005eec <_dtoa_r+0x47c>
 8005e72:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4b91      	ldr	r3, [pc, #580]	; (80060c0 <_dtoa_r+0x650>)
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	4639      	mov	r1, r7
 8005e80:	f7fa fbd2 	bl	8000628 <__aeabi_dmul>
 8005e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e88:	3501      	adds	r5, #1
 8005e8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e92:	4628      	mov	r0, r5
 8005e94:	f7fa fb5e 	bl	8000554 <__aeabi_i2d>
 8005e98:	4632      	mov	r2, r6
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	f7fa fbc4 	bl	8000628 <__aeabi_dmul>
 8005ea0:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <_dtoa_r+0x654>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f7fa fa0a 	bl	80002bc <__adddf3>
 8005ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb0:	9303      	str	r3, [sp, #12]
 8005eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d15c      	bne.n	8005f72 <_dtoa_r+0x502>
 8005eb8:	4b83      	ldr	r3, [pc, #524]	; (80060c8 <_dtoa_r+0x658>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	4639      	mov	r1, r7
 8005ec0:	f7fa f9fa 	bl	80002b8 <__aeabi_dsub>
 8005ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ec8:	4606      	mov	r6, r0
 8005eca:	460f      	mov	r7, r1
 8005ecc:	f7fa fe3c 	bl	8000b48 <__aeabi_dcmpgt>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	f040 8296 	bne.w	8006402 <_dtoa_r+0x992>
 8005ed6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005eda:	4630      	mov	r0, r6
 8005edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	f7fa fe13 	bl	8000b0c <__aeabi_dcmplt>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f040 8288 	bne.w	80063fc <_dtoa_r+0x98c>
 8005eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f2c0 8158 	blt.w	80061ac <_dtoa_r+0x73c>
 8005efc:	f1ba 0f0e 	cmp.w	sl, #14
 8005f00:	f300 8154 	bgt.w	80061ac <_dtoa_r+0x73c>
 8005f04:	4b6b      	ldr	r3, [pc, #428]	; (80060b4 <_dtoa_r+0x644>)
 8005f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f280 80e3 	bge.w	80060dc <_dtoa_r+0x66c>
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f300 80df 	bgt.w	80060dc <_dtoa_r+0x66c>
 8005f1e:	f040 826d 	bne.w	80063fc <_dtoa_r+0x98c>
 8005f22:	4b69      	ldr	r3, [pc, #420]	; (80060c8 <_dtoa_r+0x658>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	4640      	mov	r0, r8
 8005f28:	4649      	mov	r1, r9
 8005f2a:	f7fa fb7d 	bl	8000628 <__aeabi_dmul>
 8005f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f32:	f7fa fdff 	bl	8000b34 <__aeabi_dcmpge>
 8005f36:	9e01      	ldr	r6, [sp, #4]
 8005f38:	4637      	mov	r7, r6
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	f040 8243 	bne.w	80063c6 <_dtoa_r+0x956>
 8005f40:	9d00      	ldr	r5, [sp, #0]
 8005f42:	2331      	movs	r3, #49	; 0x31
 8005f44:	f805 3b01 	strb.w	r3, [r5], #1
 8005f48:	f10a 0a01 	add.w	sl, sl, #1
 8005f4c:	e23f      	b.n	80063ce <_dtoa_r+0x95e>
 8005f4e:	07f2      	lsls	r2, r6, #31
 8005f50:	d505      	bpl.n	8005f5e <_dtoa_r+0x4ee>
 8005f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f56:	f7fa fb67 	bl	8000628 <__aeabi_dmul>
 8005f5a:	3501      	adds	r5, #1
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	1076      	asrs	r6, r6, #1
 8005f60:	3708      	adds	r7, #8
 8005f62:	e76c      	b.n	8005e3e <_dtoa_r+0x3ce>
 8005f64:	2502      	movs	r5, #2
 8005f66:	e76f      	b.n	8005e48 <_dtoa_r+0x3d8>
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f70:	e78d      	b.n	8005e8e <_dtoa_r+0x41e>
 8005f72:	9900      	ldr	r1, [sp, #0]
 8005f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f78:	4b4e      	ldr	r3, [pc, #312]	; (80060b4 <_dtoa_r+0x644>)
 8005f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f7e:	4401      	add	r1, r0
 8005f80:	9102      	str	r1, [sp, #8]
 8005f82:	9908      	ldr	r1, [sp, #32]
 8005f84:	eeb0 8a47 	vmov.f32	s16, s14
 8005f88:	eef0 8a67 	vmov.f32	s17, s15
 8005f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f94:	2900      	cmp	r1, #0
 8005f96:	d045      	beq.n	8006024 <_dtoa_r+0x5b4>
 8005f98:	494c      	ldr	r1, [pc, #304]	; (80060cc <_dtoa_r+0x65c>)
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7fa fc6e 	bl	800087c <__aeabi_ddiv>
 8005fa0:	ec53 2b18 	vmov	r2, r3, d8
 8005fa4:	f7fa f988 	bl	80002b8 <__aeabi_dsub>
 8005fa8:	9d00      	ldr	r5, [sp, #0]
 8005faa:	ec41 0b18 	vmov	d8, r0, r1
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f7fa fde9 	bl	8000b88 <__aeabi_d2iz>
 8005fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8005fb8:	f7fa facc 	bl	8000554 <__aeabi_i2d>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa f978 	bl	80002b8 <__aeabi_dsub>
 8005fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fca:	3330      	adds	r3, #48	; 0x30
 8005fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8005fd0:	ec53 2b18 	vmov	r2, r3, d8
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	460f      	mov	r7, r1
 8005fd8:	f7fa fd98 	bl	8000b0c <__aeabi_dcmplt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d165      	bne.n	80060ac <_dtoa_r+0x63c>
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	4935      	ldr	r1, [pc, #212]	; (80060bc <_dtoa_r+0x64c>)
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f7fa f966 	bl	80002b8 <__aeabi_dsub>
 8005fec:	ec53 2b18 	vmov	r2, r3, d8
 8005ff0:	f7fa fd8c 	bl	8000b0c <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f040 80b9 	bne.w	800616c <_dtoa_r+0x6fc>
 8005ffa:	9b02      	ldr	r3, [sp, #8]
 8005ffc:	429d      	cmp	r5, r3
 8005ffe:	f43f af75 	beq.w	8005eec <_dtoa_r+0x47c>
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <_dtoa_r+0x650>)
 8006004:	ec51 0b18 	vmov	r0, r1, d8
 8006008:	2200      	movs	r2, #0
 800600a:	f7fa fb0d 	bl	8000628 <__aeabi_dmul>
 800600e:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <_dtoa_r+0x650>)
 8006010:	ec41 0b18 	vmov	d8, r0, r1
 8006014:	2200      	movs	r2, #0
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fb05 	bl	8000628 <__aeabi_dmul>
 800601e:	4606      	mov	r6, r0
 8006020:	460f      	mov	r7, r1
 8006022:	e7c4      	b.n	8005fae <_dtoa_r+0x53e>
 8006024:	ec51 0b17 	vmov	r0, r1, d7
 8006028:	f7fa fafe 	bl	8000628 <__aeabi_dmul>
 800602c:	9b02      	ldr	r3, [sp, #8]
 800602e:	9d00      	ldr	r5, [sp, #0]
 8006030:	930c      	str	r3, [sp, #48]	; 0x30
 8006032:	ec41 0b18 	vmov	d8, r0, r1
 8006036:	4639      	mov	r1, r7
 8006038:	4630      	mov	r0, r6
 800603a:	f7fa fda5 	bl	8000b88 <__aeabi_d2iz>
 800603e:	9011      	str	r0, [sp, #68]	; 0x44
 8006040:	f7fa fa88 	bl	8000554 <__aeabi_i2d>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa f934 	bl	80002b8 <__aeabi_dsub>
 8006050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006052:	3330      	adds	r3, #48	; 0x30
 8006054:	f805 3b01 	strb.w	r3, [r5], #1
 8006058:	9b02      	ldr	r3, [sp, #8]
 800605a:	429d      	cmp	r5, r3
 800605c:	4606      	mov	r6, r0
 800605e:	460f      	mov	r7, r1
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	d134      	bne.n	80060d0 <_dtoa_r+0x660>
 8006066:	4b19      	ldr	r3, [pc, #100]	; (80060cc <_dtoa_r+0x65c>)
 8006068:	ec51 0b18 	vmov	r0, r1, d8
 800606c:	f7fa f926 	bl	80002bc <__adddf3>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fd66 	bl	8000b48 <__aeabi_dcmpgt>
 800607c:	2800      	cmp	r0, #0
 800607e:	d175      	bne.n	800616c <_dtoa_r+0x6fc>
 8006080:	ec53 2b18 	vmov	r2, r3, d8
 8006084:	4911      	ldr	r1, [pc, #68]	; (80060cc <_dtoa_r+0x65c>)
 8006086:	2000      	movs	r0, #0
 8006088:	f7fa f916 	bl	80002b8 <__aeabi_dsub>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4630      	mov	r0, r6
 8006092:	4639      	mov	r1, r7
 8006094:	f7fa fd3a 	bl	8000b0c <__aeabi_dcmplt>
 8006098:	2800      	cmp	r0, #0
 800609a:	f43f af27 	beq.w	8005eec <_dtoa_r+0x47c>
 800609e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060a0:	1e6b      	subs	r3, r5, #1
 80060a2:	930c      	str	r3, [sp, #48]	; 0x30
 80060a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060a8:	2b30      	cmp	r3, #48	; 0x30
 80060aa:	d0f8      	beq.n	800609e <_dtoa_r+0x62e>
 80060ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060b0:	e04a      	b.n	8006148 <_dtoa_r+0x6d8>
 80060b2:	bf00      	nop
 80060b4:	08007c80 	.word	0x08007c80
 80060b8:	08007c58 	.word	0x08007c58
 80060bc:	3ff00000 	.word	0x3ff00000
 80060c0:	40240000 	.word	0x40240000
 80060c4:	401c0000 	.word	0x401c0000
 80060c8:	40140000 	.word	0x40140000
 80060cc:	3fe00000 	.word	0x3fe00000
 80060d0:	4baf      	ldr	r3, [pc, #700]	; (8006390 <_dtoa_r+0x920>)
 80060d2:	f7fa faa9 	bl	8000628 <__aeabi_dmul>
 80060d6:	4606      	mov	r6, r0
 80060d8:	460f      	mov	r7, r1
 80060da:	e7ac      	b.n	8006036 <_dtoa_r+0x5c6>
 80060dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060e0:	9d00      	ldr	r5, [sp, #0]
 80060e2:	4642      	mov	r2, r8
 80060e4:	464b      	mov	r3, r9
 80060e6:	4630      	mov	r0, r6
 80060e8:	4639      	mov	r1, r7
 80060ea:	f7fa fbc7 	bl	800087c <__aeabi_ddiv>
 80060ee:	f7fa fd4b 	bl	8000b88 <__aeabi_d2iz>
 80060f2:	9002      	str	r0, [sp, #8]
 80060f4:	f7fa fa2e 	bl	8000554 <__aeabi_i2d>
 80060f8:	4642      	mov	r2, r8
 80060fa:	464b      	mov	r3, r9
 80060fc:	f7fa fa94 	bl	8000628 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa f8d6 	bl	80002b8 <__aeabi_dsub>
 800610c:	9e02      	ldr	r6, [sp, #8]
 800610e:	9f01      	ldr	r7, [sp, #4]
 8006110:	3630      	adds	r6, #48	; 0x30
 8006112:	f805 6b01 	strb.w	r6, [r5], #1
 8006116:	9e00      	ldr	r6, [sp, #0]
 8006118:	1bae      	subs	r6, r5, r6
 800611a:	42b7      	cmp	r7, r6
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	d137      	bne.n	8006192 <_dtoa_r+0x722>
 8006122:	f7fa f8cb 	bl	80002bc <__adddf3>
 8006126:	4642      	mov	r2, r8
 8006128:	464b      	mov	r3, r9
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	f7fa fd0b 	bl	8000b48 <__aeabi_dcmpgt>
 8006132:	b9c8      	cbnz	r0, 8006168 <_dtoa_r+0x6f8>
 8006134:	4642      	mov	r2, r8
 8006136:	464b      	mov	r3, r9
 8006138:	4630      	mov	r0, r6
 800613a:	4639      	mov	r1, r7
 800613c:	f7fa fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 8006140:	b110      	cbz	r0, 8006148 <_dtoa_r+0x6d8>
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	07d9      	lsls	r1, r3, #31
 8006146:	d40f      	bmi.n	8006168 <_dtoa_r+0x6f8>
 8006148:	4620      	mov	r0, r4
 800614a:	4659      	mov	r1, fp
 800614c:	f000 fbd0 	bl	80068f0 <_Bfree>
 8006150:	2300      	movs	r3, #0
 8006152:	702b      	strb	r3, [r5, #0]
 8006154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006156:	f10a 0001 	add.w	r0, sl, #1
 800615a:	6018      	str	r0, [r3, #0]
 800615c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800615e:	2b00      	cmp	r3, #0
 8006160:	f43f acd8 	beq.w	8005b14 <_dtoa_r+0xa4>
 8006164:	601d      	str	r5, [r3, #0]
 8006166:	e4d5      	b.n	8005b14 <_dtoa_r+0xa4>
 8006168:	f8cd a01c 	str.w	sl, [sp, #28]
 800616c:	462b      	mov	r3, r5
 800616e:	461d      	mov	r5, r3
 8006170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006174:	2a39      	cmp	r2, #57	; 0x39
 8006176:	d108      	bne.n	800618a <_dtoa_r+0x71a>
 8006178:	9a00      	ldr	r2, [sp, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d1f7      	bne.n	800616e <_dtoa_r+0x6fe>
 800617e:	9a07      	ldr	r2, [sp, #28]
 8006180:	9900      	ldr	r1, [sp, #0]
 8006182:	3201      	adds	r2, #1
 8006184:	9207      	str	r2, [sp, #28]
 8006186:	2230      	movs	r2, #48	; 0x30
 8006188:	700a      	strb	r2, [r1, #0]
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	3201      	adds	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e78c      	b.n	80060ac <_dtoa_r+0x63c>
 8006192:	4b7f      	ldr	r3, [pc, #508]	; (8006390 <_dtoa_r+0x920>)
 8006194:	2200      	movs	r2, #0
 8006196:	f7fa fa47 	bl	8000628 <__aeabi_dmul>
 800619a:	2200      	movs	r2, #0
 800619c:	2300      	movs	r3, #0
 800619e:	4606      	mov	r6, r0
 80061a0:	460f      	mov	r7, r1
 80061a2:	f7fa fca9 	bl	8000af8 <__aeabi_dcmpeq>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d09b      	beq.n	80060e2 <_dtoa_r+0x672>
 80061aa:	e7cd      	b.n	8006148 <_dtoa_r+0x6d8>
 80061ac:	9a08      	ldr	r2, [sp, #32]
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	f000 80c4 	beq.w	800633c <_dtoa_r+0x8cc>
 80061b4:	9a05      	ldr	r2, [sp, #20]
 80061b6:	2a01      	cmp	r2, #1
 80061b8:	f300 80a8 	bgt.w	800630c <_dtoa_r+0x89c>
 80061bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061be:	2a00      	cmp	r2, #0
 80061c0:	f000 80a0 	beq.w	8006304 <_dtoa_r+0x894>
 80061c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061c8:	9e06      	ldr	r6, [sp, #24]
 80061ca:	4645      	mov	r5, r8
 80061cc:	9a04      	ldr	r2, [sp, #16]
 80061ce:	2101      	movs	r1, #1
 80061d0:	441a      	add	r2, r3
 80061d2:	4620      	mov	r0, r4
 80061d4:	4498      	add	r8, r3
 80061d6:	9204      	str	r2, [sp, #16]
 80061d8:	f000 fc46 	bl	8006a68 <__i2b>
 80061dc:	4607      	mov	r7, r0
 80061de:	2d00      	cmp	r5, #0
 80061e0:	dd0b      	ble.n	80061fa <_dtoa_r+0x78a>
 80061e2:	9b04      	ldr	r3, [sp, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	dd08      	ble.n	80061fa <_dtoa_r+0x78a>
 80061e8:	42ab      	cmp	r3, r5
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	bfa8      	it	ge
 80061ee:	462b      	movge	r3, r5
 80061f0:	eba8 0803 	sub.w	r8, r8, r3
 80061f4:	1aed      	subs	r5, r5, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9b06      	ldr	r3, [sp, #24]
 80061fc:	b1fb      	cbz	r3, 800623e <_dtoa_r+0x7ce>
 80061fe:	9b08      	ldr	r3, [sp, #32]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 809f 	beq.w	8006344 <_dtoa_r+0x8d4>
 8006206:	2e00      	cmp	r6, #0
 8006208:	dd11      	ble.n	800622e <_dtoa_r+0x7be>
 800620a:	4639      	mov	r1, r7
 800620c:	4632      	mov	r2, r6
 800620e:	4620      	mov	r0, r4
 8006210:	f000 fce6 	bl	8006be0 <__pow5mult>
 8006214:	465a      	mov	r2, fp
 8006216:	4601      	mov	r1, r0
 8006218:	4607      	mov	r7, r0
 800621a:	4620      	mov	r0, r4
 800621c:	f000 fc3a 	bl	8006a94 <__multiply>
 8006220:	4659      	mov	r1, fp
 8006222:	9007      	str	r0, [sp, #28]
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fb63 	bl	80068f0 <_Bfree>
 800622a:	9b07      	ldr	r3, [sp, #28]
 800622c:	469b      	mov	fp, r3
 800622e:	9b06      	ldr	r3, [sp, #24]
 8006230:	1b9a      	subs	r2, r3, r6
 8006232:	d004      	beq.n	800623e <_dtoa_r+0x7ce>
 8006234:	4659      	mov	r1, fp
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fcd2 	bl	8006be0 <__pow5mult>
 800623c:	4683      	mov	fp, r0
 800623e:	2101      	movs	r1, #1
 8006240:	4620      	mov	r0, r4
 8006242:	f000 fc11 	bl	8006a68 <__i2b>
 8006246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006248:	2b00      	cmp	r3, #0
 800624a:	4606      	mov	r6, r0
 800624c:	dd7c      	ble.n	8006348 <_dtoa_r+0x8d8>
 800624e:	461a      	mov	r2, r3
 8006250:	4601      	mov	r1, r0
 8006252:	4620      	mov	r0, r4
 8006254:	f000 fcc4 	bl	8006be0 <__pow5mult>
 8006258:	9b05      	ldr	r3, [sp, #20]
 800625a:	2b01      	cmp	r3, #1
 800625c:	4606      	mov	r6, r0
 800625e:	dd76      	ble.n	800634e <_dtoa_r+0x8de>
 8006260:	2300      	movs	r3, #0
 8006262:	9306      	str	r3, [sp, #24]
 8006264:	6933      	ldr	r3, [r6, #16]
 8006266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800626a:	6918      	ldr	r0, [r3, #16]
 800626c:	f000 fbac 	bl	80069c8 <__hi0bits>
 8006270:	f1c0 0020 	rsb	r0, r0, #32
 8006274:	9b04      	ldr	r3, [sp, #16]
 8006276:	4418      	add	r0, r3
 8006278:	f010 001f 	ands.w	r0, r0, #31
 800627c:	f000 8086 	beq.w	800638c <_dtoa_r+0x91c>
 8006280:	f1c0 0320 	rsb	r3, r0, #32
 8006284:	2b04      	cmp	r3, #4
 8006286:	dd7f      	ble.n	8006388 <_dtoa_r+0x918>
 8006288:	f1c0 001c 	rsb	r0, r0, #28
 800628c:	9b04      	ldr	r3, [sp, #16]
 800628e:	4403      	add	r3, r0
 8006290:	4480      	add	r8, r0
 8006292:	4405      	add	r5, r0
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	f1b8 0f00 	cmp.w	r8, #0
 800629a:	dd05      	ble.n	80062a8 <_dtoa_r+0x838>
 800629c:	4659      	mov	r1, fp
 800629e:	4642      	mov	r2, r8
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fcf7 	bl	8006c94 <__lshift>
 80062a6:	4683      	mov	fp, r0
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dd05      	ble.n	80062ba <_dtoa_r+0x84a>
 80062ae:	4631      	mov	r1, r6
 80062b0:	461a      	mov	r2, r3
 80062b2:	4620      	mov	r0, r4
 80062b4:	f000 fcee 	bl	8006c94 <__lshift>
 80062b8:	4606      	mov	r6, r0
 80062ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d069      	beq.n	8006394 <_dtoa_r+0x924>
 80062c0:	4631      	mov	r1, r6
 80062c2:	4658      	mov	r0, fp
 80062c4:	f000 fd52 	bl	8006d6c <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	da63      	bge.n	8006394 <_dtoa_r+0x924>
 80062cc:	2300      	movs	r3, #0
 80062ce:	4659      	mov	r1, fp
 80062d0:	220a      	movs	r2, #10
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fb2e 	bl	8006934 <__multadd>
 80062d8:	9b08      	ldr	r3, [sp, #32]
 80062da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80062de:	4683      	mov	fp, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 818f 	beq.w	8006604 <_dtoa_r+0xb94>
 80062e6:	4639      	mov	r1, r7
 80062e8:	2300      	movs	r3, #0
 80062ea:	220a      	movs	r2, #10
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fb21 	bl	8006934 <__multadd>
 80062f2:	f1b9 0f00 	cmp.w	r9, #0
 80062f6:	4607      	mov	r7, r0
 80062f8:	f300 808e 	bgt.w	8006418 <_dtoa_r+0x9a8>
 80062fc:	9b05      	ldr	r3, [sp, #20]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	dc50      	bgt.n	80063a4 <_dtoa_r+0x934>
 8006302:	e089      	b.n	8006418 <_dtoa_r+0x9a8>
 8006304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800630a:	e75d      	b.n	80061c8 <_dtoa_r+0x758>
 800630c:	9b01      	ldr	r3, [sp, #4]
 800630e:	1e5e      	subs	r6, r3, #1
 8006310:	9b06      	ldr	r3, [sp, #24]
 8006312:	42b3      	cmp	r3, r6
 8006314:	bfbf      	itttt	lt
 8006316:	9b06      	ldrlt	r3, [sp, #24]
 8006318:	9606      	strlt	r6, [sp, #24]
 800631a:	1af2      	sublt	r2, r6, r3
 800631c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800631e:	bfb6      	itet	lt
 8006320:	189b      	addlt	r3, r3, r2
 8006322:	1b9e      	subge	r6, r3, r6
 8006324:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	bfb8      	it	lt
 800632a:	2600      	movlt	r6, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	bfb5      	itete	lt
 8006330:	eba8 0503 	sublt.w	r5, r8, r3
 8006334:	9b01      	ldrge	r3, [sp, #4]
 8006336:	2300      	movlt	r3, #0
 8006338:	4645      	movge	r5, r8
 800633a:	e747      	b.n	80061cc <_dtoa_r+0x75c>
 800633c:	9e06      	ldr	r6, [sp, #24]
 800633e:	9f08      	ldr	r7, [sp, #32]
 8006340:	4645      	mov	r5, r8
 8006342:	e74c      	b.n	80061de <_dtoa_r+0x76e>
 8006344:	9a06      	ldr	r2, [sp, #24]
 8006346:	e775      	b.n	8006234 <_dtoa_r+0x7c4>
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	2b01      	cmp	r3, #1
 800634c:	dc18      	bgt.n	8006380 <_dtoa_r+0x910>
 800634e:	9b02      	ldr	r3, [sp, #8]
 8006350:	b9b3      	cbnz	r3, 8006380 <_dtoa_r+0x910>
 8006352:	9b03      	ldr	r3, [sp, #12]
 8006354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006358:	b9a3      	cbnz	r3, 8006384 <_dtoa_r+0x914>
 800635a:	9b03      	ldr	r3, [sp, #12]
 800635c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006360:	0d1b      	lsrs	r3, r3, #20
 8006362:	051b      	lsls	r3, r3, #20
 8006364:	b12b      	cbz	r3, 8006372 <_dtoa_r+0x902>
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	3301      	adds	r3, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	f108 0801 	add.w	r8, r8, #1
 8006370:	2301      	movs	r3, #1
 8006372:	9306      	str	r3, [sp, #24]
 8006374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006376:	2b00      	cmp	r3, #0
 8006378:	f47f af74 	bne.w	8006264 <_dtoa_r+0x7f4>
 800637c:	2001      	movs	r0, #1
 800637e:	e779      	b.n	8006274 <_dtoa_r+0x804>
 8006380:	2300      	movs	r3, #0
 8006382:	e7f6      	b.n	8006372 <_dtoa_r+0x902>
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	e7f4      	b.n	8006372 <_dtoa_r+0x902>
 8006388:	d085      	beq.n	8006296 <_dtoa_r+0x826>
 800638a:	4618      	mov	r0, r3
 800638c:	301c      	adds	r0, #28
 800638e:	e77d      	b.n	800628c <_dtoa_r+0x81c>
 8006390:	40240000 	.word	0x40240000
 8006394:	9b01      	ldr	r3, [sp, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	dc38      	bgt.n	800640c <_dtoa_r+0x99c>
 800639a:	9b05      	ldr	r3, [sp, #20]
 800639c:	2b02      	cmp	r3, #2
 800639e:	dd35      	ble.n	800640c <_dtoa_r+0x99c>
 80063a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	d10d      	bne.n	80063c6 <_dtoa_r+0x956>
 80063aa:	4631      	mov	r1, r6
 80063ac:	464b      	mov	r3, r9
 80063ae:	2205      	movs	r2, #5
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fabf 	bl	8006934 <__multadd>
 80063b6:	4601      	mov	r1, r0
 80063b8:	4606      	mov	r6, r0
 80063ba:	4658      	mov	r0, fp
 80063bc:	f000 fcd6 	bl	8006d6c <__mcmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f73f adbd 	bgt.w	8005f40 <_dtoa_r+0x4d0>
 80063c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c8:	9d00      	ldr	r5, [sp, #0]
 80063ca:	ea6f 0a03 	mvn.w	sl, r3
 80063ce:	f04f 0800 	mov.w	r8, #0
 80063d2:	4631      	mov	r1, r6
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fa8b 	bl	80068f0 <_Bfree>
 80063da:	2f00      	cmp	r7, #0
 80063dc:	f43f aeb4 	beq.w	8006148 <_dtoa_r+0x6d8>
 80063e0:	f1b8 0f00 	cmp.w	r8, #0
 80063e4:	d005      	beq.n	80063f2 <_dtoa_r+0x982>
 80063e6:	45b8      	cmp	r8, r7
 80063e8:	d003      	beq.n	80063f2 <_dtoa_r+0x982>
 80063ea:	4641      	mov	r1, r8
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fa7f 	bl	80068f0 <_Bfree>
 80063f2:	4639      	mov	r1, r7
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fa7b 	bl	80068f0 <_Bfree>
 80063fa:	e6a5      	b.n	8006148 <_dtoa_r+0x6d8>
 80063fc:	2600      	movs	r6, #0
 80063fe:	4637      	mov	r7, r6
 8006400:	e7e1      	b.n	80063c6 <_dtoa_r+0x956>
 8006402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006408:	4637      	mov	r7, r6
 800640a:	e599      	b.n	8005f40 <_dtoa_r+0x4d0>
 800640c:	9b08      	ldr	r3, [sp, #32]
 800640e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 80fd 	beq.w	8006612 <_dtoa_r+0xba2>
 8006418:	2d00      	cmp	r5, #0
 800641a:	dd05      	ble.n	8006428 <_dtoa_r+0x9b8>
 800641c:	4639      	mov	r1, r7
 800641e:	462a      	mov	r2, r5
 8006420:	4620      	mov	r0, r4
 8006422:	f000 fc37 	bl	8006c94 <__lshift>
 8006426:	4607      	mov	r7, r0
 8006428:	9b06      	ldr	r3, [sp, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d05c      	beq.n	80064e8 <_dtoa_r+0xa78>
 800642e:	6879      	ldr	r1, [r7, #4]
 8006430:	4620      	mov	r0, r4
 8006432:	f000 fa1d 	bl	8006870 <_Balloc>
 8006436:	4605      	mov	r5, r0
 8006438:	b928      	cbnz	r0, 8006446 <_dtoa_r+0x9d6>
 800643a:	4b80      	ldr	r3, [pc, #512]	; (800663c <_dtoa_r+0xbcc>)
 800643c:	4602      	mov	r2, r0
 800643e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006442:	f7ff bb2e 	b.w	8005aa2 <_dtoa_r+0x32>
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	3202      	adds	r2, #2
 800644a:	0092      	lsls	r2, r2, #2
 800644c:	f107 010c 	add.w	r1, r7, #12
 8006450:	300c      	adds	r0, #12
 8006452:	f000 f9ff 	bl	8006854 <memcpy>
 8006456:	2201      	movs	r2, #1
 8006458:	4629      	mov	r1, r5
 800645a:	4620      	mov	r0, r4
 800645c:	f000 fc1a 	bl	8006c94 <__lshift>
 8006460:	9b00      	ldr	r3, [sp, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	9b00      	ldr	r3, [sp, #0]
 8006468:	444b      	add	r3, r9
 800646a:	9307      	str	r3, [sp, #28]
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	46b8      	mov	r8, r7
 8006474:	9306      	str	r3, [sp, #24]
 8006476:	4607      	mov	r7, r0
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	4631      	mov	r1, r6
 800647c:	3b01      	subs	r3, #1
 800647e:	4658      	mov	r0, fp
 8006480:	9302      	str	r3, [sp, #8]
 8006482:	f7ff fa67 	bl	8005954 <quorem>
 8006486:	4603      	mov	r3, r0
 8006488:	3330      	adds	r3, #48	; 0x30
 800648a:	9004      	str	r0, [sp, #16]
 800648c:	4641      	mov	r1, r8
 800648e:	4658      	mov	r0, fp
 8006490:	9308      	str	r3, [sp, #32]
 8006492:	f000 fc6b 	bl	8006d6c <__mcmp>
 8006496:	463a      	mov	r2, r7
 8006498:	4681      	mov	r9, r0
 800649a:	4631      	mov	r1, r6
 800649c:	4620      	mov	r0, r4
 800649e:	f000 fc81 	bl	8006da4 <__mdiff>
 80064a2:	68c2      	ldr	r2, [r0, #12]
 80064a4:	9b08      	ldr	r3, [sp, #32]
 80064a6:	4605      	mov	r5, r0
 80064a8:	bb02      	cbnz	r2, 80064ec <_dtoa_r+0xa7c>
 80064aa:	4601      	mov	r1, r0
 80064ac:	4658      	mov	r0, fp
 80064ae:	f000 fc5d 	bl	8006d6c <__mcmp>
 80064b2:	9b08      	ldr	r3, [sp, #32]
 80064b4:	4602      	mov	r2, r0
 80064b6:	4629      	mov	r1, r5
 80064b8:	4620      	mov	r0, r4
 80064ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80064be:	f000 fa17 	bl	80068f0 <_Bfree>
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064c6:	9d01      	ldr	r5, [sp, #4]
 80064c8:	ea43 0102 	orr.w	r1, r3, r2
 80064cc:	9b06      	ldr	r3, [sp, #24]
 80064ce:	430b      	orrs	r3, r1
 80064d0:	9b08      	ldr	r3, [sp, #32]
 80064d2:	d10d      	bne.n	80064f0 <_dtoa_r+0xa80>
 80064d4:	2b39      	cmp	r3, #57	; 0x39
 80064d6:	d029      	beq.n	800652c <_dtoa_r+0xabc>
 80064d8:	f1b9 0f00 	cmp.w	r9, #0
 80064dc:	dd01      	ble.n	80064e2 <_dtoa_r+0xa72>
 80064de:	9b04      	ldr	r3, [sp, #16]
 80064e0:	3331      	adds	r3, #49	; 0x31
 80064e2:	9a02      	ldr	r2, [sp, #8]
 80064e4:	7013      	strb	r3, [r2, #0]
 80064e6:	e774      	b.n	80063d2 <_dtoa_r+0x962>
 80064e8:	4638      	mov	r0, r7
 80064ea:	e7b9      	b.n	8006460 <_dtoa_r+0x9f0>
 80064ec:	2201      	movs	r2, #1
 80064ee:	e7e2      	b.n	80064b6 <_dtoa_r+0xa46>
 80064f0:	f1b9 0f00 	cmp.w	r9, #0
 80064f4:	db06      	blt.n	8006504 <_dtoa_r+0xa94>
 80064f6:	9905      	ldr	r1, [sp, #20]
 80064f8:	ea41 0909 	orr.w	r9, r1, r9
 80064fc:	9906      	ldr	r1, [sp, #24]
 80064fe:	ea59 0101 	orrs.w	r1, r9, r1
 8006502:	d120      	bne.n	8006546 <_dtoa_r+0xad6>
 8006504:	2a00      	cmp	r2, #0
 8006506:	ddec      	ble.n	80064e2 <_dtoa_r+0xa72>
 8006508:	4659      	mov	r1, fp
 800650a:	2201      	movs	r2, #1
 800650c:	4620      	mov	r0, r4
 800650e:	9301      	str	r3, [sp, #4]
 8006510:	f000 fbc0 	bl	8006c94 <__lshift>
 8006514:	4631      	mov	r1, r6
 8006516:	4683      	mov	fp, r0
 8006518:	f000 fc28 	bl	8006d6c <__mcmp>
 800651c:	2800      	cmp	r0, #0
 800651e:	9b01      	ldr	r3, [sp, #4]
 8006520:	dc02      	bgt.n	8006528 <_dtoa_r+0xab8>
 8006522:	d1de      	bne.n	80064e2 <_dtoa_r+0xa72>
 8006524:	07da      	lsls	r2, r3, #31
 8006526:	d5dc      	bpl.n	80064e2 <_dtoa_r+0xa72>
 8006528:	2b39      	cmp	r3, #57	; 0x39
 800652a:	d1d8      	bne.n	80064de <_dtoa_r+0xa6e>
 800652c:	9a02      	ldr	r2, [sp, #8]
 800652e:	2339      	movs	r3, #57	; 0x39
 8006530:	7013      	strb	r3, [r2, #0]
 8006532:	462b      	mov	r3, r5
 8006534:	461d      	mov	r5, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800653c:	2a39      	cmp	r2, #57	; 0x39
 800653e:	d050      	beq.n	80065e2 <_dtoa_r+0xb72>
 8006540:	3201      	adds	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e745      	b.n	80063d2 <_dtoa_r+0x962>
 8006546:	2a00      	cmp	r2, #0
 8006548:	dd03      	ble.n	8006552 <_dtoa_r+0xae2>
 800654a:	2b39      	cmp	r3, #57	; 0x39
 800654c:	d0ee      	beq.n	800652c <_dtoa_r+0xabc>
 800654e:	3301      	adds	r3, #1
 8006550:	e7c7      	b.n	80064e2 <_dtoa_r+0xa72>
 8006552:	9a01      	ldr	r2, [sp, #4]
 8006554:	9907      	ldr	r1, [sp, #28]
 8006556:	f802 3c01 	strb.w	r3, [r2, #-1]
 800655a:	428a      	cmp	r2, r1
 800655c:	d02a      	beq.n	80065b4 <_dtoa_r+0xb44>
 800655e:	4659      	mov	r1, fp
 8006560:	2300      	movs	r3, #0
 8006562:	220a      	movs	r2, #10
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f9e5 	bl	8006934 <__multadd>
 800656a:	45b8      	cmp	r8, r7
 800656c:	4683      	mov	fp, r0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	f04f 020a 	mov.w	r2, #10
 8006576:	4641      	mov	r1, r8
 8006578:	4620      	mov	r0, r4
 800657a:	d107      	bne.n	800658c <_dtoa_r+0xb1c>
 800657c:	f000 f9da 	bl	8006934 <__multadd>
 8006580:	4680      	mov	r8, r0
 8006582:	4607      	mov	r7, r0
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	3301      	adds	r3, #1
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	e775      	b.n	8006478 <_dtoa_r+0xa08>
 800658c:	f000 f9d2 	bl	8006934 <__multadd>
 8006590:	4639      	mov	r1, r7
 8006592:	4680      	mov	r8, r0
 8006594:	2300      	movs	r3, #0
 8006596:	220a      	movs	r2, #10
 8006598:	4620      	mov	r0, r4
 800659a:	f000 f9cb 	bl	8006934 <__multadd>
 800659e:	4607      	mov	r7, r0
 80065a0:	e7f0      	b.n	8006584 <_dtoa_r+0xb14>
 80065a2:	f1b9 0f00 	cmp.w	r9, #0
 80065a6:	9a00      	ldr	r2, [sp, #0]
 80065a8:	bfcc      	ite	gt
 80065aa:	464d      	movgt	r5, r9
 80065ac:	2501      	movle	r5, #1
 80065ae:	4415      	add	r5, r2
 80065b0:	f04f 0800 	mov.w	r8, #0
 80065b4:	4659      	mov	r1, fp
 80065b6:	2201      	movs	r2, #1
 80065b8:	4620      	mov	r0, r4
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	f000 fb6a 	bl	8006c94 <__lshift>
 80065c0:	4631      	mov	r1, r6
 80065c2:	4683      	mov	fp, r0
 80065c4:	f000 fbd2 	bl	8006d6c <__mcmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dcb2      	bgt.n	8006532 <_dtoa_r+0xac2>
 80065cc:	d102      	bne.n	80065d4 <_dtoa_r+0xb64>
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	07db      	lsls	r3, r3, #31
 80065d2:	d4ae      	bmi.n	8006532 <_dtoa_r+0xac2>
 80065d4:	462b      	mov	r3, r5
 80065d6:	461d      	mov	r5, r3
 80065d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065dc:	2a30      	cmp	r2, #48	; 0x30
 80065de:	d0fa      	beq.n	80065d6 <_dtoa_r+0xb66>
 80065e0:	e6f7      	b.n	80063d2 <_dtoa_r+0x962>
 80065e2:	9a00      	ldr	r2, [sp, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d1a5      	bne.n	8006534 <_dtoa_r+0xac4>
 80065e8:	f10a 0a01 	add.w	sl, sl, #1
 80065ec:	2331      	movs	r3, #49	; 0x31
 80065ee:	e779      	b.n	80064e4 <_dtoa_r+0xa74>
 80065f0:	4b13      	ldr	r3, [pc, #76]	; (8006640 <_dtoa_r+0xbd0>)
 80065f2:	f7ff baaf 	b.w	8005b54 <_dtoa_r+0xe4>
 80065f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f47f aa86 	bne.w	8005b0a <_dtoa_r+0x9a>
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <_dtoa_r+0xbd4>)
 8006600:	f7ff baa8 	b.w	8005b54 <_dtoa_r+0xe4>
 8006604:	f1b9 0f00 	cmp.w	r9, #0
 8006608:	dc03      	bgt.n	8006612 <_dtoa_r+0xba2>
 800660a:	9b05      	ldr	r3, [sp, #20]
 800660c:	2b02      	cmp	r3, #2
 800660e:	f73f aec9 	bgt.w	80063a4 <_dtoa_r+0x934>
 8006612:	9d00      	ldr	r5, [sp, #0]
 8006614:	4631      	mov	r1, r6
 8006616:	4658      	mov	r0, fp
 8006618:	f7ff f99c 	bl	8005954 <quorem>
 800661c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006620:	f805 3b01 	strb.w	r3, [r5], #1
 8006624:	9a00      	ldr	r2, [sp, #0]
 8006626:	1aaa      	subs	r2, r5, r2
 8006628:	4591      	cmp	r9, r2
 800662a:	ddba      	ble.n	80065a2 <_dtoa_r+0xb32>
 800662c:	4659      	mov	r1, fp
 800662e:	2300      	movs	r3, #0
 8006630:	220a      	movs	r2, #10
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f97e 	bl	8006934 <__multadd>
 8006638:	4683      	mov	fp, r0
 800663a:	e7eb      	b.n	8006614 <_dtoa_r+0xba4>
 800663c:	08007b83 	.word	0x08007b83
 8006640:	08007adc 	.word	0x08007adc
 8006644:	08007b00 	.word	0x08007b00

08006648 <std>:
 8006648:	2300      	movs	r3, #0
 800664a:	b510      	push	{r4, lr}
 800664c:	4604      	mov	r4, r0
 800664e:	e9c0 3300 	strd	r3, r3, [r0]
 8006652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006656:	6083      	str	r3, [r0, #8]
 8006658:	8181      	strh	r1, [r0, #12]
 800665a:	6643      	str	r3, [r0, #100]	; 0x64
 800665c:	81c2      	strh	r2, [r0, #14]
 800665e:	6183      	str	r3, [r0, #24]
 8006660:	4619      	mov	r1, r3
 8006662:	2208      	movs	r2, #8
 8006664:	305c      	adds	r0, #92	; 0x5c
 8006666:	f7fe fceb 	bl	8005040 <memset>
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <std+0x38>)
 800666c:	6263      	str	r3, [r4, #36]	; 0x24
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <std+0x3c>)
 8006670:	62a3      	str	r3, [r4, #40]	; 0x28
 8006672:	4b05      	ldr	r3, [pc, #20]	; (8006688 <std+0x40>)
 8006674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x44>)
 8006678:	6224      	str	r4, [r4, #32]
 800667a:	6323      	str	r3, [r4, #48]	; 0x30
 800667c:	bd10      	pop	{r4, pc}
 800667e:	bf00      	nop
 8006680:	080073b5 	.word	0x080073b5
 8006684:	080073d7 	.word	0x080073d7
 8006688:	0800740f 	.word	0x0800740f
 800668c:	08007433 	.word	0x08007433

08006690 <_cleanup_r>:
 8006690:	4901      	ldr	r1, [pc, #4]	; (8006698 <_cleanup_r+0x8>)
 8006692:	f000 b8af 	b.w	80067f4 <_fwalk_reent>
 8006696:	bf00      	nop
 8006698:	08007749 	.word	0x08007749

0800669c <__sfmoreglue>:
 800669c:	b570      	push	{r4, r5, r6, lr}
 800669e:	1e4a      	subs	r2, r1, #1
 80066a0:	2568      	movs	r5, #104	; 0x68
 80066a2:	4355      	muls	r5, r2
 80066a4:	460e      	mov	r6, r1
 80066a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066aa:	f000 fcbf 	bl	800702c <_malloc_r>
 80066ae:	4604      	mov	r4, r0
 80066b0:	b140      	cbz	r0, 80066c4 <__sfmoreglue+0x28>
 80066b2:	2100      	movs	r1, #0
 80066b4:	e9c0 1600 	strd	r1, r6, [r0]
 80066b8:	300c      	adds	r0, #12
 80066ba:	60a0      	str	r0, [r4, #8]
 80066bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066c0:	f7fe fcbe 	bl	8005040 <memset>
 80066c4:	4620      	mov	r0, r4
 80066c6:	bd70      	pop	{r4, r5, r6, pc}

080066c8 <__sfp_lock_acquire>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__sfp_lock_acquire+0x8>)
 80066ca:	f000 b8b8 	b.w	800683e <__retarget_lock_acquire_recursive>
 80066ce:	bf00      	nop
 80066d0:	200002f0 	.word	0x200002f0

080066d4 <__sfp_lock_release>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sfp_lock_release+0x8>)
 80066d6:	f000 b8b3 	b.w	8006840 <__retarget_lock_release_recursive>
 80066da:	bf00      	nop
 80066dc:	200002f0 	.word	0x200002f0

080066e0 <__sinit_lock_acquire>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__sinit_lock_acquire+0x8>)
 80066e2:	f000 b8ac 	b.w	800683e <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	200002eb 	.word	0x200002eb

080066ec <__sinit_lock_release>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sinit_lock_release+0x8>)
 80066ee:	f000 b8a7 	b.w	8006840 <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	200002eb 	.word	0x200002eb

080066f8 <__sinit>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4604      	mov	r4, r0
 80066fc:	f7ff fff0 	bl	80066e0 <__sinit_lock_acquire>
 8006700:	69a3      	ldr	r3, [r4, #24]
 8006702:	b11b      	cbz	r3, 800670c <__sinit+0x14>
 8006704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006708:	f7ff bff0 	b.w	80066ec <__sinit_lock_release>
 800670c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006710:	6523      	str	r3, [r4, #80]	; 0x50
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <__sinit+0x68>)
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <__sinit+0x6c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	62a2      	str	r2, [r4, #40]	; 0x28
 800671a:	42a3      	cmp	r3, r4
 800671c:	bf04      	itt	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	61a3      	streq	r3, [r4, #24]
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f820 	bl	8006768 <__sfp>
 8006728:	6060      	str	r0, [r4, #4]
 800672a:	4620      	mov	r0, r4
 800672c:	f000 f81c 	bl	8006768 <__sfp>
 8006730:	60a0      	str	r0, [r4, #8]
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f818 	bl	8006768 <__sfp>
 8006738:	2200      	movs	r2, #0
 800673a:	60e0      	str	r0, [r4, #12]
 800673c:	2104      	movs	r1, #4
 800673e:	6860      	ldr	r0, [r4, #4]
 8006740:	f7ff ff82 	bl	8006648 <std>
 8006744:	68a0      	ldr	r0, [r4, #8]
 8006746:	2201      	movs	r2, #1
 8006748:	2109      	movs	r1, #9
 800674a:	f7ff ff7d 	bl	8006648 <std>
 800674e:	68e0      	ldr	r0, [r4, #12]
 8006750:	2202      	movs	r2, #2
 8006752:	2112      	movs	r1, #18
 8006754:	f7ff ff78 	bl	8006648 <std>
 8006758:	2301      	movs	r3, #1
 800675a:	61a3      	str	r3, [r4, #24]
 800675c:	e7d2      	b.n	8006704 <__sinit+0xc>
 800675e:	bf00      	nop
 8006760:	08007ac8 	.word	0x08007ac8
 8006764:	08006691 	.word	0x08006691

08006768 <__sfp>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	4607      	mov	r7, r0
 800676c:	f7ff ffac 	bl	80066c8 <__sfp_lock_acquire>
 8006770:	4b1e      	ldr	r3, [pc, #120]	; (80067ec <__sfp+0x84>)
 8006772:	681e      	ldr	r6, [r3, #0]
 8006774:	69b3      	ldr	r3, [r6, #24]
 8006776:	b913      	cbnz	r3, 800677e <__sfp+0x16>
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff ffbd 	bl	80066f8 <__sinit>
 800677e:	3648      	adds	r6, #72	; 0x48
 8006780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006784:	3b01      	subs	r3, #1
 8006786:	d503      	bpl.n	8006790 <__sfp+0x28>
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	b30b      	cbz	r3, 80067d0 <__sfp+0x68>
 800678c:	6836      	ldr	r6, [r6, #0]
 800678e:	e7f7      	b.n	8006780 <__sfp+0x18>
 8006790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006794:	b9d5      	cbnz	r5, 80067cc <__sfp+0x64>
 8006796:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <__sfp+0x88>)
 8006798:	60e3      	str	r3, [r4, #12]
 800679a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800679e:	6665      	str	r5, [r4, #100]	; 0x64
 80067a0:	f000 f84c 	bl	800683c <__retarget_lock_init_recursive>
 80067a4:	f7ff ff96 	bl	80066d4 <__sfp_lock_release>
 80067a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067b0:	6025      	str	r5, [r4, #0]
 80067b2:	61a5      	str	r5, [r4, #24]
 80067b4:	2208      	movs	r2, #8
 80067b6:	4629      	mov	r1, r5
 80067b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067bc:	f7fe fc40 	bl	8005040 <memset>
 80067c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067c8:	4620      	mov	r0, r4
 80067ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067cc:	3468      	adds	r4, #104	; 0x68
 80067ce:	e7d9      	b.n	8006784 <__sfp+0x1c>
 80067d0:	2104      	movs	r1, #4
 80067d2:	4638      	mov	r0, r7
 80067d4:	f7ff ff62 	bl	800669c <__sfmoreglue>
 80067d8:	4604      	mov	r4, r0
 80067da:	6030      	str	r0, [r6, #0]
 80067dc:	2800      	cmp	r0, #0
 80067de:	d1d5      	bne.n	800678c <__sfp+0x24>
 80067e0:	f7ff ff78 	bl	80066d4 <__sfp_lock_release>
 80067e4:	230c      	movs	r3, #12
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	e7ee      	b.n	80067c8 <__sfp+0x60>
 80067ea:	bf00      	nop
 80067ec:	08007ac8 	.word	0x08007ac8
 80067f0:	ffff0001 	.word	0xffff0001

080067f4 <_fwalk_reent>:
 80067f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	4606      	mov	r6, r0
 80067fa:	4688      	mov	r8, r1
 80067fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006800:	2700      	movs	r7, #0
 8006802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006806:	f1b9 0901 	subs.w	r9, r9, #1
 800680a:	d505      	bpl.n	8006818 <_fwalk_reent+0x24>
 800680c:	6824      	ldr	r4, [r4, #0]
 800680e:	2c00      	cmp	r4, #0
 8006810:	d1f7      	bne.n	8006802 <_fwalk_reent+0xe>
 8006812:	4638      	mov	r0, r7
 8006814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006818:	89ab      	ldrh	r3, [r5, #12]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d907      	bls.n	800682e <_fwalk_reent+0x3a>
 800681e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006822:	3301      	adds	r3, #1
 8006824:	d003      	beq.n	800682e <_fwalk_reent+0x3a>
 8006826:	4629      	mov	r1, r5
 8006828:	4630      	mov	r0, r6
 800682a:	47c0      	blx	r8
 800682c:	4307      	orrs	r7, r0
 800682e:	3568      	adds	r5, #104	; 0x68
 8006830:	e7e9      	b.n	8006806 <_fwalk_reent+0x12>
	...

08006834 <_localeconv_r>:
 8006834:	4800      	ldr	r0, [pc, #0]	; (8006838 <_localeconv_r+0x4>)
 8006836:	4770      	bx	lr
 8006838:	20000164 	.word	0x20000164

0800683c <__retarget_lock_init_recursive>:
 800683c:	4770      	bx	lr

0800683e <__retarget_lock_acquire_recursive>:
 800683e:	4770      	bx	lr

08006840 <__retarget_lock_release_recursive>:
 8006840:	4770      	bx	lr
	...

08006844 <malloc>:
 8006844:	4b02      	ldr	r3, [pc, #8]	; (8006850 <malloc+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f000 bbef 	b.w	800702c <_malloc_r>
 800684e:	bf00      	nop
 8006850:	20000010 	.word	0x20000010

08006854 <memcpy>:
 8006854:	440a      	add	r2, r1
 8006856:	4291      	cmp	r1, r2
 8006858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800685c:	d100      	bne.n	8006860 <memcpy+0xc>
 800685e:	4770      	bx	lr
 8006860:	b510      	push	{r4, lr}
 8006862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686a:	4291      	cmp	r1, r2
 800686c:	d1f9      	bne.n	8006862 <memcpy+0xe>
 800686e:	bd10      	pop	{r4, pc}

08006870 <_Balloc>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	b976      	cbnz	r6, 8006898 <_Balloc+0x28>
 800687a:	2010      	movs	r0, #16
 800687c:	f7ff ffe2 	bl	8006844 <malloc>
 8006880:	4602      	mov	r2, r0
 8006882:	6260      	str	r0, [r4, #36]	; 0x24
 8006884:	b920      	cbnz	r0, 8006890 <_Balloc+0x20>
 8006886:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <_Balloc+0x78>)
 8006888:	4818      	ldr	r0, [pc, #96]	; (80068ec <_Balloc+0x7c>)
 800688a:	2166      	movs	r1, #102	; 0x66
 800688c:	f000 fea8 	bl	80075e0 <__assert_func>
 8006890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006894:	6006      	str	r6, [r0, #0]
 8006896:	60c6      	str	r6, [r0, #12]
 8006898:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800689a:	68f3      	ldr	r3, [r6, #12]
 800689c:	b183      	cbz	r3, 80068c0 <_Balloc+0x50>
 800689e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068a6:	b9b8      	cbnz	r0, 80068d8 <_Balloc+0x68>
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f605 	lsl.w	r6, r1, r5
 80068ae:	1d72      	adds	r2, r6, #5
 80068b0:	0092      	lsls	r2, r2, #2
 80068b2:	4620      	mov	r0, r4
 80068b4:	f000 fb5a 	bl	8006f6c <_calloc_r>
 80068b8:	b160      	cbz	r0, 80068d4 <_Balloc+0x64>
 80068ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068be:	e00e      	b.n	80068de <_Balloc+0x6e>
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	2104      	movs	r1, #4
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fb51 	bl	8006f6c <_calloc_r>
 80068ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068cc:	60f0      	str	r0, [r6, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e4      	bne.n	800689e <_Balloc+0x2e>
 80068d4:	2000      	movs	r0, #0
 80068d6:	bd70      	pop	{r4, r5, r6, pc}
 80068d8:	6802      	ldr	r2, [r0, #0]
 80068da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068de:	2300      	movs	r3, #0
 80068e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068e4:	e7f7      	b.n	80068d6 <_Balloc+0x66>
 80068e6:	bf00      	nop
 80068e8:	08007b0d 	.word	0x08007b0d
 80068ec:	08007bf4 	.word	0x08007bf4

080068f0 <_Bfree>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068f4:	4605      	mov	r5, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	b976      	cbnz	r6, 8006918 <_Bfree+0x28>
 80068fa:	2010      	movs	r0, #16
 80068fc:	f7ff ffa2 	bl	8006844 <malloc>
 8006900:	4602      	mov	r2, r0
 8006902:	6268      	str	r0, [r5, #36]	; 0x24
 8006904:	b920      	cbnz	r0, 8006910 <_Bfree+0x20>
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <_Bfree+0x3c>)
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <_Bfree+0x40>)
 800690a:	218a      	movs	r1, #138	; 0x8a
 800690c:	f000 fe68 	bl	80075e0 <__assert_func>
 8006910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006914:	6006      	str	r6, [r0, #0]
 8006916:	60c6      	str	r6, [r0, #12]
 8006918:	b13c      	cbz	r4, 800692a <_Bfree+0x3a>
 800691a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800691c:	6862      	ldr	r2, [r4, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006924:	6021      	str	r1, [r4, #0]
 8006926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	08007b0d 	.word	0x08007b0d
 8006930:	08007bf4 	.word	0x08007bf4

08006934 <__multadd>:
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	690e      	ldr	r6, [r1, #16]
 800693a:	4607      	mov	r7, r0
 800693c:	4698      	mov	r8, r3
 800693e:	460c      	mov	r4, r1
 8006940:	f101 0014 	add.w	r0, r1, #20
 8006944:	2300      	movs	r3, #0
 8006946:	6805      	ldr	r5, [r0, #0]
 8006948:	b2a9      	uxth	r1, r5
 800694a:	fb02 8101 	mla	r1, r2, r1, r8
 800694e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006952:	0c2d      	lsrs	r5, r5, #16
 8006954:	fb02 c505 	mla	r5, r2, r5, ip
 8006958:	b289      	uxth	r1, r1
 800695a:	3301      	adds	r3, #1
 800695c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006960:	429e      	cmp	r6, r3
 8006962:	f840 1b04 	str.w	r1, [r0], #4
 8006966:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800696a:	dcec      	bgt.n	8006946 <__multadd+0x12>
 800696c:	f1b8 0f00 	cmp.w	r8, #0
 8006970:	d022      	beq.n	80069b8 <__multadd+0x84>
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	42b3      	cmp	r3, r6
 8006976:	dc19      	bgt.n	80069ac <__multadd+0x78>
 8006978:	6861      	ldr	r1, [r4, #4]
 800697a:	4638      	mov	r0, r7
 800697c:	3101      	adds	r1, #1
 800697e:	f7ff ff77 	bl	8006870 <_Balloc>
 8006982:	4605      	mov	r5, r0
 8006984:	b928      	cbnz	r0, 8006992 <__multadd+0x5e>
 8006986:	4602      	mov	r2, r0
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <__multadd+0x8c>)
 800698a:	480e      	ldr	r0, [pc, #56]	; (80069c4 <__multadd+0x90>)
 800698c:	21b5      	movs	r1, #181	; 0xb5
 800698e:	f000 fe27 	bl	80075e0 <__assert_func>
 8006992:	6922      	ldr	r2, [r4, #16]
 8006994:	3202      	adds	r2, #2
 8006996:	f104 010c 	add.w	r1, r4, #12
 800699a:	0092      	lsls	r2, r2, #2
 800699c:	300c      	adds	r0, #12
 800699e:	f7ff ff59 	bl	8006854 <memcpy>
 80069a2:	4621      	mov	r1, r4
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7ff ffa3 	bl	80068f0 <_Bfree>
 80069aa:	462c      	mov	r4, r5
 80069ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80069b0:	3601      	adds	r6, #1
 80069b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80069b6:	6126      	str	r6, [r4, #16]
 80069b8:	4620      	mov	r0, r4
 80069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069be:	bf00      	nop
 80069c0:	08007b83 	.word	0x08007b83
 80069c4:	08007bf4 	.word	0x08007bf4

080069c8 <__hi0bits>:
 80069c8:	0c03      	lsrs	r3, r0, #16
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	b9d3      	cbnz	r3, 8006a04 <__hi0bits+0x3c>
 80069ce:	0400      	lsls	r0, r0, #16
 80069d0:	2310      	movs	r3, #16
 80069d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069d6:	bf04      	itt	eq
 80069d8:	0200      	lsleq	r0, r0, #8
 80069da:	3308      	addeq	r3, #8
 80069dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069e0:	bf04      	itt	eq
 80069e2:	0100      	lsleq	r0, r0, #4
 80069e4:	3304      	addeq	r3, #4
 80069e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069ea:	bf04      	itt	eq
 80069ec:	0080      	lsleq	r0, r0, #2
 80069ee:	3302      	addeq	r3, #2
 80069f0:	2800      	cmp	r0, #0
 80069f2:	db05      	blt.n	8006a00 <__hi0bits+0x38>
 80069f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069f8:	f103 0301 	add.w	r3, r3, #1
 80069fc:	bf08      	it	eq
 80069fe:	2320      	moveq	r3, #32
 8006a00:	4618      	mov	r0, r3
 8006a02:	4770      	bx	lr
 8006a04:	2300      	movs	r3, #0
 8006a06:	e7e4      	b.n	80069d2 <__hi0bits+0xa>

08006a08 <__lo0bits>:
 8006a08:	6803      	ldr	r3, [r0, #0]
 8006a0a:	f013 0207 	ands.w	r2, r3, #7
 8006a0e:	4601      	mov	r1, r0
 8006a10:	d00b      	beq.n	8006a2a <__lo0bits+0x22>
 8006a12:	07da      	lsls	r2, r3, #31
 8006a14:	d424      	bmi.n	8006a60 <__lo0bits+0x58>
 8006a16:	0798      	lsls	r0, r3, #30
 8006a18:	bf49      	itett	mi
 8006a1a:	085b      	lsrmi	r3, r3, #1
 8006a1c:	089b      	lsrpl	r3, r3, #2
 8006a1e:	2001      	movmi	r0, #1
 8006a20:	600b      	strmi	r3, [r1, #0]
 8006a22:	bf5c      	itt	pl
 8006a24:	600b      	strpl	r3, [r1, #0]
 8006a26:	2002      	movpl	r0, #2
 8006a28:	4770      	bx	lr
 8006a2a:	b298      	uxth	r0, r3
 8006a2c:	b9b0      	cbnz	r0, 8006a5c <__lo0bits+0x54>
 8006a2e:	0c1b      	lsrs	r3, r3, #16
 8006a30:	2010      	movs	r0, #16
 8006a32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a36:	bf04      	itt	eq
 8006a38:	0a1b      	lsreq	r3, r3, #8
 8006a3a:	3008      	addeq	r0, #8
 8006a3c:	071a      	lsls	r2, r3, #28
 8006a3e:	bf04      	itt	eq
 8006a40:	091b      	lsreq	r3, r3, #4
 8006a42:	3004      	addeq	r0, #4
 8006a44:	079a      	lsls	r2, r3, #30
 8006a46:	bf04      	itt	eq
 8006a48:	089b      	lsreq	r3, r3, #2
 8006a4a:	3002      	addeq	r0, #2
 8006a4c:	07da      	lsls	r2, r3, #31
 8006a4e:	d403      	bmi.n	8006a58 <__lo0bits+0x50>
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	f100 0001 	add.w	r0, r0, #1
 8006a56:	d005      	beq.n	8006a64 <__lo0bits+0x5c>
 8006a58:	600b      	str	r3, [r1, #0]
 8006a5a:	4770      	bx	lr
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	e7e8      	b.n	8006a32 <__lo0bits+0x2a>
 8006a60:	2000      	movs	r0, #0
 8006a62:	4770      	bx	lr
 8006a64:	2020      	movs	r0, #32
 8006a66:	4770      	bx	lr

08006a68 <__i2b>:
 8006a68:	b510      	push	{r4, lr}
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	f7ff feff 	bl	8006870 <_Balloc>
 8006a72:	4602      	mov	r2, r0
 8006a74:	b928      	cbnz	r0, 8006a82 <__i2b+0x1a>
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <__i2b+0x24>)
 8006a78:	4805      	ldr	r0, [pc, #20]	; (8006a90 <__i2b+0x28>)
 8006a7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a7e:	f000 fdaf 	bl	80075e0 <__assert_func>
 8006a82:	2301      	movs	r3, #1
 8006a84:	6144      	str	r4, [r0, #20]
 8006a86:	6103      	str	r3, [r0, #16]
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08007b83 	.word	0x08007b83
 8006a90:	08007bf4 	.word	0x08007bf4

08006a94 <__multiply>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	4614      	mov	r4, r2
 8006a9a:	690a      	ldr	r2, [r1, #16]
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	bfb8      	it	lt
 8006aa2:	460b      	movlt	r3, r1
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	bfbc      	itt	lt
 8006aa8:	4625      	movlt	r5, r4
 8006aaa:	461c      	movlt	r4, r3
 8006aac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ab0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ab4:	68ab      	ldr	r3, [r5, #8]
 8006ab6:	6869      	ldr	r1, [r5, #4]
 8006ab8:	eb0a 0709 	add.w	r7, sl, r9
 8006abc:	42bb      	cmp	r3, r7
 8006abe:	b085      	sub	sp, #20
 8006ac0:	bfb8      	it	lt
 8006ac2:	3101      	addlt	r1, #1
 8006ac4:	f7ff fed4 	bl	8006870 <_Balloc>
 8006ac8:	b930      	cbnz	r0, 8006ad8 <__multiply+0x44>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b42      	ldr	r3, [pc, #264]	; (8006bd8 <__multiply+0x144>)
 8006ace:	4843      	ldr	r0, [pc, #268]	; (8006bdc <__multiply+0x148>)
 8006ad0:	f240 115d 	movw	r1, #349	; 0x15d
 8006ad4:	f000 fd84 	bl	80075e0 <__assert_func>
 8006ad8:	f100 0614 	add.w	r6, r0, #20
 8006adc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006ae0:	4633      	mov	r3, r6
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	d31e      	bcc.n	8006b26 <__multiply+0x92>
 8006ae8:	f105 0c14 	add.w	ip, r5, #20
 8006aec:	f104 0314 	add.w	r3, r4, #20
 8006af0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006af4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006af8:	9202      	str	r2, [sp, #8]
 8006afa:	ebac 0205 	sub.w	r2, ip, r5
 8006afe:	3a15      	subs	r2, #21
 8006b00:	f022 0203 	bic.w	r2, r2, #3
 8006b04:	3204      	adds	r2, #4
 8006b06:	f105 0115 	add.w	r1, r5, #21
 8006b0a:	458c      	cmp	ip, r1
 8006b0c:	bf38      	it	cc
 8006b0e:	2204      	movcc	r2, #4
 8006b10:	9201      	str	r2, [sp, #4]
 8006b12:	9a02      	ldr	r2, [sp, #8]
 8006b14:	9303      	str	r3, [sp, #12]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d808      	bhi.n	8006b2c <__multiply+0x98>
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	dc55      	bgt.n	8006bca <__multiply+0x136>
 8006b1e:	6107      	str	r7, [r0, #16]
 8006b20:	b005      	add	sp, #20
 8006b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b26:	f843 2b04 	str.w	r2, [r3], #4
 8006b2a:	e7db      	b.n	8006ae4 <__multiply+0x50>
 8006b2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b30:	f1ba 0f00 	cmp.w	sl, #0
 8006b34:	d020      	beq.n	8006b78 <__multiply+0xe4>
 8006b36:	f105 0e14 	add.w	lr, r5, #20
 8006b3a:	46b1      	mov	r9, r6
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b42:	f8d9 b000 	ldr.w	fp, [r9]
 8006b46:	b2a1      	uxth	r1, r4
 8006b48:	fa1f fb8b 	uxth.w	fp, fp
 8006b4c:	fb0a b101 	mla	r1, sl, r1, fp
 8006b50:	4411      	add	r1, r2
 8006b52:	f8d9 2000 	ldr.w	r2, [r9]
 8006b56:	0c24      	lsrs	r4, r4, #16
 8006b58:	0c12      	lsrs	r2, r2, #16
 8006b5a:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b62:	b289      	uxth	r1, r1
 8006b64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b68:	45f4      	cmp	ip, lr
 8006b6a:	f849 1b04 	str.w	r1, [r9], #4
 8006b6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b72:	d8e4      	bhi.n	8006b3e <__multiply+0xaa>
 8006b74:	9901      	ldr	r1, [sp, #4]
 8006b76:	5072      	str	r2, [r6, r1]
 8006b78:	9a03      	ldr	r2, [sp, #12]
 8006b7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	f1b9 0f00 	cmp.w	r9, #0
 8006b84:	d01f      	beq.n	8006bc6 <__multiply+0x132>
 8006b86:	6834      	ldr	r4, [r6, #0]
 8006b88:	f105 0114 	add.w	r1, r5, #20
 8006b8c:	46b6      	mov	lr, r6
 8006b8e:	f04f 0a00 	mov.w	sl, #0
 8006b92:	880a      	ldrh	r2, [r1, #0]
 8006b94:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006b98:	fb09 b202 	mla	r2, r9, r2, fp
 8006b9c:	4492      	add	sl, r2
 8006b9e:	b2a4      	uxth	r4, r4
 8006ba0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006ba4:	f84e 4b04 	str.w	r4, [lr], #4
 8006ba8:	f851 4b04 	ldr.w	r4, [r1], #4
 8006bac:	f8be 2000 	ldrh.w	r2, [lr]
 8006bb0:	0c24      	lsrs	r4, r4, #16
 8006bb2:	fb09 2404 	mla	r4, r9, r4, r2
 8006bb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006bba:	458c      	cmp	ip, r1
 8006bbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bc0:	d8e7      	bhi.n	8006b92 <__multiply+0xfe>
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	50b4      	str	r4, [r6, r2]
 8006bc6:	3604      	adds	r6, #4
 8006bc8:	e7a3      	b.n	8006b12 <__multiply+0x7e>
 8006bca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1a5      	bne.n	8006b1e <__multiply+0x8a>
 8006bd2:	3f01      	subs	r7, #1
 8006bd4:	e7a1      	b.n	8006b1a <__multiply+0x86>
 8006bd6:	bf00      	nop
 8006bd8:	08007b83 	.word	0x08007b83
 8006bdc:	08007bf4 	.word	0x08007bf4

08006be0 <__pow5mult>:
 8006be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be4:	4615      	mov	r5, r2
 8006be6:	f012 0203 	ands.w	r2, r2, #3
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	d007      	beq.n	8006c00 <__pow5mult+0x20>
 8006bf0:	4c25      	ldr	r4, [pc, #148]	; (8006c88 <__pow5mult+0xa8>)
 8006bf2:	3a01      	subs	r2, #1
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bfa:	f7ff fe9b 	bl	8006934 <__multadd>
 8006bfe:	4607      	mov	r7, r0
 8006c00:	10ad      	asrs	r5, r5, #2
 8006c02:	d03d      	beq.n	8006c80 <__pow5mult+0xa0>
 8006c04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c06:	b97c      	cbnz	r4, 8006c28 <__pow5mult+0x48>
 8006c08:	2010      	movs	r0, #16
 8006c0a:	f7ff fe1b 	bl	8006844 <malloc>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6270      	str	r0, [r6, #36]	; 0x24
 8006c12:	b928      	cbnz	r0, 8006c20 <__pow5mult+0x40>
 8006c14:	4b1d      	ldr	r3, [pc, #116]	; (8006c8c <__pow5mult+0xac>)
 8006c16:	481e      	ldr	r0, [pc, #120]	; (8006c90 <__pow5mult+0xb0>)
 8006c18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c1c:	f000 fce0 	bl	80075e0 <__assert_func>
 8006c20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c24:	6004      	str	r4, [r0, #0]
 8006c26:	60c4      	str	r4, [r0, #12]
 8006c28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c30:	b94c      	cbnz	r4, 8006c46 <__pow5mult+0x66>
 8006c32:	f240 2171 	movw	r1, #625	; 0x271
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff ff16 	bl	8006a68 <__i2b>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c42:	4604      	mov	r4, r0
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	f04f 0900 	mov.w	r9, #0
 8006c4a:	07eb      	lsls	r3, r5, #31
 8006c4c:	d50a      	bpl.n	8006c64 <__pow5mult+0x84>
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4622      	mov	r2, r4
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7ff ff1e 	bl	8006a94 <__multiply>
 8006c58:	4639      	mov	r1, r7
 8006c5a:	4680      	mov	r8, r0
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff fe47 	bl	80068f0 <_Bfree>
 8006c62:	4647      	mov	r7, r8
 8006c64:	106d      	asrs	r5, r5, #1
 8006c66:	d00b      	beq.n	8006c80 <__pow5mult+0xa0>
 8006c68:	6820      	ldr	r0, [r4, #0]
 8006c6a:	b938      	cbnz	r0, 8006c7c <__pow5mult+0x9c>
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff ff0f 	bl	8006a94 <__multiply>
 8006c76:	6020      	str	r0, [r4, #0]
 8006c78:	f8c0 9000 	str.w	r9, [r0]
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	e7e4      	b.n	8006c4a <__pow5mult+0x6a>
 8006c80:	4638      	mov	r0, r7
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	bf00      	nop
 8006c88:	08007d48 	.word	0x08007d48
 8006c8c:	08007b0d 	.word	0x08007b0d
 8006c90:	08007bf4 	.word	0x08007bf4

08006c94 <__lshift>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	460c      	mov	r4, r1
 8006c9a:	6849      	ldr	r1, [r1, #4]
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ca2:	68a3      	ldr	r3, [r4, #8]
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cac:	f108 0601 	add.w	r6, r8, #1
 8006cb0:	42b3      	cmp	r3, r6
 8006cb2:	db0b      	blt.n	8006ccc <__lshift+0x38>
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff fddb 	bl	8006870 <_Balloc>
 8006cba:	4605      	mov	r5, r0
 8006cbc:	b948      	cbnz	r0, 8006cd2 <__lshift+0x3e>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <__lshift+0xd0>)
 8006cc2:	4829      	ldr	r0, [pc, #164]	; (8006d68 <__lshift+0xd4>)
 8006cc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cc8:	f000 fc8a 	bl	80075e0 <__assert_func>
 8006ccc:	3101      	adds	r1, #1
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__lshift+0x1c>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f100 0114 	add.w	r1, r0, #20
 8006cd8:	f100 0210 	add.w	r2, r0, #16
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4553      	cmp	r3, sl
 8006ce0:	db33      	blt.n	8006d4a <__lshift+0xb6>
 8006ce2:	6920      	ldr	r0, [r4, #16]
 8006ce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce8:	f104 0314 	add.w	r3, r4, #20
 8006cec:	f019 091f 	ands.w	r9, r9, #31
 8006cf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cf8:	d02b      	beq.n	8006d52 <__lshift+0xbe>
 8006cfa:	f1c9 0e20 	rsb	lr, r9, #32
 8006cfe:	468a      	mov	sl, r1
 8006d00:	2200      	movs	r2, #0
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	fa00 f009 	lsl.w	r0, r0, r9
 8006d08:	4302      	orrs	r2, r0
 8006d0a:	f84a 2b04 	str.w	r2, [sl], #4
 8006d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d12:	459c      	cmp	ip, r3
 8006d14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d18:	d8f3      	bhi.n	8006d02 <__lshift+0x6e>
 8006d1a:	ebac 0304 	sub.w	r3, ip, r4
 8006d1e:	3b15      	subs	r3, #21
 8006d20:	f023 0303 	bic.w	r3, r3, #3
 8006d24:	3304      	adds	r3, #4
 8006d26:	f104 0015 	add.w	r0, r4, #21
 8006d2a:	4584      	cmp	ip, r0
 8006d2c:	bf38      	it	cc
 8006d2e:	2304      	movcc	r3, #4
 8006d30:	50ca      	str	r2, [r1, r3]
 8006d32:	b10a      	cbz	r2, 8006d38 <__lshift+0xa4>
 8006d34:	f108 0602 	add.w	r6, r8, #2
 8006d38:	3e01      	subs	r6, #1
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	612e      	str	r6, [r5, #16]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	f7ff fdd6 	bl	80068f0 <_Bfree>
 8006d44:	4628      	mov	r0, r5
 8006d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d4e:	3301      	adds	r3, #1
 8006d50:	e7c5      	b.n	8006cde <__lshift+0x4a>
 8006d52:	3904      	subs	r1, #4
 8006d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d5c:	459c      	cmp	ip, r3
 8006d5e:	d8f9      	bhi.n	8006d54 <__lshift+0xc0>
 8006d60:	e7ea      	b.n	8006d38 <__lshift+0xa4>
 8006d62:	bf00      	nop
 8006d64:	08007b83 	.word	0x08007b83
 8006d68:	08007bf4 	.word	0x08007bf4

08006d6c <__mcmp>:
 8006d6c:	b530      	push	{r4, r5, lr}
 8006d6e:	6902      	ldr	r2, [r0, #16]
 8006d70:	690c      	ldr	r4, [r1, #16]
 8006d72:	1b12      	subs	r2, r2, r4
 8006d74:	d10e      	bne.n	8006d94 <__mcmp+0x28>
 8006d76:	f100 0314 	add.w	r3, r0, #20
 8006d7a:	3114      	adds	r1, #20
 8006d7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d003      	beq.n	8006d98 <__mcmp+0x2c>
 8006d90:	d305      	bcc.n	8006d9e <__mcmp+0x32>
 8006d92:	2201      	movs	r2, #1
 8006d94:	4610      	mov	r0, r2
 8006d96:	bd30      	pop	{r4, r5, pc}
 8006d98:	4283      	cmp	r3, r0
 8006d9a:	d3f3      	bcc.n	8006d84 <__mcmp+0x18>
 8006d9c:	e7fa      	b.n	8006d94 <__mcmp+0x28>
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da2:	e7f7      	b.n	8006d94 <__mcmp+0x28>

08006da4 <__mdiff>:
 8006da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	460c      	mov	r4, r1
 8006daa:	4606      	mov	r6, r0
 8006dac:	4611      	mov	r1, r2
 8006dae:	4620      	mov	r0, r4
 8006db0:	4617      	mov	r7, r2
 8006db2:	f7ff ffdb 	bl	8006d6c <__mcmp>
 8006db6:	1e05      	subs	r5, r0, #0
 8006db8:	d110      	bne.n	8006ddc <__mdiff+0x38>
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff fd57 	bl	8006870 <_Balloc>
 8006dc2:	b930      	cbnz	r0, 8006dd2 <__mdiff+0x2e>
 8006dc4:	4b39      	ldr	r3, [pc, #228]	; (8006eac <__mdiff+0x108>)
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	f240 2132 	movw	r1, #562	; 0x232
 8006dcc:	4838      	ldr	r0, [pc, #224]	; (8006eb0 <__mdiff+0x10c>)
 8006dce:	f000 fc07 	bl	80075e0 <__assert_func>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ddc:	bfa4      	itt	ge
 8006dde:	463b      	movge	r3, r7
 8006de0:	4627      	movge	r7, r4
 8006de2:	4630      	mov	r0, r6
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	bfa6      	itte	ge
 8006de8:	461c      	movge	r4, r3
 8006dea:	2500      	movge	r5, #0
 8006dec:	2501      	movlt	r5, #1
 8006dee:	f7ff fd3f 	bl	8006870 <_Balloc>
 8006df2:	b920      	cbnz	r0, 8006dfe <__mdiff+0x5a>
 8006df4:	4b2d      	ldr	r3, [pc, #180]	; (8006eac <__mdiff+0x108>)
 8006df6:	4602      	mov	r2, r0
 8006df8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006dfc:	e7e6      	b.n	8006dcc <__mdiff+0x28>
 8006dfe:	693e      	ldr	r6, [r7, #16]
 8006e00:	60c5      	str	r5, [r0, #12]
 8006e02:	6925      	ldr	r5, [r4, #16]
 8006e04:	f107 0114 	add.w	r1, r7, #20
 8006e08:	f104 0914 	add.w	r9, r4, #20
 8006e0c:	f100 0e14 	add.w	lr, r0, #20
 8006e10:	f107 0210 	add.w	r2, r7, #16
 8006e14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006e18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006e1c:	46f2      	mov	sl, lr
 8006e1e:	2700      	movs	r7, #0
 8006e20:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e28:	fa1f f883 	uxth.w	r8, r3
 8006e2c:	fa17 f78b 	uxtah	r7, r7, fp
 8006e30:	0c1b      	lsrs	r3, r3, #16
 8006e32:	eba7 0808 	sub.w	r8, r7, r8
 8006e36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e3e:	fa1f f888 	uxth.w	r8, r8
 8006e42:	141f      	asrs	r7, r3, #16
 8006e44:	454d      	cmp	r5, r9
 8006e46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e4a:	f84a 3b04 	str.w	r3, [sl], #4
 8006e4e:	d8e7      	bhi.n	8006e20 <__mdiff+0x7c>
 8006e50:	1b2b      	subs	r3, r5, r4
 8006e52:	3b15      	subs	r3, #21
 8006e54:	f023 0303 	bic.w	r3, r3, #3
 8006e58:	3304      	adds	r3, #4
 8006e5a:	3415      	adds	r4, #21
 8006e5c:	42a5      	cmp	r5, r4
 8006e5e:	bf38      	it	cc
 8006e60:	2304      	movcc	r3, #4
 8006e62:	4419      	add	r1, r3
 8006e64:	4473      	add	r3, lr
 8006e66:	469e      	mov	lr, r3
 8006e68:	460d      	mov	r5, r1
 8006e6a:	4565      	cmp	r5, ip
 8006e6c:	d30e      	bcc.n	8006e8c <__mdiff+0xe8>
 8006e6e:	f10c 0203 	add.w	r2, ip, #3
 8006e72:	1a52      	subs	r2, r2, r1
 8006e74:	f022 0203 	bic.w	r2, r2, #3
 8006e78:	3903      	subs	r1, #3
 8006e7a:	458c      	cmp	ip, r1
 8006e7c:	bf38      	it	cc
 8006e7e:	2200      	movcc	r2, #0
 8006e80:	441a      	add	r2, r3
 8006e82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e86:	b17b      	cbz	r3, 8006ea8 <__mdiff+0x104>
 8006e88:	6106      	str	r6, [r0, #16]
 8006e8a:	e7a5      	b.n	8006dd8 <__mdiff+0x34>
 8006e8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006e90:	fa17 f488 	uxtah	r4, r7, r8
 8006e94:	1422      	asrs	r2, r4, #16
 8006e96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006e9a:	b2a4      	uxth	r4, r4
 8006e9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ea0:	f84e 4b04 	str.w	r4, [lr], #4
 8006ea4:	1417      	asrs	r7, r2, #16
 8006ea6:	e7e0      	b.n	8006e6a <__mdiff+0xc6>
 8006ea8:	3e01      	subs	r6, #1
 8006eaa:	e7ea      	b.n	8006e82 <__mdiff+0xde>
 8006eac:	08007b83 	.word	0x08007b83
 8006eb0:	08007bf4 	.word	0x08007bf4

08006eb4 <__d2b>:
 8006eb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	4689      	mov	r9, r1
 8006eba:	2101      	movs	r1, #1
 8006ebc:	ec57 6b10 	vmov	r6, r7, d0
 8006ec0:	4690      	mov	r8, r2
 8006ec2:	f7ff fcd5 	bl	8006870 <_Balloc>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	b930      	cbnz	r0, 8006ed8 <__d2b+0x24>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	4b25      	ldr	r3, [pc, #148]	; (8006f64 <__d2b+0xb0>)
 8006ece:	4826      	ldr	r0, [pc, #152]	; (8006f68 <__d2b+0xb4>)
 8006ed0:	f240 310a 	movw	r1, #778	; 0x30a
 8006ed4:	f000 fb84 	bl	80075e0 <__assert_func>
 8006ed8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006edc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ee0:	bb35      	cbnz	r5, 8006f30 <__d2b+0x7c>
 8006ee2:	2e00      	cmp	r6, #0
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	d028      	beq.n	8006f3a <__d2b+0x86>
 8006ee8:	4668      	mov	r0, sp
 8006eea:	9600      	str	r6, [sp, #0]
 8006eec:	f7ff fd8c 	bl	8006a08 <__lo0bits>
 8006ef0:	9900      	ldr	r1, [sp, #0]
 8006ef2:	b300      	cbz	r0, 8006f36 <__d2b+0x82>
 8006ef4:	9a01      	ldr	r2, [sp, #4]
 8006ef6:	f1c0 0320 	rsb	r3, r0, #32
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	430b      	orrs	r3, r1
 8006f00:	40c2      	lsrs	r2, r0
 8006f02:	6163      	str	r3, [r4, #20]
 8006f04:	9201      	str	r2, [sp, #4]
 8006f06:	9b01      	ldr	r3, [sp, #4]
 8006f08:	61a3      	str	r3, [r4, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2202      	movne	r2, #2
 8006f10:	2201      	moveq	r2, #1
 8006f12:	6122      	str	r2, [r4, #16]
 8006f14:	b1d5      	cbz	r5, 8006f4c <__d2b+0x98>
 8006f16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f1a:	4405      	add	r5, r0
 8006f1c:	f8c9 5000 	str.w	r5, [r9]
 8006f20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f24:	f8c8 0000 	str.w	r0, [r8]
 8006f28:	4620      	mov	r0, r4
 8006f2a:	b003      	add	sp, #12
 8006f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f34:	e7d5      	b.n	8006ee2 <__d2b+0x2e>
 8006f36:	6161      	str	r1, [r4, #20]
 8006f38:	e7e5      	b.n	8006f06 <__d2b+0x52>
 8006f3a:	a801      	add	r0, sp, #4
 8006f3c:	f7ff fd64 	bl	8006a08 <__lo0bits>
 8006f40:	9b01      	ldr	r3, [sp, #4]
 8006f42:	6163      	str	r3, [r4, #20]
 8006f44:	2201      	movs	r2, #1
 8006f46:	6122      	str	r2, [r4, #16]
 8006f48:	3020      	adds	r0, #32
 8006f4a:	e7e3      	b.n	8006f14 <__d2b+0x60>
 8006f4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f54:	f8c9 0000 	str.w	r0, [r9]
 8006f58:	6918      	ldr	r0, [r3, #16]
 8006f5a:	f7ff fd35 	bl	80069c8 <__hi0bits>
 8006f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f62:	e7df      	b.n	8006f24 <__d2b+0x70>
 8006f64:	08007b83 	.word	0x08007b83
 8006f68:	08007bf4 	.word	0x08007bf4

08006f6c <_calloc_r>:
 8006f6c:	b513      	push	{r0, r1, r4, lr}
 8006f6e:	434a      	muls	r2, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	9201      	str	r2, [sp, #4]
 8006f74:	f000 f85a 	bl	800702c <_malloc_r>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	b118      	cbz	r0, 8006f84 <_calloc_r+0x18>
 8006f7c:	9a01      	ldr	r2, [sp, #4]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	f7fe f85e 	bl	8005040 <memset>
 8006f84:	4620      	mov	r0, r4
 8006f86:	b002      	add	sp, #8
 8006f88:	bd10      	pop	{r4, pc}
	...

08006f8c <_free_r>:
 8006f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d048      	beq.n	8007024 <_free_r+0x98>
 8006f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f96:	9001      	str	r0, [sp, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f9e:	bfb8      	it	lt
 8006fa0:	18e4      	addlt	r4, r4, r3
 8006fa2:	f000 fca7 	bl	80078f4 <__malloc_lock>
 8006fa6:	4a20      	ldr	r2, [pc, #128]	; (8007028 <_free_r+0x9c>)
 8006fa8:	9801      	ldr	r0, [sp, #4]
 8006faa:	6813      	ldr	r3, [r2, #0]
 8006fac:	4615      	mov	r5, r2
 8006fae:	b933      	cbnz	r3, 8006fbe <_free_r+0x32>
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	6014      	str	r4, [r2, #0]
 8006fb4:	b003      	add	sp, #12
 8006fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fba:	f000 bca1 	b.w	8007900 <__malloc_unlock>
 8006fbe:	42a3      	cmp	r3, r4
 8006fc0:	d90b      	bls.n	8006fda <_free_r+0x4e>
 8006fc2:	6821      	ldr	r1, [r4, #0]
 8006fc4:	1862      	adds	r2, r4, r1
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	bf04      	itt	eq
 8006fca:	681a      	ldreq	r2, [r3, #0]
 8006fcc:	685b      	ldreq	r3, [r3, #4]
 8006fce:	6063      	str	r3, [r4, #4]
 8006fd0:	bf04      	itt	eq
 8006fd2:	1852      	addeq	r2, r2, r1
 8006fd4:	6022      	streq	r2, [r4, #0]
 8006fd6:	602c      	str	r4, [r5, #0]
 8006fd8:	e7ec      	b.n	8006fb4 <_free_r+0x28>
 8006fda:	461a      	mov	r2, r3
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b10b      	cbz	r3, 8006fe4 <_free_r+0x58>
 8006fe0:	42a3      	cmp	r3, r4
 8006fe2:	d9fa      	bls.n	8006fda <_free_r+0x4e>
 8006fe4:	6811      	ldr	r1, [r2, #0]
 8006fe6:	1855      	adds	r5, r2, r1
 8006fe8:	42a5      	cmp	r5, r4
 8006fea:	d10b      	bne.n	8007004 <_free_r+0x78>
 8006fec:	6824      	ldr	r4, [r4, #0]
 8006fee:	4421      	add	r1, r4
 8006ff0:	1854      	adds	r4, r2, r1
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	6011      	str	r1, [r2, #0]
 8006ff6:	d1dd      	bne.n	8006fb4 <_free_r+0x28>
 8006ff8:	681c      	ldr	r4, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	6053      	str	r3, [r2, #4]
 8006ffe:	4421      	add	r1, r4
 8007000:	6011      	str	r1, [r2, #0]
 8007002:	e7d7      	b.n	8006fb4 <_free_r+0x28>
 8007004:	d902      	bls.n	800700c <_free_r+0x80>
 8007006:	230c      	movs	r3, #12
 8007008:	6003      	str	r3, [r0, #0]
 800700a:	e7d3      	b.n	8006fb4 <_free_r+0x28>
 800700c:	6825      	ldr	r5, [r4, #0]
 800700e:	1961      	adds	r1, r4, r5
 8007010:	428b      	cmp	r3, r1
 8007012:	bf04      	itt	eq
 8007014:	6819      	ldreq	r1, [r3, #0]
 8007016:	685b      	ldreq	r3, [r3, #4]
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	bf04      	itt	eq
 800701c:	1949      	addeq	r1, r1, r5
 800701e:	6021      	streq	r1, [r4, #0]
 8007020:	6054      	str	r4, [r2, #4]
 8007022:	e7c7      	b.n	8006fb4 <_free_r+0x28>
 8007024:	b003      	add	sp, #12
 8007026:	bd30      	pop	{r4, r5, pc}
 8007028:	20000200 	.word	0x20000200

0800702c <_malloc_r>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	1ccd      	adds	r5, r1, #3
 8007030:	f025 0503 	bic.w	r5, r5, #3
 8007034:	3508      	adds	r5, #8
 8007036:	2d0c      	cmp	r5, #12
 8007038:	bf38      	it	cc
 800703a:	250c      	movcc	r5, #12
 800703c:	2d00      	cmp	r5, #0
 800703e:	4606      	mov	r6, r0
 8007040:	db01      	blt.n	8007046 <_malloc_r+0x1a>
 8007042:	42a9      	cmp	r1, r5
 8007044:	d903      	bls.n	800704e <_malloc_r+0x22>
 8007046:	230c      	movs	r3, #12
 8007048:	6033      	str	r3, [r6, #0]
 800704a:	2000      	movs	r0, #0
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704e:	f000 fc51 	bl	80078f4 <__malloc_lock>
 8007052:	4921      	ldr	r1, [pc, #132]	; (80070d8 <_malloc_r+0xac>)
 8007054:	680a      	ldr	r2, [r1, #0]
 8007056:	4614      	mov	r4, r2
 8007058:	b99c      	cbnz	r4, 8007082 <_malloc_r+0x56>
 800705a:	4f20      	ldr	r7, [pc, #128]	; (80070dc <_malloc_r+0xb0>)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	b923      	cbnz	r3, 800706a <_malloc_r+0x3e>
 8007060:	4621      	mov	r1, r4
 8007062:	4630      	mov	r0, r6
 8007064:	f000 f996 	bl	8007394 <_sbrk_r>
 8007068:	6038      	str	r0, [r7, #0]
 800706a:	4629      	mov	r1, r5
 800706c:	4630      	mov	r0, r6
 800706e:	f000 f991 	bl	8007394 <_sbrk_r>
 8007072:	1c43      	adds	r3, r0, #1
 8007074:	d123      	bne.n	80070be <_malloc_r+0x92>
 8007076:	230c      	movs	r3, #12
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	4630      	mov	r0, r6
 800707c:	f000 fc40 	bl	8007900 <__malloc_unlock>
 8007080:	e7e3      	b.n	800704a <_malloc_r+0x1e>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	1b5b      	subs	r3, r3, r5
 8007086:	d417      	bmi.n	80070b8 <_malloc_r+0x8c>
 8007088:	2b0b      	cmp	r3, #11
 800708a:	d903      	bls.n	8007094 <_malloc_r+0x68>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	441c      	add	r4, r3
 8007090:	6025      	str	r5, [r4, #0]
 8007092:	e004      	b.n	800709e <_malloc_r+0x72>
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	42a2      	cmp	r2, r4
 8007098:	bf0c      	ite	eq
 800709a:	600b      	streq	r3, [r1, #0]
 800709c:	6053      	strne	r3, [r2, #4]
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 fc2e 	bl	8007900 <__malloc_unlock>
 80070a4:	f104 000b 	add.w	r0, r4, #11
 80070a8:	1d23      	adds	r3, r4, #4
 80070aa:	f020 0007 	bic.w	r0, r0, #7
 80070ae:	1ac2      	subs	r2, r0, r3
 80070b0:	d0cc      	beq.n	800704c <_malloc_r+0x20>
 80070b2:	1a1b      	subs	r3, r3, r0
 80070b4:	50a3      	str	r3, [r4, r2]
 80070b6:	e7c9      	b.n	800704c <_malloc_r+0x20>
 80070b8:	4622      	mov	r2, r4
 80070ba:	6864      	ldr	r4, [r4, #4]
 80070bc:	e7cc      	b.n	8007058 <_malloc_r+0x2c>
 80070be:	1cc4      	adds	r4, r0, #3
 80070c0:	f024 0403 	bic.w	r4, r4, #3
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d0e3      	beq.n	8007090 <_malloc_r+0x64>
 80070c8:	1a21      	subs	r1, r4, r0
 80070ca:	4630      	mov	r0, r6
 80070cc:	f000 f962 	bl	8007394 <_sbrk_r>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d1dd      	bne.n	8007090 <_malloc_r+0x64>
 80070d4:	e7cf      	b.n	8007076 <_malloc_r+0x4a>
 80070d6:	bf00      	nop
 80070d8:	20000200 	.word	0x20000200
 80070dc:	20000204 	.word	0x20000204

080070e0 <__sfputc_r>:
 80070e0:	6893      	ldr	r3, [r2, #8]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	b410      	push	{r4}
 80070e8:	6093      	str	r3, [r2, #8]
 80070ea:	da08      	bge.n	80070fe <__sfputc_r+0x1e>
 80070ec:	6994      	ldr	r4, [r2, #24]
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	db01      	blt.n	80070f6 <__sfputc_r+0x16>
 80070f2:	290a      	cmp	r1, #10
 80070f4:	d103      	bne.n	80070fe <__sfputc_r+0x1e>
 80070f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070fa:	f000 b99f 	b.w	800743c <__swbuf_r>
 80070fe:	6813      	ldr	r3, [r2, #0]
 8007100:	1c58      	adds	r0, r3, #1
 8007102:	6010      	str	r0, [r2, #0]
 8007104:	7019      	strb	r1, [r3, #0]
 8007106:	4608      	mov	r0, r1
 8007108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800710c:	4770      	bx	lr

0800710e <__sfputs_r>:
 800710e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007110:	4606      	mov	r6, r0
 8007112:	460f      	mov	r7, r1
 8007114:	4614      	mov	r4, r2
 8007116:	18d5      	adds	r5, r2, r3
 8007118:	42ac      	cmp	r4, r5
 800711a:	d101      	bne.n	8007120 <__sfputs_r+0x12>
 800711c:	2000      	movs	r0, #0
 800711e:	e007      	b.n	8007130 <__sfputs_r+0x22>
 8007120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007124:	463a      	mov	r2, r7
 8007126:	4630      	mov	r0, r6
 8007128:	f7ff ffda 	bl	80070e0 <__sfputc_r>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d1f3      	bne.n	8007118 <__sfputs_r+0xa>
 8007130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007134 <_vfiprintf_r>:
 8007134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007138:	460d      	mov	r5, r1
 800713a:	b09d      	sub	sp, #116	; 0x74
 800713c:	4614      	mov	r4, r2
 800713e:	4698      	mov	r8, r3
 8007140:	4606      	mov	r6, r0
 8007142:	b118      	cbz	r0, 800714c <_vfiprintf_r+0x18>
 8007144:	6983      	ldr	r3, [r0, #24]
 8007146:	b90b      	cbnz	r3, 800714c <_vfiprintf_r+0x18>
 8007148:	f7ff fad6 	bl	80066f8 <__sinit>
 800714c:	4b89      	ldr	r3, [pc, #548]	; (8007374 <_vfiprintf_r+0x240>)
 800714e:	429d      	cmp	r5, r3
 8007150:	d11b      	bne.n	800718a <_vfiprintf_r+0x56>
 8007152:	6875      	ldr	r5, [r6, #4]
 8007154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	d405      	bmi.n	8007166 <_vfiprintf_r+0x32>
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	059a      	lsls	r2, r3, #22
 800715e:	d402      	bmi.n	8007166 <_vfiprintf_r+0x32>
 8007160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007162:	f7ff fb6c 	bl	800683e <__retarget_lock_acquire_recursive>
 8007166:	89ab      	ldrh	r3, [r5, #12]
 8007168:	071b      	lsls	r3, r3, #28
 800716a:	d501      	bpl.n	8007170 <_vfiprintf_r+0x3c>
 800716c:	692b      	ldr	r3, [r5, #16]
 800716e:	b9eb      	cbnz	r3, 80071ac <_vfiprintf_r+0x78>
 8007170:	4629      	mov	r1, r5
 8007172:	4630      	mov	r0, r6
 8007174:	f000 f9c6 	bl	8007504 <__swsetup_r>
 8007178:	b1c0      	cbz	r0, 80071ac <_vfiprintf_r+0x78>
 800717a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800717c:	07dc      	lsls	r4, r3, #31
 800717e:	d50e      	bpl.n	800719e <_vfiprintf_r+0x6a>
 8007180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007184:	b01d      	add	sp, #116	; 0x74
 8007186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	4b7b      	ldr	r3, [pc, #492]	; (8007378 <_vfiprintf_r+0x244>)
 800718c:	429d      	cmp	r5, r3
 800718e:	d101      	bne.n	8007194 <_vfiprintf_r+0x60>
 8007190:	68b5      	ldr	r5, [r6, #8]
 8007192:	e7df      	b.n	8007154 <_vfiprintf_r+0x20>
 8007194:	4b79      	ldr	r3, [pc, #484]	; (800737c <_vfiprintf_r+0x248>)
 8007196:	429d      	cmp	r5, r3
 8007198:	bf08      	it	eq
 800719a:	68f5      	ldreq	r5, [r6, #12]
 800719c:	e7da      	b.n	8007154 <_vfiprintf_r+0x20>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	0598      	lsls	r0, r3, #22
 80071a2:	d4ed      	bmi.n	8007180 <_vfiprintf_r+0x4c>
 80071a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a6:	f7ff fb4b 	bl	8006840 <__retarget_lock_release_recursive>
 80071aa:	e7e9      	b.n	8007180 <_vfiprintf_r+0x4c>
 80071ac:	2300      	movs	r3, #0
 80071ae:	9309      	str	r3, [sp, #36]	; 0x24
 80071b0:	2320      	movs	r3, #32
 80071b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ba:	2330      	movs	r3, #48	; 0x30
 80071bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007380 <_vfiprintf_r+0x24c>
 80071c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071c4:	f04f 0901 	mov.w	r9, #1
 80071c8:	4623      	mov	r3, r4
 80071ca:	469a      	mov	sl, r3
 80071cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d0:	b10a      	cbz	r2, 80071d6 <_vfiprintf_r+0xa2>
 80071d2:	2a25      	cmp	r2, #37	; 0x25
 80071d4:	d1f9      	bne.n	80071ca <_vfiprintf_r+0x96>
 80071d6:	ebba 0b04 	subs.w	fp, sl, r4
 80071da:	d00b      	beq.n	80071f4 <_vfiprintf_r+0xc0>
 80071dc:	465b      	mov	r3, fp
 80071de:	4622      	mov	r2, r4
 80071e0:	4629      	mov	r1, r5
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7ff ff93 	bl	800710e <__sfputs_r>
 80071e8:	3001      	adds	r0, #1
 80071ea:	f000 80aa 	beq.w	8007342 <_vfiprintf_r+0x20e>
 80071ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f0:	445a      	add	r2, fp
 80071f2:	9209      	str	r2, [sp, #36]	; 0x24
 80071f4:	f89a 3000 	ldrb.w	r3, [sl]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 80a2 	beq.w	8007342 <_vfiprintf_r+0x20e>
 80071fe:	2300      	movs	r3, #0
 8007200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007208:	f10a 0a01 	add.w	sl, sl, #1
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007214:	931a      	str	r3, [sp, #104]	; 0x68
 8007216:	4654      	mov	r4, sl
 8007218:	2205      	movs	r2, #5
 800721a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721e:	4858      	ldr	r0, [pc, #352]	; (8007380 <_vfiprintf_r+0x24c>)
 8007220:	f7f8 fff6 	bl	8000210 <memchr>
 8007224:	9a04      	ldr	r2, [sp, #16]
 8007226:	b9d8      	cbnz	r0, 8007260 <_vfiprintf_r+0x12c>
 8007228:	06d1      	lsls	r1, r2, #27
 800722a:	bf44      	itt	mi
 800722c:	2320      	movmi	r3, #32
 800722e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007232:	0713      	lsls	r3, r2, #28
 8007234:	bf44      	itt	mi
 8007236:	232b      	movmi	r3, #43	; 0x2b
 8007238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800723c:	f89a 3000 	ldrb.w	r3, [sl]
 8007240:	2b2a      	cmp	r3, #42	; 0x2a
 8007242:	d015      	beq.n	8007270 <_vfiprintf_r+0x13c>
 8007244:	9a07      	ldr	r2, [sp, #28]
 8007246:	4654      	mov	r4, sl
 8007248:	2000      	movs	r0, #0
 800724a:	f04f 0c0a 	mov.w	ip, #10
 800724e:	4621      	mov	r1, r4
 8007250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007254:	3b30      	subs	r3, #48	; 0x30
 8007256:	2b09      	cmp	r3, #9
 8007258:	d94e      	bls.n	80072f8 <_vfiprintf_r+0x1c4>
 800725a:	b1b0      	cbz	r0, 800728a <_vfiprintf_r+0x156>
 800725c:	9207      	str	r2, [sp, #28]
 800725e:	e014      	b.n	800728a <_vfiprintf_r+0x156>
 8007260:	eba0 0308 	sub.w	r3, r0, r8
 8007264:	fa09 f303 	lsl.w	r3, r9, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	46a2      	mov	sl, r4
 800726e:	e7d2      	b.n	8007216 <_vfiprintf_r+0xe2>
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	1d19      	adds	r1, r3, #4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	9103      	str	r1, [sp, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bfbb      	ittet	lt
 800727c:	425b      	neglt	r3, r3
 800727e:	f042 0202 	orrlt.w	r2, r2, #2
 8007282:	9307      	strge	r3, [sp, #28]
 8007284:	9307      	strlt	r3, [sp, #28]
 8007286:	bfb8      	it	lt
 8007288:	9204      	strlt	r2, [sp, #16]
 800728a:	7823      	ldrb	r3, [r4, #0]
 800728c:	2b2e      	cmp	r3, #46	; 0x2e
 800728e:	d10c      	bne.n	80072aa <_vfiprintf_r+0x176>
 8007290:	7863      	ldrb	r3, [r4, #1]
 8007292:	2b2a      	cmp	r3, #42	; 0x2a
 8007294:	d135      	bne.n	8007302 <_vfiprintf_r+0x1ce>
 8007296:	9b03      	ldr	r3, [sp, #12]
 8007298:	1d1a      	adds	r2, r3, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	9203      	str	r2, [sp, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfb8      	it	lt
 80072a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80072a6:	3402      	adds	r4, #2
 80072a8:	9305      	str	r3, [sp, #20]
 80072aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007390 <_vfiprintf_r+0x25c>
 80072ae:	7821      	ldrb	r1, [r4, #0]
 80072b0:	2203      	movs	r2, #3
 80072b2:	4650      	mov	r0, sl
 80072b4:	f7f8 ffac 	bl	8000210 <memchr>
 80072b8:	b140      	cbz	r0, 80072cc <_vfiprintf_r+0x198>
 80072ba:	2340      	movs	r3, #64	; 0x40
 80072bc:	eba0 000a 	sub.w	r0, r0, sl
 80072c0:	fa03 f000 	lsl.w	r0, r3, r0
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	4303      	orrs	r3, r0
 80072c8:	3401      	adds	r4, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d0:	482c      	ldr	r0, [pc, #176]	; (8007384 <_vfiprintf_r+0x250>)
 80072d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072d6:	2206      	movs	r2, #6
 80072d8:	f7f8 ff9a 	bl	8000210 <memchr>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d03f      	beq.n	8007360 <_vfiprintf_r+0x22c>
 80072e0:	4b29      	ldr	r3, [pc, #164]	; (8007388 <_vfiprintf_r+0x254>)
 80072e2:	bb1b      	cbnz	r3, 800732c <_vfiprintf_r+0x1f8>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	3307      	adds	r3, #7
 80072e8:	f023 0307 	bic.w	r3, r3, #7
 80072ec:	3308      	adds	r3, #8
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f2:	443b      	add	r3, r7
 80072f4:	9309      	str	r3, [sp, #36]	; 0x24
 80072f6:	e767      	b.n	80071c8 <_vfiprintf_r+0x94>
 80072f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80072fc:	460c      	mov	r4, r1
 80072fe:	2001      	movs	r0, #1
 8007300:	e7a5      	b.n	800724e <_vfiprintf_r+0x11a>
 8007302:	2300      	movs	r3, #0
 8007304:	3401      	adds	r4, #1
 8007306:	9305      	str	r3, [sp, #20]
 8007308:	4619      	mov	r1, r3
 800730a:	f04f 0c0a 	mov.w	ip, #10
 800730e:	4620      	mov	r0, r4
 8007310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007314:	3a30      	subs	r2, #48	; 0x30
 8007316:	2a09      	cmp	r2, #9
 8007318:	d903      	bls.n	8007322 <_vfiprintf_r+0x1ee>
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0c5      	beq.n	80072aa <_vfiprintf_r+0x176>
 800731e:	9105      	str	r1, [sp, #20]
 8007320:	e7c3      	b.n	80072aa <_vfiprintf_r+0x176>
 8007322:	fb0c 2101 	mla	r1, ip, r1, r2
 8007326:	4604      	mov	r4, r0
 8007328:	2301      	movs	r3, #1
 800732a:	e7f0      	b.n	800730e <_vfiprintf_r+0x1da>
 800732c:	ab03      	add	r3, sp, #12
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	462a      	mov	r2, r5
 8007332:	4b16      	ldr	r3, [pc, #88]	; (800738c <_vfiprintf_r+0x258>)
 8007334:	a904      	add	r1, sp, #16
 8007336:	4630      	mov	r0, r6
 8007338:	f7fd ff2a 	bl	8005190 <_printf_float>
 800733c:	4607      	mov	r7, r0
 800733e:	1c78      	adds	r0, r7, #1
 8007340:	d1d6      	bne.n	80072f0 <_vfiprintf_r+0x1bc>
 8007342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007344:	07d9      	lsls	r1, r3, #31
 8007346:	d405      	bmi.n	8007354 <_vfiprintf_r+0x220>
 8007348:	89ab      	ldrh	r3, [r5, #12]
 800734a:	059a      	lsls	r2, r3, #22
 800734c:	d402      	bmi.n	8007354 <_vfiprintf_r+0x220>
 800734e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007350:	f7ff fa76 	bl	8006840 <__retarget_lock_release_recursive>
 8007354:	89ab      	ldrh	r3, [r5, #12]
 8007356:	065b      	lsls	r3, r3, #25
 8007358:	f53f af12 	bmi.w	8007180 <_vfiprintf_r+0x4c>
 800735c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800735e:	e711      	b.n	8007184 <_vfiprintf_r+0x50>
 8007360:	ab03      	add	r3, sp, #12
 8007362:	9300      	str	r3, [sp, #0]
 8007364:	462a      	mov	r2, r5
 8007366:	4b09      	ldr	r3, [pc, #36]	; (800738c <_vfiprintf_r+0x258>)
 8007368:	a904      	add	r1, sp, #16
 800736a:	4630      	mov	r0, r6
 800736c:	f7fe f9b4 	bl	80056d8 <_printf_i>
 8007370:	e7e4      	b.n	800733c <_vfiprintf_r+0x208>
 8007372:	bf00      	nop
 8007374:	08007bb4 	.word	0x08007bb4
 8007378:	08007bd4 	.word	0x08007bd4
 800737c:	08007b94 	.word	0x08007b94
 8007380:	08007d54 	.word	0x08007d54
 8007384:	08007d5e 	.word	0x08007d5e
 8007388:	08005191 	.word	0x08005191
 800738c:	0800710f 	.word	0x0800710f
 8007390:	08007d5a 	.word	0x08007d5a

08007394 <_sbrk_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4d06      	ldr	r5, [pc, #24]	; (80073b0 <_sbrk_r+0x1c>)
 8007398:	2300      	movs	r3, #0
 800739a:	4604      	mov	r4, r0
 800739c:	4608      	mov	r0, r1
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	f7fa fb5c 	bl	8001a5c <_sbrk>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_sbrk_r+0x1a>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_sbrk_r+0x1a>
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	200002f4 	.word	0x200002f4

080073b4 <__sread>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	460c      	mov	r4, r1
 80073b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073bc:	f000 faa6 	bl	800790c <_read_r>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	bfab      	itete	ge
 80073c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c6:	89a3      	ldrhlt	r3, [r4, #12]
 80073c8:	181b      	addge	r3, r3, r0
 80073ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ce:	bfac      	ite	ge
 80073d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073d2:	81a3      	strhlt	r3, [r4, #12]
 80073d4:	bd10      	pop	{r4, pc}

080073d6 <__swrite>:
 80073d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073da:	461f      	mov	r7, r3
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	05db      	lsls	r3, r3, #23
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4616      	mov	r6, r2
 80073e6:	d505      	bpl.n	80073f4 <__swrite+0x1e>
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	2302      	movs	r3, #2
 80073ee:	2200      	movs	r2, #0
 80073f0:	f000 f9f8 	bl	80077e4 <_lseek_r>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	4628      	mov	r0, r5
 8007406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	f000 b869 	b.w	80074e0 <_write_r>

0800740e <__sseek>:
 800740e:	b510      	push	{r4, lr}
 8007410:	460c      	mov	r4, r1
 8007412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007416:	f000 f9e5 	bl	80077e4 <_lseek_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	bf15      	itete	ne
 8007420:	6560      	strne	r0, [r4, #84]	; 0x54
 8007422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800742a:	81a3      	strheq	r3, [r4, #12]
 800742c:	bf18      	it	ne
 800742e:	81a3      	strhne	r3, [r4, #12]
 8007430:	bd10      	pop	{r4, pc}

08007432 <__sclose>:
 8007432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007436:	f000 b8f1 	b.w	800761c <_close_r>
	...

0800743c <__swbuf_r>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	460e      	mov	r6, r1
 8007440:	4614      	mov	r4, r2
 8007442:	4605      	mov	r5, r0
 8007444:	b118      	cbz	r0, 800744e <__swbuf_r+0x12>
 8007446:	6983      	ldr	r3, [r0, #24]
 8007448:	b90b      	cbnz	r3, 800744e <__swbuf_r+0x12>
 800744a:	f7ff f955 	bl	80066f8 <__sinit>
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <__swbuf_r+0x98>)
 8007450:	429c      	cmp	r4, r3
 8007452:	d12b      	bne.n	80074ac <__swbuf_r+0x70>
 8007454:	686c      	ldr	r4, [r5, #4]
 8007456:	69a3      	ldr	r3, [r4, #24]
 8007458:	60a3      	str	r3, [r4, #8]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	071a      	lsls	r2, r3, #28
 800745e:	d52f      	bpl.n	80074c0 <__swbuf_r+0x84>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	b36b      	cbz	r3, 80074c0 <__swbuf_r+0x84>
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	6820      	ldr	r0, [r4, #0]
 8007468:	1ac0      	subs	r0, r0, r3
 800746a:	6963      	ldr	r3, [r4, #20]
 800746c:	b2f6      	uxtb	r6, r6
 800746e:	4283      	cmp	r3, r0
 8007470:	4637      	mov	r7, r6
 8007472:	dc04      	bgt.n	800747e <__swbuf_r+0x42>
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f966 	bl	8007748 <_fflush_r>
 800747c:	bb30      	cbnz	r0, 80074cc <__swbuf_r+0x90>
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	6022      	str	r2, [r4, #0]
 800748a:	701e      	strb	r6, [r3, #0]
 800748c:	6963      	ldr	r3, [r4, #20]
 800748e:	3001      	adds	r0, #1
 8007490:	4283      	cmp	r3, r0
 8007492:	d004      	beq.n	800749e <__swbuf_r+0x62>
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	07db      	lsls	r3, r3, #31
 8007498:	d506      	bpl.n	80074a8 <__swbuf_r+0x6c>
 800749a:	2e0a      	cmp	r6, #10
 800749c:	d104      	bne.n	80074a8 <__swbuf_r+0x6c>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f951 	bl	8007748 <_fflush_r>
 80074a6:	b988      	cbnz	r0, 80074cc <__swbuf_r+0x90>
 80074a8:	4638      	mov	r0, r7
 80074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <__swbuf_r+0x9c>)
 80074ae:	429c      	cmp	r4, r3
 80074b0:	d101      	bne.n	80074b6 <__swbuf_r+0x7a>
 80074b2:	68ac      	ldr	r4, [r5, #8]
 80074b4:	e7cf      	b.n	8007456 <__swbuf_r+0x1a>
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <__swbuf_r+0xa0>)
 80074b8:	429c      	cmp	r4, r3
 80074ba:	bf08      	it	eq
 80074bc:	68ec      	ldreq	r4, [r5, #12]
 80074be:	e7ca      	b.n	8007456 <__swbuf_r+0x1a>
 80074c0:	4621      	mov	r1, r4
 80074c2:	4628      	mov	r0, r5
 80074c4:	f000 f81e 	bl	8007504 <__swsetup_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d0cb      	beq.n	8007464 <__swbuf_r+0x28>
 80074cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80074d0:	e7ea      	b.n	80074a8 <__swbuf_r+0x6c>
 80074d2:	bf00      	nop
 80074d4:	08007bb4 	.word	0x08007bb4
 80074d8:	08007bd4 	.word	0x08007bd4
 80074dc:	08007b94 	.word	0x08007b94

080074e0 <_write_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d07      	ldr	r5, [pc, #28]	; (8007500 <_write_r+0x20>)
 80074e4:	4604      	mov	r4, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	2200      	movs	r2, #0
 80074ec:	602a      	str	r2, [r5, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7fa fa63 	bl	80019ba <_write>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_write_r+0x1e>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_write_r+0x1e>
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	200002f4 	.word	0x200002f4

08007504 <__swsetup_r>:
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <__swsetup_r+0xcc>)
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	b125      	cbz	r5, 800751a <__swsetup_r+0x16>
 8007510:	69ab      	ldr	r3, [r5, #24]
 8007512:	b913      	cbnz	r3, 800751a <__swsetup_r+0x16>
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff f8ef 	bl	80066f8 <__sinit>
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <__swsetup_r+0xd0>)
 800751c:	429c      	cmp	r4, r3
 800751e:	d10f      	bne.n	8007540 <__swsetup_r+0x3c>
 8007520:	686c      	ldr	r4, [r5, #4]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007528:	0719      	lsls	r1, r3, #28
 800752a:	d42c      	bmi.n	8007586 <__swsetup_r+0x82>
 800752c:	06dd      	lsls	r5, r3, #27
 800752e:	d411      	bmi.n	8007554 <__swsetup_r+0x50>
 8007530:	2309      	movs	r3, #9
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800753e:	e03e      	b.n	80075be <__swsetup_r+0xba>
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <__swsetup_r+0xd4>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <__swsetup_r+0x46>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7eb      	b.n	8007522 <__swsetup_r+0x1e>
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <__swsetup_r+0xd8>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7e6      	b.n	8007522 <__swsetup_r+0x1e>
 8007554:	0758      	lsls	r0, r3, #29
 8007556:	d512      	bpl.n	800757e <__swsetup_r+0x7a>
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	b141      	cbz	r1, 800756e <__swsetup_r+0x6a>
 800755c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__swsetup_r+0x66>
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff fd11 	bl	8006f8c <_free_r>
 800756a:	2300      	movs	r3, #0
 800756c:	6363      	str	r3, [r4, #52]	; 0x34
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	2300      	movs	r3, #0
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b94b      	cbnz	r3, 800759e <__swsetup_r+0x9a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d003      	beq.n	800759e <__swsetup_r+0x9a>
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f000 f959 	bl	8007850 <__smakebuf_r>
 800759e:	89a0      	ldrh	r0, [r4, #12]
 80075a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a4:	f010 0301 	ands.w	r3, r0, #1
 80075a8:	d00a      	beq.n	80075c0 <__swsetup_r+0xbc>
 80075aa:	2300      	movs	r3, #0
 80075ac:	60a3      	str	r3, [r4, #8]
 80075ae:	6963      	ldr	r3, [r4, #20]
 80075b0:	425b      	negs	r3, r3
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	b943      	cbnz	r3, 80075ca <__swsetup_r+0xc6>
 80075b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075bc:	d1ba      	bne.n	8007534 <__swsetup_r+0x30>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	0781      	lsls	r1, r0, #30
 80075c2:	bf58      	it	pl
 80075c4:	6963      	ldrpl	r3, [r4, #20]
 80075c6:	60a3      	str	r3, [r4, #8]
 80075c8:	e7f4      	b.n	80075b4 <__swsetup_r+0xb0>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7f7      	b.n	80075be <__swsetup_r+0xba>
 80075ce:	bf00      	nop
 80075d0:	20000010 	.word	0x20000010
 80075d4:	08007bb4 	.word	0x08007bb4
 80075d8:	08007bd4 	.word	0x08007bd4
 80075dc:	08007b94 	.word	0x08007b94

080075e0 <__assert_func>:
 80075e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075e2:	4614      	mov	r4, r2
 80075e4:	461a      	mov	r2, r3
 80075e6:	4b09      	ldr	r3, [pc, #36]	; (800760c <__assert_func+0x2c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4605      	mov	r5, r0
 80075ec:	68d8      	ldr	r0, [r3, #12]
 80075ee:	b14c      	cbz	r4, 8007604 <__assert_func+0x24>
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <__assert_func+0x30>)
 80075f2:	9100      	str	r1, [sp, #0]
 80075f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075f8:	4906      	ldr	r1, [pc, #24]	; (8007614 <__assert_func+0x34>)
 80075fa:	462b      	mov	r3, r5
 80075fc:	f000 f8e0 	bl	80077c0 <fiprintf>
 8007600:	f000 f9a3 	bl	800794a <abort>
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <__assert_func+0x38>)
 8007606:	461c      	mov	r4, r3
 8007608:	e7f3      	b.n	80075f2 <__assert_func+0x12>
 800760a:	bf00      	nop
 800760c:	20000010 	.word	0x20000010
 8007610:	08007d65 	.word	0x08007d65
 8007614:	08007d72 	.word	0x08007d72
 8007618:	08007da0 	.word	0x08007da0

0800761c <_close_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	4d06      	ldr	r5, [pc, #24]	; (8007638 <_close_r+0x1c>)
 8007620:	2300      	movs	r3, #0
 8007622:	4604      	mov	r4, r0
 8007624:	4608      	mov	r0, r1
 8007626:	602b      	str	r3, [r5, #0]
 8007628:	f7fa f9e3 	bl	80019f2 <_close>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_close_r+0x1a>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_close_r+0x1a>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	200002f4 	.word	0x200002f4

0800763c <__sflush_r>:
 800763c:	898a      	ldrh	r2, [r1, #12]
 800763e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007642:	4605      	mov	r5, r0
 8007644:	0710      	lsls	r0, r2, #28
 8007646:	460c      	mov	r4, r1
 8007648:	d458      	bmi.n	80076fc <__sflush_r+0xc0>
 800764a:	684b      	ldr	r3, [r1, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc05      	bgt.n	800765c <__sflush_r+0x20>
 8007650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	dc02      	bgt.n	800765c <__sflush_r+0x20>
 8007656:	2000      	movs	r0, #0
 8007658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800765c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800765e:	2e00      	cmp	r6, #0
 8007660:	d0f9      	beq.n	8007656 <__sflush_r+0x1a>
 8007662:	2300      	movs	r3, #0
 8007664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007668:	682f      	ldr	r7, [r5, #0]
 800766a:	602b      	str	r3, [r5, #0]
 800766c:	d032      	beq.n	80076d4 <__sflush_r+0x98>
 800766e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	075a      	lsls	r2, r3, #29
 8007674:	d505      	bpl.n	8007682 <__sflush_r+0x46>
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	1ac0      	subs	r0, r0, r3
 800767a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800767c:	b10b      	cbz	r3, 8007682 <__sflush_r+0x46>
 800767e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007680:	1ac0      	subs	r0, r0, r3
 8007682:	2300      	movs	r3, #0
 8007684:	4602      	mov	r2, r0
 8007686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	4628      	mov	r0, r5
 800768c:	47b0      	blx	r6
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	89a3      	ldrh	r3, [r4, #12]
 8007692:	d106      	bne.n	80076a2 <__sflush_r+0x66>
 8007694:	6829      	ldr	r1, [r5, #0]
 8007696:	291d      	cmp	r1, #29
 8007698:	d82c      	bhi.n	80076f4 <__sflush_r+0xb8>
 800769a:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <__sflush_r+0x108>)
 800769c:	40ca      	lsrs	r2, r1
 800769e:	07d6      	lsls	r6, r2, #31
 80076a0:	d528      	bpl.n	80076f4 <__sflush_r+0xb8>
 80076a2:	2200      	movs	r2, #0
 80076a4:	6062      	str	r2, [r4, #4]
 80076a6:	04d9      	lsls	r1, r3, #19
 80076a8:	6922      	ldr	r2, [r4, #16]
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	d504      	bpl.n	80076b8 <__sflush_r+0x7c>
 80076ae:	1c42      	adds	r2, r0, #1
 80076b0:	d101      	bne.n	80076b6 <__sflush_r+0x7a>
 80076b2:	682b      	ldr	r3, [r5, #0]
 80076b4:	b903      	cbnz	r3, 80076b8 <__sflush_r+0x7c>
 80076b6:	6560      	str	r0, [r4, #84]	; 0x54
 80076b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076ba:	602f      	str	r7, [r5, #0]
 80076bc:	2900      	cmp	r1, #0
 80076be:	d0ca      	beq.n	8007656 <__sflush_r+0x1a>
 80076c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076c4:	4299      	cmp	r1, r3
 80076c6:	d002      	beq.n	80076ce <__sflush_r+0x92>
 80076c8:	4628      	mov	r0, r5
 80076ca:	f7ff fc5f 	bl	8006f8c <_free_r>
 80076ce:	2000      	movs	r0, #0
 80076d0:	6360      	str	r0, [r4, #52]	; 0x34
 80076d2:	e7c1      	b.n	8007658 <__sflush_r+0x1c>
 80076d4:	6a21      	ldr	r1, [r4, #32]
 80076d6:	2301      	movs	r3, #1
 80076d8:	4628      	mov	r0, r5
 80076da:	47b0      	blx	r6
 80076dc:	1c41      	adds	r1, r0, #1
 80076de:	d1c7      	bne.n	8007670 <__sflush_r+0x34>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d0c4      	beq.n	8007670 <__sflush_r+0x34>
 80076e6:	2b1d      	cmp	r3, #29
 80076e8:	d001      	beq.n	80076ee <__sflush_r+0xb2>
 80076ea:	2b16      	cmp	r3, #22
 80076ec:	d101      	bne.n	80076f2 <__sflush_r+0xb6>
 80076ee:	602f      	str	r7, [r5, #0]
 80076f0:	e7b1      	b.n	8007656 <__sflush_r+0x1a>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	e7ad      	b.n	8007658 <__sflush_r+0x1c>
 80076fc:	690f      	ldr	r7, [r1, #16]
 80076fe:	2f00      	cmp	r7, #0
 8007700:	d0a9      	beq.n	8007656 <__sflush_r+0x1a>
 8007702:	0793      	lsls	r3, r2, #30
 8007704:	680e      	ldr	r6, [r1, #0]
 8007706:	bf08      	it	eq
 8007708:	694b      	ldreq	r3, [r1, #20]
 800770a:	600f      	str	r7, [r1, #0]
 800770c:	bf18      	it	ne
 800770e:	2300      	movne	r3, #0
 8007710:	eba6 0807 	sub.w	r8, r6, r7
 8007714:	608b      	str	r3, [r1, #8]
 8007716:	f1b8 0f00 	cmp.w	r8, #0
 800771a:	dd9c      	ble.n	8007656 <__sflush_r+0x1a>
 800771c:	6a21      	ldr	r1, [r4, #32]
 800771e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007720:	4643      	mov	r3, r8
 8007722:	463a      	mov	r2, r7
 8007724:	4628      	mov	r0, r5
 8007726:	47b0      	blx	r6
 8007728:	2800      	cmp	r0, #0
 800772a:	dc06      	bgt.n	800773a <__sflush_r+0xfe>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007738:	e78e      	b.n	8007658 <__sflush_r+0x1c>
 800773a:	4407      	add	r7, r0
 800773c:	eba8 0800 	sub.w	r8, r8, r0
 8007740:	e7e9      	b.n	8007716 <__sflush_r+0xda>
 8007742:	bf00      	nop
 8007744:	20400001 	.word	0x20400001

08007748 <_fflush_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	690b      	ldr	r3, [r1, #16]
 800774c:	4605      	mov	r5, r0
 800774e:	460c      	mov	r4, r1
 8007750:	b913      	cbnz	r3, 8007758 <_fflush_r+0x10>
 8007752:	2500      	movs	r5, #0
 8007754:	4628      	mov	r0, r5
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	b118      	cbz	r0, 8007762 <_fflush_r+0x1a>
 800775a:	6983      	ldr	r3, [r0, #24]
 800775c:	b90b      	cbnz	r3, 8007762 <_fflush_r+0x1a>
 800775e:	f7fe ffcb 	bl	80066f8 <__sinit>
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <_fflush_r+0x6c>)
 8007764:	429c      	cmp	r4, r3
 8007766:	d11b      	bne.n	80077a0 <_fflush_r+0x58>
 8007768:	686c      	ldr	r4, [r5, #4]
 800776a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0ef      	beq.n	8007752 <_fflush_r+0xa>
 8007772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007774:	07d0      	lsls	r0, r2, #31
 8007776:	d404      	bmi.n	8007782 <_fflush_r+0x3a>
 8007778:	0599      	lsls	r1, r3, #22
 800777a:	d402      	bmi.n	8007782 <_fflush_r+0x3a>
 800777c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800777e:	f7ff f85e 	bl	800683e <__retarget_lock_acquire_recursive>
 8007782:	4628      	mov	r0, r5
 8007784:	4621      	mov	r1, r4
 8007786:	f7ff ff59 	bl	800763c <__sflush_r>
 800778a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800778c:	07da      	lsls	r2, r3, #31
 800778e:	4605      	mov	r5, r0
 8007790:	d4e0      	bmi.n	8007754 <_fflush_r+0xc>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	059b      	lsls	r3, r3, #22
 8007796:	d4dd      	bmi.n	8007754 <_fflush_r+0xc>
 8007798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779a:	f7ff f851 	bl	8006840 <__retarget_lock_release_recursive>
 800779e:	e7d9      	b.n	8007754 <_fflush_r+0xc>
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <_fflush_r+0x70>)
 80077a2:	429c      	cmp	r4, r3
 80077a4:	d101      	bne.n	80077aa <_fflush_r+0x62>
 80077a6:	68ac      	ldr	r4, [r5, #8]
 80077a8:	e7df      	b.n	800776a <_fflush_r+0x22>
 80077aa:	4b04      	ldr	r3, [pc, #16]	; (80077bc <_fflush_r+0x74>)
 80077ac:	429c      	cmp	r4, r3
 80077ae:	bf08      	it	eq
 80077b0:	68ec      	ldreq	r4, [r5, #12]
 80077b2:	e7da      	b.n	800776a <_fflush_r+0x22>
 80077b4:	08007bb4 	.word	0x08007bb4
 80077b8:	08007bd4 	.word	0x08007bd4
 80077bc:	08007b94 	.word	0x08007b94

080077c0 <fiprintf>:
 80077c0:	b40e      	push	{r1, r2, r3}
 80077c2:	b503      	push	{r0, r1, lr}
 80077c4:	4601      	mov	r1, r0
 80077c6:	ab03      	add	r3, sp, #12
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <fiprintf+0x20>)
 80077ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ce:	6800      	ldr	r0, [r0, #0]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	f7ff fcaf 	bl	8007134 <_vfiprintf_r>
 80077d6:	b002      	add	sp, #8
 80077d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077dc:	b003      	add	sp, #12
 80077de:	4770      	bx	lr
 80077e0:	20000010 	.word	0x20000010

080077e4 <_lseek_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	; (8007804 <_lseek_r+0x20>)
 80077e8:	4604      	mov	r4, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7fa f924 	bl	8001a40 <_lseek>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_lseek_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_lseek_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200002f4 	.word	0x200002f4

08007808 <__swhatbuf_r>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	460e      	mov	r6, r1
 800780c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007810:	2900      	cmp	r1, #0
 8007812:	b096      	sub	sp, #88	; 0x58
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	da07      	bge.n	800782a <__swhatbuf_r+0x22>
 800781a:	2300      	movs	r3, #0
 800781c:	602b      	str	r3, [r5, #0]
 800781e:	89b3      	ldrh	r3, [r6, #12]
 8007820:	061a      	lsls	r2, r3, #24
 8007822:	d410      	bmi.n	8007846 <__swhatbuf_r+0x3e>
 8007824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007828:	e00e      	b.n	8007848 <__swhatbuf_r+0x40>
 800782a:	466a      	mov	r2, sp
 800782c:	f000 f894 	bl	8007958 <_fstat_r>
 8007830:	2800      	cmp	r0, #0
 8007832:	dbf2      	blt.n	800781a <__swhatbuf_r+0x12>
 8007834:	9a01      	ldr	r2, [sp, #4]
 8007836:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800783a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800783e:	425a      	negs	r2, r3
 8007840:	415a      	adcs	r2, r3
 8007842:	602a      	str	r2, [r5, #0]
 8007844:	e7ee      	b.n	8007824 <__swhatbuf_r+0x1c>
 8007846:	2340      	movs	r3, #64	; 0x40
 8007848:	2000      	movs	r0, #0
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	b016      	add	sp, #88	; 0x58
 800784e:	bd70      	pop	{r4, r5, r6, pc}

08007850 <__smakebuf_r>:
 8007850:	898b      	ldrh	r3, [r1, #12]
 8007852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007854:	079d      	lsls	r5, r3, #30
 8007856:	4606      	mov	r6, r0
 8007858:	460c      	mov	r4, r1
 800785a:	d507      	bpl.n	800786c <__smakebuf_r+0x1c>
 800785c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	2301      	movs	r3, #1
 8007866:	6163      	str	r3, [r4, #20]
 8007868:	b002      	add	sp, #8
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	ab01      	add	r3, sp, #4
 800786e:	466a      	mov	r2, sp
 8007870:	f7ff ffca 	bl	8007808 <__swhatbuf_r>
 8007874:	9900      	ldr	r1, [sp, #0]
 8007876:	4605      	mov	r5, r0
 8007878:	4630      	mov	r0, r6
 800787a:	f7ff fbd7 	bl	800702c <_malloc_r>
 800787e:	b948      	cbnz	r0, 8007894 <__smakebuf_r+0x44>
 8007880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007884:	059a      	lsls	r2, r3, #22
 8007886:	d4ef      	bmi.n	8007868 <__smakebuf_r+0x18>
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	e7e3      	b.n	800785c <__smakebuf_r+0xc>
 8007894:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <__smakebuf_r+0x7c>)
 8007896:	62b3      	str	r3, [r6, #40]	; 0x28
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	6020      	str	r0, [r4, #0]
 800789c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	6163      	str	r3, [r4, #20]
 80078a6:	9b01      	ldr	r3, [sp, #4]
 80078a8:	6120      	str	r0, [r4, #16]
 80078aa:	b15b      	cbz	r3, 80078c4 <__smakebuf_r+0x74>
 80078ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 f863 	bl	800797c <_isatty_r>
 80078b6:	b128      	cbz	r0, 80078c4 <__smakebuf_r+0x74>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	f043 0301 	orr.w	r3, r3, #1
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	89a0      	ldrh	r0, [r4, #12]
 80078c6:	4305      	orrs	r5, r0
 80078c8:	81a5      	strh	r5, [r4, #12]
 80078ca:	e7cd      	b.n	8007868 <__smakebuf_r+0x18>
 80078cc:	08006691 	.word	0x08006691

080078d0 <__ascii_mbtowc>:
 80078d0:	b082      	sub	sp, #8
 80078d2:	b901      	cbnz	r1, 80078d6 <__ascii_mbtowc+0x6>
 80078d4:	a901      	add	r1, sp, #4
 80078d6:	b142      	cbz	r2, 80078ea <__ascii_mbtowc+0x1a>
 80078d8:	b14b      	cbz	r3, 80078ee <__ascii_mbtowc+0x1e>
 80078da:	7813      	ldrb	r3, [r2, #0]
 80078dc:	600b      	str	r3, [r1, #0]
 80078de:	7812      	ldrb	r2, [r2, #0]
 80078e0:	1e10      	subs	r0, r2, #0
 80078e2:	bf18      	it	ne
 80078e4:	2001      	movne	r0, #1
 80078e6:	b002      	add	sp, #8
 80078e8:	4770      	bx	lr
 80078ea:	4610      	mov	r0, r2
 80078ec:	e7fb      	b.n	80078e6 <__ascii_mbtowc+0x16>
 80078ee:	f06f 0001 	mvn.w	r0, #1
 80078f2:	e7f8      	b.n	80078e6 <__ascii_mbtowc+0x16>

080078f4 <__malloc_lock>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__malloc_lock+0x8>)
 80078f6:	f7fe bfa2 	b.w	800683e <__retarget_lock_acquire_recursive>
 80078fa:	bf00      	nop
 80078fc:	200002ec 	.word	0x200002ec

08007900 <__malloc_unlock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_unlock+0x8>)
 8007902:	f7fe bf9d 	b.w	8006840 <__retarget_lock_release_recursive>
 8007906:	bf00      	nop
 8007908:	200002ec 	.word	0x200002ec

0800790c <_read_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d07      	ldr	r5, [pc, #28]	; (800792c <_read_r+0x20>)
 8007910:	4604      	mov	r4, r0
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	2200      	movs	r2, #0
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fa f830 	bl	8001980 <_read>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_read_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_read_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	200002f4 	.word	0x200002f4

08007930 <__ascii_wctomb>:
 8007930:	b149      	cbz	r1, 8007946 <__ascii_wctomb+0x16>
 8007932:	2aff      	cmp	r2, #255	; 0xff
 8007934:	bf85      	ittet	hi
 8007936:	238a      	movhi	r3, #138	; 0x8a
 8007938:	6003      	strhi	r3, [r0, #0]
 800793a:	700a      	strbls	r2, [r1, #0]
 800793c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007940:	bf98      	it	ls
 8007942:	2001      	movls	r0, #1
 8007944:	4770      	bx	lr
 8007946:	4608      	mov	r0, r1
 8007948:	4770      	bx	lr

0800794a <abort>:
 800794a:	b508      	push	{r3, lr}
 800794c:	2006      	movs	r0, #6
 800794e:	f000 f84d 	bl	80079ec <raise>
 8007952:	2001      	movs	r0, #1
 8007954:	f7fa f80a 	bl	800196c <_exit>

08007958 <_fstat_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	; (8007978 <_fstat_r+0x20>)
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	4611      	mov	r1, r2
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	f7fa f850 	bl	8001a0a <_fstat>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d102      	bne.n	8007974 <_fstat_r+0x1c>
 800796e:	682b      	ldr	r3, [r5, #0]
 8007970:	b103      	cbz	r3, 8007974 <_fstat_r+0x1c>
 8007972:	6023      	str	r3, [r4, #0]
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	bf00      	nop
 8007978:	200002f4 	.word	0x200002f4

0800797c <_isatty_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d06      	ldr	r5, [pc, #24]	; (8007998 <_isatty_r+0x1c>)
 8007980:	2300      	movs	r3, #0
 8007982:	4604      	mov	r4, r0
 8007984:	4608      	mov	r0, r1
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	f7fa f84f 	bl	8001a2a <_isatty>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_isatty_r+0x1a>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_isatty_r+0x1a>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200002f4 	.word	0x200002f4

0800799c <_raise_r>:
 800799c:	291f      	cmp	r1, #31
 800799e:	b538      	push	{r3, r4, r5, lr}
 80079a0:	4604      	mov	r4, r0
 80079a2:	460d      	mov	r5, r1
 80079a4:	d904      	bls.n	80079b0 <_raise_r+0x14>
 80079a6:	2316      	movs	r3, #22
 80079a8:	6003      	str	r3, [r0, #0]
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079b2:	b112      	cbz	r2, 80079ba <_raise_r+0x1e>
 80079b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079b8:	b94b      	cbnz	r3, 80079ce <_raise_r+0x32>
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 f830 	bl	8007a20 <_getpid_r>
 80079c0:	462a      	mov	r2, r5
 80079c2:	4601      	mov	r1, r0
 80079c4:	4620      	mov	r0, r4
 80079c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ca:	f000 b817 	b.w	80079fc <_kill_r>
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d00a      	beq.n	80079e8 <_raise_r+0x4c>
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	d103      	bne.n	80079de <_raise_r+0x42>
 80079d6:	2316      	movs	r3, #22
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	2001      	movs	r0, #1
 80079dc:	e7e7      	b.n	80079ae <_raise_r+0x12>
 80079de:	2400      	movs	r4, #0
 80079e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079e4:	4628      	mov	r0, r5
 80079e6:	4798      	blx	r3
 80079e8:	2000      	movs	r0, #0
 80079ea:	e7e0      	b.n	80079ae <_raise_r+0x12>

080079ec <raise>:
 80079ec:	4b02      	ldr	r3, [pc, #8]	; (80079f8 <raise+0xc>)
 80079ee:	4601      	mov	r1, r0
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	f7ff bfd3 	b.w	800799c <_raise_r>
 80079f6:	bf00      	nop
 80079f8:	20000010 	.word	0x20000010

080079fc <_kill_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d07      	ldr	r5, [pc, #28]	; (8007a1c <_kill_r+0x20>)
 8007a00:	2300      	movs	r3, #0
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	602b      	str	r3, [r5, #0]
 8007a0a:	f7f9 ff9f 	bl	800194c <_kill>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	d102      	bne.n	8007a18 <_kill_r+0x1c>
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	b103      	cbz	r3, 8007a18 <_kill_r+0x1c>
 8007a16:	6023      	str	r3, [r4, #0]
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	bf00      	nop
 8007a1c:	200002f4 	.word	0x200002f4

08007a20 <_getpid_r>:
 8007a20:	f7f9 bf8c 	b.w	800193c <_getpid>

08007a24 <_init>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr

08007a30 <_fini>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	bf00      	nop
 8007a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a36:	bc08      	pop	{r3}
 8007a38:	469e      	mov	lr, r3
 8007a3a:	4770      	bx	lr
